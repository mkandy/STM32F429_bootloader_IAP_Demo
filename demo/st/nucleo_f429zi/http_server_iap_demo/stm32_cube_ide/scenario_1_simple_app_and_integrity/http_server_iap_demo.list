
http_server_iap_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023240  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d45c  080233f0  080233f0  000333f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804084c  0804084c  0005084c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08040854  08040854  00050854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0804085c  0804085c  0005085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009f0  20000000  08040860  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a084  200009f0  08041250  000609f0  2**2
                  ALLOC
  8 ._user_heap_stack 00020800  2000aa74  08041250  0006aa74  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000609f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000f93c6  00000000  00000000  00060a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ec1d  00000000  00000000  00159de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002658  00000000  00000000  00168a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000021c0  00000000  00000000  0016b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003996a  00000000  00000000  0016d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000481cd  00000000  00000000  001a6b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f983a  00000000  00000000  001eed57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002e8591  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000acf8  00000000  00000000  002e85e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009f0 	.word	0x200009f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080233d8 	.word	0x080233d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009f4 	.word	0x200009f4
 80001ec:	080233d8 	.word	0x080233d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b96e 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468c      	mov	ip, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8083 	bne.w	8000d22 <__udivmoddi4+0x116>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	d947      	bls.n	8000cb2 <__udivmoddi4+0xa6>
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	b142      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	f1c2 0020 	rsb	r0, r2, #32
 8000c2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c30:	4091      	lsls	r1, r2
 8000c32:	4097      	lsls	r7, r2
 8000c34:	ea40 0c01 	orr.w	ip, r0, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbbc f6f8 	udiv	r6, ip, r8
 8000c44:	fa1f fe87 	uxth.w	lr, r7
 8000c48:	fb08 c116 	mls	r1, r8, r6, ip
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f10e 	mul.w	r1, r6, lr
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 8119 	bcs.w	8000e94 <__udivmoddi4+0x288>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8116 	bls.w	8000e94 <__udivmoddi4+0x288>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8105 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f240 8102 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xaa>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d150      	bne.n	8000d60 <__udivmoddi4+0x154>
 8000cbe:	1bcb      	subs	r3, r1, r7
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	fa1f f887 	uxth.w	r8, r7
 8000cc8:	2601      	movs	r6, #1
 8000cca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cce:	0c21      	lsrs	r1, r4, #16
 8000cd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0xe2>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	f200 80e9 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000cee:	4684      	mov	ip, r0
 8000cf0:	1ac9      	subs	r1, r1, r3
 8000cf2:	b2a3      	uxth	r3, r4
 8000cf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d00:	fb08 f800 	mul.w	r8, r8, r0
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x10c>
 8000d08:	193c      	adds	r4, r7, r4
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x10a>
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	f200 80d9 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d16:	4618      	mov	r0, r3
 8000d18:	eba4 0408 	sub.w	r4, r4, r8
 8000d1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d20:	e7bf      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x12e>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <__udivmoddi4+0x282>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x1cc>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0x140>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80b8 	bhi.w	8000ebc <__udivmoddi4+0x2b0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	468c      	mov	ip, r1
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0a8      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000d5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0xa0>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f603 	lsr.w	r6, r0, r3
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	4330      	orrs	r0, r6
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f108 	mul.w	r1, r6, r8
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x19c>
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d9a:	f080 808d 	bcs.w	8000eb8 <__udivmoddi4+0x2ac>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 808a 	bls.w	8000eb8 <__udivmoddi4+0x2ac>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b281      	uxth	r1, r0
 8000dac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb00 f308 	mul.w	r3, r0, r8
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x1c4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc6:	d273      	bcs.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d971      	bls.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4439      	add	r1, r7
 8000dd0:	1acb      	subs	r3, r1, r3
 8000dd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd6:	e778      	b.n	8000cca <__udivmoddi4+0xbe>
 8000dd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ddc:	fa03 f406 	lsl.w	r4, r3, r6
 8000de0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de4:	431c      	orrs	r4, r3
 8000de6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000df2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df6:	431f      	orrs	r7, r3
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fa1f f884 	uxth.w	r8, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	fa02 f206 	lsl.w	r2, r2, r6
 8000e14:	fa00 f306 	lsl.w	r3, r0, r6
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x220>
 8000e1a:	1861      	adds	r1, r4, r1
 8000e1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e20:	d248      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e22:	458a      	cmp	sl, r1
 8000e24:	d946      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4421      	add	r1, r4
 8000e2c:	eba1 010a 	sub.w	r1, r1, sl
 8000e30:	b2bf      	uxth	r7, r7
 8000e32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3e:	fb00 f808 	mul.w	r8, r0, r8
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x24a>
 8000e46:	19e7      	adds	r7, r4, r7
 8000e48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e4c:	d22e      	bcs.n	8000eac <__udivmoddi4+0x2a0>
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d92c      	bls.n	8000eac <__udivmoddi4+0x2a0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4427      	add	r7, r4
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	eba7 0708 	sub.w	r7, r7, r8
 8000e5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e62:	454f      	cmp	r7, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	d31a      	bcc.n	8000ea0 <__udivmoddi4+0x294>
 8000e6a:	d017      	beq.n	8000e9c <__udivmoddi4+0x290>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x27a>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb67 0701 	sbc.w	r7, r7, r1
 8000e76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e7a:	40f2      	lsrs	r2, r6
 8000e7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e80:	40f7      	lsrs	r7, r6
 8000e82:	e9c5 2700 	strd	r2, r7, [r5]
 8000e86:	2600      	movs	r6, #0
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e70b      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e9      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fd      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000e9c:	4543      	cmp	r3, r8
 8000e9e:	d2e5      	bcs.n	8000e6c <__udivmoddi4+0x260>
 8000ea0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7df      	b.n	8000e6c <__udivmoddi4+0x260>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e7d2      	b.n	8000e56 <__udivmoddi4+0x24a>
 8000eb0:	4660      	mov	r0, ip
 8000eb2:	e78d      	b.n	8000dd0 <__udivmoddi4+0x1c4>
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	e7b9      	b.n	8000e2c <__udivmoddi4+0x220>
 8000eb8:	4666      	mov	r6, ip
 8000eba:	e775      	b.n	8000da8 <__udivmoddi4+0x19c>
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	e74a      	b.n	8000d56 <__udivmoddi4+0x14a>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	4439      	add	r1, r7
 8000ec6:	e713      	b.n	8000cf0 <__udivmoddi4+0xe4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	443c      	add	r4, r7
 8000ecc:	e724      	b.n	8000d18 <__udivmoddi4+0x10c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	ba5b      	rev16	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	061a      	lsls	r2, r3, #24
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0e1b      	lsrs	r3, r3, #24
 8000f14:	4313      	orrs	r3, r2
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <formatSystemTime>:
 * @param[out] str NULL-terminated string representing the specified time
 * @return Pointer to the formatted string
 **/

const char_t *formatSystemTime(systime_t time, char_t *str)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
   uint8_t seconds;
   uint16_t milliseconds;
   static char_t buffer[24];

   //Retrieve milliseconds
   milliseconds = time % 1000;
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <formatSystemTime+0xe8>)
 8000f32:	fba3 1302 	umull	r1, r3, r3, r2
 8000f36:	099b      	lsrs	r3, r3, #6
 8000f38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	81fb      	strh	r3, [r7, #14]
   time /= 1000;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <formatSystemTime+0xe8>)
 8000f48:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4c:	099b      	lsrs	r3, r3, #6
 8000f4e:	607b      	str	r3, [r7, #4]
   //Retrieve seconds
   seconds = time % 60;
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <formatSystemTime+0xec>)
 8000f54:	fba3 2301 	umull	r2, r3, r3, r1
 8000f58:	095a      	lsrs	r2, r3, #5
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	1aca      	subs	r2, r1, r3
 8000f64:	4613      	mov	r3, r2
 8000f66:	737b      	strb	r3, [r7, #13]
   time /= 60;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <formatSystemTime+0xec>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	607b      	str	r3, [r7, #4]
   //Retrieve minutes
   minutes = time % 60;
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <formatSystemTime+0xec>)
 8000f78:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7c:	095a      	lsrs	r2, r3, #5
 8000f7e:	4613      	mov	r3, r2
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	1aca      	subs	r2, r1, r3
 8000f88:	4613      	mov	r3, r2
 8000f8a:	733b      	strb	r3, [r7, #12]
   time /= 60;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <formatSystemTime+0xec>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	095b      	lsrs	r3, r3, #5
 8000f96:	607b      	str	r3, [r7, #4]
   //Retrieve hours
   hours = time;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	817b      	strh	r3, [r7, #10]

   //The str parameter is optional
   if(!str)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <formatSystemTime+0x82>
      str = buffer;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <formatSystemTime+0xf0>)
 8000fa4:	603b      	str	r3, [r7, #0]

   //Format system time
   if(hours > 0)
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00c      	beq.n	8000fc6 <formatSystemTime+0xa2>
   {
      osSprintf(str, "%" PRIu16 "h %02" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8000fac:	8979      	ldrh	r1, [r7, #10]
 8000fae:	7b38      	ldrb	r0, [r7, #12]
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	89fa      	ldrh	r2, [r7, #14]
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460a      	mov	r2, r1
 8000fbc:	4916      	ldr	r1, [pc, #88]	; (8001018 <formatSystemTime+0xf4>)
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f01c fe50 	bl	801dc64 <sprintf>
 8000fc4:	e01c      	b.n	8001000 <formatSystemTime+0xdc>
         hours, minutes, seconds, milliseconds);
   }
   else if(minutes > 0)
 8000fc6:	7b3b      	ldrb	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d009      	beq.n	8000fe0 <formatSystemTime+0xbc>
   {
      osSprintf(str, "%" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8000fcc:	7b3a      	ldrb	r2, [r7, #12]
 8000fce:	7b79      	ldrb	r1, [r7, #13]
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4911      	ldr	r1, [pc, #68]	; (800101c <formatSystemTime+0xf8>)
 8000fd8:	6838      	ldr	r0, [r7, #0]
 8000fda:	f01c fe43 	bl	801dc64 <sprintf>
 8000fde:	e00f      	b.n	8001000 <formatSystemTime+0xdc>
         minutes, seconds, milliseconds);
   }
   else if(seconds > 0)
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <formatSystemTime+0xd0>
   {
      osSprintf(str, "%" PRIu8 "s %03" PRIu16 "ms", seconds, milliseconds);
 8000fe6:	7b7a      	ldrb	r2, [r7, #13]
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	490d      	ldr	r1, [pc, #52]	; (8001020 <formatSystemTime+0xfc>)
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f01c fe39 	bl	801dc64 <sprintf>
 8000ff2:	e005      	b.n	8001000 <formatSystemTime+0xdc>
   }
   else
   {
      osSprintf(str, "%" PRIu16 "ms", milliseconds);
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	490a      	ldr	r1, [pc, #40]	; (8001024 <formatSystemTime+0x100>)
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f01c fe32 	bl	801dc64 <sprintf>
   }

   //Return a pointer to the formatted string
   return str;
 8001000:	683b      	ldr	r3, [r7, #0]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	10624dd3 	.word	0x10624dd3
 8001010:	88888889 	.word	0x88888889
 8001014:	20000a0c 	.word	0x20000a0c
 8001018:	080234c4 	.word	0x080234c4
 800101c:	080234e4 	.word	0x080234e4
 8001020:	080234fc 	.word	0x080234fc
 8001024:	0802350c 	.word	0x0802350c

08001028 <osInitKernel>:
/**
 * @brief Kernel initialization
 **/

void osInitKernel(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <osStartKernel>:
/**
 * @brief Start kernel
 **/

void osStartKernel(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
   //Start the scheduler
   vTaskStartScheduler();
 800103a:	f018 ff35 	bl	8019ea8 <vTaskStartScheduler>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}

08001042 <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
   portBASE_TYPE status;
   TaskHandle_t task = NULL;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]

   //Create a new task
   status = xTaskCreate((TaskFunction_t) taskCode, name, stackSize, param,
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b299      	uxth	r1, r3
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	9201      	str	r2, [sp, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	460a      	mov	r2, r1
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f018 fdcc 	bl	8019c06 <xTaskCreate>
 800106e:	6178      	str	r0, [r7, #20]
      priority, &task);

   //Check whether the task was successfully created
   if(status == pdPASS)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <osCreateTask+0x38>
      return task;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	e000      	b.n	800107c <osCreateTask+0x3a>
   else
      return NULL;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f018 fee7 	bl	8019e60 <vTaskDelay>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800109e:	f019 fa5d 	bl	801a55c <xTaskGetSchedulerState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d001      	beq.n	80010ac <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 80010a8:	f018 ff36 	bl	8019f18 <vTaskSuspendAll>
   }
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010b4:	f019 fa52 	bl	801a55c <xTaskGetSchedulerState>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 80010be:	f018 ff39 	bl	8019f34 <xTaskResumeAll>
   }
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinaryStatic(&event->buffer);
#else
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinary();
 80010ce:	2203      	movs	r2, #3
 80010d0:	2100      	movs	r1, #0
 80010d2:	2001      	movs	r0, #1
 80010d4:	f018 fa32 	bl	801953c <xQueueGenericCreate>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
#endif

   //Check whether the returned handle is valid
   if(event->handle != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <osCreateEvent+0x24>
      return TRUE;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <osCreateEvent+0x26>
   else
      return FALSE;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
   //Make sure the handle is valid
   if(event->handle != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      vSemaphoreDelete(event->handle);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f018 fc6d 	bl	80199e8 <vQueueDelete>
   }
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   xSemaphoreGive(event->handle);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	f018 fa98 	bl	801965c <xQueueGenericSend>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <osResetEvent>:
 * @brief Set the specified event object to the nonsignaled state
 * @param[in] event Pointer to the event object
 **/

void osResetEvent(OsEvent *event)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
   //Force the specified event to the nonsignaled state
   xSemaphoreTake(event->handle, 0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f018 fb88 	bl	8019858 <xQueueSemaphoreTake>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
   portBASE_TYPE ret;

   //Wait until the specified event is in the signaled state
   if(timeout == INFINITE_DELAY)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d108      	bne.n	8001174 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = xSemaphoreTake(event->handle, portMAX_DELAY);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f04f 31ff 	mov.w	r1, #4294967295
 800116a:	4618      	mov	r0, r3
 800116c:	f018 fb74 	bl	8019858 <xQueueSemaphoreTake>
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	e006      	b.n	8001182 <osWaitForEvent+0x32>
   }
   else
   {
      //Wait for the specified time interval
      ret = xSemaphoreTake(event->handle, OS_MS_TO_SYSTICKS(timeout));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f018 fb6c 	bl	8019858 <xQueueSemaphoreTake>
 8001180:	60f8      	str	r0, [r7, #12]
   }

   //The return value tells whether the event is set
   return ret;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
   portBASE_TYPE flag = FALSE;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]

   //Set the specified event to the signaled state
   xSemaphoreGiveFromISR(event->handle, &flag);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f018 fb04 	bl	80197b0 <xQueueGiveFromISR>

   //A higher priority task has been woken?
   return flag;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <osCreateSemaphore>:
 * @return The function returns TRUE if the semaphore was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateSemaphore(OsSemaphore *semaphore, uint_t count)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
   //Create a semaphore
   semaphore->handle = xSemaphoreCreateCountingStatic(count, count,
      &semaphore->buffer);
#else
   //Create a semaphore
   semaphore->handle = xSemaphoreCreateCounting(count, count);
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f018 fa35 	bl	801962e <xQueueCreateCountingSemaphore>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
#endif

   //Check whether the returned handle is valid
   if(semaphore->handle != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <osCreateSemaphore+0x24>
      return TRUE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <osCreateSemaphore+0x26>
   else
      return FALSE;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <osWaitForSemaphore>:
 * @return The function returns TRUE if the semaphore is available. FALSE is
 *   returned if the timeout interval elapsed
 **/

bool_t osWaitForSemaphore(OsSemaphore *semaphore, systime_t timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
   portBASE_TYPE ret;

   //Wait until the specified semaphore becomes available
   if(timeout == INFINITE_DELAY)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d108      	bne.n	8001204 <osWaitForSemaphore+0x24>
   {
      //Infinite timeout period
      ret = xSemaphoreTake(semaphore->handle, portMAX_DELAY);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295
 80011fa:	4618      	mov	r0, r3
 80011fc:	f018 fb2c 	bl	8019858 <xQueueSemaphoreTake>
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	e006      	b.n	8001212 <osWaitForSemaphore+0x32>
   }
   else
   {
      //Wait for the specified time interval
      ret = xSemaphoreTake(semaphore->handle, OS_MS_TO_SYSTICKS(timeout));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f018 fb24 	bl	8019858 <xQueueSemaphoreTake>
 8001210:	60f8      	str	r0, [r7, #12]
   }

   //The return value tells whether the semaphore is available
   return ret;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <osReleaseSemaphore>:
 * @brief Release the specified semaphore object
 * @param[in] semaphore Pointer to the semaphore object
 **/

void osReleaseSemaphore(OsSemaphore *semaphore)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
   //Release the semaphore
   xSemaphoreGive(semaphore->handle);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	f018 fa15 	bl	801965c <xQueueGenericSend>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutexStatic(&mutex->buffer);
#else
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutex();
 8001242:	2001      	movs	r0, #1
 8001244:	f018 f9db 	bl	80195fe <xQueueCreateMutex>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
#endif

   //Check whether the returned handle is valid
   if(mutex->handle != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <osCreateMutex+0x20>
      return TRUE;
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <osCreateMutex+0x22>
   else
      return FALSE;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   xSemaphoreTake(mutex->handle, portMAX_DELAY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	4618      	mov	r0, r3
 8001276:	f018 faef 	bl	8019858 <xQueueSemaphoreTake>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   xSemaphoreGive(mutex->handle);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	f018 f9e2 	bl	801965c <xQueueGenericSend>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
   systime_t time;

   //Get current tick count
   time = xTaskGetTickCount();
 80012a6:	f018 fed3 	bl	801a050 <xTaskGetTickCount>
 80012aa:	6078      	str	r0, [r7, #4]

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

void *osAllocMem(size_t size)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f017 feaa 	bl	8019018 <pvPortMalloc>
 80012c4:	60f8      	str	r0, [r7, #12]

   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n", size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void osFreeMem(void *p)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f017 feac 	bl	801903c <vPortFree>
   }
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <pathCanonicalize>:
 * @brief Simplify a path
 * @param[in] path NULL-terminated string containing the path to be canonicalized
 **/

void pathCanonicalize(char_t *path)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
   size_t i;
   size_t j;
   size_t k;

   //Move to the beginning of the string
   i = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
   k = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]

   //Replace backslashes with forward slashes
   while(path[i] != '\0')
 80012fc:	e02f      	b.n	800135e <pathCanonicalize+0x72>
   {
      //Forward slash or backslash separator found?
      if(path[i] == '/' || path[i] == '\\')
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b2f      	cmp	r3, #47	; 0x2f
 8001308:	d005      	beq.n	8001316 <pathCanonicalize+0x2a>
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b5c      	cmp	r3, #92	; 0x5c
 8001314:	d117      	bne.n	8001346 <pathCanonicalize+0x5a>
      {
         path[k++] = '/';
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	222f      	movs	r2, #47	; 0x2f
 8001322:	701a      	strb	r2, [r3, #0]
         while(path[i] == '/' || path[i] == '\\') i++;
 8001324:	e002      	b.n	800132c <pathCanonicalize+0x40>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2f      	cmp	r3, #47	; 0x2f
 8001336:	d0f6      	beq.n	8001326 <pathCanonicalize+0x3a>
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b5c      	cmp	r3, #92	; 0x5c
 8001342:	d0f0      	beq.n	8001326 <pathCanonicalize+0x3a>
      if(path[i] == '/' || path[i] == '\\')
 8001344:	e00b      	b.n	800135e <pathCanonicalize+0x72>
      }
      else
      {
         path[k++] = path[i++];
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	617a      	str	r2, [r7, #20]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	441a      	add	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	60f9      	str	r1, [r7, #12]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	440b      	add	r3, r1
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	701a      	strb	r2, [r3, #0]
   while(path[i] != '\0')
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1c9      	bne.n	80012fe <pathCanonicalize+0x12>
      }
   }

   //Properly terminate the string with a NULL character
   path[k] = '\0';
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

   //Move back to the beginning of the string
   i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
   j = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
   k = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]

   //Parse the entire string
   do
   {
      //Forward slash separator found?
      if(path[i] == '/' || path[i] == '\0')
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b2f      	cmp	r3, #47	; 0x2f
 800138a:	d006      	beq.n	800139a <pathCanonicalize+0xae>
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 8166 	bne.w	8001666 <pathCanonicalize+0x37a>
      {
         //"." element found?
         if((i - j) == 1 && !osStrncmp(path + j, ".", 1))
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d146      	bne.n	8001432 <pathCanonicalize+0x146>
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4413      	add	r3, r2
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4ba6      	ldr	r3, [pc, #664]	; (8001648 <pathCanonicalize+0x35c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d13d      	bne.n	8001432 <pathCanonicalize+0x146>
         {
            //Check whether the pathname is empty?
            if(k == 0)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d12b      	bne.n	8001414 <pathCanonicalize+0x128>
            {
               if(path[i] == '\0')
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <pathCanonicalize+0xec>
               {
                  path[k++] = '.';
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60fa      	str	r2, [r7, #12]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	222e      	movs	r2, #46	; 0x2e
 80013d4:	701a      	strb	r2, [r3, #0]
            if(k == 0)
 80013d6:	e133      	b.n	8001640 <pathCanonicalize+0x354>
               }
               else if(path[i] == '/' && path[i + 1] == '\0')
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b2f      	cmp	r3, #47	; 0x2f
 80013e2:	f040 812d 	bne.w	8001640 <pathCanonicalize+0x354>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 8125 	bne.w	8001640 <pathCanonicalize+0x354>
               {
                  path[k++] = '.';
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60fa      	str	r2, [r7, #12]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	222e      	movs	r2, #46	; 0x2e
 8001402:	701a      	strb	r2, [r3, #0]
                  path[k++] = '/';
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	222f      	movs	r2, #47	; 0x2f
 8001410:	701a      	strb	r2, [r3, #0]
            if(k == 0)
 8001412:	e115      	b.n	8001640 <pathCanonicalize+0x354>
               }
            }
            else if(k > 1)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	f240 8112 	bls.w	8001640 <pathCanonicalize+0x354>
            {
               //Remove the final slash if necessary
               if(path[i] == '\0')
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 810b 	bne.w	8001640 <pathCanonicalize+0x354>
                  k--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3b01      	subs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
            if(k == 0)
 8001430:	e106      	b.n	8001640 <pathCanonicalize+0x354>
            }
         }
         //".." element found?
         else if((i - j) == 2 && !osStrncmp(path + j, "..", 2))
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	f040 80e1 	bne.w	8001600 <pathCanonicalize+0x314>
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	2202      	movs	r2, #2
 8001446:	4981      	ldr	r1, [pc, #516]	; (800164c <pathCanonicalize+0x360>)
 8001448:	4618      	mov	r0, r3
 800144a:	f01c fc7f 	bl	801dd4c <strncmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 80d5 	bne.w	8001600 <pathCanonicalize+0x314>
         {
            //Check whether the pathname is empty?
            if(k == 0)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d11c      	bne.n	8001496 <pathCanonicalize+0x1aa>
            {
               path[k++] = '.';
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60fa      	str	r2, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	222e      	movs	r2, #46	; 0x2e
 8001468:	701a      	strb	r2, [r3, #0]
               path[k++] = '.';
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	222e      	movs	r2, #46	; 0x2e
 8001476:	701a      	strb	r2, [r3, #0]

               //Append a slash if necessary
               if(path[i] == '/')
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b2f      	cmp	r3, #47	; 0x2f
 8001482:	f040 80df 	bne.w	8001644 <pathCanonicalize+0x358>
                  path[k++] = '/';
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	60fa      	str	r2, [r7, #12]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	222f      	movs	r2, #47	; 0x2f
 8001492:	701a      	strb	r2, [r3, #0]
            if(k == 0)
 8001494:	e0d6      	b.n	8001644 <pathCanonicalize+0x358>
            }
            else if(k > 1)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f240 80d3 	bls.w	8001644 <pathCanonicalize+0x358>
            {
               //Search the path for the previous slash
               for(j = 1; j < k; j++)
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e00b      	b.n	80014bc <pathCanonicalize+0x1d0>
               {
                  if(path[k - j - 1] == '/')
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b2f      	cmp	r3, #47	; 0x2f
 80014b4:	d007      	beq.n	80014c6 <pathCanonicalize+0x1da>
               for(j = 1; j < k; j++)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	3301      	adds	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3ef      	bcc.n	80014a4 <pathCanonicalize+0x1b8>
 80014c4:	e000      	b.n	80014c8 <pathCanonicalize+0x1dc>
                     break;
 80014c6:	bf00      	nop
               }

               //Slash separator found?
               if(j < k)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d23e      	bcs.n	800154e <pathCanonicalize+0x262>
               {
                  if(!osStrncmp(path + k - j, "..", 2))
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	2202      	movs	r2, #2
 80014dc:	495b      	ldr	r1, [pc, #364]	; (800164c <pathCanonicalize+0x360>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f01c fc34 	bl	801dd4c <strncmp>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10e      	bne.n	8001508 <pathCanonicalize+0x21c>
                  {
                     path[k++] = '.';
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	60fa      	str	r2, [r7, #12]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	222e      	movs	r2, #46	; 0x2e
 80014f6:	701a      	strb	r2, [r3, #0]
                     path[k++] = '.';
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	222e      	movs	r2, #46	; 0x2e
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e004      	b.n	8001512 <pathCanonicalize+0x226>
                  }
                  else
                  {
                     k = k - j - 1;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	3b01      	subs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
                  }

                  //Append a slash if necessary
                  if(k == 0 && path[0] == '/')
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10b      	bne.n	8001530 <pathCanonicalize+0x244>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b2f      	cmp	r3, #47	; 0x2f
 800151e:	d107      	bne.n	8001530 <pathCanonicalize+0x244>
                     path[k++] = '/';
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60fa      	str	r2, [r7, #12]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	222f      	movs	r2, #47	; 0x2f
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e066      	b.n	80015fe <pathCanonicalize+0x312>
                  else if(path[i] == '/')
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b2f      	cmp	r3, #47	; 0x2f
 800153a:	f040 8083 	bne.w	8001644 <pathCanonicalize+0x358>
                     path[k++] = '/';
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	60fa      	str	r2, [r7, #12]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	222f      	movs	r2, #47	; 0x2f
 800154a:	701a      	strb	r2, [r3, #0]
            if(k == 0)
 800154c:	e07a      	b.n	8001644 <pathCanonicalize+0x358>
               }
               //No slash separator found?
               else
               {
                  if(k == 3 && !osStrncmp(path, "..", 2))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d123      	bne.n	800159c <pathCanonicalize+0x2b0>
 8001554:	2202      	movs	r2, #2
 8001556:	493d      	ldr	r1, [pc, #244]	; (800164c <pathCanonicalize+0x360>)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f01c fbf7 	bl	801dd4c <strncmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d11b      	bne.n	800159c <pathCanonicalize+0x2b0>
                  {
                     path[k++] = '.';
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60fa      	str	r2, [r7, #12]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	222e      	movs	r2, #46	; 0x2e
 8001570:	701a      	strb	r2, [r3, #0]
                     path[k++] = '.';
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60fa      	str	r2, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	222e      	movs	r2, #46	; 0x2e
 800157e:	701a      	strb	r2, [r3, #0]

                     //Append a slash if necessary
                     if(path[i] == '/')
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b2f      	cmp	r3, #47	; 0x2f
 800158a:	d138      	bne.n	80015fe <pathCanonicalize+0x312>
                        path[k++] = '/';
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60fa      	str	r2, [r7, #12]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	222f      	movs	r2, #47	; 0x2f
 8001598:	701a      	strb	r2, [r3, #0]
                     if(path[i] == '/')
 800159a:	e030      	b.n	80015fe <pathCanonicalize+0x312>
                  }
                  else if(path[i] == '\0')
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d109      	bne.n	80015bc <pathCanonicalize+0x2d0>
                  {
                     k = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
                     path[k++] = '.';
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60fa      	str	r2, [r7, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	222e      	movs	r2, #46	; 0x2e
 80015b8:	701a      	strb	r2, [r3, #0]
            if(k == 0)
 80015ba:	e043      	b.n	8001644 <pathCanonicalize+0x358>
                  }
                  else if(path[i] == '/' && path[i + 1] == '\0')
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2f      	cmp	r3, #47	; 0x2f
 80015c6:	d117      	bne.n	80015f8 <pathCanonicalize+0x30c>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d110      	bne.n	80015f8 <pathCanonicalize+0x30c>
                  {
                     k = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
                     path[k++] = '.';
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60fa      	str	r2, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	222e      	movs	r2, #46	; 0x2e
 80015e6:	701a      	strb	r2, [r3, #0]
                     path[k++] = '/';
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60fa      	str	r2, [r7, #12]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	222f      	movs	r2, #47	; 0x2f
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e002      	b.n	80015fe <pathCanonicalize+0x312>
                  }
                  else
                  {
                     k = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
            if(k == 0)
 80015fc:	e022      	b.n	8001644 <pathCanonicalize+0x358>
 80015fe:	e021      	b.n	8001644 <pathCanonicalize+0x358>
            }
         }
         else
         {
            //Copy directory name
            osMemmove(path + k, path + j, i - j);
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	18d0      	adds	r0, r2, r3
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	18d1      	adds	r1, r2, r3
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	461a      	mov	r2, r3
 8001614:	f01c f942 	bl	801d89c <memmove>
            //Advance write pointer
            k += i - j;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

            //Append a slash if necessary
            if(path[i] == '/')
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b2f      	cmp	r3, #47	; 0x2f
 800162e:	d112      	bne.n	8001656 <pathCanonicalize+0x36a>
               path[k++] = '/';
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60fa      	str	r2, [r7, #12]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	222f      	movs	r2, #47	; 0x2f
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e00a      	b.n	8001656 <pathCanonicalize+0x36a>
            if(k == 0)
 8001640:	bf00      	nop
 8001642:	e008      	b.n	8001656 <pathCanonicalize+0x36a>
            if(k == 0)
 8001644:	bf00      	nop
         }

         //Move to the next token
         while(path[i] == '/') i++;
 8001646:	e006      	b.n	8001656 <pathCanonicalize+0x36a>
 8001648:	08023560 	.word	0x08023560
 800164c:	08023564 	.word	0x08023564
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b2f      	cmp	r3, #47	; 0x2f
 8001660:	d0f6      	beq.n	8001650 <pathCanonicalize+0x364>
         j = i;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	613b      	str	r3, [r7, #16]
      }
   } while(path[i++] != '\0');
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	617a      	str	r2, [r7, #20]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f ae84 	bne.w	8001380 <pathCanonicalize+0x94>

   //Properly terminate the string with a NULL character
   path[k] = '\0';
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop

0800168c <pathAddSlash>:
 * @param[in,out] path NULL-terminated string that represents the path
 * @param[in] maxLen Maximum pathname length
 **/

void pathAddSlash(char_t *path, size_t maxLen)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
   size_t n;

   //Retrieve the length of the string
   n = osStrlen(path);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fe04 	bl	80002a4 <strlen>
 800169c:	60f8      	str	r0, [r7, #12]

   //Add a slash character only if necessary
   if(!n)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <pathAddSlash+0x2c>
   {
      //Check the length of the resulting string
      if(maxLen >= 1)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d025      	beq.n	80016f6 <pathAddSlash+0x6a>
         osStrcpy(path, "/");
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4914      	ldr	r1, [pc, #80]	; (8001700 <pathAddSlash+0x74>)
 80016ae:	461a      	mov	r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	8013      	strh	r3, [r2, #0]
   {
      //Check the length of the resulting string
      if(maxLen >= (n + 1))
         osStrcat(path, "/");
   }
}
 80016b6:	e01e      	b.n	80016f6 <pathAddSlash+0x6a>
   else if(path[n - 1] != '/' && path[n - 1] != '\\')
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b2f      	cmp	r3, #47	; 0x2f
 80016c4:	d017      	beq.n	80016f6 <pathAddSlash+0x6a>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b5c      	cmp	r3, #92	; 0x5c
 80016d2:	d010      	beq.n	80016f6 <pathAddSlash+0x6a>
      if(maxLen >= (n + 1))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d30b      	bcc.n	80016f6 <pathAddSlash+0x6a>
         osStrcat(path, "/");
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7fe fde0 	bl	80002a4 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <pathAddSlash+0x74>)
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	8013      	strh	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	08023568 	.word	0x08023568

08001704 <pathCombine>:
 * @param[in] more NULL-terminated string containing the second path
 * @param[in] maxLen Maximum pathname length
 **/

void pathCombine(char_t *path, const char_t *more, size_t maxLen)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
   size_t n1;
   size_t n2;

   //Append a slash character to the first path
   if(*path != '\0')
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <pathCombine+0x24>
      pathAddSlash(path, maxLen);
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff ffb6 	bl	800168c <pathAddSlash>

   //Skip any slash character at the beginning of the second path
   while(*more == '/' || *more == '\\') more++;
 8001720:	e002      	b.n	8001728 <pathCombine+0x24>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b2f      	cmp	r3, #47	; 0x2f
 800172e:	d0f8      	beq.n	8001722 <pathCombine+0x1e>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b5c      	cmp	r3, #92	; 0x5c
 8001736:	d0f4      	beq.n	8001722 <pathCombine+0x1e>

   //Retrieve the length of the first path
   n1 = osStrlen(path);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7fe fdb3 	bl	80002a4 <strlen>
 800173e:	6178      	str	r0, [r7, #20]
   //Retrieve the length of second path
   n2 = osStrlen(more);
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f7fe fdaf 	bl	80002a4 <strlen>
 8001746:	6138      	str	r0, [r7, #16]

   //Check the length of the resulting string
   if(n1 < maxLen)
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	d216      	bcs.n	800177e <pathCombine+0x7a>
   {
      //Limit the number of characters to be copied
      n2 = MIN(n2, maxLen - n1);
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4293      	cmp	r3, r2
 800175a:	bf28      	it	cs
 800175c:	4613      	movcs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      //Concatenate the resulting string
      osStrncpy(path + n1, more, n2);
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4618      	mov	r0, r3
 800176c:	f01c fb00 	bl	801dd70 <strncpy>
      //Properly terminate the string with a NULL character
      path[n1 + n2] = '\0';
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4413      	add	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
   }
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <resGetData>:
//Resource data
extern const uint8_t res[];


error_t resGetData(const char_t *path, const uint8_t **data, size_t *length)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t dirLength;
   ResEntry *resEntry;

   //Point to the resource header
   ResHeader *resHeader = (ResHeader *) res;
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <resGetData+0x1b8>)
 8001796:	613b      	str	r3, [r7, #16]

   //Make sure the resource data is valid
   if(resHeader->totalSize < sizeof(ResHeader))
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b0d      	cmp	r3, #13
 800179e:	d802      	bhi.n	80017a6 <resGetData+0x1e>
      return ERROR_INVALID_RESOURCE;
 80017a0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80017a4:	e0c7      	b.n	8001936 <resGetData+0x1ae>

   //Retrieve the length of the root directory
   dirLength = resHeader->rootEntry.dataLength;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80017ac:	61bb      	str	r3, [r7, #24]
   //Point to the contents of the root directory
   resEntry = (ResEntry *) (res + resHeader->rootEntry.dataStart);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80017b4:	4a62      	ldr	r2, [pc, #392]	; (8001940 <resGetData+0x1b8>)
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]

   //Parse the entire path
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	e098      	b.n	80018f2 <resGetData+0x16a>
   {
      //Search for the separator that terminates the current token
      for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++);
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	e002      	b.n	80017cc <resGetData+0x44>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b5c      	cmp	r3, #92	; 0x5c
 80017d6:	d00b      	beq.n	80017f0 <resGetData+0x68>
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b2f      	cmp	r3, #47	; 0x2f
 80017e2:	d005      	beq.n	80017f0 <resGetData+0x68>
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ea      	bne.n	80017c6 <resGetData+0x3e>

      if(n == 0 && path[n] != '\0')
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d120      	bne.n	8001838 <resGetData+0xb0>
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01a      	beq.n	8001838 <resGetData+0xb0>
      {
         path++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
         for(n = 0; path[n] != '\\' && path[n] != '/' && path[n] != '\0'; n++);
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	e002      	b.n	8001814 <resGetData+0x8c>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b5c      	cmp	r3, #92	; 0x5c
 800181e:	d00b      	beq.n	8001838 <resGetData+0xb0>
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b2f      	cmp	r3, #47	; 0x2f
 800182a:	d005      	beq.n	8001838 <resGetData+0xb0>
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ea      	bne.n	800180e <resGetData+0x86>
      }

      //Loop through the directory
      for(match = FALSE; !match && dirLength > 0; )
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	e048      	b.n	80018d0 <resGetData+0x148>
      {
         //Check the number of remaining bytes
         if(dirLength < sizeof(ResEntry))
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d802      	bhi.n	800184a <resGetData+0xc2>
            return ERROR_INVALID_RESOURCE;
 8001844:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001848:	e075      	b.n	8001936 <resGetData+0x1ae>
         //Make sure the entry is valid
         if(dirLength < (sizeof(ResEntry) + resEntry->nameLength))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	7a5b      	ldrb	r3, [r3, #9]
 800184e:	330a      	adds	r3, #10
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	429a      	cmp	r2, r3
 8001854:	d202      	bcs.n	800185c <resGetData+0xd4>
            return ERROR_INVALID_RESOURCE;
 8001856:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800185a:	e06c      	b.n	8001936 <resGetData+0x1ae>

         //Compare current entry name against the expected one
         if(resEntry->nameLength == n && !strncasecmp(resEntry->name, path, n))
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	7a5b      	ldrb	r3, [r3, #9]
 8001860:	461a      	mov	r2, r3
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4293      	cmp	r3, r2
 8001866:	d126      	bne.n	80018b6 <resGetData+0x12e>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	330a      	adds	r3, #10
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	68f9      	ldr	r1, [r7, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f01c fa49 	bl	801dd08 <strncasecmp>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d11c      	bne.n	80018b6 <resGetData+0x12e>
         {
            //Check the type of the entry
            if(resEntry->type == RES_TYPE_DIR)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10a      	bne.n	800189a <resGetData+0x112>
            {
               //Save the length of the directory
               dirLength = resEntry->dataLength;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800188a:	61bb      	str	r3, [r7, #24]
               //Point to the contents of the directory
               resEntry = (ResEntry *) (res + resEntry->dataStart);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <resGetData+0x1b8>)
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <resGetData+0x128>
            }
            else
            {
               //A file may only appear at the end of the path
               if(path[n] != '\0')
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <resGetData+0x124>
                  return ERROR_NOT_FOUND;
 80018a6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80018aa:	e044      	b.n	8001936 <resGetData+0x1ae>

               //The search process is complete
               found = TRUE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
            }
            //The current entry matches the specified path
            match = TRUE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	e00c      	b.n	80018d0 <resGetData+0x148>
         }
         else
         {
            //Remaining bytes to process
            dirLength -= sizeof(ResEntry) + resEntry->nameLength;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	7a5b      	ldrb	r3, [r3, #9]
 80018ba:	461a      	mov	r2, r3
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	3b0a      	subs	r3, #10
 80018c2:	61bb      	str	r3, [r7, #24]
            //Point to the next entry
            resEntry = (ResEntry *) ((uint8_t *) resEntry + sizeof(ResEntry) + resEntry->nameLength);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	7a5b      	ldrb	r3, [r3, #9]
 80018c8:	330a      	adds	r3, #10
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4413      	add	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
      for(match = FALSE; !match && dirLength > 0; )
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <resGetData+0x154>
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1b0      	bne.n	800183e <resGetData+0xb6>
         }
      }

      //Unable to find the specified file?
      if(!match)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <resGetData+0x160>
         return ERROR_NOT_FOUND;
 80018e2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80018e6:	e026      	b.n	8001936 <resGetData+0x1ae>
   for(found = FALSE; !found && path[0] != '\0'; path += n + 1)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d104      	bne.n	8001902 <resGetData+0x17a>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f af5f 	bne.w	80017c0 <resGetData+0x38>
   }

   //Unable to find the specified file?
   if(!found)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <resGetData+0x186>
      return ERROR_NOT_FOUND;
 8001908:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800190c:	e013      	b.n	8001936 <resGetData+0x1ae>
   //Enforce the entry type
   if(resEntry->type != RES_TYPE_FILE)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d002      	beq.n	800191c <resGetData+0x194>
      return ERROR_NOT_FOUND;
 8001916:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800191a:	e00c      	b.n	8001936 <resGetData+0x1ae>

   //Return the location of the specified resource
   *data = res + resEntry->dataStart;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <resGetData+0x1b8>)
 8001924:	441a      	add	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
   //Return the length of the resource
   *length = resEntry->dataLength;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	08025a58 	.word	0x08025a58

08001944 <strDuplicate>:
 * @param[in] s Pointer to a constant NULL-terminated character string
 * @return Address of the string that was copied, or NULL if the string cannot be copied
 **/

char_t *strDuplicate(const char_t *s)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
   uint_t n;
   char_t *p;

   //Pointer to the newly created string
   p = NULL;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

   //Valid string?
   if(s != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d011      	beq.n	800197a <strDuplicate+0x36>
   {
      //Calculate the length occupied by the input string
      n = osStrlen(s) + 1;
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7fe fca4 	bl	80002a4 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]

      //Allocate memory to hold the new string
      p = osAllocMem(n);
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f7ff fca7 	bl	80012b6 <osAllocMem>
 8001968:	60f8      	str	r0, [r7, #12]

      //Successful memory allocation?
      if(p != NULL)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <strDuplicate+0x36>
      {
         //Make a copy of the input string
         osMemcpy(p, s, n);
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f01b ff83 	bl	801d880 <memcpy>
      }
   }

   //Return a pointer to the newly created string
   return p;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <strTrimWhitespace>:
 * @param[in] s The string that will be trimmed
 * @return String with whitespace stripped from the beginning and end
 **/

char_t *strTrimWhitespace(char_t *s)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
   char_t *end;
   char_t *result;

   //Trim whitespace from the beginning
   while(isspace((uint8_t) *s))
 800198c:	e002      	b.n	8001994 <strTrimWhitespace+0x10>
   {
      s++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3301      	adds	r3, #1
 8001992:	607b      	str	r3, [r7, #4]
   while(isspace((uint8_t) *s))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <strTrimWhitespace+0x7c>)
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f2      	bne.n	800198e <strTrimWhitespace+0xa>
   }

   //Save the current position
   result = s;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60bb      	str	r3, [r7, #8]

   //Search for the first whitespace to remove
   //at the end of the string
   for(end = NULL; *s != '\0'; s++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e014      	b.n	80019dc <strTrimWhitespace+0x58>
   {
      if(!isspace((uint8_t) *s))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <strTrimWhitespace+0x7c>)
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <strTrimWhitespace+0x48>
         end = NULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e004      	b.n	80019d6 <strTrimWhitespace+0x52>
      else if(!end)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <strTrimWhitespace+0x52>
         end = s;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
   for(end = NULL; *s != '\0'; s++)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e6      	bne.n	80019b2 <strTrimWhitespace+0x2e>
   }

   //Trim whitespace from the end
   if(end)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <strTrimWhitespace+0x6c>
      *end = '\0';
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]

   //Return the string with leading and
   //trailing whitespace omitted
   return result;
 80019f0:	68bb      	ldr	r3, [r7, #8]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0804048d 	.word	0x0804048d

08001a04 <strRemoveTrailingSpace>:
 * @brief Removes all trailing whitespace from a string
 * @param[in,out] s Pointer to a NULL-terminated character string
 **/

void strRemoveTrailingSpace(char_t *s)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
   char_t *end;

   //Search for the first whitespace to remove
   //at the end of the string
   for(end = NULL; *s != '\0'; s++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e014      	b.n	8001a3c <strRemoveTrailingSpace+0x38>
   {
      if(!isspace((uint8_t) *s))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <strRemoveTrailingSpace+0x58>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <strRemoveTrailingSpace+0x28>
         end = NULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e004      	b.n	8001a36 <strRemoveTrailingSpace+0x32>
      else if(!end)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <strRemoveTrailingSpace+0x32>
         end = s;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
   for(end = NULL; *s != '\0'; s++)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e6      	bne.n	8001a12 <strRemoveTrailingSpace+0xe>
   }

   //Trim whitespace from the end
   if(end)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <strRemoveTrailingSpace+0x4c>
      *end = '\0';
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	0804048d 	.word	0x0804048d

08001a60 <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <strSafeCopy+0x1e>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <strSafeCopy+0x1e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e015      	b.n	8001aae <strSafeCopy+0x4e>

   //Get the length of the source name
   n = osStrlen(src);
 8001a82:	68b8      	ldr	r0, [r7, #8]
 8001a84:	f7fe fc0e 	bl	80002a4 <strlen>
 8001a88:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf28      	it	cs
 8001a94:	4613      	movcs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

   //Copy the string
   osStrncpy(dest, src, n);
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f01c f967 	bl	801dd70 <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 8001ac2:	2004      	movs	r0, #4
 8001ac4:	f7ff fbf7 	bl	80012b6 <osAllocMem>
 8001ac8:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	e00f      	b.n	8001af4 <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f000 f811 	bl	8001afc <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f000 f81a 	bl	8001b18 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f000 f844 	bl	8001b74 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	f7ff fbef 	bl	80012d0 <osFreeMem>
   //Successful processing
   return NO_ERROR;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;
   
   //Restaure last crc
   crc = (uint32_t)context->digest;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
   
   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e010      	b.n	8001b56 <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];     
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	0a1a      	lsrs	r2, r3, #8
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	69f9      	ldr	r1, [r7, #28]
 8001b40:	4401      	add	r1, r0
 8001b42:	7809      	ldrb	r1, [r1, #0]
 8001b44:	404b      	eors	r3, r1
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <crc32Update+0x58>)
 8001b48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b4c:	4053      	eors	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3ea      	bcc.n	8001b34 <crc32Update+0x1c>
   }
   
   //Save updated crc
   context->digest = crc;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	3724      	adds	r7, #36	; 0x24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	0802356c 	.word	0x0802356c

08001b74 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{  
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <iapGetDefaultSettings>:
* @brief Initialize settings with default values
* @param[in,out] tructure that contains IAP settings
**/

void iapGetDefaultSettings(IapSettings *settings)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
#if IAP_INTEGRITY_SUPPORT == ENABLED
   //IAP integrity setting
   settings->integrityAlgo = NULL;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
   settings->cipherAlgo = NULL;
   settings->cipherMode = CIPHER_MODE_NULL;
   settings->cipherKey = NULL;
   settings->cipherKeyLen = 0;
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <iapInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

error_t iapInit(IapContext *context, const IapSettings *settings)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
   error_t error;
   //FlashBankID fCurrentBankID;
   
   //Check Parameters validity
   if(context == NULL || settings == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <iapInit+0x16>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <iapInit+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e044      	b.n	8001c58 <iapInit+0xa4>
   
   //Debug message
   TRACE_INFO("Initializing IAP...\r\n");
 8001bce:	f7ff fa64 	bl	800109a <osSuspendAllTasks>
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <iapInit+0xac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2215      	movs	r2, #21
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4821      	ldr	r0, [pc, #132]	; (8001c64 <iapInit+0xb0>)
 8001bde:	f01b fbb9 	bl	801d354 <fwrite>
 8001be2:	f7ff fa65 	bl	80010b0 <osResumeAllTasks>
   
   //Check settings
#if IAP_INTEGRITY_SUPPORT == ENABLED
   //Check integrity settings
   if(settings->integrityAlgo == NULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <iapInit+0x3e>
      return ERROR_INVALID_PARAMETER;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e032      	b.n	8001c58 <iapInit+0xa4>
   if(settings->cipherMode != CIPHER_MODE_CBC)
      return ERROR_UNSUPPORTED_CIPHER_MODE;
#endif

   //Clear the IAP context
   memset(context, 0, sizeof(IapContext));
 8001bf2:	f240 4284 	movw	r2, #1156	; 0x484
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f01b fe69 	bl	801d8d0 <memset>

   //Save user settings
   context->settings = *settings;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	601a      	str	r2, [r3, #0]

   //Set default state
   context->state = IAP_STATE_IDLE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	711a      	strb	r2, [r3, #4]
   
   //Initialize device flash driver
   error = flashInit();
 8001c0c:	f000 fc8e 	bl	800252c <flashInit>
 8001c10:	4603      	mov	r3, r0
 8001c12:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <iapInit+0x6a>
      return error;
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	e01c      	b.n	8001c58 <iapInit+0xa4>
   
   //Set flash bank start address
   error = flashGetStartAddr(&context->firmwareAddr);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3308      	adds	r3, #8
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fcca 	bl	80025bc <flashGetStartAddr>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <iapInit+0x82>
      return error;
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	e010      	b.n	8001c58 <iapInit+0xa4>
   
   //Initialize flash position to flash bank start addresse
   context->pos = context->firmwareAddr;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
   
   //Initialize buffer position to buffer start addresse 
   context->bufferPos = context->buffer;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f103 0218 	add.w	r2, r3, #24
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   //Initialize check data position to check data start addresse
   context->checkDataPos = context->checkData;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 720d 	add.w	r2, r3, #564	; 0x234
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

   //Return status code
   return NO_ERROR;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000044 	.word	0x20000044
 8001c64:	080239a8 	.word	0x080239a8

08001c68 <iapUpdate>:
 * @param[in] endOfData All data has been received
 * @return Status code
 **/

error_t iapUpdate(IapContext *context, const void *data, size_t length)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;
   uint8_t *pData;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <iapUpdate+0x1e>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <iapUpdate+0x1e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <iapUpdate+0x22>
      return ERROR_INVALID_PARAMETER;
 8001c86:	2302      	movs	r3, #2
 8001c88:	e0d3      	b.n	8001e32 <iapUpdate+0x1ca>

   //Initialize variables
   n = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
   error = NO_ERROR;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	83fb      	strh	r3, [r7, #30]
   
   //Point to the beginning of the data
   pData = (uint8_t*)data;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	61bb      	str	r3, [r7, #24]

   //IAP idle state?
   if(context->state == IAP_STATE_IDLE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80b7 	bne.w	8001e0e <iapUpdate+0x1a6>
   {
      //Debug message
      TRACE_INFO("Processing firmware update...\r\n");
 8001ca0:	f7ff f9fb 	bl	800109a <osSuspendAllTasks>
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <iapUpdate+0x1d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	221f      	movs	r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	4864      	ldr	r0, [pc, #400]	; (8001e40 <iapUpdate+0x1d8>)
 8001cb0:	f01b fb50 	bl	801d354 <fwrite>
 8001cb4:	f7ff f9fc 	bl	80010b0 <osResumeAllTasks>
      
      //Reset flash position to flash bank start addresse
      context->pos = context->firmwareAddr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
      //Reset written data in flash counter
      context->written = 0;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]

      //Reset buffer position to buffer start addresse
      context->bufferPos = context->buffer;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f103 0218 	add.w	r2, r3, #24
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      //Reset buffer length
      context->bufferLen = 0;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Reset check data position to check data start addresse
      context->checkDataPos = context->checkData;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f503 720d 	add.w	r2, r3, #564	; 0x234
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
      //Reset check data size and length
      context->checkDataLen = 0;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
      context->checkDataSize = 0;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
      //Reset check context
      memset(context->checkContext, 0, sizeof(context->checkContext));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	33a0      	adds	r3, #160	; 0xa0
 8001cfa:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f01b fde5 	bl	801d8d0 <memset>

      //Reset digest length
      context->digestLen = 0;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      //Reset digest
      memset(context->digest, 0, sizeof(context->digest));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f01b fdd9 	bl	801d8d0 <memset>
      //Reset cipher context
      memset(context->cipherContext, 0, sizeof(context->cipherContext));
#endif

      //Initialize IAP check crypto materials
      error = iapCheckInit(context);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fb02 	bl	8002328 <iapCheckInit>
 8001d24:	4603      	mov	r3, r0
 8001d26:	83fb      	strh	r3, [r7, #30]
      //Is any error ?
      if (error)
 8001d28:	8bfb      	ldrh	r3, [r7, #30]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <iapUpdate+0xca>
         return error;
 8001d2e:	8bfb      	ldrh	r3, [r7, #30]
 8001d30:	e07f      	b.n	8001e32 <iapUpdate+0x1ca>
            return error;
      }
#endif
      
      //Change IAP state
      context->state = IAP_STATE_RECV_APP_HEADER;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	711a      	strb	r2, [r3, #4]
   }

   //Process the incoming data
   while(length > 0)
 8001d38:	e069      	b.n	8001e0e <iapUpdate+0x1a6>
   {
      //Still room in buffer?
      if(context->bufferLen < sizeof(context->buffer))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	d854      	bhi.n	8001dee <iapUpdate+0x186>
      {
         //Fill buffer with input data
         n = MIN(length, sizeof(context->buffer) - context->bufferLen);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d4a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	bf28      	it	cs
 8001d54:	4613      	movcs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
         memcpy(context->bufferPos, pData, n);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	69b9      	ldr	r1, [r7, #24]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f01b fd8c 	bl	801d880 <memcpy>

         //Update buffer position and length
         context->bufferPos += n;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	441a      	add	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         context->bufferLen += n;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	441a      	add	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         
         //Update input data postion and length 
         pData += n;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
         length -= n;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	607b      	str	r3, [r7, #4]
         
         //IAP receiving image header state?
         if(context->state == IAP_STATE_RECV_APP_HEADER)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <iapUpdate+0x14a>
         {
            //Process image header
            error = iapProcessAppHeader(context);
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f8ef 	bl	8001f84 <iapProcessAppHeader>
 8001da6:	4603      	mov	r3, r0
 8001da8:	83fb      	strh	r3, [r7, #30]
            //Is any error?
            if(error)
 8001daa:	8bfb      	ldrh	r3, [r7, #30]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02e      	beq.n	8001e0e <iapUpdate+0x1a6>
               break;
 8001db0:	e030      	b.n	8001e14 <iapUpdate+0x1ac>
         }
         //IAP receiving image data state?
         else if(context->state == IAP_STATE_RECV_APP_DATA)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	791b      	ldrb	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d108      	bne.n	8001dcc <iapUpdate+0x164>
         {
            //Process image data
            error = iapProcessAppData(context);
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f938 	bl	8002030 <iapProcessAppData>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	83fb      	strh	r3, [r7, #30]
            //Is any error?
            if(error)
 8001dc4:	8bfb      	ldrh	r3, [r7, #30]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d021      	beq.n	8001e0e <iapUpdate+0x1a6>
               break;
 8001dca:	e023      	b.n	8001e14 <iapUpdate+0x1ac>
         }
         //IAP receiving image check data state?
         else if(context->state == IAP_STATE_RECV_APP_CHECK)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d108      	bne.n	8001de6 <iapUpdate+0x17e>
         {
            //Process image check data
            error = iapProcessAppCheck(context);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9d7 	bl	8002188 <iapProcessAppCheck>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	83fb      	strh	r3, [r7, #30]
            //Is any error?
            if(error)
 8001dde:	8bfb      	ldrh	r3, [r7, #30]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <iapUpdate+0x1a6>
               break;
 8001de4:	e016      	b.n	8001e14 <iapUpdate+0x1ac>
         }
         else
         {
            //Wrong state
            error = ERROR_WRONG_STATE;
 8001de6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001dea:	83fb      	strh	r3, [r7, #30]
 8001dec:	e00f      	b.n	8001e0e <iapUpdate+0x1a6>
         }
      }
      else
      {
         //Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 8001dee:	f7ff f954 	bl	800109a <osSuspendAllTasks>
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <iapUpdate+0x1d4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2218      	movs	r2, #24
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4811      	ldr	r0, [pc, #68]	; (8001e44 <iapUpdate+0x1dc>)
 8001dfe:	f01b faa9 	bl	801d354 <fwrite>
 8001e02:	f7ff f955 	bl	80010b0 <osResumeAllTasks>
         error = ERROR_BUFFER_OVERFLOW;
 8001e06:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001e0a:	83fb      	strh	r3, [r7, #30]
         break;
 8001e0c:	e002      	b.n	8001e14 <iapUpdate+0x1ac>
   while(length > 0)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d192      	bne.n	8001d3a <iapUpdate+0xd2>
      }
   }

   //Is any error?
   if (error)
 8001e14:	8bfb      	ldrh	r3, [r7, #30]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <iapUpdate+0x1c8>
   {
      //Return to IAP idle state?
      if (context->state > IAP_STATE_IDLE && context->state < IAP_STATE_VALIDATE_APP)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <iapUpdate+0x1c8>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d802      	bhi.n	8001e30 <iapUpdate+0x1c8>
      {
         //Change IAP state
         context->state = IAP_STATE_IDLE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	711a      	strb	r2, [r3, #4]
      }
   }

   //Return error code
   return error;
 8001e30:	8bfb      	ldrh	r3, [r7, #30]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000044 	.word	0x20000044
 8001e40:	080239c0 	.word	0x080239c0
 8001e44:	080239e0 	.word	0x080239e0

08001e48 <iapFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

error_t iapFinalize(IapContext* context)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
   error_t error;

   //Check parameters validity
   if (context == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <iapFinalize+0x12>
      return ERROR_INVALID_PARAMETER;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e05c      	b.n	8001f14 <iapFinalize+0xcc>
   
   //Debug message
   TRACE_INFO("Finalizing firmware image update...\r\n");
 8001e5a:	f7ff f91e 	bl	800109a <osSuspendAllTasks>
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <iapFinalize+0xd4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2225      	movs	r2, #37	; 0x25
 8001e66:	2101      	movs	r1, #1
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <iapFinalize+0xd8>)
 8001e6a:	f01b fa73 	bl	801d354 <fwrite>
 8001e6e:	f7ff f91f 	bl	80010b0 <osResumeAllTasks>

   //Ready to verify firmware image validity?
   if (context->state == IAP_STATE_VALIDATE_APP)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	791b      	ldrb	r3, [r3, #4]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d13e      	bne.n	8001ef8 <iapFinalize+0xb0>
   {
      //Verify firmware image validity (could integrity tag or 
      //authentification tag or signature)
      error = iapCheckVerify(context);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fafe 	bl	800247c <iapCheckVerify>
 8001e80:	4603      	mov	r3, r0
 8001e82:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <iapFinalize+0x64>
      {
         //Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 8001e8a:	f7ff f906 	bl	800109a <osSuspendAllTasks>
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <iapFinalize+0xd4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	221c      	movs	r2, #28
 8001e96:	2101      	movs	r1, #1
 8001e98:	4822      	ldr	r0, [pc, #136]	; (8001f24 <iapFinalize+0xdc>)
 8001e9a:	f01b fa5b 	bl	801d354 <fwrite>
 8001e9e:	f7ff f907 	bl	80010b0 <osResumeAllTasks>
         //Return to IAP idle state
         context->state = IAP_STATE_IDLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	711a      	strb	r2, [r3, #4]
         //Return error code
         return error;
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	e033      	b.n	8001f14 <iapFinalize+0xcc>
      }
      
      //Debug message
      TRACE_INFO("Firmware image is valid\r\n");
 8001eac:	f7ff f8f5 	bl	800109a <osSuspendAllTasks>
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <iapFinalize+0xd4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2219      	movs	r2, #25
 8001eb8:	2101      	movs	r1, #1
 8001eba:	481b      	ldr	r0, [pc, #108]	; (8001f28 <iapFinalize+0xe0>)
 8001ebc:	f01b fa4a 	bl	801d354 <fwrite>
 8001ec0:	f7ff f8f6 	bl	80010b0 <osResumeAllTasks>
            
      //Swapping flash banks
      error = flashSwapBank();
 8001ec4:	f000 fc98 	bl	80027f8 <flashSwapBank>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <iapFinalize+0xa6>
      {
         //Debug message
         TRACE_ERROR("Flash bank swap failed!\r\n");
 8001ed2:	f7ff f8e2 	bl	800109a <osSuspendAllTasks>
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <iapFinalize+0xd4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2219      	movs	r2, #25
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4812      	ldr	r0, [pc, #72]	; (8001f2c <iapFinalize+0xe4>)
 8001ee2:	f01b fa37 	bl	801d354 <fwrite>
 8001ee6:	f7ff f8e3 	bl	80010b0 <osResumeAllTasks>
         return error;
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	e012      	b.n	8001f14 <iapFinalize+0xcc>
      }

      //Change IAP state
      context->state = IAP_STATE_APP_REBOOT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	711a      	strb	r2, [r3, #4]
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
      return ERROR_WRONG_STATE;
   }

   //Valid firmware aaplication
   return NO_ERROR;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e00d      	b.n	8001f14 <iapFinalize+0xcc>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 8001ef8:	f7ff f8cf 	bl	800109a <osSuspendAllTasks>
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <iapFinalize+0xd4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	222f      	movs	r2, #47	; 0x2f
 8001f04:	2101      	movs	r1, #1
 8001f06:	480a      	ldr	r0, [pc, #40]	; (8001f30 <iapFinalize+0xe8>)
 8001f08:	f01b fa24 	bl	801d354 <fwrite>
 8001f0c:	f7ff f8d0 	bl	80010b0 <osResumeAllTasks>
      return ERROR_WRONG_STATE;
 8001f10:	f240 13ff 	movw	r3, #511	; 0x1ff
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000044 	.word	0x20000044
 8001f20:	080239fc 	.word	0x080239fc
 8001f24:	08023a24 	.word	0x08023a24
 8001f28:	08023a44 	.word	0x08023a44
 8001f2c:	08023a60 	.word	0x08023a60
 8001f30:	08023a7c 	.word	0x08023a7c

08001f34 <iapReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapReboot(IapContext* context)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");
 8001f3c:	f7ff f8ad 	bl	800109a <osSuspendAllTasks>
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <iapReboot+0x48>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2228      	movs	r2, #40	; 0x28
 8001f48:	2101      	movs	r1, #1
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <iapReboot+0x4c>)
 8001f4c:	f01b fa02 	bl	801d354 <fwrite>
 8001f50:	f7ff f8ae 	bl	80010b0 <osResumeAllTasks>
   
   //Check parameter validity
   if (context == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <iapReboot+0x2a>
      return ERROR_INVALID_PARAMETER;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e009      	b.n	8001f72 <iapReboot+0x3e>

   if (context->state == IAP_STATE_APP_REBOOT)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d103      	bne.n	8001f6e <iapReboot+0x3a>
   {
      //Reboot system to complete firmware update procedure
      systemReset();
 8001f66:	f000 fcff 	bl	8002968 <systemReset>
      //Wrong state
      return ERROR_WRONG_STATE;
   }

   //Successful process
   return NO_ERROR;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e001      	b.n	8001f72 <iapReboot+0x3e>
      return ERROR_WRONG_STATE;
 8001f6e:	f240 13ff 	movw	r3, #511	; 0x1ff
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000044 	.word	0x20000044
 8001f80:	08023aac 	.word	0x08023aac

08001f84 <iapProcessAppHeader>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppHeader(IapContext *context)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
   IapAppHeader *header;
   uint_t n;
   
   //Check parameter validity
   if (context == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <iapProcessAppHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e044      	b.n	8002020 <iapProcessAppHeader+0x9c>

   //Initialize variable
   n = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]

   //Is buffer full enough to contains IAP image header?
   if (context->bufferLen >= sizeof(IapAppHeader))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d93c      	bls.n	800201e <iapProcessAppHeader+0x9a>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image header...\r\n");
      
      //Point to the IAP application header
      header = (IapAppHeader*)context->buffer;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	60bb      	str	r3, [r7, #8]

      //Would firmware overcome the flash bank size?
      if (header->appSize > flashGetBankSize())
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	681c      	ldr	r4, [r3, #0]
 8001fae:	f000 fb19 	bl	80025e4 <flashGetBankSize>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d90e      	bls.n	8001fd6 <iapProcessAppHeader+0x52>
      {
         //Debug message
         TRACE_ERROR("The firmware would overcome the flash bank size!\r\n");
 8001fb8:	f7ff f86f 	bl	800109a <osSuspendAllTasks>
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <iapProcessAppHeader+0xa4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2232      	movs	r2, #50	; 0x32
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4819      	ldr	r0, [pc, #100]	; (800202c <iapProcessAppHeader+0xa8>)
 8001fc8:	f01b f9c4 	bl	801d354 <fwrite>
 8001fcc:	f7ff f870 	bl	80010b0 <osResumeAllTasks>
         return ERROR_BUFFER_OVERFLOW;
 8001fd0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001fd4:	e024      	b.n	8002020 <iapProcessAppHeader+0x9c>
      }

      //Save application firmware length
      context->firmwareLength = header->appSize;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]

      //Remove header from buffer
      n = context->bufferLen - sizeof(IapAppHeader);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fe4:	3b04      	subs	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
      memcpy(context->buffer, context->buffer + sizeof(IapAppHeader), n);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0018 	add.w	r0, r3, #24
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f01b fc42 	bl	801d880 <memcpy>
      context->bufferPos -= sizeof(IapAppHeader);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002002:	1f1a      	subs	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      context->bufferLen -= sizeof(IapAppHeader);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002010:	1f1a      	subs	r2, r3, #4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Change IAP state
      context->state = IAP_STATE_RECV_APP_DATA;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	711a      	strb	r2, [r3, #4]
   }

   //Successful process
   return NO_ERROR;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	20000044 	.word	0x20000044
 800202c:	08023ad8 	.word	0x08023ad8

08002030 <iapProcessAppData>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppData(IapContext *context)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
   error_t error;
   uint_t dataLength;

   //Check parameter validity
   if (context == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <iapProcessAppData+0x12>
      return ERROR_INVALID_PARAMETER;
 800203e:	2302      	movs	r3, #2
 8002040:	e09d      	b.n	800217e <iapProcessAppData+0x14e>
   //Receiving image firmware data?
   if(1)
   {
#endif
      //Is buffer full or full enought to contain last application data?
      if ((context->bufferLen == sizeof(context->buffer)) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d00a      	beq.n	8002062 <iapProcessAppData+0x32>
         (context->written + context->bufferLen >= context->firmwareLength))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002056:	441a      	add	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	f0c0 808d 	bcc.w	800217c <iapProcessAppData+0x14c>
      {
         //We must not process more data than the firmware length
         dataLength = MIN(context->bufferLen, context->firmwareLength - context->written);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002072:	4293      	cmp	r3, r2
 8002074:	bf28      	it	cs
 8002076:	4613      	movcs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag) 
         error = iapCheckUpdateTag(context, context->buffer, dataLength);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3318      	adds	r3, #24
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f98c 	bl	80023a0 <iapCheckUpdateTag>
 8002088:	4603      	mov	r3, r0
 800208a:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 800208c:	897b      	ldrh	r3, [r7, #10]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <iapProcessAppData+0x66>
            return error;
 8002092:	897b      	ldrh	r3, [r7, #10]
 8002094:	e073      	b.n	800217e <iapProcessAppData+0x14e>
               return error;
         }
#endif
         
         //Write application data in flash bank
         error = iapFlashWrite(context, context->buffer, dataLength);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3318      	adds	r3, #24
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8dc 	bl	800225c <iapFlashWrite>
 80020a4:	4603      	mov	r3, r0
 80020a6:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <iapProcessAppData+0x82>
            return error;
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	e065      	b.n	800217e <iapProcessAppData+0x14e>

         //Is buffer contains remaining data?
         if (context->bufferLen != dataLength)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d02b      	beq.n	8002116 <iapProcessAppData+0xe6>
         {
            //Discard already processed data
            memset(context->buffer, 0, dataLength);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3318      	adds	r3, #24
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f01b fc02 	bl	801d8d0 <memset>

            //Put remaining data at buffer start
            memcpy(context->buffer, context->buffer + dataLength, 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 0018 	add.w	r0, r3, #24
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f103 0218 	add.w	r2, r3, #24
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	18d1      	adds	r1, r2, r3
               context->bufferLen - dataLength);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
            memcpy(context->buffer, context->buffer + dataLength, 
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	f01b fbca 	bl	801d880 <memcpy>
            //Update buffer position and length
            context->bufferPos = context->buffer + (context->bufferLen - dataLength);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0218 	add.w	r2, r3, #24
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1acb      	subs	r3, r1, r3
 80020fc:	441a      	add	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            context->bufferLen = context->bufferLen - dataLength;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002114:	e010      	b.n	8002138 <iapProcessAppData+0x108>
         }
         else
         {
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3318      	adds	r3, #24
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f01b fbd6 	bl	801d8d0 <memset>
            context->bufferPos = context->buffer;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0218 	add.w	r2, r3, #24
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            context->bufferLen = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         }

         //Is application data all received?
         if (context->written == context->firmwareLength)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d11b      	bne.n	800217c <iapProcessAppData+0x14c>
         {
            //Finalize application check comptutation tag (could be integrity 
            //tag or authentification tag or hash signature tag)
            error = iapCheckFinalizeTag(context);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f965 	bl	8002414 <iapCheckFinalizeTag>
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
            //Is any error?
            if (error)
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <iapProcessAppData+0x128>
               return error;
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	e012      	b.n	800217e <iapProcessAppData+0x14e>

            //Change IAP state
            context->state = IAP_STATE_RECV_APP_CHECK;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	711a      	strb	r2, [r3, #4]

            //Still data to process?
            if (context->bufferLen > 0)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <iapProcessAppData+0x14c>
            {
               //Process IAP check app data
               error = iapProcessAppCheck(context);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f80d 	bl	8002188 <iapProcessAppCheck>
 800216e:	4603      	mov	r3, r0
 8002170:	817b      	strh	r3, [r7, #10]
               //Is any error?
               if (error)
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <iapProcessAppData+0x14c>
                  return error;
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	e000      	b.n	800217e <iapProcessAppData+0x14e>
         }
      }
   }
      
   //Successfull process
   return NO_ERROR;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <iapProcessAppCheck>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppCheck(IapContext *context)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if (context == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <iapProcessAppCheck+0x12>
      return ERROR_INVALID_PARAMETER;
 8002196:	2302      	movs	r3, #2
 8002198:	e058      	b.n	800224c <iapProcessAppCheck+0xc4>

   //Is buffer full enough to contains IAP image check data?
   //(could be integrity/authentification tag or signature)
   if (context->checkDataLen + context->bufferLen <= context->checkDataSize)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021a6:	441a      	add	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d83c      	bhi.n	800222c <iapProcessAppCheck+0xa4>
   {
      //Save image check data block
      memcpy(context->checkDataPos, context->buffer, context->bufferLen);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f103 0118 	add.w	r1, r3, #24
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021c4:	461a      	mov	r2, r3
 80021c6:	f01b fb5b 	bl	801d880 <memcpy>
      context->checkDataPos += context->bufferLen;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021d6:	441a      	add	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
      context->checkDataLen += context->bufferLen;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ea:	441a      	add	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

      //Reset buffer
      memset(context->buffer, 0, sizeof(context->buffer));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3318      	adds	r3, #24
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f01b fb68 	bl	801d8d0 <memset>
      context->bufferPos = context->buffer;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f103 0218 	add.w	r2, r3, #24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      context->bufferLen = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Is image check data fully received?
      if (context->checkDataLen == context->checkDataSize)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002220:	429a      	cmp	r2, r3
 8002222:	d112      	bne.n	800224a <iapProcessAppCheck+0xc2>
      {
         //Change IAP state
         context->state = IAP_STATE_VALIDATE_APP;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2204      	movs	r2, #4
 8002228:	711a      	strb	r2, [r3, #4]
 800222a:	e00e      	b.n	800224a <iapProcessAppCheck+0xc2>
      }
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image check data is bigger than expected!\r\n");
 800222c:	f7fe ff35 	bl	800109a <osSuspendAllTasks>
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <iapProcessAppCheck+0xcc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	222b      	movs	r2, #43	; 0x2b
 8002238:	2101      	movs	r1, #1
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <iapProcessAppCheck+0xd0>)
 800223c:	f01b f88a 	bl	801d354 <fwrite>
 8002240:	f7fe ff36 	bl	80010b0 <osResumeAllTasks>
      return ERROR_BUFFER_OVERFLOW;
 8002244:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002248:	e000      	b.n	800224c <iapProcessAppCheck+0xc4>
   }

   //Successful process
   return NO_ERROR;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000044 	.word	0x20000044
 8002258:	08023b0c 	.word	0x08023b0c

0800225c <iapFlashWrite>:
 * @param[in] length Length of the firmware data bloc to be written
 * @return Error code
 **/

error_t iapFlashWrite(IapContext *context, const void *data, size_t length)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
   size_t i;
   size_t nbWords;
   uint32_t *p;

   //Initialize variables
   error = NO_ERROR;
 8002268:	2300      	movs	r3, #0
 800226a:	83fb      	strh	r3, [r7, #30]
   
   //Check parameters validity
   if(context == NULL || data == NULL || length % sizeof(uint32_t) != 0)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <iapFlashWrite+0x26>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <iapFlashWrite+0x26>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <iapFlashWrite+0x2a>
      return ERROR_INVALID_PARAMETER;
 8002282:	2302      	movs	r3, #2
 8002284:	e048      	b.n	8002318 <iapFlashWrite+0xbc>
   
   //Debug message
   TRACE_DEBUG("Writting data (%d bytes) in flash at 0x%08X...\r\n", length, context->pos);

   //Retrieve the number of words inside data buffer to be written
   nbWords = length / sizeof(uint32_t);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	617b      	str	r3, [r7, #20]
   //Point to the first word
   p = (uint32_t*) data;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	613b      	str	r3, [r7, #16]

   //Loop through data words by words
   for(i = 0; i < nbWords && error == NO_ERROR; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	e02c      	b.n	80022f0 <iapFlashWrite+0x94>
   {
      //Is remaining bytes bigger than a word (4 bytes)?
      if((length - i*sizeof(uint32_t)) >= sizeof(uint32_t))
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d923      	bls.n	80022ea <iapFlashWrite+0x8e>
      {
         //Program the 32-bit word to Flash memory
         error = flashWriteWord((uint32_t) (context->pos + i*sizeof(uint32_t)), p[i]);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	18d0      	adds	r0, r2, r3
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	f000 f99e 	bl	80025f8 <flashWriteWord>
 80022bc:	4603      	mov	r3, r0
 80022be:	83fb      	strh	r3, [r7, #30]
         //Is any error?
         if(error)
 80022c0:	8bfb      	ldrh	r3, [r7, #30]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <iapFlashWrite+0x8e>
         {
            //Debug message
            TRACE_ERROR("Failed to write in flash at 0x%08X!\r\n", (uint32_t) (context->pos + i*sizeof(uint32_t)));
 80022c6:	f7fe fee8 	bl	800109a <osSuspendAllTasks>
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <iapFlashWrite+0xc4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68d8      	ldr	r0, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	461a      	mov	r2, r3
 80022dc:	4911      	ldr	r1, [pc, #68]	; (8002324 <iapFlashWrite+0xc8>)
 80022de:	f01a fe51 	bl	801cf84 <fprintf>
 80022e2:	f7fe fee5 	bl	80010b0 <osResumeAllTasks>
            return error;
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
 80022e8:	e016      	b.n	8002318 <iapFlashWrite+0xbc>
   for(i = 0; i < nbWords && error == NO_ERROR; i++)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d202      	bcs.n	80022fe <iapFlashWrite+0xa2>
 80022f8:	8bfb      	ldrh	r3, [r7, #30]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0cb      	beq.n	8002296 <iapFlashWrite+0x3a>
         }
      }
   }
   
   //Update flash bank position
   context->pos += length;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	441a      	add	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	611a      	str	r2, [r3, #16]
   //Update written firmware data
   context->written += length;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	441a      	add	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	615a      	str	r2, [r3, #20]

   //Return status code
   return NO_ERROR;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000044 	.word	0x20000044
 8002324:	08023b38 	.word	0x08023b38

08002328 <iapCheckInit>:
 * @param[in,out] context Point to the IAP context
 * @return Error code
 **/

error_t iapCheckInit(IapContext *context)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
   error_t error;
   IapSettings *settings;

   //Check parameter validity
   if (context == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <iapCheckInit+0x12>
      return ERROR_INVALID_PARAMETER;
 8002336:	2302      	movs	r3, #2
 8002338:	e02a      	b.n	8002390 <iapCheckInit+0x68>

   //Pont to the IAP user settings
   settings = (IapSettings*)&context->settings;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60bb      	str	r3, [r7, #8]
   //Initialize status code
   error = NO_ERROR;
 800233e:	2300      	movs	r3, #0
 8002340:	81fb      	strh	r3, [r7, #14]

#if IAP_INTEGRITY_SUPPORT == ENABLED
   //Is user require integrity check?
   if (settings->integrityAlgo != NULL)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d013      	beq.n	8002372 <iapCheckInit+0x4a>
   {
      //Initialize integrity algo context
      settings->integrityAlgo->init(context->checkContext);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	32a0      	adds	r2, #160	; 0xa0
 8002354:	4610      	mov	r0, r2
 8002356:	4798      	blx	r3

      //Set digest length
      context->digestLen = settings->integrityAlgo->digestSize;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      //Set check data (integrity tag) size
      context->checkDataSize = settings->integrityAlgo->digestSize;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8002370:	e00d      	b.n	800238e <iapCheckInit+0x66>
   }
   else
#endif
   {
      //Debug message
      TRACE_ERROR("Missing image check method (integrity or authentification or signature!\r\n");
 8002372:	f7fe fe92 	bl	800109a <osSuspendAllTasks>
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <iapCheckInit+0x70>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2249      	movs	r2, #73	; 0x49
 800237e:	2101      	movs	r1, #1
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <iapCheckInit+0x74>)
 8002382:	f01a ffe7 	bl	801d354 <fwrite>
 8002386:	f7fe fe93 	bl	80010b0 <osResumeAllTasks>
      error = ERROR_ABORTED;
 800238a:	230f      	movs	r3, #15
 800238c:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800238e:	89fb      	ldrh	r3, [r7, #14]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000044 	.word	0x20000044
 800239c:	08023b60 	.word	0x08023b60

080023a0 <iapCheckUpdateTag>:
 * @param[in] length Length of the firmware data bloc to be processed
 * @return Error code
 **/

error_t iapCheckUpdateTag(IapContext *context, const uint8_t *data, size_t length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
   error_t error;
   IapSettings *settings;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <iapCheckUpdateTag+0x1e>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <iapCheckUpdateTag+0x1e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <iapCheckUpdateTag+0x22>
      return ERROR_INVALID_PARAMETER;
 80023be:	2302      	movs	r3, #2
 80023c0:	e020      	b.n	8002404 <iapCheckUpdateTag+0x64>

   //Point to user settings
   settings = (IapSettings*)&context->settings;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	613b      	str	r3, [r7, #16]
   //Initialize status code
   error = NO_ERROR;
 80023c6:	2300      	movs	r3, #0
 80023c8:	82fb      	strh	r3, [r7, #22]

#if IAP_INTEGRITY_SUPPORT == ENABLED
   //Is user require integrity check?
   if (settings->integrityAlgo != NULL)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <iapCheckUpdateTag+0x46>
   {
      //Update integrity hash tag
      settings->integrityAlgo->update(context->checkContext, data, length);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	f102 00a0 	add.w	r0, r2, #160	; 0xa0
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	4798      	blx	r3
 80023e4:	e00d      	b.n	8002402 <iapCheckUpdateTag+0x62>
   }
   else
#endif
   {
      //Debug message
      TRACE_ERROR("Missing image check method (integrity or authentification or signature!\r\n");
 80023e6:	f7fe fe58 	bl	800109a <osSuspendAllTasks>
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <iapCheckUpdateTag+0x6c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2249      	movs	r2, #73	; 0x49
 80023f2:	2101      	movs	r1, #1
 80023f4:	4806      	ldr	r0, [pc, #24]	; (8002410 <iapCheckUpdateTag+0x70>)
 80023f6:	f01a ffad 	bl	801d354 <fwrite>
 80023fa:	f7fe fe59 	bl	80010b0 <osResumeAllTasks>
      error = ERROR_ABORTED;
 80023fe:	230f      	movs	r3, #15
 8002400:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002402:	8afb      	ldrh	r3, [r7, #22]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000044 	.word	0x20000044
 8002410:	08023b60 	.word	0x08023b60

08002414 <iapCheckFinalizeTag>:
 * @param[in,out] context Point to the IAP context
 * @return Error code
 **/

error_t iapCheckFinalizeTag(IapContext *context)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
   error_t error;
   IapSettings *settings;
   
   //Check parameters validity
   if (context == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <iapCheckFinalizeTag+0x12>
      return ERROR_INVALID_PARAMETER;
 8002422:	2302      	movs	r3, #2
 8002424:	e022      	b.n	800246c <iapCheckFinalizeTag+0x58>

   //Point to user settings
   settings = (IapSettings*)&context->settings;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60bb      	str	r3, [r7, #8]
   //Initialize status code
   error = NO_ERROR;
 800242a:	2300      	movs	r3, #0
 800242c:	81fb      	strh	r3, [r7, #14]

#if IAP_INTEGRITY_SUPPORT == ENABLED
   //Is user require integrity check?
   if (settings->integrityAlgo != NULL)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <iapCheckFinalizeTag+0x3a>
   {
      //Debug message
      TRACE_DEBUG("Finalizing firmware integrity tag computation...\r\n");
      
      //Update integrity hash tag
      settings->integrityAlgo->final(context->checkContext, context->digest);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	f102 00a0 	add.w	r0, r2, #160	; 0xa0
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002448:	4611      	mov	r1, r2
 800244a:	4798      	blx	r3
 800244c:	e00d      	b.n	800246a <iapCheckFinalizeTag+0x56>
   }
   else
#endif
   {
      //Debug message
      TRACE_ERROR("Missing image check method (integrity or authentification or signature!\r\n");
 800244e:	f7fe fe24 	bl	800109a <osSuspendAllTasks>
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <iapCheckFinalizeTag+0x60>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2249      	movs	r2, #73	; 0x49
 800245a:	2101      	movs	r1, #1
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <iapCheckFinalizeTag+0x64>)
 800245e:	f01a ff79 	bl	801d354 <fwrite>
 8002462:	f7fe fe25 	bl	80010b0 <osResumeAllTasks>
      error = ERROR_ABORTED;
 8002466:	230f      	movs	r3, #15
 8002468:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800246a:	89fb      	ldrh	r3, [r7, #14]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000044 	.word	0x20000044
 8002478:	08023b60 	.word	0x08023b60

0800247c <iapCheckVerify>:
 * @param[in,out] context Point to the IAP context
 * @return Error code
 **/

error_t iapCheckVerify(IapContext *context)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
   error_t error;
   int ret;
   IapSettings* settings;
   
   //Debug message
   TRACE_INFO("Verifying firmware image validity...\r\n");
 8002484:	f7fe fe09 	bl	800109a <osSuspendAllTasks>
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <iapCheckVerify+0xa0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2226      	movs	r2, #38	; 0x26
 8002490:	2101      	movs	r1, #1
 8002492:	4823      	ldr	r0, [pc, #140]	; (8002520 <iapCheckVerify+0xa4>)
 8002494:	f01a ff5e 	bl	801d354 <fwrite>
 8002498:	f7fe fe0a 	bl	80010b0 <osResumeAllTasks>

   //Check parameters validity
   if (context == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <iapCheckVerify+0x2a>
      return ERROR_INVALID_PARAMETER;
 80024a2:	2302      	movs	r3, #2
 80024a4:	e035      	b.n	8002512 <iapCheckVerify+0x96>

   //Point to IAP user settings
   settings = (IapSettings*)&context->settings;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	613b      	str	r3, [r7, #16]
   //Initialize status code
   error = NO_ERROR;
 80024aa:	2300      	movs	r3, #0
 80024ac:	82fb      	strh	r3, [r7, #22]

#if IAP_INTEGRITY_SUPPORT == ENABLED
   //Is user require integrity check?
   if (settings->integrityAlgo != NULL)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01e      	beq.n	80024f4 <iapCheckVerify+0x78>
      TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->digestLen);
      TRACE_DEBUG_ARRAY("  ", context->digest, context->digestLen);
      TRACE_DEBUG("\r\n");

      //Compare computed integrity digest with the one received in the image 
      ret = osMemcmp(context->checkData, context->digest, context->digestLen);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 700d 	add.w	r0, r3, #564	; 0x234
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80024c8:	461a      	mov	r2, r3
 80024ca:	f01b f9cb 	bl	801d864 <memcmp>
 80024ce:	60f8      	str	r0, [r7, #12]
      //Is firmware integrity not valid?
      if (ret != 0)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01c      	beq.n	8002510 <iapCheckVerify+0x94>
      {
         //Debug message
         TRACE_INFO("Firmware integrity tag is not valid!\r\n");
 80024d6:	f7fe fde0 	bl	800109a <osSuspendAllTasks>
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <iapCheckVerify+0xa0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2226      	movs	r2, #38	; 0x26
 80024e2:	2101      	movs	r1, #1
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <iapCheckVerify+0xa8>)
 80024e6:	f01a ff35 	bl	801d354 <fwrite>
 80024ea:	f7fe fde1 	bl	80010b0 <osResumeAllTasks>
         error = ERROR_ABORTED;
 80024ee:	230f      	movs	r3, #15
 80024f0:	82fb      	strh	r3, [r7, #22]
 80024f2:	e00d      	b.n	8002510 <iapCheckVerify+0x94>
   }
   else
#endif
   {
      //Debug message
      TRACE_ERROR("Missing image check method (integrity or authentification or signature!\r\n");
 80024f4:	f7fe fdd1 	bl	800109a <osSuspendAllTasks>
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <iapCheckVerify+0xa0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2249      	movs	r2, #73	; 0x49
 8002500:	2101      	movs	r1, #1
 8002502:	4809      	ldr	r0, [pc, #36]	; (8002528 <iapCheckVerify+0xac>)
 8002504:	f01a ff26 	bl	801d354 <fwrite>
 8002508:	f7fe fdd2 	bl	80010b0 <osResumeAllTasks>
      error = ERROR_ABORTED;
 800250c:	230f      	movs	r3, #15
 800250e:	82fb      	strh	r3, [r7, #22]
   }

   //Return status
   return error;
 8002510:	8afb      	ldrh	r3, [r7, #22]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000044 	.word	0x20000044
 8002520:	08023bac 	.word	0x08023bac
 8002524:	08023bd4 	.word	0x08023bd4
 8002528:	08023b60 	.word	0x08023b60

0800252c <flashInit>:
* @brief Initialize Flash.
* @return Error code
**/

error_t flashInit(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
   error_t error;
   uint8_t fCurrentBankID;
	
   //Debug message
   TRACE_INFO("Initializing STM32F4xx flash driver...\r\n");
 8002532:	f7fe fdb2 	bl	800109a <osSuspendAllTasks>
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <flashInit+0x80>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2228      	movs	r2, #40	; 0x28
 800253e:	2101      	movs	r1, #1
 8002540:	481b      	ldr	r0, [pc, #108]	; (80025b0 <flashInit+0x84>)
 8002542:	f01a ff07 	bl	801d354 <fwrite>
 8002546:	f7fe fdb3 	bl	80010b0 <osResumeAllTasks>
   
   //Initialize FLASH flags 
   //(Patch to fix stm32 hal library wrong initial flash flags issue)
   FLASH_WaitForLastOperation((uint32_t)50000U);
 800254a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800254e:	f018 fd2b 	bl	801afa8 <FLASH_WaitForLastOperation>
   
   //Get current used flash bank
   error = flashGetCurrentBank(&fCurrentBankID);
 8002552:	1d7b      	adds	r3, r7, #5
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fa3f 	bl	80029d8 <flashGetCurrentBank>
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
   //Is any error?
   if (error)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <flashInit+0x3c>
	  return error;
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	e01c      	b.n	80025a2 <flashInit+0x76>
  
   //Debug message
   if(fCurrentBankID == FLASH_BANK_1_ID)
 8002568:	797b      	ldrb	r3, [r7, #5]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <flashInit+0x5c>
      TRACE_INFO("Running on flash bank 1...\r\n");
 800256e:	f7fe fd94 	bl	800109a <osSuspendAllTasks>
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <flashInit+0x80>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	221c      	movs	r2, #28
 800257a:	2101      	movs	r1, #1
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <flashInit+0x88>)
 800257e:	f01a fee9 	bl	801d354 <fwrite>
 8002582:	f7fe fd95 	bl	80010b0 <osResumeAllTasks>
 8002586:	e00b      	b.n	80025a0 <flashInit+0x74>
   else
      TRACE_INFO("Running on flash bank 2...\r\n");
 8002588:	f7fe fd87 	bl	800109a <osSuspendAllTasks>
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <flashInit+0x80>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	221c      	movs	r2, #28
 8002594:	2101      	movs	r1, #1
 8002596:	4808      	ldr	r0, [pc, #32]	; (80025b8 <flashInit+0x8c>)
 8002598:	f01a fedc 	bl	801d354 <fwrite>
 800259c:	f7fe fd88 	bl	80010b0 <osResumeAllTasks>
   
   //Successfull process
   return NO_ERROR;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000044 	.word	0x20000044
 80025b0:	08023f24 	.word	0x08023f24
 80025b4:	08023f50 	.word	0x08023f50
 80025b8:	08023f70 	.word	0x08023f70

080025bc <flashGetStartAddr>:
* @brief Get Flash start address.
* @return Error code
**/

error_t flashGetStartAddr(uint32_t *startAddr)
{  
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if(startAddr == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <flashGetStartAddr+0x12>
      return ERROR_INVALID_PARAMETER;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e004      	b.n	80025d8 <flashGetStartAddr+0x1c>
   
   //Set flash start address (always second bank)
   *startAddr = FLASH_BANK_2_ADDR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 80025d4:	601a      	str	r2, [r3, #0]
   
   //Successful process
   return NO_ERROR;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <flashGetBankSize>:
* @brief Get Flash bank size.
* @return Size of the flash bank
**/

size_t flashGetBankSize(void)
{     
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
   //Return flash bank size
   return flashDriver.banks[FLASH_BANK_1_ID].size;
 80025e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <flashWriteWord>:
* @param[in] word 32-bit Word to be written
* @return Error code
**/

error_t flashWriteWord(uint32_t address, uint32_t word)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint8_t fCurrentBankID;
   FlashBanks *banks;
   
   //Point to flash driver banks
   banks = (FlashBanks*)&flashDriver.banks;
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <flashWriteWord+0x1e4>)
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
   
   //Check address validty
   if(address < banks[FLASH_BANK_2_ID].addr || 
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	330c      	adds	r3, #12
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d30a      	bcc.n	8002628 <flashWriteWord+0x30>
      address > (banks[FLASH_BANK_2_ID].addr + 
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	330c      	adds	r3, #12
 8002616:	689a      	ldr	r2, [r3, #8]
      banks[FLASH_BANK_2_ID].size - sizeof(uint32_t)))
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	330c      	adds	r3, #12
 800261c:	685b      	ldr	r3, [r3, #4]
      address > (banks[FLASH_BANK_2_ID].addr + 
 800261e:	4413      	add	r3, r2
      banks[FLASH_BANK_2_ID].size - sizeof(uint32_t)))
 8002620:	3b04      	subs	r3, #4
   if(address < banks[FLASH_BANK_2_ID].addr || 
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d901      	bls.n	800262c <flashWriteWord+0x34>
      return ERROR_INVALID_PARAMETER;
 8002628:	2302      	movs	r3, #2
 800262a:	e0d2      	b.n	80027d2 <flashWriteWord+0x1da>
   
   //Retrieve current Flash sector
   sector = flashGetSector(address);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f9a1 	bl	8002974 <flashGetSector>
 8002632:	6378      	str	r0, [r7, #52]	; 0x34

   //Check whether the address match the beginning of a Flash sector.
   //If this is the case then the flash sector must be erased before any write operation
   if(sector >= 0)
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	2b00      	cmp	r3, #0
 8002638:	db7a      	blt.n	8002730 <flashWriteWord+0x138>
   {
      //Get current used flash bank
      error = flashGetCurrentBank(&fCurrentBankID);
 800263a:	f107 030f 	add.w	r3, r7, #15
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f9ca 	bl	80029d8 <flashGetCurrentBank>
 8002644:	4603      	mov	r3, r0
 8002646:	857b      	strh	r3, [r7, #42]	; 0x2a
      //Is any error?
      if (error)
 8002648:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <flashWriteWord+0x5a>
         return error;
 800264e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002650:	e0bf      	b.n	80027d2 <flashWriteWord+0x1da>

      //Running in flash bank2?
      if(fCurrentBankID == FLASH_BANK_2_ID)   
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d109      	bne.n	800266c <flashWriteWord+0x74>
      {
         if(sector < FLASH_SECTOR_12)
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	2b0b      	cmp	r3, #11
 800265c:	d803      	bhi.n	8002666 <flashWriteWord+0x6e>
            sector += 12;
 800265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002660:	330c      	adds	r3, #12
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
 8002664:	e002      	b.n	800266c <flashWriteWord+0x74>
         else
            sector -= 12;
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	3b0c      	subs	r3, #12
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
      
      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 800266c:	f018 fc2a 	bl	801aec4 <HAL_FLASH_Unlock>
 8002670:	4603      	mov	r3, r0
 8002672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         //Is any error?
         if (status != HAL_OK)
 8002676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <flashWriteWord+0xa0>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800267e:	f7fe fd0c 	bl	800109a <osSuspendAllTasks>
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <flashWriteWord+0x1e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2227      	movs	r2, #39	; 0x27
 800268a:	2101      	movs	r1, #1
 800268c:	4855      	ldr	r0, [pc, #340]	; (80027e4 <flashWriteWord+0x1ec>)
 800268e:	f01a fe61 	bl	801d354 <fwrite>
 8002692:	f7fe fd0d 	bl	80010b0 <osResumeAllTasks>
            break;
 8002696:	e04e      	b.n	8002736 <flashWriteWord+0x13e>
         }
         
         //Initialize FLASH flags
         status = FLASH_WaitForLastOperation((uint32_t)50000U);
 8002698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800269c:	f018 fc84 	bl	801afa8 <FLASH_WaitForLastOperation>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         //Is any error?
         if(status != HAL_OK)
 80026a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <flashWriteWord+0xce>
         {
            //Debug message
            TRACE_ERROR("Initialize FLASH flags...\r\n");
 80026ae:	f7fe fcf4 	bl	800109a <osSuspendAllTasks>
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <flashWriteWord+0x1e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	221b      	movs	r2, #27
 80026ba:	2101      	movs	r1, #1
 80026bc:	484a      	ldr	r0, [pc, #296]	; (80027e8 <flashWriteWord+0x1f0>)
 80026be:	f01a fe49 	bl	801d354 <fwrite>
 80026c2:	f7fe fcf5 	bl	80010b0 <osResumeAllTasks>
         }
         
         //Set flash erase parameters
         EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
         EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
         EraseInitStruct.Sector = sector;
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	61bb      	str	r3, [r7, #24]
         EraseInitStruct.NbSectors = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
         
         //Erase the specified Flash sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 80026d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f018 fda1 	bl	801b228 <HAL_FLASHEx_Erase>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         //Is any error?
         if(status != HAL_OK)
 80026ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <flashWriteWord+0x114>
         {
            //Debug message
            TRACE_ERROR("Failed to erase flash sector %d, error = 0x%08X!\r\n", sector, sectorError);
 80026f4:	f7fe fcd1 	bl	800109a <osSuspendAllTasks>
 80026f8:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <flashWriteWord+0x1e8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68d8      	ldr	r0, [r3, #12]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002702:	493a      	ldr	r1, [pc, #232]	; (80027ec <flashWriteWord+0x1f4>)
 8002704:	f01a fc3e 	bl	801cf84 <fprintf>
 8002708:	f7fe fcd2 	bl	80010b0 <osResumeAllTasks>
         }
         
         //Disable the Flash option control register access (recommended to protect 
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 800270c:	f018 fbfc 	bl	801af08 <HAL_FLASH_Lock>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <flashWriteWord+0x13e>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002716:	f7fe fcc0 	bl	800109a <osSuspendAllTasks>
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <flashWriteWord+0x1e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2225      	movs	r2, #37	; 0x25
 8002722:	2101      	movs	r1, #1
 8002724:	4832      	ldr	r0, [pc, #200]	; (80027f0 <flashWriteWord+0x1f8>)
 8002726:	f01a fe15 	bl	801d354 <fwrite>
 800272a:	f7fe fcc1 	bl	80010b0 <osResumeAllTasks>
 800272e:	e002      	b.n	8002736 <flashWriteWord+0x13e>
      }while(0);
   }
   else
   {
      //Erase is not needed
      status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   }

   //Check status code
   if(status == HAL_OK)
 8002736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800273a:	2b00      	cmp	r3, #0
 800273c:	d141      	bne.n	80027c2 <flashWriteWord+0x1ca>
   {
      //Start of exception handling block
      do
      {
         //Allow access to Flash control registers and user False
         status = HAL_FLASH_Unlock();
 800273e:	f018 fbc1 	bl	801aec4 <HAL_FLASH_Unlock>
 8002742:	4603      	mov	r3, r0
 8002744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         //Is any error?
         if (status != HAL_OK)
 8002748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <flashWriteWord+0x172>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 8002750:	f7fe fca3 	bl	800109a <osSuspendAllTasks>
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <flashWriteWord+0x1e8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2227      	movs	r2, #39	; 0x27
 800275c:	2101      	movs	r1, #1
 800275e:	4821      	ldr	r0, [pc, #132]	; (80027e4 <flashWriteWord+0x1ec>)
 8002760:	f01a fdf8 	bl	801d354 <fwrite>
 8002764:	f7fe fca4 	bl	80010b0 <osResumeAllTasks>
            break;
 8002768:	e02b      	b.n	80027c2 <flashWriteWord+0x1ca>
         }
         
         //Program the 32-bit word to Flash memory
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, word);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	2002      	movs	r0, #2
 8002776:	f018 fb51 	bl	801ae1c <HAL_FLASH_Program>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         //Is any error?
         if(status != HAL_OK)
 8002780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <flashWriteWord+0x1a8>
         {
            //Debug message
            TRACE_ERROR("Failed to write word \"0x%08X\" at 0x%08X!\r\n", word, address);
 8002788:	f7fe fc87 	bl	800109a <osSuspendAllTasks>
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <flashWriteWord+0x1e8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68d8      	ldr	r0, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4917      	ldr	r1, [pc, #92]	; (80027f4 <flashWriteWord+0x1fc>)
 8002798:	f01a fbf4 	bl	801cf84 <fprintf>
 800279c:	f7fe fc88 	bl	80010b0 <osResumeAllTasks>
         }
         
         //Disable the Flash option control register access (recommended to protect 
         //the option Bytes against possible unwanted operations)
         if(HAL_FLASH_Lock() != HAL_OK)
 80027a0:	f018 fbb2 	bl	801af08 <HAL_FLASH_Lock>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <flashWriteWord+0x1ca>
         {
            //Debug message
            TRACE_ERROR("Flash Control Register lock failed!\r\n");
 80027aa:	f7fe fc76 	bl	800109a <osSuspendAllTasks>
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <flashWriteWord+0x1e8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2225      	movs	r2, #37	; 0x25
 80027b6:	2101      	movs	r1, #1
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <flashWriteWord+0x1f8>)
 80027ba:	f01a fdcb 	bl	801d354 <fwrite>
 80027be:	f7fe fc77 	bl	80010b0 <osResumeAllTasks>
         }
      }while(0);
   }

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 80027c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <flashWriteWord+0x1d6>
 80027ca:	2300      	movs	r3, #0
 80027cc:	e001      	b.n	80027d2 <flashWriteWord+0x1da>
 80027ce:	f240 2309 	movw	r3, #521	; 0x209
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3738      	adds	r7, #56	; 0x38
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	08023c0c 	.word	0x08023c0c
 80027e0:	20000044 	.word	0x20000044
 80027e4:	08023f90 	.word	0x08023f90
 80027e8:	08023fb8 	.word	0x08023fb8
 80027ec:	08023fd4 	.word	0x08023fd4
 80027f0:	08024008 	.word	0x08024008
 80027f4:	08024030 	.word	0x08024030

080027f8 <flashSwapBank>:
 * If current flash bank ID match the 2nd bank then it will swap on the 1st flash bank.
 * @return Error code
 **/

error_t flashSwapBank(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
   HAL_StatusTypeDef status;
   uint8_t fCurrentBankID;
   FLASH_AdvOBProgramInitTypeDef AdvOBInit;

   //Debug message
   TRACE_INFO("Swaping device flash bank...\r\n");
 80027fe:	f7fe fc4c 	bl	800109a <osSuspendAllTasks>
 8002802:	4b51      	ldr	r3, [pc, #324]	; (8002948 <flashSwapBank+0x150>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	221e      	movs	r2, #30
 800280a:	2101      	movs	r1, #1
 800280c:	484f      	ldr	r0, [pc, #316]	; (800294c <flashSwapBank+0x154>)
 800280e:	f01a fda1 	bl	801d354 <fwrite>
 8002812:	f7fe fc4d 	bl	80010b0 <osResumeAllTasks>
   
   //Get current flash bank ID
   error = flashGetCurrentBank(&fCurrentBankID);
 8002816:	f107 031b 	add.w	r3, r7, #27
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8dc 	bl	80029d8 <flashGetCurrentBank>
 8002820:	4603      	mov	r3, r0
 8002822:	83bb      	strh	r3, [r7, #28]
   //Is any error?
   if(error)
 8002824:	8bbb      	ldrh	r3, [r7, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <flashSwapBank+0x36>
      return error;
 800282a:	8bbb      	ldrh	r3, [r7, #28]
 800282c:	e087      	b.n	800293e <flashSwapBank+0x146>
   
   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 800282e:	f018 fb49 	bl	801aec4 <HAL_FLASH_Unlock>
 8002832:	4603      	mov	r3, r0
 8002834:	77fb      	strb	r3, [r7, #31]
      //Is any error?
      if (status != HAL_OK)
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <flashSwapBank+0x5e>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800283c:	f7fe fc2d 	bl	800109a <osSuspendAllTasks>
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <flashSwapBank+0x150>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2227      	movs	r2, #39	; 0x27
 8002848:	2101      	movs	r1, #1
 800284a:	4841      	ldr	r0, [pc, #260]	; (8002950 <flashSwapBank+0x158>)
 800284c:	f01a fd82 	bl	801d354 <fwrite>
 8002850:	f7fe fc2e 	bl	80010b0 <osResumeAllTasks>
         break;
 8002854:	e06c      	b.n	8002930 <flashSwapBank+0x138>
      
      //Start of exception handling block
      do
      {
         //Allow Access to option bytes sector
         status = HAL_FLASH_OB_Unlock();
 8002856:	f018 fb67 	bl	801af28 <HAL_FLASH_OB_Unlock>
 800285a:	4603      	mov	r3, r0
 800285c:	77fb      	strb	r3, [r7, #31]
         //Is any error?
         if (status != HAL_OK)
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <flashSwapBank+0x86>
         {
            //Debug message
            TRACE_ERROR("Flash Option Control Registers unlock failed!\r\n");
 8002864:	f7fe fc19 	bl	800109a <osSuspendAllTasks>
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <flashSwapBank+0x150>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	222f      	movs	r2, #47	; 0x2f
 8002870:	2101      	movs	r1, #1
 8002872:	4838      	ldr	r0, [pc, #224]	; (8002954 <flashSwapBank+0x15c>)
 8002874:	f01a fd6e 	bl	801d354 <fwrite>
 8002878:	f7fe fc1a 	bl	80010b0 <osResumeAllTasks>
            break;
 800287c:	e047      	b.n	800290e <flashSwapBank+0x116>
         }
         
         //Get the Dual boot configuration status
         AdvOBInit.OptionType = OPTIONBYTE_BOOTCONFIG;
 800287e:	2302      	movs	r3, #2
 8002880:	607b      	str	r3, [r7, #4]
         HAL_FLASHEx_AdvOBGetConfig(&AdvOBInit);
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4618      	mov	r0, r3
 8002886:	f018 fd7f 	bl	801b388 <HAL_FLASHEx_AdvOBGetConfig>
         
         //Swap in flash bank 2
         if(fCurrentBankID == FLASH_BANK_1_ID)
 800288a:	7efb      	ldrb	r3, [r7, #27]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <flashSwapBank+0x9e>
         {
            //Debug message
            TRACE_DEBUG("Swaping from flask bank 1 to flash bank 2...\r\n");
            
            //Configure option bytes to swap on flash bank 2
            AdvOBInit.BootConfig = OB_DUAL_BOOT_ENABLE;  
 8002890:	2310      	movs	r3, #16
 8002892:	753b      	strb	r3, [r7, #20]
 8002894:	e001      	b.n	800289a <flashSwapBank+0xa2>
         {
            //Debug message
            TRACE_DEBUG("Swaping from flask bank 2 to flash bank 1...\r\n");
            
            //Configure option bytes to swap on flash bank 1
            AdvOBInit.BootConfig = OB_DUAL_BOOT_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	753b      	strb	r3, [r7, #20]
         
         //Start of exception handling block
         do
         {  
            //Start Advanced Option Bytes Programming
            status = HAL_FLASHEx_AdvOBProgram (&AdvOBInit);
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4618      	mov	r0, r3
 800289e:	f018 fd35 	bl	801b30c <HAL_FLASHEx_AdvOBProgram>
 80028a2:	4603      	mov	r3, r0
 80028a4:	77fb      	strb	r3, [r7, #31]
            //Is any error?
            if (status != HAL_OK)
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <flashSwapBank+0xce>
            {
               //Debug message
               TRACE_ERROR("Advanced Option byte programming failed!\r\n");
 80028ac:	f7fe fbf5 	bl	800109a <osSuspendAllTasks>
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <flashSwapBank+0x150>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	222a      	movs	r2, #42	; 0x2a
 80028b8:	2101      	movs	r1, #1
 80028ba:	4827      	ldr	r0, [pc, #156]	; (8002958 <flashSwapBank+0x160>)
 80028bc:	f01a fd4a 	bl	801d354 <fwrite>
 80028c0:	f7fe fbf6 	bl	80010b0 <osResumeAllTasks>
               break;
 80028c4:	e012      	b.n	80028ec <flashSwapBank+0xf4>
            }
            
            //Launch the option byte loading
            status = HAL_FLASH_OB_Launch();
 80028c6:	f018 fb5b 	bl	801af80 <HAL_FLASH_OB_Launch>
 80028ca:	4603      	mov	r3, r0
 80028cc:	77fb      	strb	r3, [r7, #31]
            //Is any error?
            if (status != HAL_OK)
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <flashSwapBank+0xf4>
            {
               //Debug message
               TRACE_ERROR("Option byte loading failed!\r\n");
 80028d4:	f7fe fbe1 	bl	800109a <osSuspendAllTasks>
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <flashSwapBank+0x150>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	221d      	movs	r2, #29
 80028e0:	2101      	movs	r1, #1
 80028e2:	481e      	ldr	r0, [pc, #120]	; (800295c <flashSwapBank+0x164>)
 80028e4:	f01a fd36 	bl	801d354 <fwrite>
 80028e8:	f7fe fbe2 	bl	80010b0 <osResumeAllTasks>
            }
         }while(0);
         
         //Prevent Access to option bytes sector
         if(HAL_FLASH_OB_Lock() != HAL_OK)
 80028ec:	f018 fb38 	bl	801af60 <HAL_FLASH_OB_Lock>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <flashSwapBank+0x116>
         {
            //Debug message
            TRACE_ERROR("Flash Option Control Register lock failed!\r\n");
 80028f6:	f7fe fbd0 	bl	800109a <osSuspendAllTasks>
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <flashSwapBank+0x150>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	222c      	movs	r2, #44	; 0x2c
 8002902:	2101      	movs	r1, #1
 8002904:	4816      	ldr	r0, [pc, #88]	; (8002960 <flashSwapBank+0x168>)
 8002906:	f01a fd25 	bl	801d354 <fwrite>
 800290a:	f7fe fbd1 	bl	80010b0 <osResumeAllTasks>
         }
      }while(0);
      
      //Disable the Flash option control register access (recommended to protect 
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 800290e:	f018 fafb 	bl	801af08 <HAL_FLASH_Lock>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <flashSwapBank+0x138>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002918:	f7fe fbbf 	bl	800109a <osSuspendAllTasks>
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <flashSwapBank+0x150>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2225      	movs	r2, #37	; 0x25
 8002924:	2101      	movs	r1, #1
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <flashSwapBank+0x16c>)
 8002928:	f01a fd14 	bl	801d354 <fwrite>
 800292c:	f7fe fbc0 	bl	80010b0 <osResumeAllTasks>
      } 
   }while(0);
   
   //Return status code
   return (status == HAL_OK)? NO_ERROR : ERROR_FAILURE;
 8002930:	7ffb      	ldrb	r3, [r7, #31]
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	b29b      	uxth	r3, r3
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000044 	.word	0x20000044
 800294c:	0802405c 	.word	0x0802405c
 8002950:	08023f90 	.word	0x08023f90
 8002954:	0802407c 	.word	0x0802407c
 8002958:	080240ac 	.word	0x080240ac
 800295c:	080240d8 	.word	0x080240d8
 8002960:	080240f8 	.word	0x080240f8
 8002964:	08024008 	.word	0x08024008

08002968 <systemReset>:
/**
 * @brief Initiates a system reset request to reset the MCU.
 **/

void systemReset(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
   //Initiates a system reset request to reset the MCU
   HAL_NVIC_SystemReset();
 800296c:	f018 fa45 	bl	801adfa <HAL_NVIC_SystemReset>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <flashGetSector>:
 * @param[in] address 32-bit address
 * @return Flash sector
 **/

int32_t flashGetSector(uint32_t address)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
   int32_t sectorID;
   uint_t i;
   FlashSectors *sectors;
   
   //Initialize sector ID
   sectorID = -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	617b      	str	r3, [r7, #20]
   
   //Point to flash driver sectors
   sectors = (FlashSectors*)&flashDriver.sectors;
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <flashGetSector+0x60>)
 8002984:	60fb      	str	r3, [r7, #12]
   
   //Loop through flash driver sectors list
   for(i = 0; i < FLASH_SECTORS_NUMBER; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e019      	b.n	80029c0 <flashGetSector+0x4c>
   {
      //Is address match the start address of a sector?
      if(address == sectors[i].addr)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10a      	bne.n	80029ba <flashGetSector+0x46>
      {
         //Save sector ID
         sectorID = sectors[i].id;
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	617b      	str	r3, [r7, #20]
         break;
 80029b8:	e005      	b.n	80029c6 <flashGetSector+0x52>
   for(i = 0; i < FLASH_SECTORS_NUMBER; i++)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3301      	adds	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b17      	cmp	r3, #23
 80029c4:	d9e2      	bls.n	800298c <flashGetSector+0x18>
      }
   }
      
   //Return sector ID
   return sectorID;
 80029c6:	697b      	ldr	r3, [r7, #20]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	08023c24 	.word	0x08023c24

080029d8 <flashGetCurrentBank>:
 * @param[out] fBankID Pointeur to the flash bank ID to be retrieved
 * @return Status code
 **/

error_t flashGetCurrentBank(uint8_t *fBankID)
{   
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
   //FLASH_OBProgramInitTypeDef OBInit;
   FLASH_AdvOBProgramInitTypeDef AdvOBInit;
   HAL_StatusTypeDef status;

   //Check parameters validity
   if(fBankID == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <flashGetCurrentBank+0x12>
      return ERROR_INVALID_PARAMETER;
 80029e6:	2302      	movs	r3, #2
 80029e8:	e063      	b.n	8002ab2 <flashGetCurrentBank+0xda>

      //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 80029ea:	f018 fa6b 	bl	801aec4 <HAL_FLASH_Unlock>
 80029ee:	4603      	mov	r3, r0
 80029f0:	77fb      	strb	r3, [r7, #31]
      //Is any error?
      if (status != HAL_OK)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <flashGetCurrentBank+0x3a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 80029f8:	f7fe fb4f 	bl	800109a <osSuspendAllTasks>
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <flashGetCurrentBank+0xe4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2227      	movs	r2, #39	; 0x27
 8002a04:	2101      	movs	r1, #1
 8002a06:	482e      	ldr	r0, [pc, #184]	; (8002ac0 <flashGetCurrentBank+0xe8>)
 8002a08:	f01a fca4 	bl	801d354 <fwrite>
 8002a0c:	f7fe fb50 	bl	80010b0 <osResumeAllTasks>
         break;
 8002a10:	e048      	b.n	8002aa4 <flashGetCurrentBank+0xcc>
      
      //Start of exception handling block
      do
      {
         //Allow Access to option bytes sector
         status = HAL_FLASH_OB_Unlock();
 8002a12:	f018 fa89 	bl	801af28 <HAL_FLASH_OB_Unlock>
 8002a16:	4603      	mov	r3, r0
 8002a18:	77fb      	strb	r3, [r7, #31]
         //Is any error?
         if (status != HAL_OK)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00c      	beq.n	8002a3a <flashGetCurrentBank+0x62>
         {
            //Debug message
            TRACE_ERROR("Flash Option Control Registers unlock failed!\r\n");
 8002a20:	f7fe fb3b 	bl	800109a <osSuspendAllTasks>
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <flashGetCurrentBank+0xe4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	222f      	movs	r2, #47	; 0x2f
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4825      	ldr	r0, [pc, #148]	; (8002ac4 <flashGetCurrentBank+0xec>)
 8002a30:	f01a fc90 	bl	801d354 <fwrite>
 8002a34:	f7fe fb3c 	bl	80010b0 <osResumeAllTasks>
            break;
 8002a38:	e023      	b.n	8002a82 <flashGetCurrentBank+0xaa>
         }
         
         //Get the Dual boot configuration status
         AdvOBInit.OptionType = OPTIONBYTE_BOOTCONFIG;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	60bb      	str	r3, [r7, #8]
         HAL_FLASHEx_AdvOBGetConfig(&AdvOBInit);
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f018 fca0 	bl	801b388 <HAL_FLASHEx_AdvOBGetConfig>
         
         //Running in flash bank 2
         if(((AdvOBInit.BootConfig) & (FLASH_OPTCR_BFB2)) == FLASH_OPTCR_BFB2)
 8002a48:	7e3b      	ldrb	r3, [r7, #24]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <flashGetCurrentBank+0x82>
         {
            *fBankID = FLASH_BANK_2_ID; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e002      	b.n	8002a60 <flashGetCurrentBank+0x88>
         }
         //Running in flash bank 1
         else
         {
            *fBankID = FLASH_BANK_1_ID;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
         }
         
         //Prevent Access to option bytes sector
         if(HAL_FLASH_OB_Lock() != HAL_OK)
 8002a60:	f018 fa7e 	bl	801af60 <HAL_FLASH_OB_Lock>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <flashGetCurrentBank+0xaa>
         {
            //Debug message
            TRACE_ERROR("Flash Option Control Register lock failed!\r\n");
 8002a6a:	f7fe fb16 	bl	800109a <osSuspendAllTasks>
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <flashGetCurrentBank+0xe4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	222c      	movs	r2, #44	; 0x2c
 8002a76:	2101      	movs	r1, #1
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <flashGetCurrentBank+0xf0>)
 8002a7a:	f01a fc6b 	bl	801d354 <fwrite>
 8002a7e:	f7fe fb17 	bl	80010b0 <osResumeAllTasks>
         }
      }while(0);
      
      //Disable the Flash option control register access (recommended to protect 
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 8002a82:	f018 fa41 	bl	801af08 <HAL_FLASH_Lock>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <flashGetCurrentBank+0xcc>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 8002a8c:	f7fe fb05 	bl	800109a <osSuspendAllTasks>
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <flashGetCurrentBank+0xe4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2225      	movs	r2, #37	; 0x25
 8002a98:	2101      	movs	r1, #1
 8002a9a:	480c      	ldr	r0, [pc, #48]	; (8002acc <flashGetCurrentBank+0xf4>)
 8002a9c:	f01a fc5a 	bl	801d354 <fwrite>
 8002aa0:	f7fe fb06 	bl	80010b0 <osResumeAllTasks>
      } 
   }while(0);
   
   //Return status code
   return (status == HAL_OK)? NO_ERROR: ERROR_FAILURE;
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	b29b      	uxth	r3, r3
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000044 	.word	0x20000044
 8002ac0:	08023f90 	.word	0x08023f90
 8002ac4:	0802407c 	.word	0x0802407c
 8002ac8:	080240f8 	.word	0x080240f8
 8002acc:	08024008 	.word	0x08024008

08002ad0 <arpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t arpInit(NetInterface *interface)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
   //Initialize the ARP cache
   osMemset(interface->arpCache, 0, sizeof(interface->arpCache));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002ade:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f01a fef3 	bl	801d8d0 <memset>

   //Successful initialization
   return NO_ERROR;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <arpFlushCache>:
 * @brief Flush ARP cache
 * @param[in] interface Underlying network interface
 **/

void arpFlushCache(NetInterface *interface)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e013      	b.n	8002b2a <arpFlushCache+0x36>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	015b      	lsls	r3, r3, #5
 8002b0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	60bb      	str	r3, [r7, #8]

      //Drop packets that are waiting for address resolution
      arpFlushQueuedPackets(interface, entry);
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f8c4 	bl	8002ca6 <arpFlushQueuedPackets>
      //Release ARP entry
      entry->state = ARP_STATE_NONE;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	d9e8      	bls.n	8002b02 <arpFlushCache+0xe>
   }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <arpCreateEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

ArpCacheEntry *arpCreateEntry(NetInterface *interface)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   systime_t time;
   ArpCacheEntry *entry;
   ArpCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 8002b42:	f7fe fbad 	bl	80012a0 <osGetSystemTime>
 8002b46:	60f8      	str	r0, [r7, #12]

   //Keep track of the oldest entry
   oldestEntry = &interface->arpCache[0];
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002b4e:	613b      	str	r3, [r7, #16]

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e023      	b.n	8002b9e <arpCreateEntry+0x64>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	015b      	lsls	r3, r3, #5
 8002b60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use or not
      if(entry->state == ARP_STATE_NONE)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <arpCreateEntry+0x46>
      {
         //Erase contents
         osMemset(entry, 0, sizeof(ArpCacheEntry));
 8002b72:	2260      	movs	r2, #96	; 0x60
 8002b74:	2100      	movs	r1, #0
 8002b76:	68b8      	ldr	r0, [r7, #8]
 8002b78:	f01a feaa 	bl	801d8d0 <memset>
         //Return a pointer to the ARP entry
         return entry;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	e01b      	b.n	8002bb8 <arpCreateEntry+0x7e>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	1acb      	subs	r3, r1, r3
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d901      	bls.n	8002b98 <arpCreateEntry+0x5e>
      {
         oldestEntry = entry;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	613b      	str	r3, [r7, #16]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b07      	cmp	r3, #7
 8002ba2:	d9d8      	bls.n	8002b56 <arpCreateEntry+0x1c>
      }
   }

   //Drop any pending packets
   arpFlushQueuedPackets(interface, oldestEntry);
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f87d 	bl	8002ca6 <arpFlushQueuedPackets>
   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(ArpCacheEntry));
 8002bac:	2260      	movs	r2, #96	; 0x60
 8002bae:	2100      	movs	r1, #0
 8002bb0:	6938      	ldr	r0, [r7, #16]
 8002bb2:	f01a fe8d 	bl	801d8d0 <memset>
   //Return a pointer to the ARP entry
   return oldestEntry;
 8002bb6:	693b      	ldr	r3, [r7, #16]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <arpFindEntry>:
 * @return A pointer to the matching ARP entry is returned. NULL is returned
 *   if the specified IPv4 address could not be found in ARP cache
 **/

ArpCacheEntry *arpFindEntry(NetInterface *interface, Ipv4Addr ipAddr)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e017      	b.n	8002c00 <arpFindEntry+0x40>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != ARP_STATE_NONE)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <arpFindEntry+0x3a>
      {
         //Current entry matches the specified address?
         if(entry->ipAddr == ipAddr)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d101      	bne.n	8002bfa <arpFindEntry+0x3a>
            return entry;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	e006      	b.n	8002c08 <arpFindEntry+0x48>
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b07      	cmp	r3, #7
 8002c04:	d9e4      	bls.n	8002bd0 <arpFindEntry+0x10>
      }
   }

   //No matching entry in ARP cache...
   return NULL;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <arpSendQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpSendQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t length;
   ArpQueueItem *item;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d138      	bne.n	8002c98 <arpSendQueuedPackets+0x84>
   {
      //Loop through the queued packets
      for(i = 0; i < entry->queueSize; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e030      	b.n	8002c8e <arpSendQueuedPackets+0x7a>
      {
         //Point to the current queue item
         item = &entry->queue[i];
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015b      	lsls	r3, r3, #5
 8002c30:	3318      	adds	r3, #24
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	613b      	str	r3, [r7, #16]

         //Retrieve the length of the IPv4 packet
         length = netBufferGetLength(item->buffer) - item->offset;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f00d fe9d 	bl	801097e <netBufferGetLength>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	60fb      	str	r3, [r7, #12]
         //Update IP statistics
         ipv4UpdateOutStats(interface, entry->ipAddr, length);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f007 fa9e 	bl	800a198 <ipv4UpdateOutStats>

         //Send the IPv4 packet
         ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV4, item->buffer,
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f103 0108 	add.w	r1, r3, #8
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4603      	mov	r3, r0
 8002c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f002 fe07 	bl	800588c <ethSendFrame>
            item->offset, &item->ancillary);

         //Release memory buffer
         netBufferFree(item->buffer);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f00d fe6c 	bl	8010960 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3c9      	bcc.n	8002c2c <arpSendQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <arpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpFlushQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d113      	bne.n	8002ce0 <arpFlushQueuedPackets+0x3a>
   {
      //Drop packets that are waiting for address resolution
      for(i = 0; i < entry->queueSize; i++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e00b      	b.n	8002cd6 <arpFlushQueuedPackets+0x30>
      {
         //Release memory buffer
         netBufferFree(entry->queue[i].buffer);
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015b      	lsls	r3, r3, #5
 8002cc4:	4413      	add	r3, r2
 8002cc6:	331c      	adds	r3, #28
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f00d fe48 	bl	8010960 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3ee      	bcc.n	8002cbe <arpFlushQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <arpResolve>:
 * @param[in] macAddr Physical address matching the specified IPv4 address
 * @return Error code
 **/

error_t arpResolve(NetInterface *interface, Ipv4Addr ipAddr, MacAddr *macAddr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
   error_t error;
   ArpCacheEntry *entry;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff5e 	bl	8002bc0 <arpFindEntry>
 8002d04:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry has been found
   if(entry != NULL)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02b      	beq.n	8002d64 <arpResolve+0x74>
   {
      //Check the state of the ARP entry
      if(entry->state == ARP_STATE_INCOMPLETE)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d103      	bne.n	8002d1c <arpResolve+0x2c>
      {
         //The address resolution is already in progress
         error = ERROR_IN_PROGRESS;
 8002d14:	f240 2303 	movw	r3, #515	; 0x203
 8002d18:	82fb      	strh	r3, [r7, #22]
 8002d1a:	e04c      	b.n	8002db6 <arpResolve+0xc6>
      }
      else if(entry->state == ARP_STATE_STALE)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d115      	bne.n	8002d50 <arpResolve+0x60>
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	6010      	str	r0, [r2, #0]
 8002d2e:	889b      	ldrh	r3, [r3, #4]
 8002d30:	8093      	strh	r3, [r2, #4]

         //Start delay timer
         entry->timestamp = osGetSystemTime();
 8002d32:	f7fe fab5 	bl	80012a0 <osGetSystemTime>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	611a      	str	r2, [r3, #16]
         //Delay before sending the first probe
         entry->timeout = ARP_DELAY_FIRST_PROBE_TIME;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	615a      	str	r2, [r3, #20]
         //Switch to the DELAY state
         entry->state = ARP_STATE_DELAY;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2204      	movs	r2, #4
 8002d48:	701a      	strb	r2, [r3, #0]

         //Successful address resolution
         error = NO_ERROR;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	82fb      	strh	r3, [r7, #22]
 8002d4e:	e032      	b.n	8002db6 <arpResolve+0xc6>
      }
      else
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3308      	adds	r3, #8
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	6010      	str	r0, [r2, #0]
 8002d5a:	889b      	ldrh	r3, [r3, #4]
 8002d5c:	8093      	strh	r3, [r2, #4]

         //Successful address resolution
         error = NO_ERROR;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	82fb      	strh	r3, [r7, #22]
 8002d62:	e028      	b.n	8002db6 <arpResolve+0xc6>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = arpCreateEntry(interface);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fee8 	bl	8002b3a <arpCreateEntry>
 8002d6a:	6138      	str	r0, [r7, #16]

      //ARP cache entry successfully created?
      if(entry != NULL)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01f      	beq.n	8002db2 <arpResolve+0xc2>
      {
         //Record the IPv4 address whose MAC address is unknown
         entry->ipAddr = ipAddr;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	605a      	str	r2, [r3, #4]

         //Reset retransmission counter
         entry->retransmitCount = 0;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
         //No packet are pending in the transmit queue
         entry->queueSize = 0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2200      	movs	r2, #0
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c

         //Send an ARP request
         arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <arpResolve+0xd0>)
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fb71 	bl	8003474 <arpSendRequest>

         //Save the time at which the packet was sent
         entry->timestamp = osGetSystemTime();
 8002d92:	f7fe fa85 	bl	80012a0 <osGetSystemTime>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	611a      	str	r2, [r3, #16]
         //Set timeout value
         entry->timeout = ARP_REQUEST_TIMEOUT;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002da2:	615a      	str	r2, [r3, #20]
         //Enter INCOMPLETE state
         entry->state = ARP_STATE_INCOMPLETE;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]

         //The address resolution is in progress
         error = ERROR_IN_PROGRESS;
 8002daa:	f240 2303 	movw	r3, #515	; 0x203
 8002dae:	82fb      	strh	r3, [r7, #22]
 8002db0:	e001      	b.n	8002db6 <arpResolve+0xc6>
      }
      else
      {
         //Failed to create ARP cache entry...
         error = ERROR_OUT_OF_RESOURCES;
 8002db2:	2365      	movs	r3, #101	; 0x65
 8002db4:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8002db6:	8afb      	ldrh	r3, [r7, #22]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	080243cc 	.word	0x080243cc

08002dc4 <arpEnqueuePacket>:
 * @return Error code
 **/

error_t arpEnqueuePacket(NetInterface *interface, Ipv4Addr ipAddr,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
   uint_t i;
   size_t length;
   ArpCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f00d fdd3 	bl	801097e <netBufferGetLength>
 8002dd8:	6178      	str	r0, [r7, #20]

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff feef 	bl	8002bc0 <arpFindEntry>
 8002de2:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry exists
   if(entry != NULL)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d073      	beq.n	8002ed2 <arpEnqueuePacket+0x10e>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d16c      	bne.n	8002ecc <arpEnqueuePacket+0x108>
      {
         //Check whether the packet queue is full
         if(entry->queueSize >= ARP_MAX_PENDING_PACKETS)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d926      	bls.n	8002e48 <arpEnqueuePacket+0x84>
         {
            //When the queue overflows, the new arrival should replace the oldest entry
            netBufferFree(entry->queue[0].buffer);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f00d fdae 	bl	8010960 <netBufferFree>

            //Make room for the new packet
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8002e04:	2301      	movs	r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e016      	b.n	8002e38 <arpEnqueuePacket+0x74>
            {
               entry->queue[i - 1] = entry->queue[i];
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	4413      	add	r3, r2
 8002e14:	f103 0218 	add.w	r2, r3, #24
 8002e18:	6939      	ldr	r1, [r7, #16]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	015b      	lsls	r3, r3, #5
 8002e1e:	440b      	add	r3, r1
 8002e20:	3318      	adds	r3, #24
 8002e22:	1d14      	adds	r4, r2, #4
 8002e24:	1d1d      	adds	r5, r3, #4
 8002e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d9e5      	bls.n	8002e0a <arpEnqueuePacket+0x46>
            }

            //Adjust the number of pending packets
            entry->queueSize--;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	65da      	str	r2, [r3, #92]	; 0x5c
         }

         //Index of the entry to be filled in
         i = entry->queueSize;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	61bb      	str	r3, [r7, #24]
         //Allocate a memory buffer to store the packet
         entry->queue[i].buffer = netBufferAlloc(length);
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f00d fd53 	bl	80108fa <netBufferAlloc>
 8002e54:	4601      	mov	r1, r0
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	4413      	add	r3, r2
 8002e5e:	331c      	adds	r3, #28
 8002e60:	6019      	str	r1, [r3, #0]

         //Successful memory allocation?
         if(entry->queue[i].buffer != NULL)
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	4413      	add	r3, r2
 8002e6a:	331c      	adds	r3, #28
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d029      	beq.n	8002ec6 <arpEnqueuePacket+0x102>
         {
            //Copy the contents of the IPv4 packet
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	4413      	add	r3, r2
 8002e7a:	331c      	adds	r3, #28
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	2100      	movs	r1, #0
 8002e88:	f00d ff0f 	bl	8010caa <netBufferCopy>
            //Offset to the first byte of the IPv4 header
            entry->queue[i].offset = offset;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	4413      	add	r3, r2
 8002e94:	3320      	adds	r3, #32
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
            //Additional options passed to the stack along with the packet
            entry->queue[i].ancillary = *ancillary;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	015b      	lsls	r3, r3, #5
 8002ea2:	4413      	add	r3, r2
 8002ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea6:	1d1c      	adds	r4, r3, #4
 8002ea8:	4615      	mov	r5, r2
 8002eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002eb2:	e884 0003 	stmia.w	r4, {r0, r1}

            //Increment the number of queued packets
            entry->queueSize++;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
            //The packet was successfully enqueued
            error = NO_ERROR;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	83fb      	strh	r3, [r7, #30]
 8002ec4:	e008      	b.n	8002ed8 <arpEnqueuePacket+0x114>
         }
         else
         {
            //Failed to allocate memory
            error = ERROR_OUT_OF_MEMORY;
 8002ec6:	2364      	movs	r3, #100	; 0x64
 8002ec8:	83fb      	strh	r3, [r7, #30]
 8002eca:	e005      	b.n	8002ed8 <arpEnqueuePacket+0x114>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 8002ecc:	23e0      	movs	r3, #224	; 0xe0
 8002ece:	83fb      	strh	r3, [r7, #30]
 8002ed0:	e002      	b.n	8002ed8 <arpEnqueuePacket+0x114>
      }
   }
   else
   {
      //No matching entry in ARP cache
      error = ERROR_NOT_FOUND;
 8002ed2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002ed6:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ee4 <arpTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void arpTick(NetInterface *interface)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   ArpCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 8002eec:	f7fe f9d8 	bl	80012a0 <osGetSystemTime>
 8002ef0:	6138      	str	r0, [r7, #16]

   //Go through ARP cache
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e098      	b.n	800302a <arpTick+0x146>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	015b      	lsls	r3, r3, #5
 8002f02:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

      //INCOMPLETE state?
      if(entry->state == ARP_STATE_INCOMPLETE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d128      	bne.n	8002f66 <arpTick+0x82>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db7e      	blt.n	8003024 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_REQUESTS)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d80e      	bhi.n	8002f56 <arpTick+0x72>
            {
               //Retransmit ARP request
               arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <arpTick+0x158>)
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa97 	bl	8003474 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_REQUEST_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	e066      	b.n	8003024 <arpTick+0x140>
            }
            else
            {
               //Drop packets that are waiting for address resolution
               arpFlushQueuedPackets(interface, entry);
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fea4 	bl	8002ca6 <arpFlushQueuedPackets>
               //The entry should be deleted since address resolution has failed
               entry->state = ARP_STATE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e05e      	b.n	8003024 <arpTick+0x140>
            }
         }
      }
      //REACHABLE state?
      else if(entry->state == ARP_STATE_REACHABLE)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d111      	bne.n	8002f92 <arpTick+0xae>
      {
         //Periodically time out ARP cache entries
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4413      	add	r3, r2
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db51      	blt.n	8003024 <arpTick+0x140>
         {
            //Save current time
            entry->timestamp = osGetSystemTime();
 8002f80:	f7fe f98e 	bl	80012a0 <osGetSystemTime>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	611a      	str	r2, [r3, #16]
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e048      	b.n	8003024 <arpTick+0x140>
         }
      }
      //DELAY state?
      else if(entry->state == ARP_STATE_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d11b      	bne.n	8002fd2 <arpTick+0xee>
      {
         //Wait for the specified delay before sending the first probe
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db3b      	blt.n	8003024 <arpTick+0x140>
         {
            //Send a point-to-point ARP request to the host
            arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa5c 	bl	8003474 <arpSendRequest>

            //Save the time at which the packet was sent
            entry->timestamp = time;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	611a      	str	r2, [r3, #16]
            //Set timeout value
            entry->timeout = ARP_PROBE_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002fc8:	615a      	str	r2, [r3, #20]
            //Switch to the PROBE state
            entry->state = ARP_STATE_PROBE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2205      	movs	r2, #5
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e028      	b.n	8003024 <arpTick+0x140>
         }
      }
      //PROBE state?
      else if(entry->state == ARP_STATE_PROBE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d124      	bne.n	8003024 <arpTick+0x140>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db1b      	blt.n	8003024 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_PROBES)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d80f      	bhi.n	800301e <arpTick+0x13a>
            {
               //Send a point-to-point ARP request to the host
               arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3308      	adds	r3, #8
 8003006:	461a      	mov	r2, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa33 	bl	8003474 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_PROBE_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f64e 2260 	movw	r2, #60000	; 0xea60
 800301a:	615a      	str	r2, [r3, #20]
 800301c:	e002      	b.n	8003024 <arpTick+0x140>
            }
            else
            {
               //The entry should be deleted since the host is not reachable anymore
               entry->state = ARP_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3301      	adds	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b07      	cmp	r3, #7
 800302e:	f67f af63 	bls.w	8002ef8 <arpTick+0x14>
            }
         }
      }
   }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	080243cc 	.word	0x080243cc

08003040 <arpProcessPacket>:
 * @param[in] length Packet length
 **/

void arpProcessPacket(NetInterface *interface, ArpPacket *arpPacket,
   size_t length)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
   bool_t validTarget;
   Ipv4AddrEntry *addrEntry;
   NetInterface *logicalInterface;

   //Discard invalid ARP packets
   if(length < sizeof(ArpPacket))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b1b      	cmp	r3, #27
 8003050:	d973      	bls.n	800313a <arpProcessPacket+0xfa>
      return;

   //Debug message
   TRACE_INFO("ARP packet received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpPacket);
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	f000 fb08 	bl	8003668 <arpDumpPacket>

   //Make sure the hardware type is valid
   if(arpPacket->hrd != HTONS(ARP_HARDWARE_TYPE_ETH))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003062:	d16c      	bne.n	800313e <arpProcessPacket+0xfe>
      return;
   //Make sure the protocol type is valid
   if(arpPacket->pro != HTONS(ARP_PROTOCOL_TYPE_IPV4))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	885b      	ldrh	r3, [r3, #2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b08      	cmp	r3, #8
 800306c:	d169      	bne.n	8003142 <arpProcessPacket+0x102>
      return;
   //Check the length of the hardware address
   if(arpPacket->hln != sizeof(MacAddr))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d167      	bne.n	8003146 <arpProcessPacket+0x106>
      return;
   //Check the length of the protocol address
   if(arpPacket->pln != sizeof(Ipv4Addr))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	795b      	ldrb	r3, [r3, #5]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d165      	bne.n	800314a <arpProcessPacket+0x10a>
      return;

   //The target protocol address must a valid address assigned to the interface
   //or a tentative address whose uniqueness on a link is being verified
   validTarget = FALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e03c      	b.n	8003102 <arpProcessPacket+0xc2>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(addrEntry->state != IPV4_ADDR_STATE_INVALID)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	791b      	ldrb	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02a      	beq.n	80030fc <arpProcessPacket+0xbc>
      {
         //Check whether the sender protocol address matches the IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->spa)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d11b      	bne.n	80030ec <arpProcessPacket+0xac>
         {
            //Tentative address?
            if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	791b      	ldrb	r3, [r3, #4]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d103      	bne.n	80030c4 <arpProcessPacket+0x84>
            {
               //If the host receives any ARP packet where the sender IP
               //address is the address being probed for, then this is a
               //conflicting ARP packet
               addrEntry->conflict = TRUE;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	609a      	str	r2, [r3, #8]
               //Exit immediately
               return;
 80030c2:	e043      	b.n	800314c <arpProcessPacket+0x10c>
            }
            else
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f00e fc7e 	bl	80119c6 <nicGetLogicalInterface>
 80030ca:	6138      	str	r0, [r7, #16]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpPacket->sha, &logicalInterface->macAddr))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f103 0008 	add.w	r0, r3, #8
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3384      	adds	r3, #132	; 0x84
 80030d6:	2206      	movs	r2, #6
 80030d8:	4619      	mov	r1, r3
 80030da:	f01a fbc3 	bl	801d864 <memcmp>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <arpProcessPacket+0xac>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2201      	movs	r2, #1
 80030e8:	609a      	str	r2, [r3, #8]
                  //Exit immediately
                  return;
 80030ea:	e02f      	b.n	800314c <arpProcessPacket+0x10c>
            }
         }

         //Check whether the target protocol address matches an IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->tpa)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d101      	bne.n	80030fc <arpProcessPacket+0xbc>
         {
            validTarget = TRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0bf      	beq.n	8003088 <arpProcessPacket+0x48>
         }
      }
   }

   //Valid target protocol address?
   if(validTarget)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <arpProcessPacket+0x10c>
   {
      //Check operation code
      switch(ntohs(arpPacket->op))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	88db      	ldrh	r3, [r3, #6]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fedd 	bl	8000ed4 <swapInt16>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <arpProcessPacket+0xe6>
 8003120:	2b02      	cmp	r3, #2
 8003122:	d005      	beq.n	8003130 <arpProcessPacket+0xf0>
      //Unknown operation code?
      default:
         //Debug message
         TRACE_INFO("Unknown operation code!\r\n");
         //Discard incoming packet
         break;
 8003124:	e012      	b.n	800314c <arpProcessPacket+0x10c>
         arpProcessRequest(interface, arpPacket);
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f812 	bl	8003152 <arpProcessRequest>
         break;
 800312e:	e00d      	b.n	800314c <arpProcessPacket+0x10c>
         arpProcessReply(interface, arpPacket);
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f872 	bl	800321c <arpProcessReply>
         break;
 8003138:	e008      	b.n	800314c <arpProcessPacket+0x10c>
      return;
 800313a:	bf00      	nop
 800313c:	e006      	b.n	800314c <arpProcessPacket+0x10c>
      return;
 800313e:	bf00      	nop
 8003140:	e004      	b.n	800314c <arpProcessPacket+0x10c>
      return;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <arpProcessPacket+0x10c>
      return;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <arpProcessPacket+0x10c>
      return;
 800314a:	bf00      	nop
      }
   }
}
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <arpProcessRequest>:
 * @param[in] interface Underlying network interface
 * @param[in] arpRequest Incoming ARP request
 **/

void arpProcessRequest(NetInterface *interface, ArpPacket *arpRequest)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Request received...\r\n");

   //Check sender protocol address
   if(ipv4IsBroadcastAddr(interface, arpRequest->spa))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f006 fea9 	bl	8009ebc <ipv4IsBroadcastAddr>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d14e      	bne.n	800320e <arpProcessRequest+0xbc>
      return;
   if(ipv4IsMulticastAddr(arpRequest->spa))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317a:	2be0      	cmp	r3, #224	; 0xe0
 800317c:	d049      	beq.n	8003212 <arpProcessRequest+0xc0>
      return;

   //Initialize flag
   validTarget = TRUE;
 800317e:	2301      	movs	r3, #1
 8003180:	613b      	str	r3, [r7, #16]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e031      	b.n	80031ec <arpProcessRequest+0x9a>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]

      //Tentative address?
      if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11f      	bne.n	80031e6 <arpProcessRequest+0x94>
      {
         //Check whether the target IP address is an address being probed for
         if(addrEntry->addr == arpRequest->tpa)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d119      	bne.n	80031e6 <arpProcessRequest+0x94>
         {
            //The target protocol address is a tentative address
            validTarget = FALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]

            //ARP probe received?
            if(arpRequest->spa == IPV4_UNSPECIFIED_ADDR)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d112      	bne.n	80031e6 <arpProcessRequest+0x94>
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f00e fc00 	bl	80119c6 <nicGetLogicalInterface>
 80031c6:	60b8      	str	r0, [r7, #8]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpRequest->sha, &logicalInterface->macAddr))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f103 0008 	add.w	r0, r3, #8
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3384      	adds	r3, #132	; 0x84
 80031d2:	2206      	movs	r2, #6
 80031d4:	4619      	mov	r1, r3
 80031d6:	f01a fb45 	bl	801d864 <memcmp>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <arpProcessRequest+0x94>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	609a      	str	r2, [r3, #8]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ca      	beq.n	8003188 <arpProcessRequest+0x36>
      }
   }

   //In all cases, the host must not respond to an ARP request for an address
   //being probed for
   if(validTarget)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <arpProcessRequest+0xc2>
   {
      //Send ARP reply
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6999      	ldr	r1, [r3, #24]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f8d3 200e 	ldr.w	r2, [r3, #14]
         &arpRequest->sha);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	3308      	adds	r3, #8
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9ba 	bl	8003580 <arpSendReply>
 800320c:	e002      	b.n	8003214 <arpProcessRequest+0xc2>
      return;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <arpProcessRequest+0xc2>
      return;
 8003212:	bf00      	nop
   }
}
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <arpProcessReply>:
 * @param[in] interface Underlying network interface
 * @param[in] arpReply Incoming ARP reply
 **/

void arpProcessReply(NetInterface *interface, ArpPacket *arpReply)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Reply received...\r\n");

   //Check sender protocol address
   if(arpReply->spa == IPV4_UNSPECIFIED_ADDR)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8090 	beq.w	8003352 <arpProcessReply+0x136>
      return;
   if(ipv4IsBroadcastAddr(interface, arpReply->spa))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f006 fe3e 	bl	8009ebc <ipv4IsBroadcastAddr>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8087 	bne.w	8003356 <arpProcessReply+0x13a>
      return;
   if(ipv4IsMulticastAddr(arpReply->spa))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800324e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003252:	2be0      	cmp	r3, #224	; 0xe0
 8003254:	f000 8081 	beq.w	800335a <arpProcessReply+0x13e>
      return;

   //Check sender hardware address
   if(macCompAddr(&arpReply->sha, &MAC_UNSPECIFIED_ADDR))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3308      	adds	r3, #8
 800325c:	2206      	movs	r2, #6
 800325e:	4945      	ldr	r1, [pc, #276]	; (8003374 <arpProcessReply+0x158>)
 8003260:	4618      	mov	r0, r3
 8003262:	f01a faff 	bl	801d864 <memcmp>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d078      	beq.n	800335e <arpProcessReply+0x142>
      return;
   if(macCompAddr(&arpReply->sha, &MAC_BROADCAST_ADDR))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	3308      	adds	r3, #8
 8003270:	2206      	movs	r2, #6
 8003272:	4941      	ldr	r1, [pc, #260]	; (8003378 <arpProcessReply+0x15c>)
 8003274:	4618      	mov	r0, r3
 8003276:	f01a faf5 	bl	801d864 <memcmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d070      	beq.n	8003362 <arpProcessReply+0x146>
      return;
   if(macIsMulticastAddr(&arpReply->sha))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	7a1b      	ldrb	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d16c      	bne.n	8003366 <arpProcessReply+0x14a>
      return;

   //Check whether the target IP address is an address being probed for
   if(ipv4IsTentativeAddr(interface, arpReply->tpa))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f006 fe53 	bl	8009f3e <ipv4IsTentativeAddr>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d165      	bne.n	800336a <arpProcessReply+0x14e>
      return;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, arpReply->spa);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc8a 	bl	8002bc0 <arpFindEntry>
 80032ac:	60f8      	str	r0, [r7, #12]

   //Check whether a matching entry has been found
   if(entry != NULL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <arpProcessReply+0x150>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d118      	bne.n	80032ee <arpProcessReply+0xd2>
      {
         //Record the corresponding MAC address
         entry->macAddr = arpReply->sha;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	3208      	adds	r2, #8
 80032c4:	6810      	ldr	r0, [r2, #0]
 80032c6:	6018      	str	r0, [r3, #0]
 80032c8:	8892      	ldrh	r2, [r2, #4]
 80032ca:	809a      	strh	r2, [r3, #4]

         //Send all the packets that are pending for transmission
         arpSendQueuedPackets(interface, entry);
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fca0 	bl	8002c14 <arpSendQueuedPackets>

         //Save current time
         entry->timestamp = osGetSystemTime();
 80032d4:	f7fd ffe4 	bl	80012a0 <osGetSystemTime>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80032e4:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e03e      	b.n	800336c <arpProcessReply+0x150>
      }
      else if(entry->state == ARP_STATE_REACHABLE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d10f      	bne.n	8003316 <arpProcessReply+0xfa>
      {
         //Different link-layer address than cached?
         if(!macCompAddr(&arpReply->sha, &entry->macAddr))
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f103 0008 	add.w	r0, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3308      	adds	r3, #8
 8003300:	2206      	movs	r2, #6
 8003302:	4619      	mov	r1, r3
 8003304:	f01a faae 	bl	801d864 <memcmp>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02e      	beq.n	800336c <arpProcessReply+0x150>
         {
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2203      	movs	r2, #3
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e02a      	b.n	800336c <arpProcessReply+0x150>
         }
      }
      else if(entry->state == ARP_STATE_PROBE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d126      	bne.n	800336c <arpProcessReply+0x150>
      {
         //Record IPv4/MAC address pair
         entry->ipAddr = arpReply->spa;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
         entry->macAddr = arpReply->sha;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	3208      	adds	r2, #8
 8003330:	6810      	ldr	r0, [r2, #0]
 8003332:	6018      	str	r0, [r3, #0]
 8003334:	8892      	ldrh	r2, [r2, #4]
 8003336:	809a      	strh	r2, [r3, #4]

         //Save current time
         entry->timestamp = osGetSystemTime();
 8003338:	f7fd ffb2 	bl	80012a0 <osGetSystemTime>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003348:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e00c      	b.n	800336c <arpProcessReply+0x150>
      return;
 8003352:	bf00      	nop
 8003354:	e00a      	b.n	800336c <arpProcessReply+0x150>
      return;
 8003356:	bf00      	nop
 8003358:	e008      	b.n	800336c <arpProcessReply+0x150>
      return;
 800335a:	bf00      	nop
 800335c:	e006      	b.n	800336c <arpProcessReply+0x150>
      return;
 800335e:	bf00      	nop
 8003360:	e004      	b.n	800336c <arpProcessReply+0x150>
      return;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <arpProcessReply+0x150>
      return;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <arpProcessReply+0x150>
      return;
 800336a:	bf00      	nop
      }
   }
}
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	080243c4 	.word	0x080243c4
 8003378:	080243cc 	.word	0x080243cc

0800337c <arpSendProbe>:
 * @param[in] targetIpAddr Target IPv4 address
 * @return Error code
 **/

error_t arpSendProbe(NetInterface *interface, Ipv4Addr targetIpAddr)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b090      	sub	sp, #64	; 0x40
 8003380:	af02      	add	r7, sp, #8
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
   ArpPacket *arpRequest;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f00e fb1d 	bl	80119c6 <nicGetLogicalInterface>
 800338c:	6378      	str	r0, [r7, #52]	; 0x34

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 800338e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003392:	4619      	mov	r1, r3
 8003394:	201c      	movs	r0, #28
 8003396:	f002 fbaa 	bl	8005aee <ethAllocBuffer>
 800339a:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate buffer?
   if(buffer == NULL)
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <arpSendProbe+0x2a>
      return ERROR_OUT_OF_MEMORY;
 80033a2:	2364      	movs	r3, #100	; 0x64
 80033a4:	e05b      	b.n	800345e <arpSendProbe+0xe2>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ac:	f00d fbaf 	bl	8010b0e <netBufferAt>
 80033b0:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fd fd8e 	bl	8000ed4 <swapInt16>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 80033c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80033c4:	f7fd fd86 	bl	8000ed4 <swapInt16>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2206      	movs	r2, #6
 80033d4:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2204      	movs	r2, #4
 80033da:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 80033dc:	2001      	movs	r0, #1
 80033de:	f7fd fd79 	bl	8000ed4 <swapInt16>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ee:	3308      	adds	r3, #8
 80033f0:	3284      	adds	r2, #132	; 0x84
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	6018      	str	r0, [r3, #0]
 80033f6:	8892      	ldrh	r2, [r2, #4]
 80033f8:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = IPV4_UNSPECIFIED_ADDR;
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	2200      	movs	r2, #0
 80033fe:	739a      	strb	r2, [r3, #14]
 8003400:	2200      	movs	r2, #0
 8003402:	73da      	strb	r2, [r3, #15]
 8003404:	2200      	movs	r2, #0
 8003406:	741a      	strb	r2, [r3, #16]
 8003408:	2200      	movs	r2, #0
 800340a:	745a      	strb	r2, [r3, #17]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <arpSendProbe+0xec>)
 8003410:	3312      	adds	r3, #18
 8003412:	6811      	ldr	r1, [r2, #0]
 8003414:	6019      	str	r1, [r3, #0]
 8003416:	8892      	ldrh	r2, [r2, #4]
 8003418:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Probe (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 8003420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003422:	f000 f921 	bl	8003668 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <arpSendProbe+0xf0>)
 8003428:	f107 040c 	add.w	r4, r7, #12
 800342c:	461d      	mov	r5, r3
 800342e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003432:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003436:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, &MAC_BROADCAST_ADDR, ETH_TYPE_ARP, buffer,
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f107 020c 	add.w	r2, r7, #12
 8003440:	9201      	str	r2, [sp, #4]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	f640 0206 	movw	r2, #2054	; 0x806
 800344a:	4909      	ldr	r1, [pc, #36]	; (8003470 <arpSendProbe+0xf4>)
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f002 fa1d 	bl	800588c <ethSendFrame>
 8003452:	4603      	mov	r3, r0
 8003454:	857b      	strh	r3, [r7, #42]	; 0x2a
      offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8003456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003458:	f00d fa82 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800345c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800345e:	4618      	mov	r0, r3
 8003460:	3738      	adds	r7, #56	; 0x38
 8003462:	46bd      	mov	sp, r7
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	bf00      	nop
 8003468:	080243c4 	.word	0x080243c4
 800346c:	08025288 	.word	0x08025288
 8003470:	080243cc 	.word	0x080243cc

08003474 <arpSendRequest>:
 * @return Error code
 **/

error_t arpSendRequest(NetInterface *interface, Ipv4Addr targetIpAddr,
   const MacAddr *destMacAddr)
{
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b092      	sub	sp, #72	; 0x48
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
   Ipv4Addr senderIpAddr;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f00e fa9f 	bl	80119c6 <nicGetLogicalInterface>
 8003488:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Select the most appropriate sender IP address to be used
   error = ipv4SelectSourceAddr(&interface, targetIpAddr, &senderIpAddr);
 800348a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f006 fba1 	bl	8009bdc <ipv4SelectSourceAddr>
 800349a:	4603      	mov	r3, r0
 800349c:	877b      	strh	r3, [r7, #58]	; 0x3a
   //No address assigned to the interface?
   if(error)
 800349e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <arpSendRequest+0x34>
      return error;
 80034a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80034a6:	e062      	b.n	800356e <arpSendRequest+0xfa>

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	4619      	mov	r1, r3
 80034ae:	201c      	movs	r0, #28
 80034b0:	f002 fb1d 	bl	8005aee <ethAllocBuffer>
 80034b4:	6378      	str	r0, [r7, #52]	; 0x34
   //Failed to allocate buffer?
   if(buffer == NULL)
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <arpSendRequest+0x4c>
      return ERROR_OUT_OF_MEMORY;
 80034bc:	2364      	movs	r3, #100	; 0x64
 80034be:	e056      	b.n	800356e <arpSendRequest+0xfa>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	4619      	mov	r1, r3
 80034c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034c6:	f00d fb22 	bl	8010b0e <netBufferAt>
 80034ca:	6338      	str	r0, [r7, #48]	; 0x30

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7fd fd01 	bl	8000ed4 <swapInt16>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 80034da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034de:	f7fd fcf9 	bl	8000ed4 <swapInt16>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2206      	movs	r2, #6
 80034ee:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2204      	movs	r2, #4
 80034f4:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f7fd fcec 	bl	8000ed4 <swapInt16>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003508:	3308      	adds	r3, #8
 800350a:	3284      	adds	r2, #132	; 0x84
 800350c:	6810      	ldr	r0, [r2, #0]
 800350e:	6018      	str	r0, [r3, #0]
 8003510:	8892      	ldrh	r2, [r2, #4]
 8003512:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = senderIpAddr;
 8003514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	f8c3 200e 	str.w	r2, [r3, #14]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <arpSendRequest+0x104>)
 8003520:	3312      	adds	r3, #18
 8003522:	6811      	ldr	r1, [r2, #0]
 8003524:	6019      	str	r1, [r3, #0]
 8003526:	8892      	ldrh	r2, [r2, #4]
 8003528:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Request (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 8003530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003532:	f000 f899 	bl	8003668 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <arpSendRequest+0x108>)
 8003538:	f107 0410 	add.w	r4, r7, #16
 800353c:	461d      	mov	r5, r3
 800353e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003542:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003546:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, destMacAddr, ETH_TYPE_ARP, buffer, offset,
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	f107 0210 	add.w	r2, r7, #16
 8003552:	9201      	str	r2, [sp, #4]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	f640 0206 	movw	r2, #2054	; 0x806
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	f002 f995 	bl	800588c <ethSendFrame>
 8003562:	4603      	mov	r3, r0
 8003564:	877b      	strh	r3, [r7, #58]	; 0x3a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8003566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003568:	f00d f9fa 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800356c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
}
 800356e:	4618      	mov	r0, r3
 8003570:	3740      	adds	r7, #64	; 0x40
 8003572:	46bd      	mov	sp, r7
 8003574:	bdb0      	pop	{r4, r5, r7, pc}
 8003576:	bf00      	nop
 8003578:	080243c4 	.word	0x080243c4
 800357c:	08025288 	.word	0x08025288

08003580 <arpSendReply>:
 * @return Error code
 **/

error_t arpSendReply(NetInterface *interface, Ipv4Addr senderIpAddr,
   Ipv4Addr targetIpAddr, const MacAddr *targetMacAddr)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b092      	sub	sp, #72	; 0x48
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
   ArpPacket *arpReply;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f00e fa19 	bl	80119c6 <nicGetLogicalInterface>
 8003594:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 8003596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800359a:	4619      	mov	r1, r3
 800359c:	201c      	movs	r0, #28
 800359e:	f002 faa6 	bl	8005aee <ethAllocBuffer>
 80035a2:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate buffer?
   if(buffer == NULL)
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <arpSendReply+0x2e>
      return ERROR_OUT_OF_MEMORY;
 80035aa:	2364      	movs	r3, #100	; 0x64
 80035ac:	e056      	b.n	800365c <arpSendReply+0xdc>

   //Point to the beginning of the ARP packet
   arpReply = netBufferAt(buffer, offset);
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	4619      	mov	r1, r3
 80035b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035b4:	f00d faab 	bl	8010b0e <netBufferAt>
 80035b8:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ARP reply
   arpReply->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f7fd fc8a 	bl	8000ed4 <swapInt16>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	801a      	strh	r2, [r3, #0]
   arpReply->pro = htons(ETH_TYPE_IPV4);
 80035c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035cc:	f7fd fc82 	bl	8000ed4 <swapInt16>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	805a      	strh	r2, [r3, #2]
   arpReply->hln = sizeof(MacAddr);
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	2206      	movs	r2, #6
 80035dc:	711a      	strb	r2, [r3, #4]
   arpReply->pln = sizeof(Ipv4Addr);
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	2204      	movs	r2, #4
 80035e2:	715a      	strb	r2, [r3, #5]
   arpReply->op = htons(ARP_OPCODE_ARP_REPLY);
 80035e4:	2002      	movs	r0, #2
 80035e6:	f7fd fc75 	bl	8000ed4 <swapInt16>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	80da      	strh	r2, [r3, #6]
   arpReply->sha = logicalInterface->macAddr;
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f6:	3308      	adds	r3, #8
 80035f8:	3284      	adds	r2, #132	; 0x84
 80035fa:	6810      	ldr	r0, [r2, #0]
 80035fc:	6018      	str	r0, [r3, #0]
 80035fe:	8892      	ldrh	r2, [r2, #4]
 8003600:	809a      	strh	r2, [r3, #4]
   arpReply->spa = senderIpAddr;
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	f8c3 200e 	str.w	r2, [r3, #14]
   arpReply->tha = *targetMacAddr;
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	3312      	adds	r3, #18
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	6019      	str	r1, [r3, #0]
 8003614:	8892      	ldrh	r2, [r2, #4]
 8003616:	809a      	strh	r2, [r3, #4]
   arpReply->tpa = targetIpAddr;
 8003618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Reply (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpReply);
 800361e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003620:	f000 f822 	bl	8003668 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <arpSendReply+0xe4>)
 8003626:	f107 0414 	add.w	r4, r7, #20
 800362a:	461d      	mov	r5, r3
 800362c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003630:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003634:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP reply
   error = ethSendFrame(interface, targetMacAddr, ETH_TYPE_ARP, buffer, offset,
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	f107 0214 	add.w	r2, r7, #20
 800363e:	9201      	str	r2, [sp, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f640 0206 	movw	r2, #2054	; 0x806
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f002 f91e 	bl	800588c <ethSendFrame>
 8003650:	4603      	mov	r3, r0
 8003652:	867b      	strh	r3, [r7, #50]	; 0x32
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8003654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003656:	f00d f983 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800365a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 800365c:	4618      	mov	r0, r3
 800365e:	3740      	adds	r7, #64	; 0x40
 8003660:	46bd      	mov	sp, r7
 8003662:	bdb0      	pop	{r4, r5, r7, pc}
 8003664:	08025288 	.word	0x08025288

08003668 <arpDumpPacket>:
 * @brief Dump ARP packet for debugging purpose
 * @param[in] arpPacket ARP header
 **/

void arpDumpPacket(const ArpPacket *arpPacket)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Opcode (op) = %" PRIu16 "\r\n", ntohs(arpPacket->op));
   TRACE_DEBUG("  Sender Hardware Address (sha) = %s\r\n", macAddrToString(&arpPacket->sha, NULL));
   TRACE_DEBUG("  Sender Protocol Address (spa) = %s\r\n", ipv4AddrToString(arpPacket->spa, NULL));
   TRACE_DEBUG("  Target Hardware Address (tha)= %s\r\n", macAddrToString(&arpPacket->tha, NULL));
   TRACE_DEBUG("  Target Protocol Address (tpa) = %s\r\n", ipv4AddrToString(arpPacket->tpa, NULL));
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <dhcpClientGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains DHCP client settings
 **/

void dhcpClientGetDefaultSettings(DhcpClientSettings *settings)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
   //Use default interface
   settings->interface = netGetDefaultInterface();
 8003684:	f00c fed4 	bl	8010430 <netGetDefaultInterface>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
   //Index of the IP address to be configured
   settings->ipAddrIndex = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]

#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   //Use default host name
   osStrcpy(settings->hostname, "");
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3308      	adds	r3, #8
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
   //Use default client identifier
   settings->clientIdLength = 0;
#endif

   //Support for quick configuration using rapid commit
   settings->rapidCommit = FALSE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
   //Use the DNS servers provided by the DHCP server
   settings->manualDnsConfig = FALSE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
   //DHCP configuration timeout
   settings->timeout = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
   //DHCP configuration timeout event
   settings->timeoutEvent = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
   //Link state change event
   settings->linkChangeEvent = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
   //FSM state change event
   settings->stateChangeEvent = NULL;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <dhcpClientInit>:
 * @param[in] settings DHCP client specific settings
 * @return Error code
 **/

error_t dhcpClientInit(DhcpClientContext *context, const DhcpClientSettings *settings)
{
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
   error_t error;
   size_t n;
   NetInterface *interface;

   //Debug message
   TRACE_INFO("Initializing DHCP client...\r\n");
 80036d2:	f7fd fce2 	bl	800109a <osSuspendAllTasks>
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <dhcpClientInit+0xe0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	221d      	movs	r2, #29
 80036de:	2101      	movs	r1, #1
 80036e0:	4832      	ldr	r0, [pc, #200]	; (80037ac <dhcpClientInit+0xe4>)
 80036e2:	f019 fe37 	bl	801d354 <fwrite>
 80036e6:	f7fd fce3 	bl	80010b0 <osResumeAllTasks>

   //Ensure the parameters are valid
   if(context == NULL || settings == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <dhcpClientInit+0x2e>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <dhcpClientInit+0x32>
      return ERROR_INVALID_PARAMETER;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e052      	b.n	80037a0 <dhcpClientInit+0xd8>

   //The DHCP client must be bound to a valid interface
   if(settings->interface == NULL)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <dhcpClientInit+0x3e>
      return ERROR_INVALID_PARAMETER;
 8003702:	2302      	movs	r3, #2
 8003704:	e04c      	b.n	80037a0 <dhcpClientInit+0xd8>

   //Point to the underlying network interface
   interface = settings->interface;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]

   //Clear the DHCP client context
   osMemset(context, 0, sizeof(DhcpClientContext));
 800370c:	2278      	movs	r2, #120	; 0x78
 800370e:	2100      	movs	r1, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f01a f8dd 	bl	801d8d0 <memset>
   //Save user settings
   context->settings = *settings;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4614      	mov	r4, r2
 800371c:	461d      	mov	r5, r3
 800371e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800372e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   //No DHCP host name defined?
   if(settings->hostname[0] == '\0')
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	7a1b      	ldrb	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d119      	bne.n	800376e <dhcpClientInit+0xa6>
   {
      //Use default host name
      n = osStrlen(interface->hostname);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3319      	adds	r3, #25
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fdb0 	bl	80002a4 <strlen>
 8003744:	6138      	str	r0, [r7, #16]
      //Limit the length of the string
      n = MIN(n, DHCP_CLIENT_MAX_HOSTNAME_LEN);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b18      	cmp	r3, #24
 800374a:	bf28      	it	cs
 800374c:	2318      	movcs	r3, #24
 800374e:	613b      	str	r3, [r7, #16]

      //Copy host name
      osStrncpy(context->settings.hostname, interface->hostname, n);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f103 0008 	add.w	r0, r3, #8
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3319      	adds	r3, #25
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4619      	mov	r1, r3
 800375e:	f01a fb07 	bl	801dd70 <strncpy>
      //Properly terminate the string with a NULL character
      context->settings.hostname[n] = '\0';
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	3308      	adds	r3, #8
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
   }
#endif

   //Callback function to be called when a DHCP message is received
   error = udpAttachRxCallback(interface, DHCP_CLIENT_PORT,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <dhcpClientInit+0xe8>)
 8003772:	2144      	movs	r1, #68	; 0x44
 8003774:	6978      	ldr	r0, [r7, #20]
 8003776:	f014 fe0d 	bl	8018394 <udpAttachRxCallback>
 800377a:	4603      	mov	r3, r0
 800377c:	81fb      	strh	r3, [r7, #14]
      dhcpClientProcessMessage, context);
   //Failed to register callback function?
   if(error)
 800377e:	89fb      	ldrh	r3, [r7, #14]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <dhcpClientInit+0xc0>
      return error;
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	e00b      	b.n	80037a0 <dhcpClientInit+0xd8>

   //DHCP client is currently suspended
   context->running = FALSE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	63da      	str	r2, [r3, #60]	; 0x3c
   //Initialize state machine
   context->state = DHCP_STATE_INIT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

   //Attach the DHCP client context to the network interface
   interface->dhcpClientContext = context;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640

   //Successful initialization
   return NO_ERROR;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bdb0      	pop	{r4, r5, r7, pc}
 80037a8:	20000044 	.word	0x20000044
 80037ac:	08024154 	.word	0x08024154
 80037b0:	080044a5 	.word	0x080044a5

080037b4 <dhcpClientStart>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientStart(DhcpClientContext *context)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *interface;

   //Make sure the DHCP client context is valid
   if(context == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <dhcpClientStart+0x12>
      return ERROR_INVALID_PARAMETER;
 80037c2:	2302      	movs	r3, #2
 80037c4:	e040      	b.n	8003848 <dhcpClientStart+0x94>

   //Debug message
   TRACE_INFO("Starting DHCP client...\r\n");
 80037c6:	f7fd fc68 	bl	800109a <osSuspendAllTasks>
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <dhcpClientStart+0x9c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2219      	movs	r2, #25
 80037d2:	2101      	movs	r1, #1
 80037d4:	481f      	ldr	r0, [pc, #124]	; (8003854 <dhcpClientStart+0xa0>)
 80037d6:	f019 fdbd 	bl	801d354 <fwrite>
 80037da:	f7fd fc69 	bl	80010b0 <osResumeAllTasks>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80037de:	481e      	ldr	r0, [pc, #120]	; (8003858 <dhcpClientStart+0xa4>)
 80037e0:	f7fd fd40 	bl	8001264 <osAcquireMutex>

   //Point to the underlying network interface
   interface = context->settings.interface;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60bb      	str	r3, [r7, #8]

   //The host address is not longer valid
   interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 80037f0:	68f9      	ldr	r1, [r7, #12]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
   interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]

   //Clear subnet mask
   interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

   //Start DHCP client
   context->running = TRUE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
   //Initialize state machine
   context->state = DHCP_STATE_INIT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8003840:	4805      	ldr	r0, [pc, #20]	; (8003858 <dhcpClientStart+0xa4>)
 8003842:	f7fd fd1e 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000044 	.word	0x20000044
 8003854:	08024174 	.word	0x08024174
 8003858:	200046f4 	.word	0x200046f4

0800385c <dhcpClientTick>:
 * @param[in] context Pointer to the DHCP client context
 **/


void dhcpClientTick(DhcpClientContext *context)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
   //Make sure the DHCP client has been properly instantiated
   if(context == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d043      	beq.n	80038f2 <dhcpClientTick+0x96>
      return;

   //DHCP client finite state machine
   switch(context->state)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003870:	2b08      	cmp	r3, #8
 8003872:	d839      	bhi.n	80038e8 <dhcpClientTick+0x8c>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <dhcpClientTick+0x20>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038a9 	.word	0x080038a9
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038d1 	.word	0x080038d1
 8003898:	080038d9 	.word	0x080038d9
 800389c:	080038e1 	.word	0x080038e1
   //Process INIT state
   case DHCP_STATE_INIT:
      //This is the initialization state, where a client begins the process of
      //acquiring a lease. It also returns here when a lease ends, or when a
      //lease negotiation fails
      dhcpClientStateInit(context);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f883 	bl	80039ac <dhcpClientStateInit>
      break;
 80038a6:	e025      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process SELECTING state
   case DHCP_STATE_SELECTING:
      //The client is waiting to receive DHCPOFFER messages from one or more
      //DHCP servers, so it can choose one
      dhcpClientStateSelecting(context);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8a7 	bl	80039fc <dhcpClientStateSelecting>
      break;
 80038ae:	e021      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process REQUESTING state
   case DHCP_STATE_REQUESTING:
      //The client is waiting to hear back from the server to which
      //it sent its request
      dhcpClientStateRequesting(context);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8f1 	bl	8003a98 <dhcpClientStateRequesting>
      break;
 80038b6:	e01d      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process INIT REBOOT state
   case DHCP_STATE_INIT_REBOOT:
      //When a client that already has a valid lease starts up after a
      //power-down or reboot, it starts here instead of the INIT state
      dhcpClientStateInitReboot(context);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f959 	bl	8003b70 <dhcpClientStateInitReboot>
      break;
 80038be:	e019      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process REBOOTING state
   case DHCP_STATE_REBOOTING:
      //A client that has rebooted with an assigned address is waiting for
      //a confirming reply from a server
      dhcpClientStateRebooting(context);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f97d 	bl	8003bc0 <dhcpClientStateRebooting>
      break;
 80038c6:	e015      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process PROBING state
   case DHCP_STATE_PROBING:
      //The client probes the newly received address
      dhcpClientStateProbing(context);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9e5 	bl	8003c98 <dhcpClientStateProbing>
      break;
 80038ce:	e011      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process BOUND state
   case DHCP_STATE_BOUND:
      //Client has a valid lease and is in its normal operating state
      dhcpClientStateBound(context);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa43 	bl	8003d5c <dhcpClientStateBound>
      break;
 80038d6:	e00d      	b.n	80038f4 <dhcpClientTick+0x98>

   //Process RENEWING state
   case DHCP_STATE_RENEWING:
      //Client is trying to renew its lease. It regularly sends DHCPREQUEST messages with
      //the server that gave it its current lease specified, and waits for a reply
      dhcpClientStateRenewing(context);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa71 	bl	8003dc0 <dhcpClientStateRenewing>
      break;
 80038de:	e009      	b.n	80038f4 <dhcpClientTick+0x98>
   //Process REBINDING state
   case DHCP_STATE_REBINDING:
      //The client has failed to renew its lease with the server that originally granted it,
      //and now seeks a lease extension with any server that can hear it. It periodically sends
      //DHCPREQUEST messages with no server specified until it gets a reply or the lease ends
      dhcpClientStateRebinding(context);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fac9 	bl	8003e78 <dhcpClientStateRebinding>
      break;
 80038e6:	e005      	b.n	80038f4 <dhcpClientTick+0x98>

   //Invalid state
   default:
      //Switch to the default state
      context->state = DHCP_STATE_INIT;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      break;
 80038f0:	e000      	b.n	80038f4 <dhcpClientTick+0x98>
      return;
 80038f2:	bf00      	nop
   }
}
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop

080038fc <dhcpClientLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientLinkChangeEvent(DhcpClientContext *context)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *interface;

   //Make sure the DHCP client has been properly instantiated
   if(context == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04a      	beq.n	80039a0 <dhcpClientLinkChangeEvent+0xa4>
      return;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60bb      	str	r3, [r7, #8]

   //Check whether the DHCP client is running
   if(context->running)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d020      	beq.n	8003960 <dhcpClientLinkChangeEvent+0x64>
   {
      //The host address is no longer valid
      interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
      interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]

      //Clear subnet mask
      interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
      mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif
   }

   //Check whether the client already has a valid lease
   if(context->state >= DHCP_STATE_INIT_REBOOT)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003966:	2b02      	cmp	r3, #2
 8003968:	d904      	bls.n	8003974 <dhcpClientLinkChangeEvent+0x78>
   {
      //Switch to the INIT-REBOOT state
      context->state = DHCP_STATE_INIT_REBOOT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2203      	movs	r2, #3
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003972:	e003      	b.n	800397c <dhcpClientLinkChangeEvent+0x80>
   }
   else
   {
      //Switch to the INIT state
      context->state = DHCP_STATE_INIT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   }

   //Any registered callback?
   if(context->settings.linkChangeEvent != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00e      	beq.n	80039a2 <dhcpClientLinkChangeEvent+0xa6>
   {
      //Release exclusive access
      osReleaseMutex(&netMutex);
 8003984:	4808      	ldr	r0, [pc, #32]	; (80039a8 <dhcpClientLinkChangeEvent+0xac>)
 8003986:	f7fd fc7c 	bl	8001282 <osReleaseMutex>
      //Invoke user callback function
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8003998:	4803      	ldr	r0, [pc, #12]	; (80039a8 <dhcpClientLinkChangeEvent+0xac>)
 800399a:	f7fd fc63 	bl	8001264 <osAcquireMutex>
 800399e:	e000      	b.n	80039a2 <dhcpClientLinkChangeEvent+0xa6>
      return;
 80039a0:	bf00      	nop
   }
}
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200046f4 	.word	0x200046f4

080039ac <dhcpClientStateInit>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInit(DhcpClientContext *context)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <dhcpClientStateInit+0x46>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d013      	beq.n	80039f2 <dhcpClientStateInit+0x46>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 80039ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80039ce:	2000      	movs	r0, #0
 80039d0:	f00d fede 	bl	8011790 <netGetRandRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 80039d8:	f7fd fc62 	bl	80012a0 <osGetSystemTime>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	665a      	str	r2, [r3, #100]	; 0x64
         //Clear flag
         context->timeoutEventDone = FALSE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44

         //Switch to the SELECTING state
         dhcpClientChangeState(context, DHCP_STATE_SELECTING, delay);
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	2101      	movs	r1, #1
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f001 f8eb 	bl	8004bc8 <dhcpClientChangeState>
      }
   }
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <dhcpClientStateSelecting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateSelecting(DhcpClientContext *context)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8003a04:	f7fd fc4c 	bl	80012a0 <osGetSystemTime>
 8003a08:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	4413      	add	r3, r2
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db34      	blt.n	8003a86 <dhcpClientStateSelecting+0x8a>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <dhcpClientStateSelecting+0x42>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8003a24:	f00d fe90 	bl	8011748 <netGetRand>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60

         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 faa6 	bl	8003f80 <dhcpClientSendDiscover>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_DISCOVER_INIT_RT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003a3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a3c:	e010      	b.n	8003a60 <dhcpClientStateSelecting+0x64>
      }
      else
      {
         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa9e 	bl	8003f80 <dhcpClientSendDiscover>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	005a      	lsls	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_DISCOVER_MAX_RT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003a56:	d903      	bls.n	8003a60 <dhcpClientStateSelecting+0x64>
            context->retransmitTimeout = DHCP_CLIENT_DISCOVER_MAX_RT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003a5e:	651a      	str	r2, [r3, #80]	; 0x50
      }

      //Save the time at which the message was sent
      context->timestamp = time;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	649a      	str	r2, [r3, #72]	; 0x48

      //The timeout value should be randomized by the value of a uniform
      //number chosen from the range -1 to +1
      context->timeout = context->retransmitTimeout +
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1c      	ldr	r4, [r3, #80]	; 0x50
         netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8003a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a6e:	4809      	ldr	r0, [pc, #36]	; (8003a94 <dhcpClientStateSelecting+0x98>)
 8003a70:	f00d fe8e 	bl	8011790 <netGetRandRange>
 8003a74:	4603      	mov	r3, r0
      context->timeout = context->retransmitTimeout +
 8003a76:	18e2      	adds	r2, r4, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	64da      	str	r2, [r3, #76]	; 0x4c

      //Increment retransmission counter
      context->retransmitCount++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 f84c 	bl	8004b24 <dhcpClientCheckTimeout>
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}
 8003a94:	fffffc18 	.word	0xfffffc18

08003a98 <dhcpClientStateRequesting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRequesting(DhcpClientContext *context)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8003aa0:	f7fd fbfe 	bl	80012a0 <osGetSystemTime>
 8003aa4:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4413      	add	r3, r2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	db51      	blt.n	8003b5c <dhcpClientStateRequesting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11f      	bne.n	8003b00 <dhcpClientStateRequesting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8003ac0:	f00d fe42 	bl	8011748 <netGetRand>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fb1c 	bl	8004108 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003ad6:	651a      	str	r2, [r3, #80]	; 0x50

         //Save the time at which the message was sent
         context->timestamp = time;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	649a      	str	r2, [r3, #72]	; 0x48

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8003ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ae6:	4821      	ldr	r0, [pc, #132]	; (8003b6c <dhcpClientStateRequesting+0xd4>)
 8003ae8:	f00d fe52 	bl	8011790 <netGetRandRange>
 8003aec:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8003aee:	18e2      	adds	r2, r4, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
 8003afe:	e02d      	b.n	8003b5c <dhcpClientStateRequesting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d824      	bhi.n	8003b52 <dhcpClientStateRequesting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fafd 	bl	8004108 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	005a      	lsls	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8003b20:	d903      	bls.n	8003b2a <dhcpClientStateRequesting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50

         //Save the time at which the message was sent
         context->timestamp = time;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	649a      	str	r2, [r3, #72]	; 0x48

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8003b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b38:	480c      	ldr	r0, [pc, #48]	; (8003b6c <dhcpClientStateRequesting+0xd4>)
 8003b3a:	f00d fe29 	bl	8011790 <netGetRandRange>
 8003b3e:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8003b40:	18e2      	adds	r2, r4, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
 8003b50:	e004      	b.n	8003b5c <dhcpClientStateRequesting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f001 f836 	bl	8004bc8 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 ffe1 	bl	8004b24 <dhcpClientCheckTimeout>
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	fffffc18 	.word	0xfffffc18

08003b70 <dhcpClientStateInitReboot>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInitReboot(DhcpClientContext *context)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d017      	beq.n	8003bb6 <dhcpClientStateInitReboot+0x46>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d013      	beq.n	8003bb6 <dhcpClientStateInitReboot+0x46>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8003b8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b92:	2000      	movs	r0, #0
 8003b94:	f00d fdfc 	bl	8011790 <netGetRandRange>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 8003b9c:	f7fd fb80 	bl	80012a0 <osGetSystemTime>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	665a      	str	r2, [r3, #100]	; 0x64
         //Clear flag
         context->timeoutEventDone = FALSE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44

         //Switch to the REBOOTING state
         dhcpClientChangeState(context, DHCP_STATE_REBOOTING, delay);
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	2104      	movs	r1, #4
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 f809 	bl	8004bc8 <dhcpClientChangeState>
      }
   }
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <dhcpClientStateRebooting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebooting(DhcpClientContext *context)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8003bc8:	f7fd fb6a 	bl	80012a0 <osGetSystemTime>
 8003bcc:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	4413      	add	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db51      	blt.n	8003c84 <dhcpClientStateRebooting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11f      	bne.n	8003c28 <dhcpClientStateRebooting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8003be8:	f00d fdae 	bl	8011748 <netGetRand>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa88 	bl	8004108 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50

         //Save the time at which the message was sent
         context->timestamp = time;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	649a      	str	r2, [r3, #72]	; 0x48

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8003c0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c0e:	4821      	ldr	r0, [pc, #132]	; (8003c94 <dhcpClientStateRebooting+0xd4>)
 8003c10:	f00d fdbe 	bl	8011790 <netGetRandRange>
 8003c14:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8003c16:	18e2      	adds	r2, r4, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
 8003c26:	e02d      	b.n	8003c84 <dhcpClientStateRebooting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d824      	bhi.n	8003c7a <dhcpClientStateRebooting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fa69 	bl	8004108 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	005a      	lsls	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8003c48:	d903      	bls.n	8003c52 <dhcpClientStateRebooting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003c50:	651a      	str	r2, [r3, #80]	; 0x50

         //Save the time at which the message was sent
         context->timestamp = time;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	649a      	str	r2, [r3, #72]	; 0x48

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8003c5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c60:	480c      	ldr	r0, [pc, #48]	; (8003c94 <dhcpClientStateRebooting+0xd4>)
 8003c62:	f00d fd95 	bl	8011790 <netGetRandRange>
 8003c66:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8003c68:	18e2      	adds	r2, r4, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
 8003c78:	e004      	b.n	8003c84 <dhcpClientStateRebooting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 ffa2 	bl	8004bc8 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 ff4d 	bl	8004b24 <dhcpClientCheckTimeout>
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	fffffc18 	.word	0xfffffc18

08003c98 <dhcpClientStateProbing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateProbing(DhcpClientContext *context)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	617b      	str	r3, [r7, #20]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	613b      	str	r3, [r7, #16]

   //Get current time
   time = osGetSystemTime();
 8003cac:	f7fd faf8 	bl	80012a0 <osGetSystemTime>
 8003cb0:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	4413      	add	r3, r2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db46      	blt.n	8003d52 <dhcpClientStateProbing+0xba>
   {
      //The address is already in use?
      if(interface->ipv4Context.addrList[i].conflict)
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <dhcpClientStateProbing+0x56>
      {
         //If the client detects that the address is already in use, the
         //client must send a DHCPDECLINE message to the server and
         //restarts the configuration process
         dhcpClientSendDecline(context);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fb2b 	bl	8004338 <dhcpClientSendDecline>

         //The client should wait a minimum of ten seconds before
         //restarting the configuration process to avoid excessive
         //network traffic in case of looping
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 ff6e 	bl	8004bc8 <dhcpClientChangeState>

         //The client transitions to the BOUND state
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
      }
   }
}
 8003cec:	e031      	b.n	8003d52 <dhcpClientStateProbing+0xba>
      else if(context->retransmitCount < DHCP_CLIENT_PROBE_NUM)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11a      	bne.n	8003d2c <dhcpClientStateProbing+0x94>
         arpSendProbe(interface, interface->ipv4Context.addrList[i].addr);
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f7ff fb35 	bl	800337c <arpSendProbe>
         context->timestamp = time;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	649a      	str	r2, [r3, #72]	; 0x48
         context->timeout = DHCP_CLIENT_PROBE_DELAY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c
         context->retransmitCount++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
}
 8003d2a:	e012      	b.n	8003d52 <dhcpClientStateProbing+0xba>
         interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 8003d2c:	6979      	ldr	r1, [r7, #20]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003d3e:	2202      	movs	r2, #2
 8003d40:	701a      	strb	r2, [r3, #0]
         dhcpClientDumpConfig(context);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 ff8e 	bl	8004c64 <dhcpClientDumpConfig>
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2106      	movs	r1, #6
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 ff3b 	bl	8004bc8 <dhcpClientChangeState>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <dhcpClientStateBound>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateBound(DhcpClientContext *context)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
   systime_t t1;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8003d64:	f7fd fa9c 	bl	80012a0 <osGetSystemTime>
 8003d68:	60b8      	str	r0, [r7, #8]

   //A client will never attempt to extend the lifetime
   //of the address when T1 set to 0xFFFFFFFF
   if(context->t1 != DHCP_INFINITE_TIME)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d01f      	beq.n	8003db4 <dhcpClientStateBound+0x58>
   {
      //Convert T1 to milliseconds
      if(context->t1 < (MAX_DELAY / 1000))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <dhcpClientStateBound+0x60>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d807      	bhi.n	8003d8e <dhcpClientStateBound+0x32>
         t1 = context->t1 * 1000;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e002      	b.n	8003d94 <dhcpClientStateBound+0x38>
      else
         t1 = MAX_DELAY;
 8003d8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d92:	60fb      	str	r3, [r7, #12]

      //Check the time elapsed since the lease was obtained
      if(timeCompare(time, context->leaseStartTime + t1) >= 0)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db07      	blt.n	8003db4 <dhcpClientStateBound+0x58>
      {
         //Record the time at which the client started the address renewal process
         context->configStartTime = time;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	665a      	str	r2, [r3, #100]	; 0x64

         //Enter the RENEWING state
         dhcpClientChangeState(context, DHCP_STATE_RENEWING, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2107      	movs	r1, #7
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 ff0a 	bl	8004bc8 <dhcpClientChangeState>
      }
   }
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	0020c49a 	.word	0x0020c49a

08003dc0 <dhcpClientStateRenewing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRenewing(DhcpClientContext *context)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
   systime_t t2;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8003dc8:	f7fd fa6a 	bl	80012a0 <osGetSystemTime>
 8003dcc:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	4413      	add	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db43      	blt.n	8003e68 <dhcpClientStateRenewing+0xa8>
   {
      //Convert T2 to milliseconds
      if(context->t2 < (MAX_DELAY / 1000))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <dhcpClientStateRenewing+0xb0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d807      	bhi.n	8003dfa <dhcpClientStateRenewing+0x3a>
         t2 = context->t2 * 1000;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e002      	b.n	8003e00 <dhcpClientStateRenewing+0x40>
      else
         t2 = MAX_DELAY;
 8003dfa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003dfe:	60fb      	str	r3, [r7, #12]

      //Check whether T2 timer has expired
      if(timeCompare(time, context->leaseStartTime + t2) < 0)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da26      	bge.n	8003e5e <dhcpClientStateRenewing+0x9e>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <dhcpClientStateRenewing+0x62>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 8003e18:	f00d fc96 	bl	8011748 <netGetRand>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f970 	bl	8004108 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	649a      	str	r2, [r3, #72]	; 0x48

         //Compute the remaining time until T2 expires
         context->timeout = context->leaseStartTime + t2 - time;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	441a      	add	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad2      	subs	r2, r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	64da      	str	r2, [r3, #76]	; 0x4c

         //The client should wait one-half of the remaining time until T2, down to
         //a minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <dhcpClientStateRenewing+0xb4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d904      	bls.n	8003e52 <dhcpClientStateRenewing+0x92>
            context->timeout /= 2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	085a      	lsrs	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
      {
         //If no DHCPACK arrives before time T2, the client moves to REBINDING
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
      }
   }
}
 8003e5c:	e004      	b.n	8003e68 <dhcpClientStateRenewing+0xa8>
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2108      	movs	r1, #8
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 feb0 	bl	8004bc8 <dhcpClientChangeState>
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	0020c49a 	.word	0x0020c49a
 8003e74:	0001d4c0 	.word	0x0001d4c0

08003e78 <dhcpClientStateRebinding>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebinding(DhcpClientContext *context)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
   systime_t time;
   systime_t leaseTime;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

   //Get current time
   time = osGetSystemTime();
 8003e8c:	f7fd fa08 	bl	80012a0 <osGetSystemTime>
 8003e90:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	db64      	blt.n	8003f6e <dhcpClientStateRebinding+0xf6>
   {
      //Convert the lease time to milliseconds
      if(context->leaseTime < (MAX_DELAY / 1000))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea8:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <dhcpClientStateRebinding+0x100>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d807      	bhi.n	8003ebe <dhcpClientStateRebinding+0x46>
         leaseTime = context->leaseTime * 1000;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e002      	b.n	8003ec4 <dhcpClientStateRebinding+0x4c>
      else
         leaseTime = MAX_DELAY;
 8003ebe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003ec2:	617b      	str	r3, [r7, #20]

      //Check whether the lease has expired
      if(timeCompare(time, context->leaseStartTime + leaseTime) < 0)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da26      	bge.n	8003f22 <dhcpClientStateRebinding+0xaa>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <dhcpClientStateRebinding+0x6e>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 8003edc:	f00d fc34 	bl	8011748 <netGetRand>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	661a      	str	r2, [r3, #96]	; 0x60
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f90e 	bl	8004108 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	649a      	str	r2, [r3, #72]	; 0x48

         //Compute the remaining time until the lease expires
         context->timeout = context->leaseStartTime + leaseTime - time;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	441a      	add	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	64da      	str	r2, [r3, #76]	; 0x4c

         //The client should wait one-half of the remaining lease time, down to a
         //minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <dhcpClientStateRebinding+0x104>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d904      	bls.n	8003f16 <dhcpClientStateRebinding+0x9e>
            context->timeout /= 2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f10:	085a      	lsrs	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	64da      	str	r2, [r3, #76]	; 0x4c

         //Increment retransmission counter
         context->retransmitCount++;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54
         //If the lease expires before the client receives
         //a DHCPACK, the client moves to INIT state
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }
}
 8003f20:	e025      	b.n	8003f6e <dhcpClientStateRebinding+0xf6>
         interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 8003f22:	6939      	ldr	r1, [r7, #16]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
         interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
         interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fe2d 	bl	8004bc8 <dhcpClientChangeState>
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	0020c49a 	.word	0x0020c49a
 8003f7c:	0001d4c0 	.word	0x0001d4c0

08003f80 <dhcpClientSendDiscover>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDiscover(DhcpClientContext *context)
{
 8003f80:	b5b0      	push	{r4, r5, r7, lr}
 8003f82:	b09e      	sub	sp, #120	; 0x78
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	6078      	str	r0, [r7, #4]
#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   size_t length;
#endif

   //DHCP message type
   const uint8_t messageType = DHCP_MESSAGE_TYPE_DISCOVER;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	72fb      	strb	r3, [r7, #11]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	667b      	str	r3, [r7, #100]	; 0x64
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8003f92:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003f94:	f00d fd17 	bl	80119c6 <nicGetLogicalInterface>
 8003f98:	6638      	str	r0, [r7, #96]	; 0x60

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MIN_MSG_SIZE, &offset);
 8003f9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003fa4:	f014 f994 	bl	80182d0 <udpAllocBuffer>
 8003fa8:	65f8      	str	r0, [r7, #92]	; 0x5c
   //Failed to allocate buffer?
   if(buffer == NULL)
 8003faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <dhcpClientSendDiscover+0x34>
      return ERROR_OUT_OF_MEMORY;
 8003fb0:	2364      	movs	r3, #100	; 0x64
 8003fb2:	e0a3      	b.n	80040fc <dhcpClientSendDiscover+0x17c>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003fba:	f00c fda8 	bl	8010b0e <netBufferAt>
 8003fbe:	65b8      	str	r0, [r7, #88]	; 0x58
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MIN_MSG_SIZE);
 8003fc0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003fc8:	f019 fc82 	bl	801d8d0 <memset>

   //Format DHCPDISCOVER message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8003fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8003fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8003fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fda:	2206      	movs	r2, #6
 8003fdc:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc ff84 	bl	8000ef0 <swapInt32>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fec:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fdc8 	bl	8004b84 <dhcpClientComputeElapsedTime>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffa:	811a      	strh	r2, [r3, #8]
   message->flags = HTONS(DHCP_FLAG_BROADCAST);
 8003ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffe:	2200      	movs	r2, #0
 8004000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004004:	729a      	strb	r2, [r3, #10]
 8004006:	2200      	movs	r2, #0
 8004008:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 800400a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400c:	2200      	movs	r2, #0
 800400e:	731a      	strb	r2, [r3, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	735a      	strb	r2, [r3, #13]
 8004014:	2200      	movs	r2, #0
 8004016:	739a      	strb	r2, [r3, #14]
 8004018:	2200      	movs	r2, #0
 800401a:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 800401c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004020:	331c      	adds	r3, #28
 8004022:	3284      	adds	r2, #132	; 0x84
 8004024:	6810      	ldr	r0, [r2, #0]
 8004026:	6018      	str	r0, [r3, #0]
 8004028:	8892      	ldrh	r2, [r2, #4]
 800402a:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 800402c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402e:	2200      	movs	r2, #0
 8004030:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8004034:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004038:	2200      	movs	r2, #0
 800403a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800403e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8004042:	2200      	movs	r2, #0
 8004044:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8004048:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800404c:	2200      	movs	r2, #0
 800404e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8004052:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate options field
   message->options[0] = DHCP_OPT_END;
 8004056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //DHCP Message Type option
   dhcpAddOption(message, DHCP_OPT_DHCP_MESSAGE_TYPE,
 800405e:	f107 020b 	add.w	r2, r7, #11
 8004062:	2301      	movs	r3, #1
 8004064:	2135      	movs	r1, #53	; 0x35
 8004066:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004068:	f000 ff02 	bl	8004e70 <dhcpAddOption>
      &messageType, sizeof(messageType));

#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   //Retrieve the length of the host name
   length = osStrlen(context->settings.hostname);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3308      	adds	r3, #8
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc f917 	bl	80002a4 <strlen>
 8004076:	6578      	str	r0, [r7, #84]	; 0x54

   //Any host name defined?
   if(length > 0)
 8004078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <dhcpClientSendDiscover+0x10e>
   {
      //The Host Name option specifies the name of the client
      dhcpAddOption(message, DHCP_OPT_HOST_NAME,
         context->settings.hostname, length);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f103 0208 	add.w	r2, r3, #8
      dhcpAddOption(message, DHCP_OPT_HOST_NAME,
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	210c      	movs	r1, #12
 8004088:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800408a:	f000 fef1 	bl	8004e70 <dhcpAddOption>
         context->settings.clientId, context->settings.clientIdLength);
   }
#endif

   //Check whether rapid commit is enabled
   if(context->settings.rapidCommit)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <dhcpClientSendDiscover+0x122>
   {
      //Include the Rapid Commit option if the client is prepared
      //to perform the DHCPDISCOVER-DHCPACK message exchange
      dhcpAddOption(message, DHCP_OPT_RAPID_COMMIT, NULL, 0);
 8004096:	2300      	movs	r3, #0
 8004098:	2200      	movs	r2, #0
 800409a:	2150      	movs	r1, #80	; 0x50
 800409c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800409e:	f000 fee7 	bl	8004e70 <dhcpAddOption>
   }

   //DHCP messages broadcast by a client prior to that client obtaining its
   //IP address must have the source address field in the IP header set to 0
   //(refer to RFC 2131, section 4.1)
   srcIpAddr.length = sizeof(Ipv4Addr);
 80040a2:	2304      	movs	r3, #4
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 80040a6:	2300      	movs	r3, #0
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 80040aa:	2304      	movs	r3, #4
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, DHCP_MIN_MSG_SIZE);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <dhcpClientSendDiscover+0x184>)
 80040b6:	f107 040c 	add.w	r4, r7, #12
 80040ba:	461d      	mov	r5, r3
 80040bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80040c4:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDISCOVER message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 80040c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80040d2:	f107 020c 	add.w	r2, r7, #12
 80040d6:	9203      	str	r2, [sp, #12]
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	2343      	movs	r3, #67	; 0x43
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	4603      	mov	r3, r0
 80040e4:	2244      	movs	r2, #68	; 0x44
 80040e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80040e8:	f013 ff62 	bl	8017fb0 <udpSendBuffer>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 80040f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80040f4:	f00c fc34 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 80040f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3768      	adds	r7, #104	; 0x68
 8004100:	46bd      	mov	sp, r7
 8004102:	bdb0      	pop	{r4, r5, r7, pc}
 8004104:	08025288 	.word	0x08025288

08004108 <dhcpClientSendRequest>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendRequest(DhcpClientContext *context)
{
 8004108:	b5b0      	push	{r4, r5, r7, lr}
 800410a:	b0a0      	sub	sp, #128	; 0x80
 800410c:	af04      	add	r7, sp, #16
 800410e:	6078      	str	r0, [r7, #4]
#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   size_t length;
#endif

   //DHCP message type
   const uint8_t messageType = DHCP_MESSAGE_TYPE_REQUEST;
 8004110:	2303      	movs	r3, #3
 8004112:	73fb      	strb	r3, [r7, #15]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	66fb      	str	r3, [r7, #108]	; 0x6c
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800411a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800411c:	f00d fc53 	bl	80119c6 <nicGetLogicalInterface>
 8004120:	66b8      	str	r0, [r7, #104]	; 0x68

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	667b      	str	r3, [r7, #100]	; 0x64

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MIN_MSG_SIZE, &offset);
 8004128:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800412c:	4619      	mov	r1, r3
 800412e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004132:	f014 f8cd 	bl	80182d0 <udpAllocBuffer>
 8004136:	6638      	str	r0, [r7, #96]	; 0x60
   //Failed to allocate buffer?
   if(buffer == NULL)
 8004138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <dhcpClientSendRequest+0x3a>
      return ERROR_OUT_OF_MEMORY;
 800413e:	2364      	movs	r3, #100	; 0x64
 8004140:	e0f2      	b.n	8004328 <dhcpClientSendRequest+0x220>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	4619      	mov	r1, r3
 8004146:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004148:	f00c fce1 	bl	8010b0e <netBufferAt>
 800414c:	65f8      	str	r0, [r7, #92]	; 0x5c
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MIN_MSG_SIZE);
 800414e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004152:	2100      	movs	r1, #0
 8004154:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004156:	f019 fbbb 	bl	801d8d0 <memset>

   //Format DHCPREQUEST message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 800415a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8004160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	2206      	movs	r2, #6
 800416a:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc febd 	bl	8000ef0 <swapInt32>
 8004176:	4602      	mov	r2, r0
 8004178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417a:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fd01 	bl	8004b84 <dhcpClientComputeElapsedTime>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	811a      	strh	r2, [r3, #8]

   //The client IP address must be included if the client is fully configured
   //and can respond to ARP requests
   if(context->state == DHCP_STATE_RENEWING ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004190:	2b07      	cmp	r3, #7
 8004192:	d004      	beq.n	800419e <dhcpClientSendRequest+0x96>
      context->state == DHCP_STATE_REBINDING)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   if(context->state == DHCP_STATE_RENEWING ||
 800419a:	2b08      	cmp	r3, #8
 800419c:	d111      	bne.n	80041c2 <dhcpClientSendRequest+0xba>
   {
      message->flags = 0;
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	2200      	movs	r2, #0
 80041a2:	729a      	strb	r2, [r3, #10]
 80041a4:	2200      	movs	r2, #0
 80041a6:	72da      	strb	r2, [r3, #11]
      message->ciaddr = interface->ipv4Context.addrList[i].addr;
 80041a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80041aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e00f      	b.n	80041e2 <dhcpClientSendRequest+0xda>
   }
   else
   {
      message->flags = HTONS(DHCP_FLAG_BROADCAST);
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	2200      	movs	r2, #0
 80041c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ca:	729a      	strb	r2, [r3, #10]
 80041cc:	2200      	movs	r2, #0
 80041ce:	72da      	strb	r2, [r3, #11]
      message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 80041d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d2:	2200      	movs	r2, #0
 80041d4:	731a      	strb	r2, [r3, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	735a      	strb	r2, [r3, #13]
 80041da:	2200      	movs	r2, #0
 80041dc:	739a      	strb	r2, [r3, #14]
 80041de:	2200      	movs	r2, #0
 80041e0:	73da      	strb	r2, [r3, #15]
   }

   //Client hardware address
   message->chaddr = logicalInterface->macAddr;
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041e6:	331c      	adds	r3, #28
 80041e8:	3284      	adds	r2, #132	; 0x84
 80041ea:	6810      	ldr	r0, [r2, #0]
 80041ec:	6018      	str	r0, [r3, #0]
 80041ee:	8892      	ldrh	r2, [r2, #4]
 80041f0:	809a      	strh	r2, [r3, #4]
   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	2200      	movs	r2, #0
 80041f6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80041fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80041fe:	2200      	movs	r2, #0
 8004200:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8004204:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8004208:	2200      	movs	r2, #0
 800420a:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800420e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004212:	2200      	movs	r2, #0
 8004214:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8004218:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate options field
   message->options[0] = DHCP_OPT_END;
 800421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //DHCP Message Type option
   dhcpAddOption(message, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8004224:	f107 020f 	add.w	r2, r7, #15
 8004228:	2301      	movs	r3, #1
 800422a:	2135      	movs	r1, #53	; 0x35
 800422c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800422e:	f000 fe1f 	bl	8004e70 <dhcpAddOption>
      &messageType, sizeof(messageType));

#if (DHCP_CLIENT_HOSTNAME_OPTION_SUPPORT == ENABLED)
   //Retrieve the length of the host name
   length = osStrlen(context->settings.hostname);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3308      	adds	r3, #8
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc f834 	bl	80002a4 <strlen>
 800423c:	65b8      	str	r0, [r7, #88]	; 0x58

   //Any host name defined?
   if(length > 0)
 800423e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <dhcpClientSendRequest+0x14c>
   {
      //The Host Name option specifies the name of the client
      dhcpAddOption(message, DHCP_OPT_HOST_NAME,
         context->settings.hostname, length);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f103 0208 	add.w	r2, r3, #8
      dhcpAddOption(message, DHCP_OPT_HOST_NAME,
 800424a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424c:	210c      	movs	r1, #12
 800424e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004250:	f000 fe0e 	bl	8004e70 <dhcpAddOption>
         context->settings.clientId, context->settings.clientIdLength);
   }
#endif

   //Server Identifier option
   if(context->state == DHCP_STATE_REQUESTING)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	2b02      	cmp	r3, #2
 800425c:	d107      	bne.n	800426e <dhcpClientSendRequest+0x166>
   {
      dhcpAddOption(message, DHCP_OPT_SERVER_IDENTIFIER,
         &context->serverIpAddr, sizeof(Ipv4Addr));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 0258 	add.w	r2, r3, #88	; 0x58
      dhcpAddOption(message, DHCP_OPT_SERVER_IDENTIFIER,
 8004264:	2304      	movs	r3, #4
 8004266:	2136      	movs	r1, #54	; 0x36
 8004268:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800426a:	f000 fe01 	bl	8004e70 <dhcpAddOption>
   }

   //Requested IP Address option
   if(context->state == DHCP_STATE_REQUESTING ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004274:	2b02      	cmp	r3, #2
 8004276:	d004      	beq.n	8004282 <dhcpClientSendRequest+0x17a>
      context->state == DHCP_STATE_REBOOTING)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   if(context->state == DHCP_STATE_REQUESTING ||
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <dhcpClientSendRequest+0x18a>
   {
      dhcpAddOption(message, DHCP_OPT_REQUESTED_IP_ADDRESS,
         &context->requestedIpAddr, sizeof(Ipv4Addr));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 025c 	add.w	r2, r3, #92	; 0x5c
      dhcpAddOption(message, DHCP_OPT_REQUESTED_IP_ADDRESS,
 8004288:	2304      	movs	r3, #4
 800428a:	2132      	movs	r1, #50	; 0x32
 800428c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800428e:	f000 fdef 	bl	8004e70 <dhcpAddOption>
   }

   //Parameter Request List option
   dhcpAddOption(message, DHCP_OPT_PARAM_REQUEST_LIST,
 8004292:	2307      	movs	r3, #7
 8004294:	4a26      	ldr	r2, [pc, #152]	; (8004330 <dhcpClientSendRequest+0x228>)
 8004296:	2137      	movs	r1, #55	; 0x37
 8004298:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800429a:	f000 fde9 	bl	8004e70 <dhcpAddOption>
      dhcpOptionList, sizeof(dhcpOptionList));

   //IP address is being renewed?
   if(context->state == DHCP_STATE_RENEWING)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a4:	2b07      	cmp	r3, #7
 80042a6:	d112      	bne.n	80042ce <dhcpClientSendRequest+0x1c6>
   {
      //Set source IP address
      srcIpAddr.length = sizeof(Ipv4Addr);
 80042a8:	2304      	movs	r3, #4
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      srcIpAddr.ipv4Addr = interface->ipv4Context.addrList[i].addr;
 80042ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80042ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40

      //The client transmits the message directly to the server that initially
      //granted the lease
      destIpAddr.length = sizeof(Ipv4Addr);
 80042c2:	2304      	movs	r3, #4
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = context->serverIpAddr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042cc:	e008      	b.n	80042e0 <dhcpClientSendRequest+0x1d8>
   else
   {
      //DHCP messages broadcast by a client prior to that client obtaining its
      //IP address must have the source address field in the IP header set to 0
      //(refer to RFC 2131, section 4.1)
      srcIpAddr.length = sizeof(Ipv4Addr);
 80042ce:	2304      	movs	r3, #4
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 80042d2:	2300      	movs	r3, #0
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40

      //Broadcast the message
      destIpAddr.length = sizeof(Ipv4Addr);
 80042d6:	2304      	movs	r3, #4
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, DHCP_MIN_MSG_SIZE);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <dhcpClientSendRequest+0x22c>)
 80042e2:	f107 0410 	add.w	r4, r7, #16
 80042e6:	461d      	mov	r5, r3
 80042e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042f0:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DHCPREQUEST message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 80042f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80042fa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80042fe:	f107 0210 	add.w	r2, r7, #16
 8004302:	9203      	str	r2, [sp, #12]
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2343      	movs	r3, #67	; 0x43
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	2244      	movs	r2, #68	; 0x44
 8004312:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004314:	f013 fe4c 	bl	8017fb0 <udpSendBuffer>
 8004318:	4603      	mov	r3, r0
 800431a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800431e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004320:	f00c fb1e 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 8004324:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 8004328:	4618      	mov	r0, r3
 800432a:	3770      	adds	r7, #112	; 0x70
 800432c:	46bd      	mov	sp, r7
 800432e:	bdb0      	pop	{r4, r5, r7, pc}
 8004330:	0802414c 	.word	0x0802414c
 8004334:	08025288 	.word	0x08025288

08004338 <dhcpClientSendDecline>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDecline(DhcpClientContext *context)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b09e      	sub	sp, #120	; 0x78
 800433c:	af04      	add	r7, sp, #16
 800433e:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t messageType = DHCP_MESSAGE_TYPE_DECLINE;
 8004340:	2304      	movs	r3, #4
 8004342:	73fb      	strb	r3, [r7, #15]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	667b      	str	r3, [r7, #100]	; 0x64
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800434a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800434c:	f00d fb3b 	bl	80119c6 <nicGetLogicalInterface>
 8004350:	6638      	str	r0, [r7, #96]	; 0x60

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MIN_MSG_SIZE, &offset);
 8004352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004356:	4619      	mov	r1, r3
 8004358:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800435c:	f013 ffb8 	bl	80182d0 <udpAllocBuffer>
 8004360:	65f8      	str	r0, [r7, #92]	; 0x5c
   //Failed to allocate buffer?
   if(buffer == NULL)
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <dhcpClientSendDecline+0x34>
      return ERROR_OUT_OF_MEMORY;
 8004368:	2364      	movs	r3, #100	; 0x64
 800436a:	e094      	b.n	8004496 <dhcpClientSendDecline+0x15e>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 800436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436e:	4619      	mov	r1, r3
 8004370:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004372:	f00c fbcc 	bl	8010b0e <netBufferAt>
 8004376:	65b8      	str	r0, [r7, #88]	; 0x58
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MIN_MSG_SIZE);
 8004378:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800437c:	2100      	movs	r1, #0
 800437e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004380:	f019 faa6 	bl	801d8d0 <memset>

   //Format DHCPDECLINE message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8004384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 800438a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800438c:	2201      	movs	r2, #1
 800438e:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8004390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004392:	2206      	movs	r2, #6
 8004394:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc fda8 	bl	8000ef0 <swapInt32>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a4:	605a      	str	r2, [r3, #4]
   message->secs = 0;
 80043a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a8:	2200      	movs	r2, #0
 80043aa:	721a      	strb	r2, [r3, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	725a      	strb	r2, [r3, #9]
   message->flags = 0;
 80043b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b2:	2200      	movs	r2, #0
 80043b4:	729a      	strb	r2, [r3, #10]
 80043b6:	2200      	movs	r2, #0
 80043b8:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 80043ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043bc:	2200      	movs	r2, #0
 80043be:	731a      	strb	r2, [r3, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	735a      	strb	r2, [r3, #13]
 80043c4:	2200      	movs	r2, #0
 80043c6:	739a      	strb	r2, [r3, #14]
 80043c8:	2200      	movs	r2, #0
 80043ca:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 80043cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043d0:	331c      	adds	r3, #28
 80043d2:	3284      	adds	r2, #132	; 0x84
 80043d4:	6810      	ldr	r0, [r2, #0]
 80043d6:	6018      	str	r0, [r3, #0]
 80043d8:	8892      	ldrh	r2, [r2, #4]
 80043da:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 80043dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043de:	2200      	movs	r2, #0
 80043e0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80043e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80043e8:	2200      	movs	r2, #0
 80043ea:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80043ee:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80043f2:	2200      	movs	r2, #0
 80043f4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80043f8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80043fc:	2200      	movs	r2, #0
 80043fe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8004402:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate options field
   message->options[0] = DHCP_OPT_END;
 8004406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //DHCP Message Type option
   dhcpAddOption(message, DHCP_OPT_DHCP_MESSAGE_TYPE,
 800440e:	f107 020f 	add.w	r2, r7, #15
 8004412:	2301      	movs	r3, #1
 8004414:	2135      	movs	r1, #53	; 0x35
 8004416:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004418:	f000 fd2a 	bl	8004e70 <dhcpAddOption>
      &messageType, sizeof(messageType));
   //Server Identifier option
   dhcpAddOption(message, DHCP_OPT_SERVER_IDENTIFIER,
      &context->serverIpAddr, sizeof(Ipv4Addr));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f103 0258 	add.w	r2, r3, #88	; 0x58
   dhcpAddOption(message, DHCP_OPT_SERVER_IDENTIFIER,
 8004422:	2304      	movs	r3, #4
 8004424:	2136      	movs	r1, #54	; 0x36
 8004426:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004428:	f000 fd22 	bl	8004e70 <dhcpAddOption>
   //Requested IP Address option
   dhcpAddOption(message, DHCP_OPT_REQUESTED_IP_ADDRESS,
      &context->requestedIpAddr, sizeof(Ipv4Addr));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   dhcpAddOption(message, DHCP_OPT_REQUESTED_IP_ADDRESS,
 8004432:	2304      	movs	r3, #4
 8004434:	2132      	movs	r1, #50	; 0x32
 8004436:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004438:	f000 fd1a 	bl	8004e70 <dhcpAddOption>

   //Use the unspecified address as source address
   srcIpAddr.length = sizeof(Ipv4Addr);
 800443c:	2304      	movs	r3, #4
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8004440:	2300      	movs	r3, #0
 8004442:	643b      	str	r3, [r7, #64]	; 0x40

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 8004444:	2304      	movs	r3, #4
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, DHCP_MIN_MSG_SIZE);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <dhcpClientSendDecline+0x168>)
 8004450:	f107 0410 	add.w	r4, r7, #16
 8004454:	461d      	mov	r5, r3
 8004456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800445e:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDECLINE message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8004462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004464:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004468:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800446c:	f107 0210 	add.w	r2, r7, #16
 8004470:	9203      	str	r2, [sp, #12]
 8004472:	9302      	str	r3, [sp, #8]
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	2343      	movs	r3, #67	; 0x43
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4603      	mov	r3, r0
 800447e:	2244      	movs	r2, #68	; 0x44
 8004480:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004482:	f013 fd95 	bl	8017fb0 <udpSendBuffer>
 8004486:	4603      	mov	r3, r0
 8004488:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800448c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800448e:	f00c fa67 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 8004492:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 8004496:	4618      	mov	r0, r3
 8004498:	3768      	adds	r7, #104	; 0x68
 800449a:	46bd      	mov	sp, r7
 800449c:	bdb0      	pop	{r4, r5, r7, pc}
 800449e:	bf00      	nop
 80044a0:	08025288 	.word	0x08025288

080044a4 <dhcpClientProcessMessage>:

void dhcpClientProcessMessage(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
   DhcpClientContext *context;
   DhcpMessage *message;
   DhcpOption *option;

   //Point to the DHCP client context
   context = (DhcpClientContext *) param;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	61fb      	str	r3, [r7, #28]

   //Retrieve the length of the DHCP message
   length = netBufferGetLength(buffer) - offset;
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	f00c fa61 	bl	801097e <netBufferGetLength>
 80044bc:	4602      	mov	r2, r0
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	61bb      	str	r3, [r7, #24]

   //Make sure the DHCP message is valid
   if(length < sizeof(DhcpMessage) || length > DHCP_MAX_MSG_SIZE)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2bef      	cmp	r3, #239	; 0xef
 80044c8:	d947      	bls.n	800455a <dhcpClientProcessMessage+0xb6>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 80044d0:	d843      	bhi.n	800455a <dhcpClientProcessMessage+0xb6>
      return;

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 80044d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d4:	6838      	ldr	r0, [r7, #0]
 80044d6:	f00c fb1a 	bl	8010b0e <netBufferAt>
 80044da:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(message == NULL)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d03d      	beq.n	800455e <dhcpClientProcessMessage+0xba>

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //The DHCP server shall respond with a BOOTREPLY opcode
   if(message->op != DHCP_OPCODE_BOOTREPLY)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d13b      	bne.n	8004562 <dhcpClientProcessMessage+0xbe>
      return;

   //Enforce hardware type
   if(message->htype != DHCP_HARDWARE_TYPE_ETH)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d139      	bne.n	8004566 <dhcpClientProcessMessage+0xc2>
      return;

   //Check the length of the hardware address
   if(message->hlen != sizeof(MacAddr))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	789b      	ldrb	r3, [r3, #2]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d137      	bne.n	800456a <dhcpClientProcessMessage+0xc6>
      return;

   //Check magic cookie
   if(message->magicCookie != HTONL(DHCP_MAGIC_COOKIE))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <dhcpClientProcessMessage+0xdc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d133      	bne.n	800456e <dhcpClientProcessMessage+0xca>
      return;

   //The DHCP Message Type option must be included in every DHCP message
   option = dhcpGetOption(message, length, DHCP_OPT_DHCP_MESSAGE_TYPE);
 8004506:	2235      	movs	r2, #53	; 0x35
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f000 fcf8 	bl	8004f00 <dhcpGetOption>
 8004510:	6138      	str	r0, [r7, #16]

   //Failed to retrieve the Message Type option?
   if(option == NULL || option->length != 1)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02c      	beq.n	8004572 <dhcpClientProcessMessage+0xce>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d128      	bne.n	8004572 <dhcpClientProcessMessage+0xce>
      return;

   //Check message type
   switch(option->value[0])
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d012      	beq.n	800454e <dhcpClientProcessMessage+0xaa>
 8004528:	2b06      	cmp	r3, #6
 800452a:	dc24      	bgt.n	8004576 <dhcpClientProcessMessage+0xd2>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d002      	beq.n	8004536 <dhcpClientProcessMessage+0x92>
 8004530:	2b05      	cmp	r3, #5
 8004532:	d006      	beq.n	8004542 <dhcpClientProcessMessage+0x9e>
      //Parse DHCPNAK message
      dhcpClientParseNak(context, message, length);
      break;
   default:
      //Silently drop incoming message
      break;
 8004534:	e01f      	b.n	8004576 <dhcpClientProcessMessage+0xd2>
      dhcpClientParseOffer(context, message, length);
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69f8      	ldr	r0, [r7, #28]
 800453c:	f000 f822 	bl	8004584 <dhcpClientParseOffer>
      break;
 8004540:	e01a      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      dhcpClientParseAck(context, message, length);
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	69f8      	ldr	r0, [r7, #28]
 8004548:	f000 f871 	bl	800462e <dhcpClientParseAck>
      break;
 800454c:	e014      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      dhcpClientParseNak(context, message, length);
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	6979      	ldr	r1, [r7, #20]
 8004552:	69f8      	ldr	r0, [r7, #28]
 8004554:	f000 fa62 	bl	8004a1c <dhcpClientParseNak>
      break;
 8004558:	e00e      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 800455a:	bf00      	nop
 800455c:	e00c      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 800455e:	bf00      	nop
 8004560:	e00a      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 8004562:	bf00      	nop
 8004564:	e008      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 8004566:	bf00      	nop
 8004568:	e006      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 800456a:	bf00      	nop
 800456c:	e004      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 800456e:	bf00      	nop
 8004570:	e002      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      return;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <dhcpClientProcessMessage+0xd4>
      break;
 8004576:	bf00      	nop
   }
}
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	63538263 	.word	0x63538263

08004584 <dhcpClientParseOffer>:
 * @param[in] length Length of the incoming message to parse
 **/

void dhcpClientParseOffer(DhcpClientContext *context,
   const DhcpMessage *message, size_t length)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
   DhcpOption *serverIdOption;
   NetInterface *interface;
   NetInterface *logicalInterface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61fb      	str	r3, [r7, #28]
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8004596:	69f8      	ldr	r0, [r7, #28]
 8004598:	f00d fa15 	bl	80119c6 <nicGetLogicalInterface>
 800459c:	61b8      	str	r0, [r7, #24]

   //Discard any received packet that does not match the transaction ID
   if(ntohl(message->xid) != context->transactionId)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fc fca4 	bl	8000ef0 <swapInt32>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d131      	bne.n	8004616 <dhcpClientParseOffer+0x92>
      return;

   //Make sure the IP address offered to the client is valid
   if(message->yiaddr == IPV4_UNSPECIFIED_ADDR)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02f      	beq.n	800461a <dhcpClientParseOffer+0x96>
      return;

   //Check MAC address
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f103 001c 	add.w	r0, r3, #28
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	3384      	adds	r3, #132	; 0x84
 80045c4:	2206      	movs	r2, #6
 80045c6:	4619      	mov	r1, r3
 80045c8:	f019 f94c 	bl	801d864 <memcmp>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d125      	bne.n	800461e <dhcpClientParseOffer+0x9a>
      return;

   //Make sure that the DHCPOFFER message is received in response to
   //a DHCPDISCOVER message
   if(context->state != DHCP_STATE_SELECTING)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d122      	bne.n	8004622 <dhcpClientParseOffer+0x9e>
      return;

   //A DHCP server always returns its own address in the Server Identifier option
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_IDENTIFIER);
 80045dc:	2236      	movs	r2, #54	; 0x36
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f000 fc8d 	bl	8004f00 <dhcpGetOption>
 80045e6:	6178      	str	r0, [r7, #20]

   //Failed to retrieve the Server Identifier option?
   if(serverIdOption == NULL || serverIdOption->length != 4)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01b      	beq.n	8004626 <dhcpClientParseOffer+0xa2>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d117      	bne.n	8004626 <dhcpClientParseOffer+0xa2>
      return;

   //Record the IP address of the DHCP server
   ipv4CopyAddr(&context->serverIpAddr, serverIdOption->value);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3358      	adds	r3, #88	; 0x58
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	3202      	adds	r2, #2
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	601a      	str	r2, [r3, #0]
   //Record the IP address offered to the client
   context->requestedIpAddr = message->yiaddr;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	65da      	str	r2, [r3, #92]	; 0x5c

   //Switch to the REQUESTING state
   dhcpClientChangeState(context, DHCP_STATE_REQUESTING, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2102      	movs	r1, #2
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fada 	bl	8004bc8 <dhcpClientChangeState>
 8004614:	e008      	b.n	8004628 <dhcpClientParseOffer+0xa4>
      return;
 8004616:	bf00      	nop
 8004618:	e006      	b.n	8004628 <dhcpClientParseOffer+0xa4>
      return;
 800461a:	bf00      	nop
 800461c:	e004      	b.n	8004628 <dhcpClientParseOffer+0xa4>
      return;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <dhcpClientParseOffer+0xa4>
      return;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <dhcpClientParseOffer+0xa4>
      return;
 8004626:	bf00      	nop
}
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <dhcpClientParseAck>:
 * @param[in] length Length of the incoming message to parse
 **/

void dhcpClientParseAck(DhcpClientContext *context,
   const DhcpMessage *message, size_t length)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b08c      	sub	sp, #48	; 0x30
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
   NetInterface *interface;
   NetInterface *logicalInterface;
   NetInterface *physicalInterface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8004640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004642:	f00d f9c0 	bl	80119c6 <nicGetLogicalInterface>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f00d f9c7 	bl	80119dc <nicGetPhysicalInterface>
 800464e:	6238      	str	r0, [r7, #32]

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	61fb      	str	r3, [r7, #28]

   //Discard any received packet that does not match the transaction ID
   if(ntohl(message->xid) != context->transactionId)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fc fc48 	bl	8000ef0 <swapInt32>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	429a      	cmp	r2, r3
 8004668:	f040 81c6 	bne.w	80049f8 <dhcpClientParseAck+0x3ca>
      return;

   //Make sure the IP address assigned to the client is valid
   if(message->yiaddr == IPV4_UNSPECIFIED_ADDR)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 81c3 	beq.w	80049fc <dhcpClientParseAck+0x3ce>
      return;

   //Check MAC address
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f103 001c 	add.w	r0, r3, #28
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	3384      	adds	r3, #132	; 0x84
 8004680:	2206      	movs	r2, #6
 8004682:	4619      	mov	r1, r3
 8004684:	f019 f8ee 	bl	801d864 <memcmp>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 81b8 	bne.w	8004a00 <dhcpClientParseAck+0x3d2>
      return;

   //A DHCP server always returns its own address in the Server Identifier option
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_IDENTIFIER);
 8004690:	2236      	movs	r2, #54	; 0x36
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f000 fc33 	bl	8004f00 <dhcpGetOption>
 800469a:	61b8      	str	r0, [r7, #24]

   //Failed to retrieve the Server Identifier option?
   if(serverIdOption == NULL || serverIdOption->length != 4)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 81b0 	beq.w	8004a04 <dhcpClientParseAck+0x3d6>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	f040 81ab 	bne.w	8004a04 <dhcpClientParseAck+0x3d6>
      return;

   //Check current state
   if(context->state == DHCP_STATE_SELECTING)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d113      	bne.n	80046e0 <dhcpClientParseAck+0xb2>
   {
      //A DHCPACK message is not acceptable when rapid commit is disallowed
      if(!context->settings.rapidCommit)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 81a3 	beq.w	8004a08 <dhcpClientParseAck+0x3da>
         return;

      //Search for the Rapid Commit option
      option = dhcpGetOption(message, length, DHCP_OPT_RAPID_COMMIT);
 80046c2:	2250      	movs	r2, #80	; 0x50
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	68b8      	ldr	r0, [r7, #8]
 80046c8:	f000 fc1a 	bl	8004f00 <dhcpGetOption>
 80046cc:	6178      	str	r0, [r7, #20]

      //A server must include this option in a DHCPACK message sent
      //in a response to a DHCPDISCOVER message when completing the
      //DHCPDISCOVER-DHCPACK message exchange
      if(option == NULL || option->length != 0)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 819b 	beq.w	8004a0c <dhcpClientParseAck+0x3de>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d021      	beq.n	8004722 <dhcpClientParseAck+0xf4>
         return;
 80046de:	e195      	b.n	8004a0c <dhcpClientParseAck+0x3de>
   }
   else if(context->state == DHCP_STATE_REQUESTING ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d004      	beq.n	80046f4 <dhcpClientParseAck+0xc6>
      context->state == DHCP_STATE_RENEWING)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   else if(context->state == DHCP_STATE_REQUESTING ||
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	d10b      	bne.n	800470c <dhcpClientParseAck+0xde>
   {
      //Check the server identifier
      if(!ipv4CompAddr(serverIdOption->value, &context->serverIpAddr))
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1c98      	adds	r0, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3358      	adds	r3, #88	; 0x58
 80046fc:	2204      	movs	r2, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	f019 f8b0 	bl	801d864 <memcmp>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <dhcpClientParseAck+0xf4>
         return;
 800470a:	e184      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
   }
   else if(context->state == DHCP_STATE_REBOOTING ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004712:	2b04      	cmp	r3, #4
 8004714:	d005      	beq.n	8004722 <dhcpClientParseAck+0xf4>
      context->state == DHCP_STATE_REBINDING)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   else if(context->state == DHCP_STATE_REBOOTING ||
 800471c:	2b08      	cmp	r3, #8
 800471e:	f040 8177 	bne.w	8004a10 <dhcpClientParseAck+0x3e2>
      //Silently discard the DHCPACK message
      return;
   }

   //Retrieve IP Address Lease Time option
   option = dhcpGetOption(message, length, DHCP_OPT_IP_ADDRESS_LEASE_TIME);
 8004722:	2233      	movs	r2, #51	; 0x33
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f000 fbea 	bl	8004f00 <dhcpGetOption>
 800472c:	6178      	str	r0, [r7, #20]

   //Failed to retrieve specified option?
   if(option == NULL || option->length != 4)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 816f 	beq.w	8004a14 <dhcpClientParseAck+0x3e6>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	2b04      	cmp	r3, #4
 800473c:	f040 816a 	bne.w	8004a14 <dhcpClientParseAck+0x3e6>
      return;

   //Record the lease time
   context->leaseTime = LOAD32BE(option->value);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	789b      	ldrb	r3, [r3, #2]
 8004744:	061a      	lsls	r2, r3, #24
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	78db      	ldrb	r3, [r3, #3]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	791b      	ldrb	r3, [r3, #4]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	4313      	orrs	r3, r2
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	7952      	ldrb	r2, [r2, #5]
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	66da      	str	r2, [r3, #108]	; 0x6c

   //Retrieve Renewal Time Value option
   option = dhcpGetOption(message, length, DHCP_OPT_RENEWAL_TIME_VALUE);
 8004760:	223a      	movs	r2, #58	; 0x3a
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f000 fbcb 	bl	8004f00 <dhcpGetOption>
 800476a:	6178      	str	r0, [r7, #20]

   //Specified option found?
   if(option != NULL && option->length == 4)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d014      	beq.n	800479c <dhcpClientParseAck+0x16e>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d110      	bne.n	800479c <dhcpClientParseAck+0x16e>
   {
      //This option specifies the time interval from address assignment
      //until the client transitions to the RENEWING state
      context->t1 = LOAD32BE(option->value);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	061a      	lsls	r2, r3, #24
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	791b      	ldrb	r3, [r3, #4]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	7952      	ldrb	r2, [r2, #5]
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	671a      	str	r2, [r3, #112]	; 0x70
 800479a:	e00e      	b.n	80047ba <dhcpClientParseAck+0x18c>
   }
   else if(context->leaseTime != DHCP_INFINITE_TIME)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d005      	beq.n	80047b2 <dhcpClientParseAck+0x184>
   {
      //By default, T1 is set to 50% of the lease time
      context->t1 = context->leaseTime / 2;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	085a      	lsrs	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	671a      	str	r2, [r3, #112]	; 0x70
 80047b0:	e003      	b.n	80047ba <dhcpClientParseAck+0x18c>
   }
   else
   {
      //Infinite lease
      context->t1 = DHCP_INFINITE_TIME;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	671a      	str	r2, [r3, #112]	; 0x70
   }

   //Retrieve Rebinding Time value option
   option = dhcpGetOption(message, length, DHCP_OPT_REBINDING_TIME_VALUE);
 80047ba:	223b      	movs	r2, #59	; 0x3b
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	f000 fb9e 	bl	8004f00 <dhcpGetOption>
 80047c4:	6178      	str	r0, [r7, #20]

   //Specified option found?
   if(option != NULL && option->length == 4)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d014      	beq.n	80047f6 <dhcpClientParseAck+0x1c8>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d110      	bne.n	80047f6 <dhcpClientParseAck+0x1c8>
   {
      //This option specifies the time interval from address assignment
      //until the client transitions to the REBINDING state
      context->t2 = LOAD32BE(option->value);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	061a      	lsls	r2, r3, #24
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	78db      	ldrb	r3, [r3, #3]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	4313      	orrs	r3, r2
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	7952      	ldrb	r2, [r2, #5]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	675a      	str	r2, [r3, #116]	; 0x74
 80047f4:	e011      	b.n	800481a <dhcpClientParseAck+0x1ec>
   }
   else if(context->leaseTime != DHCP_INFINITE_TIME)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d008      	beq.n	8004812 <dhcpClientParseAck+0x1e4>
   {
      //By default, T2 is set to 87.5% of the lease time
      context->t2 = context->leaseTime * 7 / 8;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	08da      	lsrs	r2, r3, #3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	675a      	str	r2, [r3, #116]	; 0x74
 8004810:	e003      	b.n	800481a <dhcpClientParseAck+0x1ec>
   }
   else
   {
      //Infinite lease
      context->t2 = DHCP_INFINITE_TIME;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	675a      	str	r2, [r3, #116]	; 0x74
   }

   //Retrieve Subnet Mask option
   option = dhcpGetOption(message, length, DHCP_OPT_SUBNET_MASK);
 800481a:	2201      	movs	r2, #1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	68b8      	ldr	r0, [r7, #8]
 8004820:	f000 fb6e 	bl	8004f00 <dhcpGetOption>
 8004824:	6178      	str	r0, [r7, #20]

   //The specified option has been found?
   if(option != NULL && option->length == sizeof(Ipv4Addr))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d011      	beq.n	8004850 <dhcpClientParseAck+0x222>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d10d      	bne.n	8004850 <dhcpClientParseAck+0x222>
   {
      //Save subnet mask
      ipv4CopyAddr(&interface->ipv4Context.addrList[i].subnetMask,
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004844:	4413      	add	r3, r2
 8004846:	3308      	adds	r3, #8
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	3202      	adds	r2, #2
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	601a      	str	r2, [r3, #0]
         option->value);
   }

   //Retrieve Router option
   option = dhcpGetOption(message, length, DHCP_OPT_ROUTER);
 8004850:	2203      	movs	r2, #3
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f000 fb53 	bl	8004f00 <dhcpGetOption>
 800485a:	6178      	str	r0, [r7, #20]

   //The specified option has been found?
   if(option != NULL && !(option->length % sizeof(Ipv4Addr)))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d018      	beq.n	8004894 <dhcpClientParseAck+0x266>
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <dhcpClientParseAck+0x266>
   {
      //Save default gateway
      if(option->length >= sizeof(Ipv4Addr))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d90d      	bls.n	8004894 <dhcpClientParseAck+0x266>
      {
         ipv4CopyAddr(&interface->ipv4Context.addrList[i].defaultGateway,
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	3202      	adds	r2, #2
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	601a      	str	r2, [r3, #0]
            option->value);
      }
   }

   //Use the DNS servers provided by the DHCP server?
   if(!context->settings.manualDnsConfig)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d12e      	bne.n	80048fa <dhcpClientParseAck+0x2cc>
   {
      //Retrieve DNS Server option
      option = dhcpGetOption(message, length, DHCP_OPT_DNS_SERVER);
 800489c:	2206      	movs	r2, #6
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	68b8      	ldr	r0, [r7, #8]
 80048a2:	f000 fb2d 	bl	8004f00 <dhcpGetOption>
 80048a6:	6178      	str	r0, [r7, #20]

      //The specified option has been found?
      if(option != NULL && !(option->length % sizeof(Ipv4Addr)))
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d025      	beq.n	80048fa <dhcpClientParseAck+0x2cc>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11e      	bne.n	80048fa <dhcpClientParseAck+0x2cc>
      {
         //Get the number of addresses provided in the response
         n = option->length / sizeof(Ipv4Addr);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	613b      	str	r3, [r7, #16]

         //Loop through the list of addresses
         for(j = 0; j < n && j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ca:	e00f      	b.n	80048ec <dhcpClientParseAck+0x2be>
         {
            //Save DNS server address
            ipv4CopyAddr(&interface->ipv4Context.dnsServerList[j],
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	3366      	adds	r3, #102	; 0x66
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d4:	4413      	add	r3, r2
 80048d6:	3308      	adds	r3, #8
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	1c91      	adds	r1, r2, #2
 80048dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	440a      	add	r2, r1
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	601a      	str	r2, [r3, #0]
         for(j = 0; j < n && j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	3301      	adds	r3, #1
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d202      	bcs.n	80048fa <dhcpClientParseAck+0x2cc>
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d9e8      	bls.n	80048cc <dhcpClientParseAck+0x29e>
         }
      }
   }

   //Retrieve MTU option
   option = dhcpGetOption(message, length, DHCP_OPT_INTERFACE_MTU);
 80048fa:	221a      	movs	r2, #26
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	68b8      	ldr	r0, [r7, #8]
 8004900:	f000 fafe 	bl	8004f00 <dhcpGetOption>
 8004904:	6178      	str	r0, [r7, #20]

   //The specified option has been found?
   if(option != NULL && option->length == 2)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <dhcpClientParseAck+0x30e>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d113      	bne.n	800493c <dhcpClientParseAck+0x30e>
   {
      //This option specifies the MTU to use on this interface
      n = LOAD16BE(option->value);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	789b      	ldrb	r3, [r3, #2]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	78d2      	ldrb	r2, [r2, #3]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

      //Make sure that the option's value is acceptable
      if(n >= IPV4_MINIMUM_MTU && n <= physicalInterface->nicDriver->mtu)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b43      	cmp	r3, #67	; 0x43
 8004926:	d909      	bls.n	800493c <dhcpClientParseAck+0x30e>
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d803      	bhi.n	800493c <dhcpClientParseAck+0x30e>
      {
         //Set the MTU to be used on the interface
         interface->ipv4Context.linkMtu = n;
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
      }
   }

   //Record the IP address of the DHCP server
   ipv4CopyAddr(&context->serverIpAddr, serverIdOption->value);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3358      	adds	r3, #88	; 0x58
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	3202      	adds	r2, #2
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	601a      	str	r2, [r3, #0]
   //Record the IP address assigned to the client
   context->requestedIpAddr = message->yiaddr;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c

   //Save the time a which the lease was obtained
   context->leaseStartTime = osGetSystemTime();
 8004950:	f7fc fca6 	bl	80012a0 <osGetSystemTime>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	669a      	str	r2, [r3, #104]	; 0x68

   //Check current state
   if(context->state == DHCP_STATE_REQUESTING ||
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004960:	2b02      	cmp	r3, #2
 8004962:	d004      	beq.n	800496e <dhcpClientParseAck+0x340>
      context->state == DHCP_STATE_REBOOTING)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   if(context->state == DHCP_STATE_REQUESTING ||
 800496a:	2b04      	cmp	r3, #4
 800496c:	d127      	bne.n	80049be <dhcpClientParseAck+0x390>
   {
      //Use the IP address as a tentative address
      interface->ipv4Context.addrList[i].addr = message->yiaddr;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6919      	ldr	r1, [r3, #16]
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4403      	add	r3, r0
 8004980:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004984:	6019      	str	r1, [r3, #0]
      interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_TENTATIVE;
 8004986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]

      //Clear conflict flag
      interface->ipv4Context.addrList[i].conflict = FALSE;
 800499c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]

      //The client should probe the newly received address
      dhcpClientChangeState(context, DHCP_STATE_PROBING, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2105      	movs	r1, #5
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f906 	bl	8004bc8 <dhcpClientChangeState>
 80049bc:	e02b      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
   }
   else
   {
      //Assign the IP address to the client
      interface->ipv4Context.addrList[i].addr = message->yiaddr;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6919      	ldr	r1, [r3, #16]
 80049c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4403      	add	r3, r0
 80049d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80049d4:	6019      	str	r1, [r3, #0]
      interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 80049d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
#if (MDNS_RESPONDER_SUPPORT == ENABLED)
      //Restart mDNS probing process
      mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif
      //The client transitions to the BOUND state
      dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2106      	movs	r1, #6
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f8e9 	bl	8004bc8 <dhcpClientChangeState>
 80049f6:	e00e      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 80049f8:	bf00      	nop
 80049fa:	e00c      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 80049fc:	bf00      	nop
 80049fe:	e00a      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 8004a00:	bf00      	nop
 8004a02:	e008      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 8004a04:	bf00      	nop
 8004a06:	e006      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
         return;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
         return;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <dhcpClientParseAck+0x3e8>
      return;
 8004a14:	bf00      	nop
   }
}
 8004a16:	3730      	adds	r7, #48	; 0x30
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <dhcpClientParseNak>:
 * @param[in] length Length of the incoming message to parse
 **/

void dhcpClientParseNak(DhcpClientContext *context,
   const DhcpMessage *message, size_t length)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
   DhcpOption *serverIdOption;
   NetInterface *interface;
   NetInterface *logicalInterface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	61fb      	str	r3, [r7, #28]
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8004a2e:	69f8      	ldr	r0, [r7, #28]
 8004a30:	f00c ffc9 	bl	80119c6 <nicGetLogicalInterface>
 8004a34:	61b8      	str	r0, [r7, #24]

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	617b      	str	r3, [r7, #20]

   //Discard any received packet that does not match the transaction ID
   if(ntohl(message->xid) != context->transactionId)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fa55 	bl	8000ef0 <swapInt32>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d15f      	bne.n	8004b10 <dhcpClientParseNak+0xf4>
      return;

   //Check MAC address
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f103 001c 	add.w	r0, r3, #28
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	3384      	adds	r3, #132	; 0x84
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f018 ff01 	bl	801d864 <memcmp>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d155      	bne.n	8004b14 <dhcpClientParseNak+0xf8>
      return;

   //A DHCP server always returns its own address in the Server Identifier option
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_IDENTIFIER);
 8004a68:	2236      	movs	r2, #54	; 0x36
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	68b8      	ldr	r0, [r7, #8]
 8004a6e:	f000 fa47 	bl	8004f00 <dhcpGetOption>
 8004a72:	6138      	str	r0, [r7, #16]

   //Failed to retrieve the Server Identifier option?
   if(serverIdOption == NULL || serverIdOption->length != 4)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04e      	beq.n	8004b18 <dhcpClientParseNak+0xfc>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d14a      	bne.n	8004b18 <dhcpClientParseNak+0xfc>
      return;

   //Check current state
   if(context->state == DHCP_STATE_REQUESTING ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d004      	beq.n	8004a96 <dhcpClientParseNak+0x7a>
      context->state == DHCP_STATE_RENEWING)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   if(context->state == DHCP_STATE_REQUESTING ||
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d10b      	bne.n	8004aae <dhcpClientParseNak+0x92>
   {
      //Check the server identifier
      if(!ipv4CompAddr(serverIdOption->value, &context->serverIpAddr))
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1c98      	adds	r0, r3, #2
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3358      	adds	r3, #88	; 0x58
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f018 fedf 	bl	801d864 <memcmp>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <dhcpClientParseNak+0xa6>
         return;
 8004aac:	e037      	b.n	8004b1e <dhcpClientParseNak+0x102>
   }
   else if(context->state == DHCP_STATE_REBOOTING ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d004      	beq.n	8004ac2 <dhcpClientParseNak+0xa6>
      context->state == DHCP_STATE_REBINDING)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   else if(context->state == DHCP_STATE_REBOOTING ||
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d12c      	bne.n	8004b1c <dhcpClientParseNak+0x100>
      //Silently discard the DHCPNAK message
      return;
   }

   //The host address is no longer appropriate for the link
   interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 8004ac2:	69f9      	ldr	r1, [r7, #28]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
   interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]

   //Clear subnet mask
   interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
   //Restart mDNS probing process
   mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif

   //Restart DHCP configuration
   dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2100      	movs	r1, #0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f85d 	bl	8004bc8 <dhcpClientChangeState>
 8004b0e:	e006      	b.n	8004b1e <dhcpClientParseNak+0x102>
      return;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <dhcpClientParseNak+0x102>
      return;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <dhcpClientParseNak+0x102>
      return;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <dhcpClientParseNak+0x102>
      return;
 8004b1c:	bf00      	nop
}
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <dhcpClientCheckTimeout>:
 * @brief Manage DHCP configuration timeout
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientCheckTimeout(DhcpClientContext *context)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]

   //Get current time
   time = osGetSystemTime();
 8004b32:	f7fc fbb5 	bl	80012a0 <osGetSystemTime>
 8004b36:	60b8      	str	r0, [r7, #8]

   //Any registered callback?
   if(context->settings.timeoutEvent != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01a      	beq.n	8004b76 <dhcpClientCheckTimeout+0x52>
   {
      //DHCP configuration timeout?
      if(timeCompare(time, context->configStartTime + context->settings.timeout) >= 0)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4413      	add	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	db11      	blt.n	8004b76 <dhcpClientCheckTimeout+0x52>
      {
         //Ensure the callback function is only called once
         if(!context->timeoutEventDone)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <dhcpClientCheckTimeout+0x52>
         {
            //Release exclusive access
            osReleaseMutex(&netMutex);
 8004b5a:	4809      	ldr	r0, [pc, #36]	; (8004b80 <dhcpClientCheckTimeout+0x5c>)
 8004b5c:	f7fc fb91 	bl	8001282 <osReleaseMutex>
            //Invoke user callback function
            context->settings.timeoutEvent(context, interface);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	68f9      	ldr	r1, [r7, #12]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
            //Get exclusive access
            osAcquireMutex(&netMutex);
 8004b6a:	4805      	ldr	r0, [pc, #20]	; (8004b80 <dhcpClientCheckTimeout+0x5c>)
 8004b6c:	f7fc fb7a 	bl	8001264 <osAcquireMutex>

            //Set flag
            context->timeoutEventDone = TRUE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
         }
      }
   }
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200046f4 	.word	0x200046f4

08004b84 <dhcpClientComputeElapsedTime>:
 * @param[in] context Pointer to the DHCP client context
 * @return The elapsed time expressed in seconds
 **/

uint16_t dhcpClientComputeElapsedTime(DhcpClientContext *context)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Compute the time elapsed since the DHCP configuration process started
   time = (osGetSystemTime() - context->configStartTime) / 1000;
 8004b8c:	f7fc fb88 	bl	80012a0 <osGetSystemTime>
 8004b90:	4602      	mov	r2, r0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <dhcpClientComputeElapsedTime+0x40>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	60fb      	str	r3, [r7, #12]

   //The value 0xFFFF is used to represent any elapsed time values
   //greater than the largest time value that can be represented
   time = MIN(time, 0xFFFF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bf28      	it	cs
 8004bac:	4613      	movcs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

   //Convert the 16-bit value to network byte order
   return htons(time);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fc f98d 	bl	8000ed4 <swapInt16>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <dhcpClientChangeState>:
 * @param[in] delay Initial delay
 **/

void dhcpClientChangeState(DhcpClientContext *context,
   DhcpState newState, systime_t delay)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	72fb      	strb	r3, [r7, #11]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8004bd6:	f7fc fb63 	bl	80012a0 <osGetSystemTime>
 8004bda:	6178      	str	r0, [r7, #20]

#if (DHCP_TRACE_LEVEL >= TRACE_LEVEL_INFO)
   //Sanity check
   if(newState <= DHCP_STATE_REBINDING)
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d813      	bhi.n	8004c0a <dhcpClientChangeState+0x42>
         "RENEWING",
         "REBINDING"
      };

      //Debug message
      TRACE_INFO("%s: DHCP client %s state\r\n",
 8004be2:	f7fc fa5a 	bl	800109a <osSuspendAllTasks>
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <dhcpClientChangeState+0x8c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68dc      	ldr	r4, [r3, #12]
 8004bec:	2100      	movs	r1, #0
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f7fc f998 	bl	8000f24 <formatSystemTime>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	4917      	ldr	r1, [pc, #92]	; (8004c58 <dhcpClientChangeState+0x90>)
 8004bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bfe:	4917      	ldr	r1, [pc, #92]	; (8004c5c <dhcpClientChangeState+0x94>)
 8004c00:	4620      	mov	r0, r4
 8004c02:	f018 f9bf 	bl	801cf84 <fprintf>
 8004c06:	f7fc fa53 	bl	80010b0 <osResumeAllTasks>
         formatSystemTime(time, NULL), stateLabel[newState]);
   }
#endif

   //Set time stamp
   context->timestamp = time;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	649a      	str	r2, [r3, #72]	; 0x48
   //Set initial delay
   context->timeout = delay;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	64da      	str	r2, [r3, #76]	; 0x4c
   //Reset retransmission counter
   context->retransmitCount = 0;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
   //Switch to the new state
   context->state = newState;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	7afa      	ldrb	r2, [r7, #11]
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

   //Any registered callback?
   if(context->settings.stateChangeEvent != NULL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <dhcpClientChangeState+0x82>
   {
      NetInterface *interface;

      //Point to the underlying network interface
      interface = context->settings.interface;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	613b      	str	r3, [r7, #16]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8004c32:	480b      	ldr	r0, [pc, #44]	; (8004c60 <dhcpClientChangeState+0x98>)
 8004c34:	f7fc fb25 	bl	8001282 <osReleaseMutex>
      //Invoke user callback function
      context->settings.stateChangeEvent(context, interface, newState);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	7afa      	ldrb	r2, [r7, #11]
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8004c44:	4806      	ldr	r0, [pc, #24]	; (8004c60 <dhcpClientChangeState+0x98>)
 8004c46:	f7fc fb0d 	bl	8001264 <osAcquireMutex>
   }
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000044 	.word	0x20000044
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	080241ac 	.word	0x080241ac
 8004c60:	200046f4 	.word	0x200046f4

08004c64 <dhcpClientDumpConfig>:
 * @brief Dump DHCP configuration for debugging purpose
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientDumpConfig(DhcpClientContext *context)
{
 8004c64:	b5b0      	push	{r4, r5, r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
   uint_t j;
   NetInterface *interface;
   Ipv4Context *ipv4Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	613b      	str	r3, [r7, #16]
   //Point to the IPv4 context
   ipv4Context = &interface->ipv4Context;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004c78:	60fb      	str	r3, [r7, #12]

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60bb      	str	r3, [r7, #8]

   //Debug message
   TRACE_INFO("\r\n");
 8004c80:	f7fc fa0b 	bl	800109a <osSuspendAllTasks>
 8004c84:	4b6e      	ldr	r3, [pc, #440]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	486d      	ldr	r0, [pc, #436]	; (8004e44 <dhcpClientDumpConfig+0x1e0>)
 8004c90:	f018 fb60 	bl	801d354 <fwrite>
 8004c94:	f7fc fa0c 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("DHCP configuration:\r\n");
 8004c98:	f7fc f9ff 	bl	800109a <osSuspendAllTasks>
 8004c9c:	4b68      	ldr	r3, [pc, #416]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2215      	movs	r2, #21
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4868      	ldr	r0, [pc, #416]	; (8004e48 <dhcpClientDumpConfig+0x1e4>)
 8004ca8:	f018 fb54 	bl	801d354 <fwrite>
 8004cac:	f7fc fa00 	bl	80010b0 <osResumeAllTasks>

   //Lease start time
   TRACE_INFO("  Lease Start Time = %s\r\n",
 8004cb0:	f7fc f9f3 	bl	800109a <osSuspendAllTasks>
 8004cb4:	4b62      	ldr	r3, [pc, #392]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68dc      	ldr	r4, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc f92f 	bl	8000f24 <formatSystemTime>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4960      	ldr	r1, [pc, #384]	; (8004e4c <dhcpClientDumpConfig+0x1e8>)
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f018 f959 	bl	801cf84 <fprintf>
 8004cd2:	f7fc f9ed 	bl	80010b0 <osResumeAllTasks>
      formatSystemTime(context->leaseStartTime, NULL));

   //Lease time
   TRACE_INFO("  Lease Time = %" PRIu32 "s\r\n", context->leaseTime);
 8004cd6:	f7fc f9e0 	bl	800109a <osSuspendAllTasks>
 8004cda:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68d8      	ldr	r0, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	495a      	ldr	r1, [pc, #360]	; (8004e50 <dhcpClientDumpConfig+0x1ec>)
 8004ce8:	f018 f94c 	bl	801cf84 <fprintf>
 8004cec:	f7fc f9e0 	bl	80010b0 <osResumeAllTasks>
   //Renewal time
   TRACE_INFO("  T1 = %" PRIu32 "s\r\n", context->t1);
 8004cf0:	f7fc f9d3 	bl	800109a <osSuspendAllTasks>
 8004cf4:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68d8      	ldr	r0, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4954      	ldr	r1, [pc, #336]	; (8004e54 <dhcpClientDumpConfig+0x1f0>)
 8004d02:	f018 f93f 	bl	801cf84 <fprintf>
 8004d06:	f7fc f9d3 	bl	80010b0 <osResumeAllTasks>
   //Rebinding time
   TRACE_INFO("  T2 = %" PRIu32 "s\r\n", context->t2);
 8004d0a:	f7fc f9c6 	bl	800109a <osSuspendAllTasks>
 8004d0e:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68d8      	ldr	r0, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d18:	461a      	mov	r2, r3
 8004d1a:	494f      	ldr	r1, [pc, #316]	; (8004e58 <dhcpClientDumpConfig+0x1f4>)
 8004d1c:	f018 f932 	bl	801cf84 <fprintf>
 8004d20:	f7fc f9c6 	bl	80010b0 <osResumeAllTasks>

   //Host address
   TRACE_INFO("  IPv4 Address = %s\r\n",
 8004d24:	f7fc f9b9 	bl	800109a <osSuspendAllTasks>
 8004d28:	4b45      	ldr	r3, [pc, #276]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68dc      	ldr	r4, [r3, #12]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3310      	adds	r3, #16
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f004 faf2 	bl	800932c <ipv4AddrToString>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4943      	ldr	r1, [pc, #268]	; (8004e5c <dhcpClientDumpConfig+0x1f8>)
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f018 f918 	bl	801cf84 <fprintf>
 8004d54:	f7fc f9ac 	bl	80010b0 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].addr, NULL));

   //Subnet mask
   TRACE_INFO("  Subnet Mask = %s\r\n",
 8004d58:	f7fc f99f 	bl	800109a <osSuspendAllTasks>
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68dc      	ldr	r4, [r3, #12]
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	331c      	adds	r3, #28
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fad8 	bl	800932c <ipv4AddrToString>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4937      	ldr	r1, [pc, #220]	; (8004e60 <dhcpClientDumpConfig+0x1fc>)
 8004d82:	4620      	mov	r0, r4
 8004d84:	f018 f8fe 	bl	801cf84 <fprintf>
 8004d88:	f7fc f992 	bl	80010b0 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].subnetMask, NULL));

   //Default gateway
   TRACE_INFO("  Default Gateway = %s\r\n",
 8004d8c:	f7fc f985 	bl	800109a <osSuspendAllTasks>
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68dc      	ldr	r4, [r3, #12]
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3320      	adds	r3, #32
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f004 fabe 	bl	800932c <ipv4AddrToString>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	492b      	ldr	r1, [pc, #172]	; (8004e64 <dhcpClientDumpConfig+0x200>)
 8004db6:	4620      	mov	r0, r4
 8004db8:	f018 f8e4 	bl	801cf84 <fprintf>
 8004dbc:	f7fc f978 	bl	80010b0 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].defaultGateway, NULL));

   //DNS servers
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e01b      	b.n	8004dfe <dhcpClientDumpConfig+0x19a>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", j + 1,
 8004dc6:	f7fc f968 	bl	800109a <osSuspendAllTasks>
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68dc      	ldr	r4, [r3, #12]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1c5d      	adds	r5, r3, #1
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f004 faa2 	bl	800932c <ipv4AddrToString>
 8004de8:	4603      	mov	r3, r0
 8004dea:	462a      	mov	r2, r5
 8004dec:	491e      	ldr	r1, [pc, #120]	; (8004e68 <dhcpClientDumpConfig+0x204>)
 8004dee:	4620      	mov	r0, r4
 8004df0:	f018 f8c8 	bl	801cf84 <fprintf>
 8004df4:	f7fc f95c 	bl	80010b0 <osResumeAllTasks>
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d9e0      	bls.n	8004dc6 <dhcpClientDumpConfig+0x162>
         ipv4AddrToString(ipv4Context->dnsServerList[j], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", interface->ipv4Context.linkMtu);
 8004e04:	f7fc f949 	bl	800109a <osSuspendAllTasks>
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68d8      	ldr	r0, [r3, #12]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8004e14:	461a      	mov	r2, r3
 8004e16:	4915      	ldr	r1, [pc, #84]	; (8004e6c <dhcpClientDumpConfig+0x208>)
 8004e18:	f018 f8b4 	bl	801cf84 <fprintf>
 8004e1c:	f7fc f948 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 8004e20:	f7fc f93b 	bl	800109a <osSuspendAllTasks>
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <dhcpClientDumpConfig+0x1dc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4805      	ldr	r0, [pc, #20]	; (8004e44 <dhcpClientDumpConfig+0x1e0>)
 8004e30:	f018 fa90 	bl	801d354 <fwrite>
 8004e34:	f7fc f93c 	bl	80010b0 <osResumeAllTasks>
#endif
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e40:	20000044 	.word	0x20000044
 8004e44:	080241c8 	.word	0x080241c8
 8004e48:	080241cc 	.word	0x080241cc
 8004e4c:	080241e4 	.word	0x080241e4
 8004e50:	08024200 	.word	0x08024200
 8004e54:	08024218 	.word	0x08024218
 8004e58:	08024228 	.word	0x08024228
 8004e5c:	08024238 	.word	0x08024238
 8004e60:	08024250 	.word	0x08024250
 8004e64:	08024268 	.word	0x08024268
 8004e68:	08024284 	.word	0x08024284
 8004e6c:	0802429c 	.word	0x0802429c

08004e70 <dhcpAddOption>:
 * @param[in] optionLen Length of the option value
 **/

void dhcpAddOption(DhcpMessage *message, uint8_t optionCode,
   const void *optionValue, size_t optionLen)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	72fb      	strb	r3, [r7, #11]
   size_t n;
   DhcpOption *option;

   //Point to the very first option
   n = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]

   //Parse DHCP options
   while(1)
   {
      //Point to the current option
      option = (DhcpOption *) (message->options + n);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

      //End option detected?
      if(option->code == DHCP_OPT_END)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2bff      	cmp	r3, #255	; 0xff
 8004e96:	d007      	beq.n	8004ea8 <dhcpAddOption+0x38>
         break;

      //Jump to the next option
      n += sizeof(DhcpOption) + option->length;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	617b      	str	r3, [r7, #20]
      option = (DhcpOption *) (message->options + n);
 8004ea6:	e7ed      	b.n	8004e84 <dhcpAddOption+0x14>
         break;
 8004ea8:	bf00      	nop
   }

   //Sanity check
   if(optionLen <= UINT8_MAX)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2bff      	cmp	r3, #255	; 0xff
 8004eae:	d823      	bhi.n	8004ef8 <dhcpAddOption+0x88>
   {
      //Point to the buffer where the option is to be written
      option = (DhcpOption *) (message->options + n);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

      //Option code
      option->code = optionCode;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	7afa      	ldrb	r2, [r7, #11]
 8004ec0:	701a      	strb	r2, [r3, #0]
      //Option length
      option->length = (uint8_t) optionLen;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	705a      	strb	r2, [r3, #1]
      //Option value
      osMemcpy(option->value, optionValue, optionLen);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f018 fcd4 	bl	801d880 <memcpy>

      //Jump to the next option
      n += sizeof(DhcpOption) + option->length;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	461a      	mov	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]

      //Point to the buffer where the option is to be written
      option = (DhcpOption *) (message->options + n);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

      //Always terminate the options field with 255
      option->code = DHCP_OPT_END;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	22ff      	movs	r2, #255	; 0xff
 8004ef6:	701a      	strb	r2, [r3, #0]
   }
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <dhcpGetOption>:
 *   option is returned. Otherwise NULL pointer is returned
 **/

DhcpOption *dhcpGetOption(const DhcpMessage *message,
   size_t length, uint8_t optionCode)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
   size_t i;
   DhcpOption *option;

   //Make sure the DHCP header is valid
   if(length >= sizeof(DhcpMessage))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2bef      	cmp	r3, #239	; 0xef
 8004f12:	d93c      	bls.n	8004f8e <dhcpGetOption+0x8e>
   {
      //Get the length of the options field
      length -= sizeof(DhcpMessage);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3bf0      	subs	r3, #240	; 0xf0
 8004f18:	60bb      	str	r3, [r7, #8]

      //Loop through the list of options
      for(i = 0; i < length; i++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e02c      	b.n	8004f7a <dhcpGetOption+0x7a>
      {
         //Point to the current option
         option = (DhcpOption *) (message->options + i);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

         //Check option code
         if(option->code == DHCP_OPT_PAD)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01f      	beq.n	8004f74 <dhcpGetOption+0x74>
         {
            //The pad option can be used to cause subsequent fields to align
            //on word boundaries
         }
         else if(option->code == DHCP_OPT_END)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2bff      	cmp	r3, #255	; 0xff
 8004f3a:	d023      	beq.n	8004f84 <dhcpGetOption+0x84>
            break;
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d920      	bls.n	8004f88 <dhcpGetOption+0x88>
               break;

            //Check the length of the option
            if((i + sizeof(DhcpOption) + option->length) > length)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3302      	adds	r3, #2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d319      	bcc.n	8004f8c <dhcpGetOption+0x8c>
               break;

            //Matching option code?
            if(option->code == optionCode)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	79fa      	ldrb	r2, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d101      	bne.n	8004f66 <dhcpGetOption+0x66>
               return option;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	e014      	b.n	8004f90 <dhcpGetOption+0x90>

            //Jump to the next option
            i += option->length + 1;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
      for(i = 0; i < length; i++)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3301      	adds	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d3ce      	bcc.n	8004f20 <dhcpGetOption+0x20>
 8004f82:	e004      	b.n	8004f8e <dhcpGetOption+0x8e>
            break;
 8004f84:	bf00      	nop
 8004f86:	e002      	b.n	8004f8e <dhcpGetOption+0x8e>
               break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <dhcpGetOption+0x8e>
               break;
 8004f8c:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   osMemset(dnsCache, 0, sizeof(dnsCache));
 8004fa0:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4803      	ldr	r0, [pc, #12]	; (8004fb4 <dnsInit+0x18>)
 8004fa8:	f018 fc92 	bl	801d8d0 <memset>

   //Successful initialization
   return NO_ERROR;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20004340 	.word	0x20004340

08004fb8 <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e015      	b.n	8004ff2 <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2274      	movs	r2, #116	; 0x74
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <dnsFlushCache+0x4c>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != DNS_STATE_NONE)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d102      	bne.n	8004fec <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 f80e 	bl	8005008 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	d9e6      	bls.n	8004fc6 <dnsFlushCache+0xe>
      }
   }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20004340 	.word	0x20004340

08005008 <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d012      	beq.n	800503c <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	789b      	ldrb	r3, [r3, #2]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10b      	bne.n	8005036 <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	899b      	ldrh	r3, [r3, #12]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f013 f9eb 	bl	801840c <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
   }
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800504a:	f7fc f929 	bl	80012a0 <osGetSystemTime>
 800504e:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	e083      	b.n	800515e <dnsTick+0x11a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2274      	movs	r2, #116	; 0x74
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	4a44      	ldr	r2, [pc, #272]	; (8005170 <dnsTick+0x12c>)
 8005060:	4413      	add	r3, r2
 8005062:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d165      	bne.n	8005138 <dnsTick+0xf4>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005074:	4413      	add	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	db6c      	blt.n	8005158 <dnsTick+0x114>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02f      	beq.n	80050e6 <dnsTick+0xa2>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	789b      	ldrb	r3, [r3, #2]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 800508e:	6838      	ldr	r0, [r7, #0]
 8005090:	f000 f870 	bl	8005174 <dnsSendQuery>
 8005094:	4603      	mov	r3, r0
 8005096:	81fb      	strh	r3, [r7, #14]
 8005098:	e00b      	b.n	80050b2 <dnsTick+0x6e>
               }
               else
#endif
#if (NBNS_CLIENT_SUPPORT == ENABLED && IPV4_SUPPORT == ENABLED)
               //NetBIOS Name Service resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_NBNS)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	789b      	ldrb	r3, [r3, #2]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d105      	bne.n	80050ae <dnsTick+0x6a>
               {
                  //Retransmit NBNS query
                  error = nbnsSendQuery(entry);
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f008 fb5e 	bl	800d764 <nbnsSendQuery>
 80050a8:	4603      	mov	r3, r0
 80050aa:	81fb      	strh	r3, [r7, #14]
 80050ac:	e001      	b.n	80050b2 <dnsTick+0x6e>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 80050b2:	89fb      	ldrh	r3, [r7, #14]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d112      	bne.n	80050de <dnsTick+0x9a>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	665a      	str	r2, [r3, #100]	; 0x64
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	429a      	cmp	r2, r3
 80050ca:	bf28      	it	cs
 80050cc:	461a      	movcs	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	669a      	str	r2, [r3, #104]	; 0x68
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	671a      	str	r2, [r3, #112]	; 0x70
 80050dc:	e03c      	b.n	8005158 <dnsTick+0x114>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f7ff ff92 	bl	8005008 <dnsDeleteEntry>
 80050e4:	e038      	b.n	8005158 <dnsTick+0x114>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	789b      	ldrb	r3, [r3, #2]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d120      	bne.n	8005130 <dnsTick+0xec>
            {
               //Select the next DNS server
               entry->dnsServerNum++;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	671a      	str	r2, [r3, #112]	; 0x70
               //Send DNS query
               error = dnsSendQuery(entry);
 80050fe:	6838      	ldr	r0, [r7, #0]
 8005100:	f000 f838 	bl	8005174 <dnsSendQuery>
 8005104:	4603      	mov	r3, r0
 8005106:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10c      	bne.n	8005128 <dnsTick+0xe4>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	665a      	str	r2, [r3, #100]	; 0x64
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800511a:	669a      	str	r2, [r3, #104]	; 0x68
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	671a      	str	r2, [r3, #112]	; 0x70
 8005126:	e017      	b.n	8005158 <dnsTick+0x114>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8005128:	6838      	ldr	r0, [r7, #0]
 800512a:	f7ff ff6d 	bl	8005008 <dnsDeleteEntry>
 800512e:	e013      	b.n	8005158 <dnsTick+0x114>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	f7ff ff69 	bl	8005008 <dnsDeleteEntry>
 8005136:	e00f      	b.n	8005158 <dnsTick+0x114>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d10b      	bne.n	8005158 <dnsTick+0x114>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005148:	4413      	add	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	db02      	blt.n	8005158 <dnsTick+0x114>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f7ff ff58 	bl	8005008 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	3301      	adds	r3, #1
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b07      	cmp	r3, #7
 8005162:	f67f af78 	bls.w	8005056 <dnsTick+0x12>
         }
      }
   }
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20004340 	.word	0x20004340

08005174 <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 8005174:	b5b0      	push	{r4, r5, r7, lr}
 8005176:	b09a      	sub	sp, #104	; 0x68
 8005178:	af04      	add	r7, sp, #16
 800517a:	6078      	str	r0, [r7, #4]
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d11b      	bne.n	80051bc <dnsSendQuery+0x48>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800518c:	653b      	str	r3, [r7, #80]	; 0x50

      //Out of range index?
      if(entry->dnsServerNum >= IPV4_DNS_SERVER_LIST_SIZE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d902      	bls.n	800519c <dnsSendQuery+0x28>
         return ERROR_NO_DNS_SERVER;
 8005196:	f240 2325 	movw	r3, #549	; 0x225
 800519a:	e108      	b.n	80053ae <dnsSendQuery+0x23a>

      //Select the relevant DNS server
      destIpAddr.length = sizeof(Ipv4Addr);
 800519c:	2304      	movs	r3, #4
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
      destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerNum];
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051a6:	3308      	adds	r3, #8
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28

      //Make sure the IP address is valid
      if(destIpAddr.ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d130      	bne.n	8005218 <dnsSendQuery+0xa4>
         return ERROR_NO_DNS_SERVER;
 80051b6:	f240 2325 	movw	r3, #549	; 0x225
 80051ba:	e0f8      	b.n	80053ae <dnsSendQuery+0x23a>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //An IPv6 address is expected?
   if(entry->type == HOST_TYPE_IPV6)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d127      	bne.n	8005214 <dnsSendQuery+0xa0>
   {
      //Point to the IPv6 context
      Ipv6Context *ipv6Context = &entry->interface->ipv6Context;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80051cc:	657b      	str	r3, [r7, #84]	; 0x54

      //Out of range index?
      if(entry->dnsServerNum >= IPV6_DNS_SERVER_LIST_SIZE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d902      	bls.n	80051dc <dnsSendQuery+0x68>
         return ERROR_NO_DNS_SERVER;
 80051d6:	f240 2325 	movw	r3, #549	; 0x225
 80051da:	e0e8      	b.n	80053ae <dnsSendQuery+0x23a>

      //Select the relevant DNS server
      destIpAddr.length = sizeof(Ipv6Addr);
 80051dc:	2310      	movs	r3, #16
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
      destIpAddr.ipv6Addr = ipv6Context->dnsServerList[entry->dnsServerNum];
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80051ee:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80051f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Make sure the IP address is valid
      if(ipv6CompAddr(&destIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR))
 80051f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051fc:	3304      	adds	r3, #4
 80051fe:	2210      	movs	r2, #16
 8005200:	496d      	ldr	r1, [pc, #436]	; (80053b8 <dnsSendQuery+0x244>)
 8005202:	4618      	mov	r0, r3
 8005204:	f018 fb2e 	bl	801d864 <memcmp>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <dnsSendQuery+0xa4>
         return ERROR_NO_DNS_SERVER;
 800520e:	f240 2325 	movw	r3, #549	; 0x225
 8005212:	e0cc      	b.n	80053ae <dnsSendQuery+0x23a>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 8005214:	2302      	movs	r3, #2
 8005216:	e0ca      	b.n	80053ae <dnsSendQuery+0x23a>
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8005218:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800521c:	4619      	mov	r1, r3
 800521e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005222:	f013 f855 	bl	80182d0 <udpAllocBuffer>
 8005226:	64f8      	str	r0, [r7, #76]	; 0x4c
   //Failed to allocate buffer?
   if(buffer == NULL)
 8005228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <dnsSendQuery+0xbe>
      return ERROR_OUT_OF_MEMORY;
 800522e:	2364      	movs	r3, #100	; 0x64
 8005230:	e0bd      	b.n	80053ae <dnsSendQuery+0x23a>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	4619      	mov	r1, r3
 8005236:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005238:	f00b fc69 	bl	8010b0e <netBufferAt>
 800523c:	64b8      	str	r0, [r7, #72]	; 0x48

   //Format DNS query message
   message->id = htons(entry->id);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	89db      	ldrh	r3, [r3, #14]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb fe46 	bl	8000ed4 <swapInt16>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524e:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 8005250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005252:	7893      	ldrb	r3, [r2, #2]
 8005254:	f36f 13c7 	bfc	r3, #7, #1
 8005258:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800525a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525c:	7893      	ldrb	r3, [r2, #2]
 800525e:	f36f 03c6 	bfc	r3, #3, #4
 8005262:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 8005264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005266:	7893      	ldrb	r3, [r2, #2]
 8005268:	f36f 0382 	bfc	r3, #2, #1
 800526c:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005270:	7893      	ldrb	r3, [r2, #2]
 8005272:	f36f 0341 	bfc	r3, #1, #1
 8005276:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 8005278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800527a:	7893      	ldrb	r3, [r2, #2]
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 8005282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005284:	78d3      	ldrb	r3, [r2, #3]
 8005286:	f36f 13c7 	bfc	r3, #7, #1
 800528a:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 800528c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528e:	78d3      	ldrb	r3, [r2, #3]
 8005290:	f36f 1306 	bfc	r3, #4, #3
 8005294:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 8005296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005298:	78d3      	ldrb	r3, [r2, #3]
 800529a:	f36f 0303 	bfc	r3, #0, #4
 800529e:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 80052a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a2:	2200      	movs	r2, #0
 80052a4:	711a      	strb	r2, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 80052ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b0:	2200      	movs	r2, #0
 80052b2:	719a      	strb	r2, [r3, #6]
 80052b4:	2200      	movs	r2, #0
 80052b6:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 80052b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ba:	2200      	movs	r2, #0
 80052bc:	721a      	strb	r2, [r3, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 80052c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c4:	2200      	movs	r2, #0
 80052c6:	729a      	strb	r2, [r3, #10]
 80052c8:	2200      	movs	r2, #0
 80052ca:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 80052cc:	230c      	movs	r3, #12
 80052ce:	647b      	str	r3, [r7, #68]	; 0x44

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0210 	add.w	r2, r3, #16
 80052d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d8:	330c      	adds	r3, #12
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 f873 	bl	80053c8 <dnsEncodeName>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e6:	4413      	add	r3, r2
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ee:	4413      	add	r3, r2
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d10d      	bne.n	8005316 <dnsSendQuery+0x1a2>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	2200      	movs	r2, #0
 800530c:	709a      	strb	r2, [r3, #2]
 800530e:	2200      	movs	r2, #0
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	70da      	strb	r2, [r3, #3]
   }
#endif
#if (IPV6_SUPPORT == ENABLED)
   //An IPv6 address is expected?
   if(entry->type == HOST_TYPE_IPV6)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b20      	cmp	r3, #32
 800531c:	d10d      	bne.n	800533a <dnsSendQuery+0x1c6>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_AAAA);
 800531e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	2200      	movs	r2, #0
 8005326:	f042 021c 	orr.w	r2, r2, #28
 800532a:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	2200      	movs	r2, #0
 8005330:	709a      	strb	r2, [r3, #2]
 8005332:	2200      	movs	r2, #0
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	70da      	strb	r2, [r3, #3]
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 800533a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533c:	3304      	adds	r3, #4
 800533e:	647b      	str	r3, [r7, #68]	; 0x44

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8005340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	4413      	add	r3, r2
 8005346:	4619      	mov	r1, r3
 8005348:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800534a:	f00b fb3a 	bl	80109c2 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 800534e:	f7fb fea4 	bl	800109a <osSuspendAllTasks>
 8005352:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <dnsSendQuery+0x248>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535a:	4919      	ldr	r1, [pc, #100]	; (80053c0 <dnsSendQuery+0x24c>)
 800535c:	4618      	mov	r0, r3
 800535e:	f017 fe11 	bl	801cf84 <fprintf>
 8005362:	f7fb fea5 	bl	80010b0 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8005366:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <dnsSendQuery+0x250>)
 8005368:	f107 040c 	add.w	r4, r7, #12
 800536c:	461d      	mov	r5, r3
 800536e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005372:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005376:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DNS query message
   error = udpSendBuffer(entry->interface, NULL, entry->port, &destIpAddr,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6858      	ldr	r0, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8999      	ldrh	r1, [r3, #12]
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005388:	f107 020c 	add.w	r2, r7, #12
 800538c:	9203      	str	r2, [sp, #12]
 800538e:	9302      	str	r3, [sp, #8]
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	2335      	movs	r3, #53	; 0x35
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4623      	mov	r3, r4
 800539a:	460a      	mov	r2, r1
 800539c:	2100      	movs	r1, #0
 800539e:	f012 fe07 	bl	8017fb0 <udpSendBuffer>
 80053a2:	4603      	mov	r3, r0
 80053a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      DNS_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 80053a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80053a8:	f00b fada 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 80053ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3758      	adds	r7, #88	; 0x58
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bdb0      	pop	{r4, r5, r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08024c2c 	.word	0x08024c2c
 80053bc:	20000044 	.word	0x20000044
 80053c0:	08024378 	.word	0x08024378
 80053c4:	08025288 	.word	0x08025288

080053c8 <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d11b      	bne.n	800541e <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <dnsEncodeName+0x2a>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b3f      	cmp	r3, #63	; 0x3f
 80053f0:	d901      	bls.n	80053f6 <dnsEncodeName+0x2e>
            return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e04d      	b.n	8005492 <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <dnsEncodeName+0x48>
         {
            dest[0] = i;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	4413      	add	r3, r2
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4413      	add	r3, r2
 8005416:	3302      	adds	r3, #2
 8005418:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	e039      	b.n	8005492 <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b2e      	cmp	r3, #46	; 0x2e
 8005428:	d123      	bne.n	8005472 <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <dnsEncodeName+0x6e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b3f      	cmp	r3, #63	; 0x3f
 8005434:	d901      	bls.n	800543a <dnsEncodeName+0x72>
            return 0;
 8005436:	2300      	movs	r3, #0
 8005438:	e02b      	b.n	8005492 <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <dnsEncodeName+0x80>
            dest[0] = i;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <dnsEncodeName+0x9a>
            dest += i + 1;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	4413      	add	r3, r2
 8005460:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	607b      	str	r3, [r7, #4]
         i = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e7b3      	b.n	80053da <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	440b      	add	r3, r1
 8005486:	7812      	ldrb	r2, [r2, #0]
 8005488:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3301      	adds	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 8005490:	e7a3      	b.n	80053da <dnsEncodeName+0x12>
      }
   }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message,
   size_t length, size_t pos, char_t *dest, uint_t level)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b08a      	sub	sp, #40	; 0x28
 80054a2:	af02      	add	r7, sp, #8
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d901      	bls.n	80054b6 <dnsParseName+0x18>
      return 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e08d      	b.n	80055d2 <dnsParseName+0x134>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 80054ba:	e084      	b.n	80055c6 <dnsParseName+0x128>
   {
      //End marker found?
      if(src[pos] == 0)
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <dnsParseName+0x3c>
      {
         //Properly terminate the string
         if(dest != NULL)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <dnsParseName+0x36>
            *dest = '\0';
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	e07b      	b.n	80055d2 <dnsParseName+0x134>
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2bbf      	cmp	r3, #191	; 0xbf
 80054e4:	d92a      	bls.n	800553c <dnsParseName+0x9e>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3301      	adds	r3, #1
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d801      	bhi.n	80054f4 <dnsParseName+0x56>
            return 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e06e      	b.n	80055d2 <dnsParseName+0x134>

         //Read the most significant byte of the pointer
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005506:	617b      	str	r3, [r7, #20]
         //Read the least significant byte of the pointer
         pointer |= src[pos + 1];
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3301      	adds	r3, #1
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

         //Decode the remaining part of the domain name
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	3301      	adds	r3, #1
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffb9 	bl	800549e <dnsParseName>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <dnsParseName+0x98>
         {
            //Domain name decoding failed
            return 0;
 8005532:	2300      	movs	r3, #0
 8005534:	e04d      	b.n	80055d2 <dnsParseName+0x134>
         }

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3302      	adds	r3, #2
 800553a:	e04a      	b.n	80055d2 <dnsParseName+0x134>
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b3e      	cmp	r3, #62	; 0x3e
 8005546:	d836      	bhi.n	80055b6 <dnsParseName+0x118>
      {
         //Get the length of the current label
         n = src[pos++];
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	61bb      	str	r3, [r7, #24]

         //Malformed DNS message?
         if((pos + n) > length)
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	4413      	add	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	d201      	bcs.n	8005566 <dnsParseName+0xc8>
            return 0;
 8005562:	2300      	movs	r3, #0
 8005564:	e035      	b.n	80055d2 <dnsParseName+0x134>

         //The last parameter is optional
         if(dest != NULL)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <dnsParseName+0x10e>
         {
            //Copy current label
            osMemcpy(dest, src + pos, n);
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4619      	mov	r1, r3
 8005576:	6838      	ldr	r0, [r7, #0]
 8005578:	f018 f982 	bl	801d880 <memcpy>

            //Advance read pointer
            pos += n;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	4413      	add	r3, r2
 8005582:	607b      	str	r3, [r7, #4]
            //Advance write pointer
            dest += n;
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	603b      	str	r3, [r7, #0]

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	d218      	bcs.n	80055c6 <dnsParseName+0x128>
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <dnsParseName+0x128>
               *(dest++) = '.';
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	603a      	str	r2, [r7, #0]
 80055a6:	222e      	movs	r2, #46	; 0x2e
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e00c      	b.n	80055c6 <dnsParseName+0x128>
         }
         else
         {
            //Advance read pointer
            pos += n;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4413      	add	r3, r2
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e007      	b.n	80055c6 <dnsParseName+0x128>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <dnsParseName+0x124>
            *dest = '\0';
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
         //Domain name decoding failed
         return 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e005      	b.n	80055d2 <dnsParseName+0x134>
   while(pos < length)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	f4ff af76 	bcc.w	80054bc <dnsParseName+0x1e>
      }
   }

   //Domain name decoding failed
   return 0;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length,
   size_t pos, const char_t *name, uint_t level)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	; 0x28
 80055de:	af02      	add	r7, sp, #8
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d902      	bls.n	80055f4 <dnsCompareName+0x1a>
      return -2;
 80055ee:	f06f 0301 	mvn.w	r3, #1
 80055f2:	e076      	b.n	80056e2 <dnsCompareName+0x108>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 80055f8:	e06d      	b.n	80056d6 <dnsCompareName+0xfc>
   {
      //Retrieve the length of the current label
      n = p[pos];
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]

      //End marker found?
      if(n == 0)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <dnsCompareName+0x42>
      {
         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0')
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <dnsCompareName+0x3e>
            return -1;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	e064      	b.n	80056e2 <dnsCompareName+0x108>

         //The domain names match each other
         return 0;
 8005618:	2300      	movs	r3, #0
 800561a:	e062      	b.n	80056e2 <dnsCompareName+0x108>
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2bbf      	cmp	r3, #191	; 0xbf
 8005620:	d925      	bls.n	800566e <dnsCompareName+0x94>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3301      	adds	r3, #1
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d801      	bhi.n	8005630 <dnsCompareName+0x56>
            return FALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	e058      	b.n	80056e2 <dnsCompareName+0x108>

         //Read the most significant byte of the pointer
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800563e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005642:	613b      	str	r3, [r7, #16]
         //Read the least significant byte of the pointer
         pointer |= p[pos + 1];
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3301      	adds	r3, #1
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

         //Compare the remaining part
         res = dnsCompareName(message, length, pointer, name, level + 1);
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	3301      	adds	r3, #1
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ffb9 	bl	80055da <dnsCompareName>
 8005668:	6178      	str	r0, [r7, #20]

         //Return comparison result
         return res;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	e039      	b.n	80056e2 <dnsCompareName+0x108>
      }
      else
      {
         //Advance data pointer
         pos++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3301      	adds	r3, #1
 8005672:	607b      	str	r3, [r7, #4]

         //Malformed DNS message?
         if((pos + n) > length)
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4413      	add	r3, r2
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d202      	bcs.n	8005686 <dnsCompareName+0xac>
            return -2;
 8005680:	f06f 0301 	mvn.w	r3, #1
 8005684:	e02d      	b.n	80056e2 <dnsCompareName+0x108>

         //Compare current label
         res = osStrncasecmp((char_t *) p + pos, name, n);
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4413      	add	r3, r2
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f018 fb39 	bl	801dd08 <strncasecmp>
 8005696:	6178      	str	r0, [r7, #20]
         //Any mismatch?
         if(res)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <dnsCompareName+0xc8>
            return res;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	e01f      	b.n	80056e2 <dnsCompareName+0x108>

         //Advance data pointer
         pos += n;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	4413      	add	r3, r2
 80056a8:	607b      	str	r3, [r7, #4]
         name += n;
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	4413      	add	r3, r2
 80056b0:	603b      	str	r3, [r7, #0]

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <dnsCompareName+0xee>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b2e      	cmp	r3, #46	; 0x2e
 80056c0:	d002      	beq.n	80056c8 <dnsCompareName+0xee>
            return -1;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e00c      	b.n	80056e2 <dnsCompareName+0x108>

         //Skip the separator character, if any
         if(*name == '.')
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b2e      	cmp	r3, #46	; 0x2e
 80056ce:	d102      	bne.n	80056d6 <dnsCompareName+0xfc>
            name++;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	603b      	str	r3, [r7, #0]
   while(pos < length)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d38d      	bcc.n	80055fa <dnsCompareName+0x20>
      }
   }

   //Malformed DNS message
   return -2;
 80056de:	f06f 0301 	mvn.w	r3, #1
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <ethInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ethInit(NetInterface *interface)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
   //Clear the MAC filter table contents
   osMemset(interface->macAddrFilter, 0,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	338c      	adds	r3, #140	; 0x8c
 80056f6:	22f0      	movs	r2, #240	; 0xf0
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f018 f8e8 	bl	801d8d0 <memset>
      sizeof(interface->macAddrFilter));

   //Successful initialization
   return NO_ERROR;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <ethProcessFrame>:
 *   the packet
 **/

void ethProcessFrame(NetInterface *interface, uint8_t *frame, size_t length,
   NetRxAncillary *ancillary)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
#if (ETH_VMAN_SUPPORT == ENABLED)
   uint16_t vmanId = 0;
#endif

   //Initialize status code
   error = NO_ERROR;
 800571a:	2300      	movs	r3, #0
 800571c:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Initialize variables
   type = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	85fb      	strh	r3, [r7, #46]	; 0x2e
   data = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
   header = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24

   //Start of exception handling block
   do
   {
      //Check whether the CRC is included in the received frame
      if(!interface->nicDriver->autoCrcStrip)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10c      	bne.n	800574e <ethProcessFrame+0x42>
      {
         //Perform CRC verification
         error = ethCheckCrc(interface, frame, length);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fc5b 	bl	8005ff4 <ethCheckCrc>
 800573e:	4603      	mov	r3, r0
 8005740:	86fb      	strh	r3, [r7, #54]	; 0x36
         //CRC error?
         if(error)
 8005742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11c      	bne.n	8005782 <ethProcessFrame+0x76>
            break;

         //Strip CRC field from Ethernet frame
         length -= ETH_CRC_SIZE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3b04      	subs	r3, #4
 800574c:	607b      	str	r3, [r7, #4]
            break;
      }
#endif

      //Point to the beginning of the frame
      header = (EthHeader *) frame;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInOctets, length);

      //Malformed Ethernet frame?
      if(length < sizeof(EthHeader))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b0d      	cmp	r3, #13
 8005756:	d802      	bhi.n	800575e <ethProcessFrame+0x52>
      {
         //Drop the received frame
         error = ERROR_INVALID_LENGTH;
 8005758:	23ec      	movs	r3, #236	; 0xec
 800575a:	86fb      	strh	r3, [r7, #54]	; 0x36
         break;
 800575c:	e012      	b.n	8005784 <ethProcessFrame+0x78>
      }

      //Debug message
      TRACE_DEBUG("Ethernet frame received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump Ethernet header contents for debugging purpose
      ethDumpHeader(header);
 800575e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005760:	f000 fa9e 	bl	8005ca0 <ethDumpHeader>
#if defined(ETH_FRAME_FORWARD_HOOK)
      ETH_FRAME_FORWARD_HOOK(interface, header, length);
#endif

      //Retrieve the value of the EtherType field
      type = ntohs(header->type);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	899b      	ldrh	r3, [r3, #12]
 8005768:	b29b      	uxth	r3, r3
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fbb2 	bl	8000ed4 <swapInt16>
 8005770:	4603      	mov	r3, r0
 8005772:	85fb      	strh	r3, [r7, #46]	; 0x2e

      //Point to the data payload
      data = header->data;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	330e      	adds	r3, #14
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
      //Calculate the length of the data payload
      length -= sizeof(EthHeader);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3b0e      	subs	r3, #14
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e000      	b.n	8005784 <ethProcessFrame+0x78>
            break;
 8005782:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Invalid frame received?
   if(error)
 8005784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <ethProcessFrame+0x8a>
   {
      //Update Ethernet statistics
      ethUpdateErrorStats(interface, error);
 800578a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800578c:	4619      	mov	r1, r3
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fb32 	bl	8005df8 <ethUpdateErrorStats>
 8005794:	e074      	b.n	8005880 <ethProcessFrame+0x174>
   }
#endif

   //802.1Q allows a single physical interface to be bound to multiple
   //virtual interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
 800579a:	e06e      	b.n	800587a <ethProcessFrame+0x16e>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	3350      	adds	r3, #80	; 0x50
 80057a8:	4a37      	ldr	r2, [pc, #220]	; (8005888 <ethProcessFrame+0x17c>)
 80057aa:	4413      	add	r3, r2
 80057ac:	623b      	str	r3, [r7, #32]

      //Check whether the current virtual interface is attached to the
      //physical interface where the packet was received
      if(nicGetPhysicalInterface(virtualInterface) != interface)
 80057ae:	6a38      	ldr	r0, [r7, #32]
 80057b0:	f00c f914 	bl	80119dc <nicGetPhysicalInterface>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d15a      	bne.n	8005872 <ethProcessFrame+0x166>
#endif

      //The host must silently discards an incoming frame whose destination
      //address does not correspond to the physical interface through which
      //it was received
      error = ethCheckDestAddr(virtualInterface, &header->destAddr);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	4619      	mov	r1, r3
 80057c0:	6a38      	ldr	r0, [r7, #32]
 80057c2:	f000 fa9f 	bl	8005d04 <ethCheckDestAddr>
 80057c6:	4603      	mov	r3, r0
 80057c8:	86fb      	strh	r3, [r7, #54]	; 0x36

      //Valid destination address?
      if(!error)
 80057ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d146      	bne.n	800585e <ethProcessFrame+0x152>
      {
         //Save source and destination MAC addresses
         ancillary->srcMacAddr = header->srcAddr;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	3301      	adds	r3, #1
 80057d6:	3206      	adds	r2, #6
 80057d8:	6811      	ldr	r1, [r2, #0]
 80057da:	6019      	str	r1, [r3, #0]
 80057dc:	8892      	ldrh	r2, [r2, #4]
 80057de:	809a      	strh	r2, [r3, #4]
         ancillary->destMacAddr = header->destAddr;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	3307      	adds	r3, #7
 80057e6:	6811      	ldr	r1, [r2, #0]
 80057e8:	6019      	str	r1, [r3, #0]
 80057ea:	8892      	ldrh	r2, [r2, #4]
 80057ec:	809a      	strh	r2, [r3, #4]

         //Update Ethernet statistics
         ethUpdateInStats(virtualInterface, &header->destAddr);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	4619      	mov	r1, r3
 80057f2:	6a38      	ldr	r0, [r7, #32]
 80057f4:	f000 fada 	bl	8005dac <ethUpdateInStats>
         //Allow raw sockets to process Ethernet packets
         rawSocketProcessEthPacket(virtualInterface, header, data, length,
            ancillary);
#endif
         //Check Ethernet type field
         switch(type)
 80057f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057fa:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80057fe:	4293      	cmp	r3, r2
 8005800:	d017      	beq.n	8005832 <ethProcessFrame+0x126>
 8005802:	f248 62dd 	movw	r2, #34525	; 0x86dd
 8005806:	4293      	cmp	r3, r2
 8005808:	dc26      	bgt.n	8005858 <ethProcessFrame+0x14c>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580e:	d009      	beq.n	8005824 <ethProcessFrame+0x118>
 8005810:	f640 0206 	movw	r2, #2054	; 0x806
 8005814:	4293      	cmp	r3, r2
 8005816:	d11f      	bne.n	8005858 <ethProcessFrame+0x14c>
         {
#if (IPV4_SUPPORT == ENABLED)
         //ARP packet received?
         case ETH_TYPE_ARP:
            //Process incoming ARP packet
            arpProcessPacket(virtualInterface, (ArpPacket *) data, length);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581c:	6a38      	ldr	r0, [r7, #32]
 800581e:	f7fd fc0f 	bl	8003040 <arpProcessPacket>
            //Continue processing
            break;
 8005822:	e01d      	b.n	8005860 <ethProcessFrame+0x154>

         //IPv4 packet received?
         case ETH_TYPE_IPV4:
            //Process incoming IPv4 packet
            ipv4ProcessPacket(virtualInterface, (Ipv4Header *) data, length,
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	6a38      	ldr	r0, [r7, #32]
 800582c:	f003 f9cb 	bl	8008bc6 <ipv4ProcessPacket>
               ancillary);
            //Continue processing
            break;
 8005830:	e016      	b.n	8005860 <ethProcessFrame+0x154>
#endif
#if (IPV6_SUPPORT == ENABLED)
         //IPv6 packet received?
         case ETH_TYPE_IPV6:
            //The incoming Ethernet frame fits in a single chunk
            buffer.chunkCount = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
            buffer.maxChunkCount = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
            buffer.chunk[0].address = data;
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	61bb      	str	r3, [r7, #24]
            buffer.chunk[0].length = (uint16_t) length;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	b29b      	uxth	r3, r3
 8005842:	83bb      	strh	r3, [r7, #28]
            buffer.chunk[0].size = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	83fb      	strh	r3, [r7, #30]

            //Process incoming IPv6 packet
            ipv6ProcessPacket(virtualInterface, (NetBuffer *) &buffer, 0,
 8005848:	f107 0110 	add.w	r1, r7, #16
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	6a38      	ldr	r0, [r7, #32]
 8005852:	f004 fdc1 	bl	800a3d8 <ipv6ProcessPacket>
               ancillary);
            //Continue processing
            break;
 8005856:	e003      	b.n	8005860 <ethProcessFrame+0x154>
#endif
         //Unknown packet received?
         default:
            //Drop the received frame
            error = ERROR_INVALID_PROTOCOL;
 8005858:	23e2      	movs	r3, #226	; 0xe2
 800585a:	86fb      	strh	r3, [r7, #54]	; 0x36
            break;
 800585c:	e000      	b.n	8005860 <ethProcessFrame+0x154>
         }
      }
 800585e:	bf00      	nop

      //Invalid frame received?
      if(error)
 8005860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <ethProcessFrame+0x168>
      {
         //Update Ethernet statistics
         ethUpdateErrorStats(virtualInterface, error);
 8005866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005868:	4619      	mov	r1, r3
 800586a:	6a38      	ldr	r0, [r7, #32]
 800586c:	f000 fac4 	bl	8005df8 <ethUpdateErrorStats>
 8005870:	e000      	b.n	8005874 <ethProcessFrame+0x168>
         continue;
 8005872:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	3301      	adds	r3, #1
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2b00      	cmp	r3, #0
 800587e:	d08d      	beq.n	800579c <ethProcessFrame+0x90>
      }
   }
}
 8005880:	3738      	adds	r7, #56	; 0x38
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200046f4 	.word	0x200046f4

0800588c <ethSendFrame>:
 * @return Error code
 **/

error_t ethSendFrame(NetInterface *interface, const MacAddr *destAddr,
   uint16_t type, NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	80fb      	strh	r3, [r7, #6]
   }
#endif

   //If the source address is not specified, then use the MAC address of the
   //interface as source address
   if(macCompAddr(&ancillary->srcMacAddr, &MAC_UNSPECIFIED_ADDR))
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	330c      	adds	r3, #12
 80058a0:	2206      	movs	r2, #6
 80058a2:	4947      	ldr	r1, [pc, #284]	; (80059c0 <ethSendFrame+0x134>)
 80058a4:	4618      	mov	r0, r3
 80058a6:	f017 ffdd 	bl	801d864 <memcmp>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <ethSendFrame+0x3e>
   {
      NetInterface *logicalInterface;

      //Point to the logical interface
      logicalInterface = nicGetLogicalInterface(interface);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f00c f888 	bl	80119c6 <nicGetLogicalInterface>
 80058b6:	6278      	str	r0, [r7, #36]	; 0x24
      //Get the MAC address of the interface
      ancillary->srcMacAddr = logicalInterface->macAddr;
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058bc:	330c      	adds	r3, #12
 80058be:	3284      	adds	r2, #132	; 0x84
 80058c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c4:	6018      	str	r0, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	8019      	strh	r1, [r3, #0]
   }

   //Sanity check
   if(offset < sizeof(EthHeader))
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2b0d      	cmp	r3, #13
 80058ce:	d801      	bhi.n	80058d4 <ethSendFrame+0x48>
      return ERROR_INVALID_PARAMETER;
 80058d0:	2302      	movs	r3, #2
 80058d2:	e070      	b.n	80059b6 <ethSendFrame+0x12a>

   //Make room for the Ethernet header
   offset -= sizeof(EthHeader);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	3b0e      	subs	r3, #14
 80058d8:	633b      	str	r3, [r7, #48]	; 0x30
   //Calculate the length of the frame
   length = netBufferGetLength(buffer) - offset;
 80058da:	6838      	ldr	r0, [r7, #0]
 80058dc:	f00b f84f 	bl	801097e <netBufferGetLength>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	613b      	str	r3, [r7, #16]

   //Point to the beginning of the frame
   header = netBufferAt(buffer, offset);
 80058e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ea:	6838      	ldr	r0, [r7, #0]
 80058ec:	f00b f90f 	bl	8010b0e <netBufferAt>
 80058f0:	6238      	str	r0, [r7, #32]

   //Format Ethernet header
   header->destAddr = *destAddr;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	6811      	ldr	r1, [r2, #0]
 80058f8:	6019      	str	r1, [r3, #0]
 80058fa:	8892      	ldrh	r2, [r2, #4]
 80058fc:	809a      	strh	r2, [r3, #4]
   header->srcAddr = ancillary->srcMacAddr;
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005902:	3306      	adds	r3, #6
 8005904:	320c      	adds	r2, #12
 8005906:	6810      	ldr	r0, [r2, #0]
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	8892      	ldrh	r2, [r2, #4]
 800590c:	809a      	strh	r2, [r3, #4]
   header->type = htons(type);
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fb fadf 	bl	8000ed4 <swapInt16>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	819a      	strh	r2, [r3, #12]

   //Update Ethernet statistics
   ethUpdateOutStats(interface, &header->destAddr, length);
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fa53 	bl	8005dd0 <ethUpdateOutStats>

   //Debug message
   TRACE_DEBUG("Sending Ethernet frame (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump Ethernet header contents for debugging purpose
   ethDumpHeader(header);
 800592a:	6a38      	ldr	r0, [r7, #32]
 800592c:	f000 f9b8 	bl	8005ca0 <ethDumpHeader>
      TRACE_DEBUG("  Switch Port = %" PRIu8 "\r\n", ancillary->port);
   }
#endif

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f00c f853 	bl	80119dc <nicGetPhysicalInterface>
 8005936:	61f8      	str	r0, [r7, #28]
      length = netBufferGetLength(buffer) - offset;
   }
#endif

   //Valid NIC driver?
   if(physicalInterface->nicDriver != NULL)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	2b00      	cmp	r3, #0
 800593e:	d031      	beq.n	80059a4 <ethSendFrame+0x118>
   {
      //Automatic padding not supported by hardware?
      if(!physicalInterface->nicDriver->autoPadding)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <ethSendFrame+0xd8>
      {
         //The host controller should manually add padding to the packet before
         //transmitting it
         error = ethPadFrame(buffer, &length);
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	4619      	mov	r1, r3
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f000 f9af 	bl	8005cb4 <ethPadFrame>
 8005956:	4603      	mov	r3, r0
 8005958:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 800595a:	8b7b      	ldrh	r3, [r7, #26]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <ethSendFrame+0xd8>
            return error;
 8005960:	8b7b      	ldrh	r3, [r7, #26]
 8005962:	e028      	b.n	80059b6 <ethSendFrame+0x12a>
      }

      //CRC calculation not supported by hardware?
      if(!physicalInterface->nicDriver->autoCrcCalc)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11a      	bne.n	80059a4 <ethSendFrame+0x118>
      {
         //Compute CRC over the header and payload
         crc = ethCalcCrcEx(buffer, offset, length);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	461a      	mov	r2, r3
 8005972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005974:	6838      	ldr	r0, [r7, #0]
 8005976:	f000 fac3 	bl	8005f00 <ethCalcCrcEx>
 800597a:	4603      	mov	r3, r0
 800597c:	617b      	str	r3, [r7, #20]
         //Convert from host byte order to little-endian byte order
         crc = htole32(crc);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	617b      	str	r3, [r7, #20]

         //Append the calculated CRC value
         error = netBufferAppend(buffer, &crc, sizeof(crc));
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	2204      	movs	r2, #4
 8005988:	4619      	mov	r1, r3
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	f00b fa57 	bl	8010e3e <netBufferAppend>
 8005990:	4603      	mov	r3, r0
 8005992:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 8005994:	8b7b      	ldrh	r3, [r7, #26]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <ethSendFrame+0x112>
            return error;
 800599a:	8b7b      	ldrh	r3, [r7, #26]
 800599c:	e00b      	b.n	80059b6 <ethSendFrame+0x12a>

         //Adjust the length of the frame
         length += sizeof(crc);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3304      	adds	r3, #4
 80059a2:	613b      	str	r3, [r7, #16]
      }
   }

   //Forward the frame to the physical interface
   error = nicSendPacket(physicalInterface, buffer, offset, ancillary);
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	f00c f85e 	bl	8011a6c <nicSendPacket>
 80059b0:	4603      	mov	r3, r0
 80059b2:	837b      	strh	r3, [r7, #26]

   //Return status code
   return error;
 80059b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3728      	adds	r7, #40	; 0x28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	080243c4 	.word	0x080243c4

080059c4 <ethAcceptMacAddr>:
 * @param[in] macAddr MAC address to accept
 * @return Error code
 **/

error_t ethAcceptMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   MacFilterEntry *firstFreeEntry;

   //Keep track of the first free entry
   firstFreeEntry = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e025      	b.n	8005a24 <ethAcceptMacAddr+0x60>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3388      	adds	r3, #136	; 0x88
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]

      //Valid entry?
      if(entry->refCount > 0)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00f      	beq.n	8005a14 <ethAcceptMacAddr+0x50>
      {
         //Check whether the table already contains the specified MAC address
         if(macCompAddr(&entry->addr, macAddr))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2206      	movs	r2, #6
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f017 ff32 	bl	801d864 <memcmp>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <ethAcceptMacAddr+0x5a>
         {
            //Increment the reference count
            entry->refCount++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
            //No error to report
            return NO_ERROR;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e025      	b.n	8005a60 <ethAcceptMacAddr+0x9c>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <ethAcceptMacAddr+0x5a>
            firstFreeEntry = entry;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	613b      	str	r3, [r7, #16]
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b0b      	cmp	r3, #11
 8005a28:	d9d6      	bls.n	80059d8 <ethAcceptMacAddr+0x14>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <ethAcceptMacAddr+0x70>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e015      	b.n	8005a60 <ethAcceptMacAddr+0x9c>
   }

   //Add a new entry to the table
   firstFreeEntry->addr = *macAddr;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	6810      	ldr	r0, [r2, #0]
 8005a3a:	6018      	str	r0, [r3, #0]
 8005a3c:	8892      	ldrh	r2, [r2, #4]
 8005a3e:	809a      	strh	r2, [r3, #4]
   //Initialize the reference count
   firstFreeEntry->refCount = 1;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2201      	movs	r2, #1
 8005a44:	609a      	str	r2, [r3, #8]

   //Force the network interface controller to add the current
   //entry to its MAC filter table
   firstFreeEntry->addFlag = TRUE;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	60da      	str	r2, [r3, #12]
   firstFreeEntry->deleteFlag = FALSE;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]

   //Update the MAC filter table
   nicUpdateMacAddrFilter(interface);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f00c f85c 	bl	8011b10 <nicUpdateMacAddrFilter>

   //Clear the flag
   firstFreeEntry->addFlag = FALSE;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <ethDropMacAddr>:
 * @param[in] macAddr MAC address to drop
 * @return Error code
 **/

error_t ethDropMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e031      	b.n	8005adc <ethDropMacAddr+0x74>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	3388      	adds	r3, #136	; 0x88
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->refCount > 0)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d020      	beq.n	8005ad6 <ethDropMacAddr+0x6e>
      {
         //Specified MAC address found?
         if(macCompAddr(&entry->addr, macAddr))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2206      	movs	r2, #6
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f017 fee2 	bl	801d864 <memcmp>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d117      	bne.n	8005ad6 <ethDropMacAddr+0x6e>
         {
            //Decrement the reference count
            entry->refCount--;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]

            //Remove the entry if the reference count drops to zero
            if(entry->refCount == 0)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <ethDropMacAddr+0x6a>
            {
               //Force the network interface controller to remove the current
               //entry from its MAC filter table
               entry->deleteFlag = TRUE;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2201      	movs	r2, #1
 8005abc:	611a      	str	r2, [r3, #16]

               //Update the MAC filter table
               nicUpdateMacAddrFilter(interface);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f00c f826 	bl	8011b10 <nicUpdateMacAddrFilter>

               //Clear the flag
               entry->deleteFlag = FALSE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	611a      	str	r2, [r3, #16]
               //Remove the multicast address from the list
               entry->addr = MAC_UNSPECIFIED_ADDR;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	809a      	strh	r2, [r3, #4]
            }

            //No error to report
            return NO_ERROR;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e007      	b.n	8005ae6 <ethDropMacAddr+0x7e>
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b0b      	cmp	r3, #11
 8005ae0:	d9ca      	bls.n	8005a78 <ethDropMacAddr+0x10>
         }
      }
   }

   //The specified MAC address does not exist
   return ERROR_ADDRESS_NOT_FOUND;
 8005ae2:	f44f 730a 	mov.w	r3, #552	; 0x228
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <ethAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ethAllocBuffer(size_t length, size_t *offset)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
   size_t n;
   NetBuffer *buffer;

   //Ethernet frame overhead
   n = sizeof(EthHeader);
 8005af8:	230e      	movs	r3, #14
 8005afa:	60fb      	str	r3, [r7, #12]
   //Special VLAN tagging overhead
   n += sizeof(VlanTag);
#endif

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + n);
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f00a fef9 	bl	80108fa <netBufferAlloc>
 8005b08:	60b8      	str	r0, [r7, #8]
   //Failed to allocate buffer?
   if(buffer == NULL)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <ethAllocBuffer+0x26>
      return NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e003      	b.n	8005b1c <ethAllocBuffer+0x2e>

   //Offset to the first byte of the payload
   *offset = n;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <macStringToAddr>:
 * @param[out] macAddr Binary representation of the MAC address
 * @return Error code
 **/

error_t macStringToAddr(const char_t *str, MacAddr *macAddr)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
 8005b36:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Hexadecimal digit found?
      if(isxdigit((uint8_t) *str))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4a3f      	ldr	r2, [pc, #252]	; (8005c3c <macStringToAddr+0x118>)
 8005b40:	4413      	add	r3, r2
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d035      	beq.n	8005bb8 <macStringToAddr+0x94>
      {
         //First digit to be decoded?
         if(value < 0)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da01      	bge.n	8005b56 <macStringToAddr+0x32>
            value = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         if(osIsdigit(*str))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a37      	ldr	r2, [pc, #220]	; (8005c3c <macStringToAddr+0x118>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <macStringToAddr+0x56>
         {
            value = (value * 16) + (*str - '0');
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	3b30      	subs	r3, #48	; 0x30
 8005b74:	4413      	add	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e018      	b.n	8005bac <macStringToAddr+0x88>
         }
         else if(osIsupper(*str))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <macStringToAddr+0x118>)
 8005b82:	4413      	add	r3, r2
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <macStringToAddr+0x7a>
         {
            value = (value * 16) + (*str - 'A' + 10);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3b37      	subs	r3, #55	; 0x37
 8005b98:	4413      	add	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e006      	b.n	8005bac <macStringToAddr+0x88>
         }
         else
         {
            value = (value * 16) + (*str - 'a' + 10);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	011a      	lsls	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	3b57      	subs	r3, #87	; 0x57
 8005ba8:	4413      	add	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
         }

         //Check resulting value
         if(value > 0xFF)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	dd38      	ble.n	8005c24 <macStringToAddr+0x100>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8005bb2:	2369      	movs	r3, #105	; 0x69
 8005bb4:	82fb      	strh	r3, [r7, #22]
            break;
 8005bb6:	e039      	b.n	8005c2c <macStringToAddr+0x108>
         }
      }
      //Dash or colon separator found?
      else if((*str == '-' || *str == ':') && i < 6)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8005bbe:	d003      	beq.n	8005bc8 <macStringToAddr+0xa4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b3a      	cmp	r3, #58	; 0x3a
 8005bc6:	d113      	bne.n	8005bf0 <macStringToAddr+0xcc>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	dc10      	bgt.n	8005bf0 <macStringToAddr+0xcc>
      {
         //Each separator must be preceded by a valid number
         if(value < 0)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da02      	bge.n	8005bda <macStringToAddr+0xb6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8005bd4:	2369      	movs	r3, #105	; 0x69
 8005bd6:	82fb      	strh	r3, [r7, #22]
            break;
 8005bd8:	e028      	b.n	8005c2c <macStringToAddr+0x108>
         }

         //Save the current byte
         macAddr->b[i++] = value;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	613a      	str	r2, [r7, #16]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	b2d1      	uxtb	r1, r2
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	54d1      	strb	r1, [r2, r3]
         //Prepare to decode the next byte
         value = -1;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e019      	b.n	8005c24 <macStringToAddr+0x100>
      }
      //End of string detected?
      else if(*str == '\0' && i == 5)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d112      	bne.n	8005c1e <macStringToAddr+0xfa>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d10f      	bne.n	8005c1e <macStringToAddr+0xfa>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da02      	bge.n	8005c0a <macStringToAddr+0xe6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8005c04:	2369      	movs	r3, #105	; 0x69
 8005c06:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 8005c08:	e010      	b.n	8005c2c <macStringToAddr+0x108>
            macAddr->b[i] = value;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b2d9      	uxtb	r1, r3
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	460a      	mov	r2, r1
 8005c16:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	82fb      	strh	r3, [r7, #22]
         break;
 8005c1c:	e006      	b.n	8005c2c <macStringToAddr+0x108>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 8005c1e:	2369      	movs	r3, #105	; 0x69
 8005c20:	82fb      	strh	r3, [r7, #22]
         break;
 8005c22:	e003      	b.n	8005c2c <macStringToAddr+0x108>
      }

      //Point to the next character
      str++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
      if(isxdigit((uint8_t) *str))
 8005c2a:	e785      	b.n	8005b38 <macStringToAddr+0x14>
   }

   //Return status code
   return error;
 8005c2c:	8afb      	ldrh	r3, [r7, #22]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	0804048d 	.word	0x0804048d

08005c40 <macAddrToEui64>:
 * @param[in] macAddr Host MAC address
 * @param[out] interfaceId IPv6 modified EUI-64 identifier
 **/

void macAddrToEui64(const MacAddr *macAddr, Eui64 *interfaceId)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
   //Copy the Organization Unique Identifier (OUI)
   interfaceId->b[0] = macAddr->b[0];
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	701a      	strb	r2, [r3, #0]
   interfaceId->b[1] = macAddr->b[1];
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	785a      	ldrb	r2, [r3, #1]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	705a      	strb	r2, [r3, #1]
   interfaceId->b[2] = macAddr->b[2];
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	789a      	ldrb	r2, [r3, #2]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	709a      	strb	r2, [r3, #2]

   //The middle 16 bits are given the value 0xFFFE
   interfaceId->b[3] = 0xFF;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	70da      	strb	r2, [r3, #3]
   interfaceId->b[4] = 0xFE;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	22fe      	movs	r2, #254	; 0xfe
 8005c6c:	711a      	strb	r2, [r3, #4]

   //Copy the right-most 24 bits of the MAC address
   interfaceId->b[5] = macAddr->b[3];
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	78da      	ldrb	r2, [r3, #3]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	715a      	strb	r2, [r3, #5]
   interfaceId->b[6] = macAddr->b[4];
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	791a      	ldrb	r2, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	719a      	strb	r2, [r3, #6]
   interfaceId->b[7] = macAddr->b[5];
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	795a      	ldrb	r2, [r3, #5]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	71da      	strb	r2, [r3, #7]

   //Modified EUI-64 format interface identifiers are
   //formed by inverting the Universal/Local bit
   interfaceId->b[0] ^= MAC_ADDR_FLAG_LOCAL;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f083 0302 	eor.w	r3, r3, #2
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <ethDumpHeader>:
 * @brief Dump Ethernet header for debugging purpose
 * @param[in] ethHeader Pointer to the Ethernet header
 **/

void ethDumpHeader(const EthHeader *ethHeader)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
   //Dump Ethernet header contents
   TRACE_DEBUG("  Dest Addr = %s\r\n", macAddrToString(&ethHeader->destAddr, NULL));
   TRACE_DEBUG("  Src Addr = %s\r\n", macAddrToString(&ethHeader->srcAddr, NULL));
   TRACE_DEBUG("  Type = 0x%04" PRIX16 "\r\n", ntohs(ethHeader->type));
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <ethPadFrame>:
 * @param[in,out] length Length of the Ethernet frame, in bytes
 * @return Error code
 **/

error_t ethPadFrame(NetBuffer *buffer, size_t *length)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
   error_t error;
   size_t n;

   //Ethernet frames have a minimum length of 64 byte
   if(*length < (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE))
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8005cc4:	d815      	bhi.n	8005cf2 <ethPadFrame+0x3e>
   {
      //Add padding as necessary
      n = (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE) - *length;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005cce:	60bb      	str	r3, [r7, #8]

      //Append padding bytes
      error = netBufferAppend(buffer, ethPadding, n);
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	490b      	ldr	r1, [pc, #44]	; (8005d00 <ethPadFrame+0x4c>)
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f00b f8b2 	bl	8010e3e <netBufferAppend>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	81fb      	strh	r3, [r7, #14]

      //Check status code
      if(!error)
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <ethPadFrame+0x42>
      {
         //Adjust frame length
         *length += n;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	441a      	add	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e001      	b.n	8005cf6 <ethPadFrame+0x42>
      }
   }
   else
   {
      //No padding needed
      error = NO_ERROR;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8005cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	08024440 	.word	0x08024440

08005d04 <ethCheckDestAddr>:
 * @param[in] macAddr Destination MAC address to be checked
 * @return Error code
 **/

error_t ethCheckDestAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   NetInterface *logicalInterface;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 8005d0e:	23e4      	movs	r3, #228	; 0xe4
 8005d10:	82fb      	strh	r3, [r7, #22]

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f00b fe57 	bl	80119c6 <nicGetLogicalInterface>
 8005d18:	60f8      	str	r0, [r7, #12]

   //Interface MAC address?
   if(macCompAddr(macAddr, &logicalInterface->macAddr))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	2206      	movs	r2, #6
 8005d20:	4619      	mov	r1, r3
 8005d22:	6838      	ldr	r0, [r7, #0]
 8005d24:	f017 fd9e 	bl	801d864 <memcmp>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <ethCheckDestAddr+0x30>
   {
      error = NO_ERROR;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	82fb      	strh	r3, [r7, #22]
 8005d32:	e033      	b.n	8005d9c <ethCheckDestAddr+0x98>
   }
   //Broadcast address?
   else if(macCompAddr(macAddr, &MAC_BROADCAST_ADDR))
 8005d34:	2206      	movs	r2, #6
 8005d36:	491c      	ldr	r1, [pc, #112]	; (8005da8 <ethCheckDestAddr+0xa4>)
 8005d38:	6838      	ldr	r0, [r7, #0]
 8005d3a:	f017 fd93 	bl	801d864 <memcmp>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <ethCheckDestAddr+0x46>
   {
      error = NO_ERROR;
 8005d44:	2300      	movs	r3, #0
 8005d46:	82fb      	strh	r3, [r7, #22]
 8005d48:	e028      	b.n	8005d9c <ethCheckDestAddr+0x98>
   }
   //Multicast address?
   else if(macIsMulticastAddr(macAddr))
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d022      	beq.n	8005d9c <ethCheckDestAddr+0x98>
   {
      //Go through the MAC filter table
      for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	e01c      	b.n	8005d96 <ethCheckDestAddr+0x92>
      {
         //Point to the current entry
         entry = &interface->macAddrFilter[i];
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3388      	adds	r3, #136	; 0x88
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <ethCheckDestAddr+0x8c>
         {
            //Check whether the destination MAC address matches
            //a relevant multicast address
            if(macCompAddr(&entry->addr, macAddr))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2206      	movs	r2, #6
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f017 fd70 	bl	801d864 <memcmp>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <ethCheckDestAddr+0x8c>
            {
               //The MAC address is acceptable
               error = NO_ERROR;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 8005d8e:	e005      	b.n	8005d9c <ethCheckDestAddr+0x98>
      for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3301      	adds	r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b0b      	cmp	r3, #11
 8005d9a:	d9df      	bls.n	8005d5c <ethCheckDestAddr+0x58>
         }
      }
   }

   //Return status code
   return error;
 8005d9c:	8afb      	ldrh	r3, [r7, #22]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	080243cc 	.word	0x080243cc

08005dac <ethUpdateInStats>:
 * @param[in] interface Underlying network interface
 * @param[in] destMacAddr Destination MAC address
 **/

void ethUpdateInStats(NetInterface *interface, const MacAddr *destMacAddr)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 8005db6:	2206      	movs	r2, #6
 8005db8:	4904      	ldr	r1, [pc, #16]	; (8005dcc <ethUpdateInStats+0x20>)
 8005dba:	6838      	ldr	r0, [r7, #0]
 8005dbc:	f017 fd52 	bl	801d864 <memcmp>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
      //Number of unicast packets delivered to a higher-layer protocol
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInUcastPkts, 1);
   }
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	080243cc 	.word	0x080243cc

08005dd0 <ethUpdateOutStats>:
 * @param[in] length Length of the Ethernet frame, in bytes
 **/

void ethUpdateOutStats(NetInterface *interface, const MacAddr *destMacAddr,
   size_t length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutOctets, length);

   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 8005ddc:	2206      	movs	r2, #6
 8005dde:	4905      	ldr	r1, [pc, #20]	; (8005df4 <ethUpdateOutStats+0x24>)
 8005de0:	68b8      	ldr	r0, [r7, #8]
 8005de2:	f017 fd3f 	bl	801d864 <memcmp>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
      //Number of unicast packets that higher-level protocols requested be transmitted
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutUcastPkts, 1);
   }
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	080243cc 	.word	0x080243cc

08005df8 <ethUpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ethUpdateErrorStats(NetInterface *interface, error_t error)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	3bd5      	subs	r3, #213	; 0xd5
 8005e08:	2b17      	cmp	r3, #23
 8005e0a:	d833      	bhi.n	8005e74 <ethUpdateErrorStats+0x7c>
 8005e0c:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <ethUpdateErrorStats+0x1c>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e75 	.word	0x08005e75
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e75 	.word	0x08005e75
 8005e5c:	08005e75 	.word	0x08005e75
 8005e60:	08005e75 	.word	0x08005e75
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e75 	.word	0x08005e75
 8005e6c:	08005e75 	.word	0x08005e75
 8005e70:	08005e75 	.word	0x08005e75
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUnknownProtos, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUnknownProtos, 1);
      break;
   default:
      //Just for sanity
      break;
 8005e74:	bf00      	nop
   }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop

08005e84 <ethCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrc(const void *data, size_t length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
#else
   uint_t i;
   uint_t j;

   //Point to the data over which to calculate the CRC
   const uint8_t *p = (uint8_t *) data;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   uint32_t crc = 0xFFFFFFFF;
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295
 8005e96:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e021      	b.n	8005ee2 <ethCalcCrc+0x5e>
   {
      //Update CRC value
      crc ^= p[i];
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4053      	eors	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e010      	b.n	8005ed6 <ethCalcCrc+0x52>
      {
         if(crc & 0x00000001)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <ethCalcCrc+0x46>
            crc = (crc >> 1) ^ 0xEDB88320;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	085a      	lsrs	r2, r3, #1
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <ethCalcCrc+0x78>)
 8005ec4:	4053      	eors	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e002      	b.n	8005ed0 <ethCalcCrc+0x4c>
         else
            crc = crc >> 1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d9eb      	bls.n	8005eb4 <ethCalcCrc+0x30>
   for(i = 0; i < length; i++)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d3d9      	bcc.n	8005e9e <ethCalcCrc+0x1a>
      }
   }

   //Return 1's complement value
   return ~crc;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	43db      	mvns	r3, r3
#endif
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	edb88320 	.word	0xedb88320

08005f00 <ethCalcCrcEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrcEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b08b      	sub	sp, #44	; 0x2c
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
#if (ETH_FAST_CRC_SUPPORT == DISABLED)
   uint_t k;
#endif

   //CRC preset value
   crc = 0xFFFFFFFF;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	61fb      	str	r3, [r7, #28]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
 8005f16:	e05a      	b.n	8005fce <ethCalcCrcEx+0xce>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	889b      	ldrh	r3, [r3, #4]
 8005f24:	461a      	mov	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d243      	bcs.n	8005fb4 <ethCalcCrcEx+0xb4>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	3201      	adds	r2, #1
 8005f32:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	3301      	adds	r3, #1
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4413      	add	r3, r2
 8005f46:	889b      	ldrh	r3, [r3, #4]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bf28      	it	cs
 8005f54:	4613      	movcs	r3, r2
 8005f56:	623b      	str	r3, [r7, #32]
         //Adjust byte counter
         length -= n;
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 8005f60:	e022      	b.n	8005fa8 <ethCalcCrcEx+0xa8>
#if (ETH_FAST_CRC_SUPPORT == ENABLED)
            //The message is processed byte by byte
            crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ *p];
#else
            //Update CRC value
            crc ^= *p;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4053      	eors	r3, r2
 8005f6c:	61fb      	str	r3, [r7, #28]

            //The message is processed bit by bit
            for(k = 0; k < 8; k++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e010      	b.n	8005f96 <ethCalcCrcEx+0x96>
            {
               if(crc & 0x00000001)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <ethCalcCrcEx+0x8a>
                  crc = (crc >> 1) ^ 0xEDB88320;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	085a      	lsrs	r2, r3, #1
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <ethCalcCrcEx+0xf0>)
 8005f84:	4053      	eors	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e002      	b.n	8005f90 <ethCalcCrcEx+0x90>
               else
                  crc = crc >> 1;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
            for(k = 0; k < 8; k++)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3301      	adds	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	d9eb      	bls.n	8005f74 <ethCalcCrcEx+0x74>
            }
#endif
            //Next byte
            p++;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61bb      	str	r3, [r7, #24]
            n--;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	623b      	str	r3, [r7, #32]
         while(n > 0)
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1d9      	bne.n	8005f62 <ethCalcCrcEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	e009      	b.n	8005fc8 <ethCalcCrcEx+0xc8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	3301      	adds	r3, #1
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	889b      	ldrh	r3, [r3, #4]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3301      	adds	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d202      	bcs.n	8005fde <ethCalcCrcEx+0xde>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d19c      	bne.n	8005f18 <ethCalcCrcEx+0x18>
      }
   }

   //Return 1's complement value
   return ~crc;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	43db      	mvns	r3, r3
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	372c      	adds	r7, #44	; 0x2c
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	edb88320 	.word	0xedb88320

08005ff4 <ethCheckCrc>:
 * @return Error code
 **/

error_t ethCheckCrc(NetInterface *interface, const uint8_t *frame,
   size_t length)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
   uint32_t crc;

   //Malformed Ethernet frame?
   if(length < (sizeof(EthHeader) + ETH_CRC_SIZE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b11      	cmp	r3, #17
 8006004:	d801      	bhi.n	800600a <ethCheckCrc+0x16>
   {
      //Drop the received frame
      return ERROR_INVALID_LENGTH;
 8006006:	23ec      	movs	r3, #236	; 0xec
 8006008:	e033      	b.n	8006072 <ethCheckCrc+0x7e>
   }

   //CRC verification not supported by hardware?
   if(!interface->nicDriver->autoCrcVerif)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <ethCheckCrc+0x34>
   {
      //The value of the residue is 0x2144DF1C when no CRC errors
      //are detected
      if(ethCalcCrc(frame, length) != 0x2144DF1C)
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	68b8      	ldr	r0, [r7, #8]
 8006018:	f7ff ff34 	bl	8005e84 <ethCalcCrc>
 800601c:	4603      	mov	r3, r0
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <ethCheckCrc+0x88>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d001      	beq.n	8006028 <ethCheckCrc+0x34>
      {
         //Drop the received frame
         return ERROR_WRONG_CHECKSUM;
 8006024:	23d5      	movs	r3, #213	; 0xd5
 8006026:	e024      	b.n	8006072 <ethCheckCrc+0x7e>
      }
   }

   //Retrieve CRC value
   crc = LOAD32BE(frame + length - ETH_CRC_SIZE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b04      	subs	r3, #4
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4413      	add	r3, r2
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	061a      	lsls	r2, r3, #24
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3b04      	subs	r3, #4
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	440b      	add	r3, r1
 800603c:	3301      	adds	r3, #1
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3b04      	subs	r3, #4
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	440b      	add	r3, r1
 800604c:	3302      	adds	r3, #2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	4313      	orrs	r3, r2
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	3a04      	subs	r2, #4
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	440a      	add	r2, r1
 800605c:	3203      	adds	r2, #3
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

   //Gather entropy
   netContext.entropy += crc;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <ethCheckCrc+0x8c>)
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <ethCheckCrc+0x8c>)
 800606e:	6113      	str	r3, [r2, #16]

   //Successful CRC verification
   return NO_ERROR;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2144df1c 	.word	0x2144df1c
 8006080:	200046f4 	.word	0x200046f4

08006084 <httpServerGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains HTTP server settings
 **/

void httpServerGetDefaultSettings(HttpServerSettings *settings)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
   //The HTTP server is not bound to any interface
   settings->interface = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]

   //Listen to port 80
   settings->port = HTTP_PORT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2250      	movs	r2, #80	; 0x50
 8006096:	809a      	strh	r2, [r3, #4]
   //Maximum length of the pending connection queue
   settings->backlog = HTTP_SERVER_BACKLOG;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	609a      	str	r2, [r3, #8]

   //Client connections
   settings->maxConnections = 0;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	60da      	str	r2, [r3, #12]
   settings->connections = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]

   //Specify the server's root directory
   osStrcpy(settings->rootDirectory, "/");
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3314      	adds	r3, #20
 80060ae:	490f      	ldr	r1, [pc, #60]	; (80060ec <httpServerGetDefaultSettings+0x68>)
 80060b0:	461a      	mov	r2, r3
 80060b2:	460b      	mov	r3, r1
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	8013      	strh	r3, [r2, #0]
   //Set default home page
   osStrcpy(settings->defaultDocument, "index.htm");
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3334      	adds	r3, #52	; 0x34
 80060bc:	490c      	ldr	r1, [pc, #48]	; (80060f0 <httpServerGetDefaultSettings+0x6c>)
 80060be:	461a      	mov	r2, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	cb03      	ldmia	r3!, {r0, r1}
 80060c4:	6010      	str	r0, [r2, #0]
 80060c6:	6051      	str	r1, [r2, #4]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	8113      	strh	r3, [r2, #8]
   //HTTP authentication callback function
   settings->authCallback = NULL;
#endif

   //CGI callback function
   settings->cgiCallback = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
   //HTTP request callback function
   settings->requestCallback = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	659a      	str	r2, [r3, #88]	; 0x58
   //URI not found callback function
   settings->uriNotFoundCallback = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	08024480 	.word	0x08024480
 80060f0:	08024484 	.word	0x08024484

080060f4 <httpServerInit>:
 * @param[in] settings HTTP server specific settings
 * @return Error code
 **/

error_t httpServerInit(HttpServerContext *context, const HttpServerSettings *settings)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   HttpConnection *connection;

   //Debug message
   TRACE_INFO("Initializing HTTP server...\r\n");
 80060fe:	f7fa ffcc 	bl	800109a <osSuspendAllTasks>
 8006102:	4b56      	ldr	r3, [pc, #344]	; (800625c <httpServerInit+0x168>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	221d      	movs	r2, #29
 800610a:	2101      	movs	r1, #1
 800610c:	4854      	ldr	r0, [pc, #336]	; (8006260 <httpServerInit+0x16c>)
 800610e:	f017 f921 	bl	801d354 <fwrite>
 8006112:	f7fa ffcd 	bl	80010b0 <osResumeAllTasks>

   //Ensure the parameters are valid
   if(context == NULL || settings == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <httpServerInit+0x2e>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <httpServerInit+0x32>
      return ERROR_INVALID_PARAMETER;
 8006122:	2302      	movs	r3, #2
 8006124:	e095      	b.n	8006252 <httpServerInit+0x15e>

   //Check settings
   if(settings->maxConnections == 0 || settings->connections == NULL)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <httpServerInit+0x42>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <httpServerInit+0x46>
      return ERROR_INVALID_PARAMETER;
 8006136:	2302      	movs	r3, #2
 8006138:	e08b      	b.n	8006252 <httpServerInit+0x15e>

   //Clear the HTTP server context
   osMemset(context, 0, sizeof(HttpServerContext));
 800613a:	2270      	movs	r2, #112	; 0x70
 800613c:	2100      	movs	r1, #0
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f017 fbc6 	bl	801d8d0 <memset>

   //Save user settings
   context->settings = *settings;
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	2360      	movs	r3, #96	; 0x60
 800614e:	461a      	mov	r2, r3
 8006150:	f017 fb96 	bl	801d880 <memcpy>
   //Client connections
   context->connections = settings->connections;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	66da      	str	r2, [r3, #108]	; 0x6c

   //Create a semaphore to limit the number of simultaneous connections
   if(!osCreateSemaphore(&context->semaphore, context->settings.maxConnections))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f7fb f822 	bl	80011b2 <osCreateSemaphore>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <httpServerInit+0x84>
      return ERROR_OUT_OF_RESOURCES;
 8006174:	2365      	movs	r3, #101	; 0x65
 8006176:	e06c      	b.n	8006252 <httpServerInit+0x15e>

   //Loop through client connections
   for(i = 0; i < context->settings.maxConnections; i++)
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e01b      	b.n	80061b6 <httpServerInit+0xc2>
   {
      //Point to the structure representing the client connection
      connection = &context->connections[i];
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

      //Initialize the structure
      osMemset(connection, 0, sizeof(HttpConnection));
 8006190:	f240 62ac 	movw	r2, #1708	; 0x6ac
 8006194:	2100      	movs	r1, #0
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f017 fb9a 	bl	801d8d0 <memset>

      //Create an event object to manage connection lifetime
      if(!osCreateEvent(&connection->startEvent))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	330c      	adds	r3, #12
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fa ff90 	bl	80010c6 <osCreateEvent>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <httpServerInit+0xbc>
         return ERROR_OUT_OF_RESOURCES;
 80061ac:	2365      	movs	r3, #101	; 0x65
 80061ae:	e050      	b.n	8006252 <httpServerInit+0x15e>
   for(i = 0; i < context->settings.maxConnections; i++)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3301      	adds	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d3de      	bcc.n	800617e <httpServerInit+0x8a>
   if(!osCreateMutex(&context->nonceCacheMutex))
      return ERROR_OUT_OF_RESOURCES;
#endif

   //Open a TCP socket
   context->socket = socketOpen(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 80061c0:	2106      	movs	r1, #6
 80061c2:	2001      	movs	r0, #1
 80061c4:	f00c f9ae 	bl	8012524 <socketOpen>
 80061c8:	4602      	mov	r2, r0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	669a      	str	r2, [r3, #104]	; 0x68
   //Failed to open socket?
   if(context->socket == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <httpServerInit+0xe6>
      return ERROR_OPEN_FAILED;
 80061d6:	23c8      	movs	r3, #200	; 0xc8
 80061d8:	e03b      	b.n	8006252 <httpServerInit+0x15e>

   //Set timeout for blocking functions
   error = socketSetTimeout(context->socket, INFINITE_DELAY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061de:	f04f 31ff 	mov.w	r1, #4294967295
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00c f9b6 	bl	8012554 <socketSetTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 80061ec:	8a7b      	ldrh	r3, [r7, #18]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <httpServerInit+0x102>
      return error;
 80061f2:	8a7b      	ldrh	r3, [r7, #18]
 80061f4:	e02d      	b.n	8006252 <httpServerInit+0x15e>

   //Associate the socket with the relevant interface
   error = socketBindToInterface(context->socket, settings->interface);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f00c f9c1 	bl	8012588 <socketSetInterface>
 8006206:	4603      	mov	r3, r0
 8006208:	827b      	strh	r3, [r7, #18]
   //Unable to bind the socket to the desired interface?
   if(error)
 800620a:	8a7b      	ldrh	r3, [r7, #18]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <httpServerInit+0x120>
      return error;
 8006210:	8a7b      	ldrh	r3, [r7, #18]
 8006212:	e01e      	b.n	8006252 <httpServerInit+0x15e>

   //Bind newly created socket to port 80
   error = socketBind(context->socket, &IP_ADDR_ANY, settings->port);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	889b      	ldrh	r3, [r3, #4]
 800621c:	461a      	mov	r2, r3
 800621e:	4911      	ldr	r1, [pc, #68]	; (8006264 <httpServerInit+0x170>)
 8006220:	f00c f9c6 	bl	80125b0 <socketBind>
 8006224:	4603      	mov	r3, r0
 8006226:	827b      	strh	r3, [r7, #18]
   //Failed to bind socket to port 80?
   if(error)
 8006228:	8a7b      	ldrh	r3, [r7, #18]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <httpServerInit+0x13e>
      return error;
 800622e:	8a7b      	ldrh	r3, [r7, #18]
 8006230:	e00f      	b.n	8006252 <httpServerInit+0x15e>

   //Place socket in listening state
   error = socketListen(context->socket, settings->backlog);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f00c f9e3 	bl	8012608 <socketListen>
 8006242:	4603      	mov	r3, r0
 8006244:	827b      	strh	r3, [r7, #18]
   //Any failure to report?
   if(error)
 8006246:	8a7b      	ldrh	r3, [r7, #18]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <httpServerInit+0x15c>
      return error;
 800624c:	8a7b      	ldrh	r3, [r7, #18]
 800624e:	e000      	b.n	8006252 <httpServerInit+0x15e>

   //Successful initialization
   return NO_ERROR;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000044 	.word	0x20000044
 8006260:	08024490 	.word	0x08024490
 8006264:	08024bf0 	.word	0x08024bf0

08006268 <httpServerStart>:
 * @param[in] context Pointer to the HTTP server context
 * @return Error code
 **/

error_t httpServerStart(HttpServerContext *context)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b087      	sub	sp, #28
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Make sure the HTTP server context is valid
   if(context == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <httpServerStart+0x12>
      return ERROR_INVALID_PARAMETER;
 8006276:	2302      	movs	r3, #2
 8006278:	e051      	b.n	800631e <httpServerStart+0xb6>

   //Debug message
   TRACE_INFO("Starting HTTP server...\r\n");
 800627a:	f7fa ff0e 	bl	800109a <osSuspendAllTasks>
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <httpServerStart+0xc0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2219      	movs	r2, #25
 8006286:	2101      	movs	r1, #1
 8006288:	4828      	ldr	r0, [pc, #160]	; (800632c <httpServerStart+0xc4>)
 800628a:	f017 f863 	bl	801d354 <fwrite>
 800628e:	f7fa ff0f 	bl	80010b0 <osResumeAllTasks>

   //Loop through client connections
   for(i = 0; i < context->settings.maxConnections; i++)
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e02a      	b.n	80062ee <httpServerStart+0x86>
   {
      //Create a task to service a given HTTP client connection
      context->connections[i].taskHandle = osCreateTask("HTTP Connection",
         httpConnectionTask, &context->connections[i],
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f240 61ac 	movw	r1, #1708	; 0x6ac
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	18d1      	adds	r1, r2, r3
      context->connections[i].taskHandle = osCreateTask("HTTP Connection",
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	18d4      	adds	r4, r2, r3
 80062b8:	2301      	movs	r3, #1
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	f240 238a 	movw	r3, #650	; 0x28a
 80062c0:	460a      	mov	r2, r1
 80062c2:	491b      	ldr	r1, [pc, #108]	; (8006330 <httpServerStart+0xc8>)
 80062c4:	481b      	ldr	r0, [pc, #108]	; (8006334 <httpServerStart+0xcc>)
 80062c6:	f7fa febc 	bl	8001042 <osCreateTask>
 80062ca:	4603      	mov	r3, r0
 80062cc:	60a3      	str	r3, [r4, #8]
         HTTP_SERVER_STACK_SIZE, HTTP_SERVER_PRIORITY);

      //Unable to create the task?
      if(context->connections[i].taskHandle == OS_INVALID_HANDLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f240 61ac 	movw	r1, #1708	; 0x6ac
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <httpServerStart+0x80>
         return ERROR_OUT_OF_RESOURCES;
 80062e4:	2365      	movs	r3, #101	; 0x65
 80062e6:	e01a      	b.n	800631e <httpServerStart+0xb6>
   for(i = 0; i < context->settings.maxConnections; i++)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3cf      	bcc.n	8006298 <httpServerStart+0x30>
   }

   //Create the HTTP server listener task
   context->taskHandle = osCreateTask("HTTP Listener", httpListenerTask,
 80062f8:	2301      	movs	r3, #1
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	f240 238a 	movw	r3, #650	; 0x28a
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	490d      	ldr	r1, [pc, #52]	; (8006338 <httpServerStart+0xd0>)
 8006304:	480d      	ldr	r0, [pc, #52]	; (800633c <httpServerStart+0xd4>)
 8006306:	f7fa fe9c 	bl	8001042 <osCreateTask>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
      context, HTTP_SERVER_STACK_SIZE, HTTP_SERVER_PRIORITY);

   //Unable to create the task?
   if(context->taskHandle == OS_INVALID_HANDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <httpServerStart+0xb4>
      return ERROR_OUT_OF_RESOURCES;
 8006318:	2365      	movs	r3, #101	; 0x65
 800631a:	e000      	b.n	800631e <httpServerStart+0xb6>

   //The HTTP server has successfully started
   return NO_ERROR;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bd90      	pop	{r4, r7, pc}
 8006326:	bf00      	nop
 8006328:	20000044 	.word	0x20000044
 800632c:	080244b0 	.word	0x080244b0
 8006330:	08006431 	.word	0x08006431
 8006334:	080244cc 	.word	0x080244cc
 8006338:	08006341 	.word	0x08006341
 800633c:	080244dc 	.word	0x080244dc

08006340 <httpListenerTask>:
 * @brief HTTP server listener task
 * @param[in] param Pointer to the HTTP server context
 **/

void httpListenerTask(void *param)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b091      	sub	sp, #68	; 0x44
 8006344:	af02      	add	r7, sp, #8
 8006346:	6078      	str	r0, [r7, #4]

   //Task prologue
   osEnterTask();

   //Retrieve the HTTP server context
   context = (HttpServerContext *) param;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Process incoming connections to the server
   for(counter = 1; ; counter++)
 800634c:	2301      	movs	r3, #1
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
   {
      //Debug message
      TRACE_INFO("Ready to accept a new connection...\r\n");
 8006350:	f7fa fea3 	bl	800109a <osSuspendAllTasks>
 8006354:	4b33      	ldr	r3, [pc, #204]	; (8006424 <httpListenerTask+0xe4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2225      	movs	r2, #37	; 0x25
 800635c:	2101      	movs	r1, #1
 800635e:	4832      	ldr	r0, [pc, #200]	; (8006428 <httpListenerTask+0xe8>)
 8006360:	f016 fff8 	bl	801d354 <fwrite>
 8006364:	f7fa fea4 	bl	80010b0 <osResumeAllTasks>

      //Limit the number of simultaneous connections to the HTTP server
      osWaitForSemaphore(&context->semaphore, INFINITE_DELAY);
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	3364      	adds	r3, #100	; 0x64
 800636c:	f04f 31ff 	mov.w	r1, #4294967295
 8006370:	4618      	mov	r0, r3
 8006372:	f7fa ff35 	bl	80011e0 <osWaitForSemaphore>

      //Loop through the connection table
      for(i = 0; i < context->settings.maxConnections; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	e04a      	b.n	8006412 <httpListenerTask+0xd2>
      {
         //Point to the current connection
         connection = &context->connections[i];
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	f240 61ac 	movw	r1, #1708	; 0x6ac
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28

         //Ready to service the client request?
         if(!connection->running)
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d13a      	bne.n	800640c <httpListenerTask+0xcc>
         {
            //Accept an incoming connection
            socket = socketAccept(context->socket, &clientIpAddr, &clientPort);
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800639e:	f107 010c 	add.w	r1, r7, #12
 80063a2:	4618      	mov	r0, r3
 80063a4:	f00c f954 	bl	8012650 <socketAccept>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24

            //Make sure the socket handle is valid
            if(socket != NULL)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d02d      	beq.n	800640c <httpListenerTask+0xcc>
            {
               //Debug message
               TRACE_INFO("Connection #%u established with client %s port %" PRIu16 "...\r\n",
 80063b0:	f7fa fe73 	bl	800109a <osSuspendAllTasks>
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <httpListenerTask+0xe4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68dc      	ldr	r4, [r3, #12]
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 fb75 	bl	8008ab0 <ipAddrToString>
 80063c6:	4603      	mov	r3, r0
 80063c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80063ca:	9200      	str	r2, [sp, #0]
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	4917      	ldr	r1, [pc, #92]	; (800642c <httpListenerTask+0xec>)
 80063d0:	4620      	mov	r0, r4
 80063d2:	f016 fdd7 	bl	801cf84 <fprintf>
 80063d6:	f7fa fe6b 	bl	80010b0 <osResumeAllTasks>
                  counter, ipAddrToString(&clientIpAddr, NULL), clientPort);

               //Reference to the HTTP server settings
               connection->settings = &context->settings;
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	601a      	str	r2, [r3, #0]
               //Reference to the HTTP server context
               connection->serverContext = context;
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e4:	605a      	str	r2, [r3, #4]
               //Reference to the new socket
               connection->socket = socket;
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	615a      	str	r2, [r3, #20]

               //Set timeout for blocking functions
               socketSetTimeout(connection->socket, HTTP_SERVER_TIMEOUT);
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00c f8ad 	bl	8012554 <socketSetTimeout>

               //The client connection task is now running...
               connection->running = TRUE;
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2201      	movs	r2, #1
 80063fe:	611a      	str	r2, [r3, #16]
               //Service the current connection request
               osSetEvent(&connection->startEvent);
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	330c      	adds	r3, #12
 8006404:	4618      	mov	r0, r3
 8006406:	f7fa fe86 	bl	8001116 <osSetEvent>

               //We are done
               break;
 800640a:	e007      	b.n	800641c <httpListenerTask+0xdc>
      for(i = 0; i < context->settings.maxConnections; i++)
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	3301      	adds	r3, #1
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006418:	429a      	cmp	r2, r3
 800641a:	d3af      	bcc.n	800637c <httpListenerTask+0x3c>
   for(counter = 1; ; counter++)
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	3301      	adds	r3, #1
 8006420:	633b      	str	r3, [r7, #48]	; 0x30
      TRACE_INFO("Ready to accept a new connection...\r\n");
 8006422:	e795      	b.n	8006350 <httpListenerTask+0x10>
 8006424:	20000044 	.word	0x20000044
 8006428:	080244ec 	.word	0x080244ec
 800642c:	08024514 	.word	0x08024514

08006430 <httpConnectionTask>:
 * @brief Task that services requests from an active connection
 * @param[in] param Structure representing an HTTP connection with a client
 **/

void httpConnectionTask(void *param)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

   //Task prologue
   osEnterTask();

   //Point to the structure representing the HTTP connection
   connection = (HttpConnection *) param;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]

   //Endless loop
   while(1)
   {
      //Wait for an incoming connection attempt
      osWaitForEvent(&connection->startEvent, INFINITE_DELAY);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	330c      	adds	r3, #12
 8006440:	f04f 31ff 	mov.w	r1, #4294967295
 8006444:	4618      	mov	r0, r3
 8006446:	f7fa fe83 	bl	8001150 <osWaitForEvent>

      //Initialize status code
      error = NO_ERROR;
 800644a:	2300      	movs	r3, #0
 800644c:	82fb      	strh	r3, [r7, #22]
         connection->tlsContext = NULL;
      }
#endif

      //Check status code
      if(!error)
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 80e5 	bne.w	8006620 <httpConnectionTask+0x1f0>
      {
         //Process incoming requests
         for(counter = 0; counter < HTTP_SERVER_MAX_REQUESTS; counter++)
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	e0da      	b.n	8006612 <httpConnectionTask+0x1e2>
         {
            //Debug message
            TRACE_INFO("Waiting for request...\r\n");
 800645c:	f7fa fe1d 	bl	800109a <osSuspendAllTasks>
 8006460:	4b88      	ldr	r3, [pc, #544]	; (8006684 <httpConnectionTask+0x254>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2218      	movs	r2, #24
 8006468:	2101      	movs	r1, #1
 800646a:	4887      	ldr	r0, [pc, #540]	; (8006688 <httpConnectionTask+0x258>)
 800646c:	f016 ff72 	bl	801d354 <fwrite>
 8006470:	f7fa fe1e 	bl	80010b0 <osResumeAllTasks>

            //Clear request header
            osMemset(&connection->request, 0, sizeof(HttpRequest));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3318      	adds	r3, #24
 8006478:	f44f 7211 	mov.w	r2, #580	; 0x244
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f017 fa26 	bl	801d8d0 <memset>
            //Clear response header
            osMemset(&connection->response, 0, sizeof(HttpResponse));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800648a:	2228      	movs	r2, #40	; 0x28
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f017 fa1e 	bl	801d8d0 <memset>

            //Read the HTTP request header and parse its contents
            error = httpReadRequestHeader(connection);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fb65 	bl	8006b64 <httpReadRequestHeader>
 800649a:	4603      	mov	r3, r0
 800649c:	82fb      	strh	r3, [r7, #22]
            //Any error to report?
            if(error)
 800649e:	8afb      	ldrh	r3, [r7, #22]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <httpConnectionTask+0x8e>
            {
               //Debug message
               TRACE_INFO("No HTTP request received or parsing error...\r\n");
 80064a4:	f7fa fdf9 	bl	800109a <osSuspendAllTasks>
 80064a8:	4b76      	ldr	r3, [pc, #472]	; (8006684 <httpConnectionTask+0x254>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	222e      	movs	r2, #46	; 0x2e
 80064b0:	2101      	movs	r1, #1
 80064b2:	4876      	ldr	r0, [pc, #472]	; (800668c <httpConnectionTask+0x25c>)
 80064b4:	f016 ff4e 	bl	801d354 <fwrite>
 80064b8:	f7fa fdfa 	bl	80010b0 <osResumeAllTasks>
               break;
 80064bc:	e0b0      	b.n	8006620 <httpConnectionTask+0x1f0>
               //Access to the specified URI is denied
               error = ERROR_NOT_FOUND;
            }
#endif
            //Debug message
            TRACE_INFO("Sending HTTP response to the client...\r\n");
 80064be:	f7fa fdec 	bl	800109a <osSuspendAllTasks>
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <httpConnectionTask+0x254>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2228      	movs	r2, #40	; 0x28
 80064ca:	2101      	movs	r1, #1
 80064cc:	4870      	ldr	r0, [pc, #448]	; (8006690 <httpConnectionTask+0x260>)
 80064ce:	f016 ff41 	bl	801d354 <fwrite>
 80064d2:	f7fa fded 	bl	80010b0 <osResumeAllTasks>

            //Check status code
            if(!error)
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d160      	bne.n	800659e <httpConnectionTask+0x16e>
            {
               //Default HTTP header fields
               httpInitResponseHeader(connection);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fedf 	bl	80072a0 <httpInitResponseHeader>

               //Invoke user-defined callback, if any
               if(connection->settings->requestCallback != NULL)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <httpConnectionTask+0xd2>
               {
                  error = connection->settings->requestCallback(connection,
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                     connection->request.uri);
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	3224      	adds	r2, #36	; 0x24
                  error = connection->settings->requestCallback(connection,
 80064f6:	4611      	mov	r1, r2
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	4798      	blx	r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	82fb      	strh	r3, [r7, #22]
 8006500:	e002      	b.n	8006508 <httpConnectionTask+0xd8>
               }
               else
               {
                  //Keep processing...
                  error = ERROR_NOT_FOUND;
 8006502:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006506:	82fb      	strh	r3, [r7, #22]
               }

               //Check status code
               if(error == ERROR_NOT_FOUND)
 8006508:	8afb      	ldrh	r3, [r7, #22]
 800650a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800650e:	d130      	bne.n	8006572 <httpConnectionTask+0x142>
               {
#if (HTTP_SERVER_SSI_SUPPORT == ENABLED)
                  //Use server-side scripting to dynamically generate HTML code?
                  if(httpCompExtension(connection->request.uri, ".stm") ||
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	495f      	ldr	r1, [pc, #380]	; (8006694 <httpConnectionTask+0x264>)
 8006516:	4618      	mov	r0, r3
 8006518:	f001 f87e 	bl	8007618 <httpCompExtension>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d111      	bne.n	8006546 <httpConnectionTask+0x116>
                     httpCompExtension(connection->request.uri, ".shtm") ||
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	495c      	ldr	r1, [pc, #368]	; (8006698 <httpConnectionTask+0x268>)
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f875 	bl	8007618 <httpCompExtension>
 800652e:	4603      	mov	r3, r0
                  if(httpCompExtension(connection->request.uri, ".stm") ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d108      	bne.n	8006546 <httpConnectionTask+0x116>
                     httpCompExtension(connection->request.uri, ".shtml"))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4958      	ldr	r1, [pc, #352]	; (800669c <httpConnectionTask+0x26c>)
 800653a:	4618      	mov	r0, r3
 800653c:	f001 f86c 	bl	8007618 <httpCompExtension>
 8006540:	4603      	mov	r3, r0
                     httpCompExtension(connection->request.uri, ".shtm") ||
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <httpConnectionTask+0x12a>
                  {
                     //SSI processing (Server Side Includes)
                     error = ssiExecuteScript(connection, connection->request.uri, 0);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3324      	adds	r3, #36	; 0x24
 800654a:	2200      	movs	r2, #0
 800654c:	4619      	mov	r1, r3
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f00c fab4 	bl	8012abc <ssiExecuteScript>
 8006554:	4603      	mov	r3, r0
 8006556:	82fb      	strh	r3, [r7, #22]
 8006558:	e00b      	b.n	8006572 <httpConnectionTask+0x142>
                  }
                  else
#endif
                  {
                     //Set the maximum age for static resources
                     connection->response.maxAge = HTTP_SERVER_MAX_AGE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

                     //Send the contents of the requested page
                     error = httpSendResponse(connection, connection->request.uri);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3324      	adds	r3, #36	; 0x24
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa17 	bl	800699c <httpSendResponse>
 800656e:	4603      	mov	r3, r0
 8006570:	82fb      	strh	r3, [r7, #22]
                  }
               }

               //The requested resource is not available?
               if(error == ERROR_NOT_FOUND)
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006578:	d111      	bne.n	800659e <httpConnectionTask+0x16e>
               {
                  //Default HTTP header fields
                  httpInitResponseHeader(connection);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fe90 	bl	80072a0 <httpInitResponseHeader>

                  //Invoke user-defined callback, if any
                  if(connection->settings->uriNotFoundCallback != NULL)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <httpConnectionTask+0x16e>
                  {
                     error = connection->settings->uriNotFoundCallback(connection,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                        connection->request.uri);
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	3224      	adds	r2, #36	; 0x24
                     error = connection->settings->uriNotFoundCallback(connection,
 8006594:	4611      	mov	r1, r2
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	4798      	blx	r3
 800659a:	4603      	mov	r3, r0
 800659c:	82fb      	strh	r3, [r7, #22]
                  }
               }
            }

            //Check status code
            if(error)
 800659e:	8afb      	ldrh	r3, [r7, #22]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d026      	beq.n	80065f2 <httpConnectionTask+0x1c2>
            {
               //Default HTTP header fields
               httpInitResponseHeader(connection);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fe7b 	bl	80072a0 <httpInitResponseHeader>

               //Bad request?
               if(error == ERROR_INVALID_REQUEST)
 80065aa:	8afb      	ldrh	r3, [r7, #22]
 80065ac:	2b66      	cmp	r3, #102	; 0x66
 80065ae:	d106      	bne.n	80065be <httpConnectionTask+0x18e>
               {
                  //Send an error 400 and close the connection immediately
                  httpSendErrorResponse(connection, 400,
 80065b0:	4a3b      	ldr	r2, [pc, #236]	; (80066a0 <httpConnectionTask+0x270>)
 80065b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fa44 	bl	8006a44 <httpSendErrorResponse>
 80065bc:	e019      	b.n	80065f2 <httpConnectionTask+0x1c2>
                     "The request is badly formed");
               }
               //Authorization required?
               else if(error == ERROR_AUTH_REQUIRED)
 80065be:	8afb      	ldrh	r3, [r7, #22]
 80065c0:	f240 1211 	movw	r2, #273	; 0x111
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <httpConnectionTask+0x1aa>
               {
                  //Send an error 401 and keep the connection alive
                  error = httpSendErrorResponse(connection, 401,
 80065c8:	4a36      	ldr	r2, [pc, #216]	; (80066a4 <httpConnectionTask+0x274>)
 80065ca:	f240 1191 	movw	r1, #401	; 0x191
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fa38 	bl	8006a44 <httpSendErrorResponse>
 80065d4:	4603      	mov	r3, r0
 80065d6:	82fb      	strh	r3, [r7, #22]
 80065d8:	e00b      	b.n	80065f2 <httpConnectionTask+0x1c2>
                     "Authorization required");
               }
               //Page not found?
               else if(error == ERROR_NOT_FOUND)
 80065da:	8afb      	ldrh	r3, [r7, #22]
 80065dc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80065e0:	d107      	bne.n	80065f2 <httpConnectionTask+0x1c2>
               {
                  //Send an error 404 and keep the connection alive
                  error = httpSendErrorResponse(connection, 404,
 80065e2:	4a31      	ldr	r2, [pc, #196]	; (80066a8 <httpConnectionTask+0x278>)
 80065e4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fa2b 	bl	8006a44 <httpSendErrorResponse>
 80065ee:	4603      	mov	r3, r0
 80065f0:	82fb      	strh	r3, [r7, #22]
                     "The requested page could not be found");
               }
            }

            //Internal error?
            if(error)
 80065f2:	8afb      	ldrh	r3, [r7, #22]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d112      	bne.n	800661e <httpConnectionTask+0x1ee>
               //Close the connection immediately
               break;
            }

            //Check whether the connection is persistent or not
            if(!connection->request.keepAlive || !connection->response.keepAlive)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <httpConnectionTask+0x1f0>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <httpConnectionTask+0x1f0>
         for(counter = 0; counter < HTTP_SERVER_MAX_REQUESTS; counter++)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3301      	adds	r3, #1
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006618:	f4ff af20 	bcc.w	800645c <httpConnectionTask+0x2c>
 800661c:	e000      	b.n	8006620 <httpConnectionTask+0x1f0>
               break;
 800661e:	bf00      	nop
         tlsFree(connection->tlsContext);
      }
#endif

      //Valid socket handle?
      if(connection->socket != NULL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d022      	beq.n	800666e <httpConnectionTask+0x23e>
      {
         //Debug message
         TRACE_INFO("Graceful shutdown...\r\n");
 8006628:	f7fa fd37 	bl	800109a <osSuspendAllTasks>
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <httpConnectionTask+0x254>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2216      	movs	r2, #22
 8006634:	2101      	movs	r1, #1
 8006636:	481d      	ldr	r0, [pc, #116]	; (80066ac <httpConnectionTask+0x27c>)
 8006638:	f016 fe8c 	bl	801d354 <fwrite>
 800663c:	f7fa fd38 	bl	80010b0 <osResumeAllTasks>
         //Graceful shutdown
         socketShutdown(connection->socket, SOCKET_SD_BOTH);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	2102      	movs	r1, #2
 8006646:	4618      	mov	r0, r3
 8006648:	f00c f952 	bl	80128f0 <socketShutdown>

         //Debug message
         TRACE_INFO("Closing socket...\r\n");
 800664c:	f7fa fd25 	bl	800109a <osSuspendAllTasks>
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <httpConnectionTask+0x254>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2213      	movs	r2, #19
 8006658:	2101      	movs	r1, #1
 800665a:	4815      	ldr	r0, [pc, #84]	; (80066b0 <httpConnectionTask+0x280>)
 800665c:	f016 fe7a 	bl	801d354 <fwrite>
 8006660:	f7fa fd26 	bl	80010b0 <osResumeAllTasks>
         //Close socket
         socketClose(connection->socket);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	4618      	mov	r0, r3
 800666a:	f00c f96f 	bl	801294c <socketClose>
      }

      //Ready to serve the next connection request...
      connection->running = FALSE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	611a      	str	r2, [r3, #16]
      //Release semaphore
      osReleaseSemaphore(&connection->serverContext->semaphore);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	3364      	adds	r3, #100	; 0x64
 800667a:	4618      	mov	r0, r3
 800667c:	f7fa fdce 	bl	800121c <osReleaseSemaphore>
      osWaitForEvent(&connection->startEvent, INFINITE_DELAY);
 8006680:	e6dc      	b.n	800643c <httpConnectionTask+0xc>
 8006682:	bf00      	nop
 8006684:	20000044 	.word	0x20000044
 8006688:	0802454c 	.word	0x0802454c
 800668c:	08024568 	.word	0x08024568
 8006690:	08024598 	.word	0x08024598
 8006694:	080245c4 	.word	0x080245c4
 8006698:	080245cc 	.word	0x080245cc
 800669c:	080245d4 	.word	0x080245d4
 80066a0:	080245dc 	.word	0x080245dc
 80066a4:	080245f8 	.word	0x080245f8
 80066a8:	08024610 	.word	0x08024610
 80066ac:	08024638 	.word	0x08024638
 80066b0:	08024650 	.word	0x08024650

080066b4 <httpWriteHeader>:
 * @param[in] connection Structure representing an HTTP connection
 * @return Error code
 **/

error_t httpWriteHeader(HttpConnection *connection)
{
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
   error_t error;

   //Format HTTP response header
   error = httpFormatResponseHeader(connection, connection->buffer);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fe19 	bl	80072fc <httpFormatResponseHeader>
 80066ca:	4603      	mov	r3, r0
 80066cc:	81fb      	strh	r3, [r7, #14]

   //Check status code
   if(!error)
 80066ce:	89fb      	ldrh	r3, [r7, #14]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11f      	bne.n	8006714 <httpWriteHeader+0x60>
   {
      //Debug message
      TRACE_DEBUG("HTTP response header:\r\n%s", connection->buffer);
 80066d4:	f7fa fce1 	bl	800109a <osSuspendAllTasks>
 80066d8:	4b11      	ldr	r3, [pc, #68]	; (8006720 <httpWriteHeader+0x6c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68d8      	ldr	r0, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80066e4:	461a      	mov	r2, r3
 80066e6:	490f      	ldr	r1, [pc, #60]	; (8006724 <httpWriteHeader+0x70>)
 80066e8:	f016 fc4c 	bl	801cf84 <fprintf>
 80066ec:	f7fa fce0 	bl	80010b0 <osResumeAllTasks>

      //Send HTTP response header to the client
      error = httpSend(connection, connection->buffer,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
         osStrlen(connection->buffer), HTTP_FLAG_DELAY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
      error = httpSend(connection, connection->buffer,
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7f9 fdd1 	bl	80002a4 <strlen>
 8006702:	4602      	mov	r2, r0
 8006704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006708:	4621      	mov	r1, r4
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 ff3c 	bl	8007588 <httpSend>
 8006710:	4603      	mov	r3, r0
 8006712:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8006714:	89fb      	ldrh	r3, [r7, #14]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bd90      	pop	{r4, r7, pc}
 800671e:	bf00      	nop
 8006720:	20000044 	.word	0x20000044
 8006724:	08024664 	.word	0x08024664

08006728 <httpReadStream>:
 * @return Error code
 **/

error_t httpReadStream(HttpConnection *connection,
   void *data, size_t size, size_t *received, uint_t flags)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
   error_t error;
   size_t n;

   //No data has been read yet
   *received = 0;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

   //Chunked encoding transfer is used?
   if(connection->request.chunkedEncoding)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8006742:	2b00      	cmp	r3, #0
 8006744:	d071      	beq.n	800682a <httpReadStream+0x102>
   {
      //Point to the output buffer
      char_t *p = data;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	61fb      	str	r3, [r7, #28]

      //Read as much data as possible
      while(*received < size)
 800674a:	e068      	b.n	800681e <httpReadStream+0xf6>
      {
         //End of HTTP request body?
         if(connection->request.lastChunk)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <httpReadStream+0x34>
            return ERROR_END_OF_STREAM;
 8006756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675a:	e091      	b.n	8006880 <httpReadStream+0x158>

         //Acquire a new chunk when the current chunk
         //has been completely consumed
         if(connection->request.byteCount == 0)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8006762:	2b00      	cmp	r3, #0
 8006764:	d117      	bne.n	8006796 <httpReadStream+0x6e>
         {
            //The size of each chunk is sent right before the chunk itself
            error = httpReadChunkSize(connection);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fcfe 	bl	8007168 <httpReadChunkSize>
 800676c:	4603      	mov	r3, r0
 800676e:	837b      	strh	r3, [r7, #26]
            //Failed to decode the chunk-size field?
            if(error)
 8006770:	8b7b      	ldrh	r3, [r7, #26]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <httpReadStream+0x52>
               return error;
 8006776:	8b7b      	ldrh	r3, [r7, #26]
 8006778:	e082      	b.n	8006880 <httpReadStream+0x158>

            //Any chunk whose size is zero terminates the data transfer
            if(!connection->request.byteCount)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <httpReadStream+0x6e>
            {
               //The user must be satisfied with data already on hand
               return (*received > 0) ? NO_ERROR : ERROR_END_OF_STREAM;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <httpReadStream+0x68>
 800678c:	2300      	movs	r3, #0
 800678e:	e077      	b.n	8006880 <httpReadStream+0x158>
 8006790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006794:	e074      	b.n	8006880 <httpReadStream+0x158>
            }
         }

         //Limit the number of bytes to read at a time
         n = MIN(size - *received, connection->request.byteCount);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bf28      	it	cs
 80067a8:	4613      	movcs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

         //Read data
         error = httpReceive(connection, p, n, &n, flags);
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	f107 0114 	add.w	r1, r7, #20
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	460b      	mov	r3, r1
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fefb 	bl	80075b6 <httpReceive>
 80067c0:	4603      	mov	r3, r0
 80067c2:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 80067c4:	8b7b      	ldrh	r3, [r7, #26]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <httpReadStream+0xa6>
            return error;
 80067ca:	8b7b      	ldrh	r3, [r7, #26]
 80067cc:	e058      	b.n	8006880 <httpReadStream+0x158>

         //Total number of data that have been read
         *received += n;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	441a      	add	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	601a      	str	r2, [r3, #0]
         //Number of bytes left to process in the current chunk
         connection->request.byteCount -= n;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

         //The HTTP_FLAG_BREAK_CHAR flag causes the function to stop reading
         //data as soon as the specified break character is encountered
         if((flags & HTTP_FLAG_BREAK_CRLF) != 0)
 80067ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ec:	f241 030a 	movw	r3, #4106	; 0x100a
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <httpReadStream+0xe4>
         {
            //Check whether a break character has been received
            if(p[n - 1] == LSB(flags))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	b2db      	uxtb	r3, r3
 8006806:	429a      	cmp	r2, r3
 8006808:	d105      	bne.n	8006816 <httpReadStream+0xee>
               break;
 800680a:	e038      	b.n	800687e <httpReadStream+0x156>
         }
         //The HTTP_FLAG_WAIT_ALL flag causes the function to return
         //only when the requested number of bytes have been read
         else if(!(flags & HTTP_FLAG_WAIT_ALL))
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006812:	2b00      	cmp	r3, #0
 8006814:	d032      	beq.n	800687c <httpReadStream+0x154>
         {
            break;
         }

         //Advance data pointer
         p += n;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	61fb      	str	r3, [r7, #28]
      while(*received < size)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d891      	bhi.n	800674c <httpReadStream+0x24>
 8006828:	e029      	b.n	800687e <httpReadStream+0x156>
   }
   //Default encoding?
   else
   {
      //Return immediately if the end of the request body has been reached
      if(!connection->request.byteCount)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <httpReadStream+0x112>
         return ERROR_END_OF_STREAM;
 8006834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006838:	e022      	b.n	8006880 <httpReadStream+0x158>

      //Limit the number of bytes to read
      n = MIN(size, connection->request.byteCount);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4293      	cmp	r3, r2
 8006844:	bf28      	it	cs
 8006846:	4613      	movcs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

      //Read data
      error = httpReceive(connection, data, n, received, flags);
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 feae 	bl	80075b6 <httpReceive>
 800685a:	4603      	mov	r3, r0
 800685c:	837b      	strh	r3, [r7, #26]
      //Any error to report?
      if(error)
 800685e:	8b7b      	ldrh	r3, [r7, #26]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <httpReadStream+0x140>
         return error;
 8006864:	8b7b      	ldrh	r3, [r7, #26]
 8006866:	e00b      	b.n	8006880 <httpReadStream+0x158>

      //Decrement the count of remaining bytes to read
      connection->request.byteCount -= *received;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800687a:	e000      	b.n	800687e <httpReadStream+0x156>
            break;
 800687c:	bf00      	nop
   }

   //Successful read operation
   return NO_ERROR;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <httpWriteStream>:
 * @return Error code
 **/

error_t httpWriteStream(HttpConnection *connection,
   const void *data, size_t length)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;

   //Use chunked encoding transfer?
   if(connection->response.chunkedEncoding)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800689a:	2b00      	cmp	r3, #0
 800689c:	d035      	beq.n	800690a <httpWriteStream+0x82>
   {
      //Any data to send?
      if(length > 0)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02f      	beq.n	8006904 <httpWriteStream+0x7c>
      {
         char_t s[8];

         //The chunk-size field is a string of hex digits
         //indicating the size of the chunk
         n = osSprintf(s, "%X\r\n", length);
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4927      	ldr	r1, [pc, #156]	; (8006948 <httpWriteStream+0xc0>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f017 f9d9 	bl	801dc64 <sprintf>
 80068b2:	4603      	mov	r3, r0
 80068b4:	61bb      	str	r3, [r7, #24]

         //Send the chunk-size field
         error = httpSend(connection, s, n, HTTP_FLAG_DELAY);
 80068b6:	f107 0110 	add.w	r1, r7, #16
 80068ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fe61 	bl	8007588 <httpSend>
 80068c6:	4603      	mov	r3, r0
 80068c8:	83fb      	strh	r3, [r7, #30]
         //Failed to send data?
         if(error)
 80068ca:	8bfb      	ldrh	r3, [r7, #30]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <httpWriteStream+0x4c>
            return error;
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	e034      	b.n	800693e <httpWriteStream+0xb6>

         //Send the chunk-data
         error = httpSend(connection, data, length, HTTP_FLAG_DELAY);
 80068d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fe53 	bl	8007588 <httpSend>
 80068e2:	4603      	mov	r3, r0
 80068e4:	83fb      	strh	r3, [r7, #30]
         //Failed to send data?
         if(error)
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <httpWriteStream+0x68>
            return error;
 80068ec:	8bfb      	ldrh	r3, [r7, #30]
 80068ee:	e026      	b.n	800693e <httpWriteStream+0xb6>

         //Terminate the chunk-data by CRLF
         error = httpSend(connection, "\r\n", 2, HTTP_FLAG_DELAY);
 80068f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f4:	2202      	movs	r2, #2
 80068f6:	4915      	ldr	r1, [pc, #84]	; (800694c <httpWriteStream+0xc4>)
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fe45 	bl	8007588 <httpSend>
 80068fe:	4603      	mov	r3, r0
 8006900:	83fb      	strh	r3, [r7, #30]
 8006902:	e01b      	b.n	800693c <httpWriteStream+0xb4>
      }
      else
      {
         //Any chunk whose size is zero may terminate the data
         //transfer and must be discarded
         error = NO_ERROR;
 8006904:	2300      	movs	r3, #0
 8006906:	83fb      	strh	r3, [r7, #30]
 8006908:	e018      	b.n	800693c <httpWriteStream+0xb4>
   //Default encoding?
   else
   {
      //The length of the body shall not exceed the value
      //specified in the Content-Length field
      length = MIN(length, connection->response.byteCount);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4293      	cmp	r3, r2
 8006914:	bf28      	it	cs
 8006916:	4613      	movcs	r3, r2
 8006918:	607b      	str	r3, [r7, #4]

      //Send user data
      error = httpSend(connection, data, length, HTTP_FLAG_DELAY);
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fe30 	bl	8007588 <httpSend>
 8006928:	4603      	mov	r3, r0
 800692a:	83fb      	strh	r3, [r7, #30]

      //Decrement the count of remaining bytes to be transferred
      connection->response.byteCount -= length;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
   }

   //Return status code
   return error;
 800693c:	8bfb      	ldrh	r3, [r7, #30]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	08024680 	.word	0x08024680
 800694c:	08024688 	.word	0x08024688

08006950 <httpCloseStream>:
 * @param[in] connection Structure representing an HTTP connection
 * @return Error code
 **/

error_t httpCloseStream(HttpConnection *connection)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
   error_t error;

   //Use chunked encoding transfer?
   if(connection->response.chunkedEncoding)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <httpCloseStream+0x26>
   {
      //The chunked encoding is ended by any chunk whose size is zero
      error = httpSend(connection, "0\r\n\r\n", 5, HTTP_FLAG_NO_DELAY);
 8006962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006966:	2205      	movs	r2, #5
 8006968:	490a      	ldr	r1, [pc, #40]	; (8006994 <httpCloseStream+0x44>)
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fe0c 	bl	8007588 <httpSend>
 8006970:	4603      	mov	r3, r0
 8006972:	81fb      	strh	r3, [r7, #14]
 8006974:	e008      	b.n	8006988 <httpCloseStream+0x38>
   }
   else
   {
      //Flush the send buffer
      error = httpSend(connection, "", 0, HTTP_FLAG_NO_DELAY);
 8006976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800697a:	2200      	movs	r2, #0
 800697c:	4906      	ldr	r1, [pc, #24]	; (8006998 <httpCloseStream+0x48>)
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fe02 	bl	8007588 <httpSend>
 8006984:	4603      	mov	r3, r0
 8006986:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8006988:	89fb      	ldrh	r3, [r7, #14]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	0802468c 	.word	0x0802468c
 8006998:	08024694 	.word	0x08024694

0800699c <httpSendResponse>:
 * @param[in] uri NULL-terminated string containing the file to be sent in response
 * @return Error code
 **/

error_t httpSendResponse(HttpConnection *connection, const char_t *uri)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
   error_t error;
   size_t length;
   const uint8_t *data;

   //Retrieve the full pathname
   httpGetAbsolutePath(connection, uri, connection->buffer,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 80069ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fe16 	bl	80075e4 <httpGetAbsolutePath>
   }
   else
#endif
   {
      //Get the resource data associated with the URI
      error = resGetData(connection->buffer, &data, &length);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80069be:	f107 0210 	add.w	r2, r7, #16
 80069c2:	f107 010c 	add.w	r1, r7, #12
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fa fede 	bl	8001788 <resGetData>
 80069cc:	4603      	mov	r3, r0
 80069ce:	82fb      	strh	r3, [r7, #22]
      //The specified URI cannot be found?
      if(error)
 80069d0:	8afb      	ldrh	r3, [r7, #22]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <httpSendResponse+0x3e>
         return error;
 80069d6:	8afb      	ldrh	r3, [r7, #22]
 80069d8:	e02f      	b.n	8006a3a <httpSendResponse+0x9e>
   }
#endif

   //Format HTTP response header
   connection->response.statusCode = 200;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22c8      	movs	r2, #200	; 0xc8
 80069de:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
   connection->response.contentType = mimeGetType(uri);
 80069e2:	6838      	ldr	r0, [r7, #0]
 80069e4:	f006 fb32 	bl	800d04c <mimeGetType>
 80069e8:	4602      	mov	r2, r0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   connection->response.chunkedEncoding = FALSE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
   connection->response.contentLength = length;
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

   //Send the header to the client
   error = httpWriteHeader(connection);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe57 	bl	80066b4 <httpWriteHeader>
 8006a06:	4603      	mov	r3, r0
 8006a08:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8006a0a:	8afb      	ldrh	r3, [r7, #22]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <httpSendResponse+0x78>
#if (HTTP_SERVER_FS_SUPPORT == ENABLED)
      //Close the file
      fsCloseFile(file);
#endif
      //Return status code
      return error;
 8006a10:	8afb      	ldrh	r3, [r7, #22]
 8006a12:	e012      	b.n	8006a3a <httpSendResponse+0x9e>
         error = httpCloseStream(connection);
      }
   }
#else
   //Send response body
   error = httpWriteStream(connection, data, length);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ff34 	bl	8006888 <httpWriteStream>
 8006a20:	4603      	mov	r3, r0
 8006a22:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8006a24:	8afb      	ldrh	r3, [r7, #22]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <httpSendResponse+0x92>
      return error;
 8006a2a:	8afb      	ldrh	r3, [r7, #22]
 8006a2c:	e005      	b.n	8006a3a <httpSendResponse+0x9e>

   //Properly close output stream
   error = httpCloseStream(connection);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ff8e 	bl	8006950 <httpCloseStream>
 8006a34:	4603      	mov	r3, r0
 8006a36:	82fb      	strh	r3, [r7, #22]
#endif

   //Return status code
   return error;
 8006a38:	8afb      	ldrh	r3, [r7, #22]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <httpSendErrorResponse>:
 * @return Error code
 **/

error_t httpSendErrorResponse(HttpConnection *connection,
   uint_t statusCode, const char_t *message)
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
      "<p>%s</p>\r\n"
      "</body>\r\n"
      "</html>\r\n";

   //Compute the length of the response
   length = osStrlen(template) + osStrlen(message) - 4;
 8006a50:	4834      	ldr	r0, [pc, #208]	; (8006b24 <httpSendErrorResponse+0xe0>)
 8006a52:	f7f9 fc27 	bl	80002a4 <strlen>
 8006a56:	4604      	mov	r4, r0
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7f9 fc23 	bl	80002a4 <strlen>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4423      	add	r3, r4
 8006a62:	3b04      	subs	r3, #4
 8006a64:	617b      	str	r3, [r7, #20]

   //Check whether the HTTP request has a body
   if(osStrcasecmp(connection->request.method, "GET") &&
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	331c      	adds	r3, #28
 8006a6a:	492f      	ldr	r1, [pc, #188]	; (8006b28 <httpSendErrorResponse+0xe4>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f017 f919 	bl	801dca4 <strcasecmp>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <httpSendErrorResponse+0x60>
      osStrcasecmp(connection->request.method, "HEAD") &&
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	331c      	adds	r3, #28
 8006a7c:	492b      	ldr	r1, [pc, #172]	; (8006b2c <httpSendErrorResponse+0xe8>)
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f017 f910 	bl	801dca4 <strcasecmp>
 8006a84:	4603      	mov	r3, r0
   if(osStrcasecmp(connection->request.method, "GET") &&
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <httpSendErrorResponse+0x60>
      osStrcasecmp(connection->request.method, "DELETE"))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	331c      	adds	r3, #28
 8006a8e:	4928      	ldr	r1, [pc, #160]	; (8006b30 <httpSendErrorResponse+0xec>)
 8006a90:	4618      	mov	r0, r3
 8006a92:	f017 f907 	bl	801dca4 <strcasecmp>
 8006a96:	4603      	mov	r3, r0
      osStrcasecmp(connection->request.method, "HEAD") &&
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <httpSendErrorResponse+0x60>
   {
      //Drop the HTTP request body and close the connection after sending
      //the HTTP response
      connection->response.keepAlive = FALSE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
   }

   //Format HTTP response header
   connection->response.statusCode = statusCode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
   connection->response.contentType = mimeGetType(".htm");
 8006aac:	4821      	ldr	r0, [pc, #132]	; (8006b34 <httpSendErrorResponse+0xf0>)
 8006aae:	f006 facd 	bl	800d04c <mimeGetType>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   connection->response.chunkedEncoding = FALSE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
   connection->response.contentLength = length;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

   //Send the header to the client
   error = httpWriteHeader(connection);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff fdf2 	bl	80066b4 <httpWriteHeader>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 8006ad4:	8a7b      	ldrh	r3, [r7, #18]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <httpSendErrorResponse+0x9a>
      return error;
 8006ada:	8a7b      	ldrh	r3, [r7, #18]
 8006adc:	e01e      	b.n	8006b1c <httpSendErrorResponse+0xd8>

   //Format HTML response
   osSprintf(connection->buffer, template, statusCode, statusCode, message);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	490d      	ldr	r1, [pc, #52]	; (8006b24 <httpSendErrorResponse+0xe0>)
 8006aee:	f017 f8b9 	bl	801dc64 <sprintf>

   //Send response body
   error = httpWriteStream(connection, connection->buffer, length);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4619      	mov	r1, r3
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff fec3 	bl	8006888 <httpWriteStream>
 8006b02:	4603      	mov	r3, r0
 8006b04:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 8006b06:	8a7b      	ldrh	r3, [r7, #18]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <httpSendErrorResponse+0xcc>
      return error;
 8006b0c:	8a7b      	ldrh	r3, [r7, #18]
 8006b0e:	e005      	b.n	8006b1c <httpSendErrorResponse+0xd8>

   //Properly close output stream
   error = httpCloseStream(connection);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff ff1d 	bl	8006950 <httpCloseStream>
 8006b16:	4603      	mov	r3, r0
 8006b18:	827b      	strh	r3, [r7, #18]
   //Return status code
   return error;
 8006b1a:	8a7b      	ldrh	r3, [r7, #18]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}
 8006b24:	080246b4 	.word	0x080246b4
 8006b28:	08024698 	.word	0x08024698
 8006b2c:	0802469c 	.word	0x0802469c
 8006b30:	080246a4 	.word	0x080246a4
 8006b34:	080246ac 	.word	0x080246ac

08006b38 <httpParseAuthorizationField>:
 * @param[in] connection Structure representing an HTTP connection
 * @param[in] value Authorization field value
 **/

void httpParseAuthorizationField(HttpConnection *connection, char_t *value)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
   char_t *p;
   char_t *token;

   //Retrieve the authentication scheme
   token = osStrtok_r(value, " \t", &p);
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	461a      	mov	r2, r3
 8006b48:	4905      	ldr	r1, [pc, #20]	; (8006b60 <httpParseAuthorizationField+0x28>)
 8006b4a:	6838      	ldr	r0, [r7, #0]
 8006b4c:	f017 f95f 	bl	801de0e <strtok_r>
 8006b50:	60f8      	str	r0, [r7, #12]

   //Any parsing error?
   if(token == NULL)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
   }
#endif
   else
   {
      //The specified authentication scheme is not supported
      return;
 8006b56:	bf00      	nop
   {
      //Access to the specified URI is allowed
      connection->status = HTTP_ACCESS_ALLOWED;
   }
#endif
}
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	080247ec 	.word	0x080247ec

08006b64 <httpReadRequestHeader>:
 * @param[in] connection Structure representing an HTTP connection
 * @return Error code
 **/

error_t httpReadRequestHeader(HttpConnection *connection)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	6078      	str	r0, [r7, #4]
   error_t error;
   size_t length;

   //Set the maximum time the server will wait for an HTTP
   //request before closing the connection
   error = socketSetTimeout(connection->socket, HTTP_SERVER_IDLE_TIMEOUT);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00b fced 	bl	8012554 <socketSetTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	83fb      	strh	r3, [r7, #30]
   //Any error to report?
   if(error)
 8006b7e:	8bfb      	ldrh	r3, [r7, #30]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <httpReadRequestHeader+0x24>
      return error;
 8006b84:	8bfb      	ldrh	r3, [r7, #30]
 8006b86:	e0b5      	b.n	8006cf4 <httpReadRequestHeader+0x190>

   //Read the first line of the request
   error = httpReceive(connection, connection->buffer,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	f241 020a 	movw	r2, #4106	; 0x100a
 8006b96:	9200      	str	r2, [sp, #0]
 8006b98:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd0a 	bl	80075b6 <httpReceive>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	83fb      	strh	r3, [r7, #30]
      HTTP_SERVER_BUFFER_SIZE - 1, &length, SOCKET_FLAG_BREAK_CRLF);
   //Unable to read any data?
   if(error)
 8006ba6:	8bfb      	ldrh	r3, [r7, #30]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <httpReadRequestHeader+0x4c>
      return error;
 8006bac:	8bfb      	ldrh	r3, [r7, #30]
 8006bae:	e0a1      	b.n	8006cf4 <httpReadRequestHeader+0x190>

   //Revert to default timeout
   error = socketSetTimeout(connection->socket, HTTP_SERVER_TIMEOUT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f242 7110 	movw	r1, #10000	; 0x2710
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f00b fccb 	bl	8012554 <socketSetTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	83fb      	strh	r3, [r7, #30]
   //Any error to report?
   if(error)
 8006bc2:	8bfb      	ldrh	r3, [r7, #30]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <httpReadRequestHeader+0x68>
      return error;
 8006bc8:	8bfb      	ldrh	r3, [r7, #30]
 8006bca:	e093      	b.n	8006cf4 <httpReadRequestHeader+0x190>

   //Properly terminate the string with a NULL character
   connection->buffer[length] = '\0';
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
   //Debug message
   TRACE_INFO("%s", connection->buffer);
 8006bd8:	f7fa fa5f 	bl	800109a <osSuspendAllTasks>
 8006bdc:	4b47      	ldr	r3, [pc, #284]	; (8006cfc <httpReadRequestHeader+0x198>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f016 fa16 	bl	801d01c <fputs>
 8006bf0:	f7fa fa5e 	bl	80010b0 <osResumeAllTasks>

   //Parse the Request-Line
   error = httpParseRequestLine(connection, connection->buffer);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f881 	bl	8006d04 <httpParseRequestLine>
 8006c02:	4603      	mov	r3, r0
 8006c04:	83fb      	strh	r3, [r7, #30]
   //Any error to report?
   if(error)
 8006c06:	8bfb      	ldrh	r3, [r7, #30]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <httpReadRequestHeader+0xac>
      return error;
 8006c0c:	8bfb      	ldrh	r3, [r7, #30]
 8006c0e:	e071      	b.n	8006cf4 <httpReadRequestHeader+0x190>

   //Default value for properties
   connection->request.chunkedEncoding = FALSE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
   connection->request.contentLength = 0;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
   connection->request.connectionUpgrade = FALSE;
   osStrcpy(connection->request.clientKey, "");
#endif

   //HTTP 0.9 does not support Full-Request
   if(connection->request.version >= HTTP_VERSION_1_0)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2bff      	cmp	r3, #255	; 0xff
 8006c26:	d94c      	bls.n	8006cc2 <httpReadRequestHeader+0x15e>
      char_t *separator;
      char_t *name;
      char_t *value;

      //This variable is used to decode header fields that span multiple lines
      firstChar = '\0';
 8006c28:	2300      	movs	r3, #0
 8006c2a:	72fb      	strb	r3, [r7, #11]

      //Parse the header fields of the HTTP request
      while(1)
      {
         //Decode multiple-line header field
         error = httpReadHeaderField(connection, connection->buffer,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8006c32:	f107 030b 	add.w	r3, r7, #11
 8006c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f928 	bl	8006e90 <httpReadHeaderField>
 8006c40:	4603      	mov	r3, r0
 8006c42:	83fb      	strh	r3, [r7, #30]
            HTTP_SERVER_BUFFER_SIZE, &firstChar);
         //Any error to report?
         if(error)
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <httpReadRequestHeader+0xea>
            return error;
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	e052      	b.n	8006cf4 <httpReadRequestHeader+0x190>

         //Debug message
         TRACE_DEBUG("%s", connection->buffer);
 8006c4e:	f7fa fa24 	bl	800109a <osSuspendAllTasks>
 8006c52:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <httpReadRequestHeader+0x198>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f016 f9db 	bl	801d01c <fputs>
 8006c66:	f7fa fa23 	bl	80010b0 <osResumeAllTasks>

         //An empty line indicates the end of the header fields
         if(!osStrcmp(connection->buffer, "\r\n"))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006c70:	4923      	ldr	r1, [pc, #140]	; (8006d00 <httpReadRequestHeader+0x19c>)
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7f9 fb0c 	bl	8000290 <strcmp>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d020      	beq.n	8006cc0 <httpReadRequestHeader+0x15c>
            break;

         //Check whether a separator is present
         separator = osStrchr(connection->buffer, ':');
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006c84:	213a      	movs	r1, #58	; 0x3a
 8006c86:	4618      	mov	r0, r3
 8006c88:	f017 f828 	bl	801dcdc <strchr>
 8006c8c:	61b8      	str	r0, [r7, #24]

         //Separator found?
         if(separator != NULL)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0cb      	beq.n	8006c2c <httpReadRequestHeader+0xc8>
         {
            //Split the line
            *separator = '\0';
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]

            //Trim whitespace characters
            name = strTrimWhitespace(connection->buffer);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fa fe6f 	bl	8001984 <strTrimWhitespace>
 8006ca6:	6178      	str	r0, [r7, #20]
            value = strTrimWhitespace(separator + 1);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fa fe69 	bl	8001984 <strTrimWhitespace>
 8006cb2:	6138      	str	r0, [r7, #16]

            //Parse HTTP header field
            httpParseHeaderField(connection, name, value);
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f983 	bl	8006fc4 <httpParseHeaderField>
         error = httpReadHeaderField(connection, connection->buffer,
 8006cbe:	e7b5      	b.n	8006c2c <httpReadRequestHeader+0xc8>
            break;
 8006cc0:	bf00      	nop
         }
      }
   }

   //Prepare to read the HTTP request body
   if(connection->request.chunkedEncoding)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <httpReadRequestHeader+0x182>
   {
      connection->request.byteCount = 0;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
      connection->request.firstChunk = TRUE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
      connection->request.lastChunk = FALSE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8006ce4:	e005      	b.n	8006cf2 <httpReadRequestHeader+0x18e>
   }
   else
   {
      connection->request.byteCount = connection->request.contentLength;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   }

   //The request header has been successfully parsed
   return NO_ERROR;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000044 	.word	0x20000044
 8006d00:	080249d0 	.word	0x080249d0

08006d04 <httpParseRequestLine>:
 * @param[in] requestLine Pointer to the string that holds the Request-Line
 * @return Error code
 **/

error_t httpParseRequestLine(HttpConnection *connection, char_t *requestLine)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
   char_t *token;
   char_t *p;
   char_t *s;

   //The Request-Line begins with a method token
   token = osStrtok_r(requestLine, " \r\n", &p);
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	461a      	mov	r2, r3
 8006d14:	495a      	ldr	r1, [pc, #360]	; (8006e80 <httpParseRequestLine+0x17c>)
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f017 f879 	bl	801de0e <strtok_r>
 8006d1c:	6178      	str	r0, [r7, #20]
   //Unable to retrieve the method?
   if(token == NULL)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <httpParseRequestLine+0x24>
      return ERROR_INVALID_REQUEST;
 8006d24:	2366      	movs	r3, #102	; 0x66
 8006d26:	e0a7      	b.n	8006e78 <httpParseRequestLine+0x174>

   //The Method token indicates the method to be performed on the
   //resource identified by the Request-URI
   error = strSafeCopy(connection->request.method, token, HTTP_SERVER_METHOD_MAX_LEN);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	331c      	adds	r3, #28
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa fe95 	bl	8001a60 <strSafeCopy>
 8006d36:	4603      	mov	r3, r0
 8006d38:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 8006d3a:	8a7b      	ldrh	r3, [r7, #18]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <httpParseRequestLine+0x40>
      return ERROR_INVALID_REQUEST;
 8006d40:	2366      	movs	r3, #102	; 0x66
 8006d42:	e099      	b.n	8006e78 <httpParseRequestLine+0x174>

   //The Request-URI is following the method token
   token = osStrtok_r(NULL, " \r\n", &p);
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	461a      	mov	r2, r3
 8006d4a:	494d      	ldr	r1, [pc, #308]	; (8006e80 <httpParseRequestLine+0x17c>)
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f017 f85e 	bl	801de0e <strtok_r>
 8006d52:	6178      	str	r0, [r7, #20]
   //Unable to retrieve the Request-URI?
   if(token == NULL)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <httpParseRequestLine+0x5a>
      return ERROR_INVALID_REQUEST;
 8006d5a:	2366      	movs	r3, #102	; 0x66
 8006d5c:	e08c      	b.n	8006e78 <httpParseRequestLine+0x174>

   //Check whether a query string is present
   s = osStrchr(token, '?');
 8006d5e:	213f      	movs	r1, #63	; 0x3f
 8006d60:	6978      	ldr	r0, [r7, #20]
 8006d62:	f016 ffbb 	bl	801dcdc <strchr>
 8006d66:	60f8      	str	r0, [r7, #12]

   //Query string found?
   if(s != NULL)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d024      	beq.n	8006db8 <httpParseRequestLine+0xb4>
   {
      //Split the string
      *s = '\0';
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]

      //Save the Request-URI
      error = httpDecodePercentEncodedString(token,
         connection->request.uri, HTTP_SERVER_URI_MAX_LEN);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
      error = httpDecodePercentEncodedString(token,
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6978      	ldr	r0, [r7, #20]
 8006d7e:	f000 fc72 	bl	8007666 <httpDecodePercentEncodedString>
 8006d82:	4603      	mov	r3, r0
 8006d84:	827b      	strh	r3, [r7, #18]
      //Any error to report?
      if(error)
 8006d86:	8a7b      	ldrh	r3, [r7, #18]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <httpParseRequestLine+0x8c>
         return ERROR_INVALID_REQUEST;
 8006d8c:	2366      	movs	r3, #102	; 0x66
 8006d8e:	e073      	b.n	8006e78 <httpParseRequestLine+0x174>

      //Check the length of the query string
      if(osStrlen(s + 1) > HTTP_SERVER_QUERY_STRING_MAX_LEN)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7f9 fa85 	bl	80002a4 <strlen>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2bff      	cmp	r3, #255	; 0xff
 8006d9e:	d901      	bls.n	8006da4 <httpParseRequestLine+0xa0>
         return ERROR_INVALID_REQUEST;
 8006da0:	2366      	movs	r3, #102	; 0x66
 8006da2:	e069      	b.n	8006e78 <httpParseRequestLine+0x174>

      //Save the query string
      osStrcpy(connection->request.queryString, s + 1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f016 ffa0 	bl	801dcf6 <strcpy>
 8006db6:	e011      	b.n	8006ddc <httpParseRequestLine+0xd8>
   }
   else
   {
      //Save the Request-URI
      error = httpDecodePercentEncodedString(token,
         connection->request.uri, HTTP_SERVER_URI_MAX_LEN);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3324      	adds	r3, #36	; 0x24
      error = httpDecodePercentEncodedString(token,
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6978      	ldr	r0, [r7, #20]
 8006dc2:	f000 fc50 	bl	8007666 <httpDecodePercentEncodedString>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	827b      	strh	r3, [r7, #18]
      //Any error to report?
      if(error)
 8006dca:	8a7b      	ldrh	r3, [r7, #18]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <httpParseRequestLine+0xd0>
         return ERROR_INVALID_REQUEST;
 8006dd0:	2366      	movs	r3, #102	; 0x66
 8006dd2:	e051      	b.n	8006e78 <httpParseRequestLine+0x174>

      //No query string
      connection->request.queryString[0] = '\0';
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   }

   //Redirect to the default home page if necessary
   if(!osStrcasecmp(connection->request.uri, "/"))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3324      	adds	r3, #36	; 0x24
 8006de0:	4928      	ldr	r1, [pc, #160]	; (8006e84 <httpParseRequestLine+0x180>)
 8006de2:	4618      	mov	r0, r3
 8006de4:	f016 ff5e 	bl	801dca4 <strcasecmp>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <httpParseRequestLine+0xfe>
      osStrcpy(connection->request.uri, connection->settings->defaultDocument);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3334      	adds	r3, #52	; 0x34
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f016 ff7a 	bl	801dcf6 <strcpy>

   //Clean the resulting path
   pathCanonicalize(connection->request.uri);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3324      	adds	r3, #36	; 0x24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fa fa70 	bl	80012ec <pathCanonicalize>

   //The protocol version is following the Request-URI
   token = osStrtok_r(NULL, " \r\n", &p);
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	461a      	mov	r2, r3
 8006e12:	491b      	ldr	r1, [pc, #108]	; (8006e80 <httpParseRequestLine+0x17c>)
 8006e14:	2000      	movs	r0, #0
 8006e16:	f016 fffa 	bl	801de0e <strtok_r>
 8006e1a:	6178      	str	r0, [r7, #20]

   //HTTP version 0.9?
   if(token == NULL)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <httpParseRequestLine+0x12e>
   {
      //Save version number
      connection->request.version = HTTP_VERSION_0_9;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2209      	movs	r2, #9
 8006e26:	619a      	str	r2, [r3, #24]
      //Persistent connections are not supported
      connection->request.keepAlive = FALSE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8006e30:	e021      	b.n	8006e76 <httpParseRequestLine+0x172>
   }
   //HTTP version 1.0?
   else if(!osStrcasecmp(token, "HTTP/1.0"))
 8006e32:	4915      	ldr	r1, [pc, #84]	; (8006e88 <httpParseRequestLine+0x184>)
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f016 ff35 	bl	801dca4 <strcasecmp>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <httpParseRequestLine+0x14e>
   {
      //Save version number
      connection->request.version = HTTP_VERSION_1_0;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e46:	619a      	str	r2, [r3, #24]
      //By default connections are not persistent
      connection->request.keepAlive = FALSE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8006e50:	e011      	b.n	8006e76 <httpParseRequestLine+0x172>
   }
   //HTTP version 1.1?
   else if(!osStrcasecmp(token, "HTTP/1.1"))
 8006e52:	490e      	ldr	r1, [pc, #56]	; (8006e8c <httpParseRequestLine+0x188>)
 8006e54:	6978      	ldr	r0, [r7, #20]
 8006e56:	f016 ff25 	bl	801dca4 <strcasecmp>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <httpParseRequestLine+0x16e>
   {
      //Save version number
      connection->request.version = HTTP_VERSION_1_1;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f240 1201 	movw	r2, #257	; 0x101
 8006e66:	619a      	str	r2, [r3, #24]
      //HTTP 1.1 makes persistent connections the default
      connection->request.keepAlive = TRUE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8006e70:	e001      	b.n	8006e76 <httpParseRequestLine+0x172>
   }
   //HTTP version not supported?
   else
   {
      //Report an error
      return ERROR_INVALID_REQUEST;
 8006e72:	2366      	movs	r3, #102	; 0x66
 8006e74:	e000      	b.n	8006e78 <httpParseRequestLine+0x174>
   }

   //Successful processing
   return NO_ERROR;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	080249d4 	.word	0x080249d4
 8006e84:	080249d8 	.word	0x080249d8
 8006e88:	080249dc 	.word	0x080249dc
 8006e8c:	080249e8 	.word	0x080249e8

08006e90 <httpReadHeaderField>:
 * @return Error code
 **/

error_t httpReadHeaderField(HttpConnection *connection,
   char_t *buffer, size_t size, char_t *firstChar)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
   error_t error;
   size_t n;
   size_t length;

   //This is the actual length of the header field
   length = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
   //The process of moving from a multiple-line representation of a header
   //field to its single line representation is called unfolding
   do
   {
      //Check the length of the header field
      if((length + 1) >= size)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d802      	bhi.n	8006eb2 <httpReadHeaderField+0x22>
      {
         //Report an error
         error = ERROR_INVALID_REQUEST;
 8006eac:	2366      	movs	r3, #102	; 0x66
 8006eae:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 8006eb0:	e081      	b.n	8006fb6 <httpReadHeaderField+0x126>
      }

      //NULL character found?
      if(*firstChar == '\0')
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d102      	bne.n	8006ec0 <httpReadHeaderField+0x30>
      {
         //Prepare to decode the first header field
         length = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e017      	b.n	8006ef0 <httpReadHeaderField+0x60>
      }
      //LWSP character found?
      else if(*firstChar == ' ' || *firstChar == '\t')
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d003      	beq.n	8006ed0 <httpReadHeaderField+0x40>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d109      	bne.n	8006ee4 <httpReadHeaderField+0x54>
      {
         //Unfolding is accomplished by regarding CRLF immediately
         //followed by a LWSP as equivalent to the LWSP character
         buffer[length] = *firstChar;
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	701a      	strb	r2, [r3, #0]
         //The current header field spans multiple lines
         length++;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e005      	b.n	8006ef0 <httpReadHeaderField+0x60>
      }
      //Any other character?
      else
      {
         //Restore the very first character of the header field
         buffer[0] = *firstChar;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	701a      	strb	r2, [r3, #0]
         //Prepare to decode a new header field
         length = 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	61bb      	str	r3, [r7, #24]
      }

      //Read data until a CLRF character is encountered
      error = httpReceive(connection, buffer + length,
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	18d1      	adds	r1, r2, r3
         size - 1 - length, &n, SOCKET_FLAG_BREAK_CRLF);
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	1ad3      	subs	r3, r2, r3
      error = httpReceive(connection, buffer + length,
 8006efc:	1e5a      	subs	r2, r3, #1
 8006efe:	f107 0314 	add.w	r3, r7, #20
 8006f02:	f241 000a 	movw	r0, #4106	; 0x100a
 8006f06:	9000      	str	r0, [sp, #0]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fb54 	bl	80075b6 <httpReceive>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	83fb      	strh	r3, [r7, #30]
      //Any error to report?
      if(error)
 8006f12:	8bfb      	ldrh	r3, [r7, #30]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d149      	bne.n	8006fac <httpReadHeaderField+0x11c>
         break;

      //Update the length of the header field
      length += n;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
      //Properly terminate the string with a NULL character
      buffer[length] = '\0';
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	4413      	add	r3, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]

      //An empty line indicates the end of the header fields
      if(!osStrcmp(buffer, "\r\n"))
 8006f2a:	4925      	ldr	r1, [pc, #148]	; (8006fc0 <httpReadHeaderField+0x130>)
 8006f2c:	68b8      	ldr	r0, [r7, #8]
 8006f2e:	f7f9 f9af 	bl	8000290 <strcmp>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d03b      	beq.n	8006fb0 <httpReadHeaderField+0x120>
         break;

      //Read the next character to detect if the CRLF is immediately
      //followed by a LWSP character
      error = httpReceive(connection, firstChar,
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f40:	9200      	str	r2, [sp, #0]
 8006f42:	2201      	movs	r2, #1
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fb35 	bl	80075b6 <httpReceive>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	83fb      	strh	r3, [r7, #30]
         sizeof(char_t), &n, SOCKET_FLAG_WAIT_ALL);
      //Any error to report?
      if(error)
 8006f50:	8bfb      	ldrh	r3, [r7, #30]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d12e      	bne.n	8006fb4 <httpReadHeaderField+0x124>
         break;

      //LWSP character found?
      if(*firstChar == ' ' || *firstChar == '\t')
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d003      	beq.n	8006f66 <httpReadHeaderField+0xd6>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d118      	bne.n	8006f98 <httpReadHeaderField+0x108>
      {
         //CRLF immediately followed by LWSP as equivalent to the LWSP character
         if(length >= 2)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d915      	bls.n	8006f98 <httpReadHeaderField+0x108>
         {
            if(buffer[length - 2] == '\r' || buffer[length - 1] == '\n')
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	3b02      	subs	r3, #2
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	4413      	add	r3, r2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b0d      	cmp	r3, #13
 8006f78:	d006      	beq.n	8006f88 <httpReadHeaderField+0xf8>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b0a      	cmp	r3, #10
 8006f86:	d107      	bne.n	8006f98 <httpReadHeaderField+0x108>
            {
               //Remove trailing CRLF sequence
               length -= 2;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3b02      	subs	r3, #2
 8006f8c:	61bb      	str	r3, [r7, #24]
               //Properly terminate the string with a NULL character
               buffer[length] = '\0';
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	4413      	add	r3, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
            }
         }
      }

      //A header field may span multiple lines...
   } while(*firstChar == ' ' || *firstChar == '\t');
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d080      	beq.n	8006ea2 <httpReadHeaderField+0x12>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	f43f af7c 	beq.w	8006ea2 <httpReadHeaderField+0x12>
 8006faa:	e004      	b.n	8006fb6 <httpReadHeaderField+0x126>
         break;
 8006fac:	bf00      	nop
 8006fae:	e002      	b.n	8006fb6 <httpReadHeaderField+0x126>
         break;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <httpReadHeaderField+0x126>
         break;
 8006fb4:	bf00      	nop

   //Return status code
   return error;
 8006fb6:	8bfb      	ldrh	r3, [r7, #30]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	080249d0 	.word	0x080249d0

08006fc4 <httpParseHeaderField>:
 * @param[in] value Value of the header field
 **/

void httpParseHeaderField(HttpConnection *connection,
   const char_t *name, char_t *value)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
   //Host header field?
   if(!osStrcasecmp(name, "Host"))
 8006fd0:	4932      	ldr	r1, [pc, #200]	; (800709c <httpParseHeaderField+0xd8>)
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f016 fe66 	bl	801dca4 <strcasecmp>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d108      	bne.n	8006ff0 <httpParseHeaderField+0x2c>
   {
      //Save host name
      strSafeCopy(connection->request.host, value,
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006fe4:	221f      	movs	r2, #31
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fa fd39 	bl	8001a60 <strSafeCopy>
   {
      //Parse Cookie header field
      httpParseCookieField(connection, value);
   }
#endif
}
 8006fee:	e051      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Connection"))
 8006ff0:	492b      	ldr	r1, [pc, #172]	; (80070a0 <httpParseHeaderField+0xdc>)
 8006ff2:	68b8      	ldr	r0, [r7, #8]
 8006ff4:	f016 fe56 	bl	801dca4 <strcasecmp>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <httpParseHeaderField+0x44>
      httpParseConnectionField(connection, value);
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f85b 	bl	80070bc <httpParseConnectionField>
}
 8007006:	e045      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Transfer-Encoding"))
 8007008:	4926      	ldr	r1, [pc, #152]	; (80070a4 <httpParseHeaderField+0xe0>)
 800700a:	68b8      	ldr	r0, [r7, #8]
 800700c:	f016 fe4a 	bl	801dca4 <strcasecmp>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <httpParseHeaderField+0x6a>
      if(!osStrcasecmp(value, "chunked"))
 8007016:	4924      	ldr	r1, [pc, #144]	; (80070a8 <httpParseHeaderField+0xe4>)
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f016 fe43 	bl	801dca4 <strcasecmp>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d137      	bne.n	8007094 <httpParseHeaderField+0xd0>
         connection->request.chunkedEncoding = TRUE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
}
 800702c:	e032      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Content-Type"))
 800702e:	491f      	ldr	r1, [pc, #124]	; (80070ac <httpParseHeaderField+0xe8>)
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f016 fe37 	bl	801dca4 <strcasecmp>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <httpParseHeaderField+0x82>
      httpParseContentTypeField(connection, value);
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f87c 	bl	800713c <httpParseContentTypeField>
}
 8007044:	e026      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Content-Length"))
 8007046:	491a      	ldr	r1, [pc, #104]	; (80070b0 <httpParseHeaderField+0xec>)
 8007048:	68b8      	ldr	r0, [r7, #8]
 800704a:	f016 fe2b 	bl	801dca4 <strcasecmp>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <httpParseHeaderField+0xa2>
      connection->request.contentLength = atoi(value);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f015 ff90 	bl	801cf7a <atoi>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
}
 8007064:	e016      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Accept-Encoding"))
 8007066:	4913      	ldr	r1, [pc, #76]	; (80070b4 <httpParseHeaderField+0xf0>)
 8007068:	68b8      	ldr	r0, [r7, #8]
 800706a:	f016 fe1b 	bl	801dca4 <strcasecmp>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <httpParseHeaderField+0xba>
      httpParseAcceptEncodingField(connection, value);
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f86b 	bl	8007152 <httpParseAcceptEncodingField>
}
 800707c:	e00a      	b.n	8007094 <httpParseHeaderField+0xd0>
   else if(!osStrcasecmp(name, "Authorization"))
 800707e:	490e      	ldr	r1, [pc, #56]	; (80070b8 <httpParseHeaderField+0xf4>)
 8007080:	68b8      	ldr	r0, [r7, #8]
 8007082:	f016 fe0f 	bl	801dca4 <strcasecmp>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <httpParseHeaderField+0xd0>
      httpParseAuthorizationField(connection, value);
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fd52 	bl	8006b38 <httpParseAuthorizationField>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	080249f4 	.word	0x080249f4
 80070a0:	080249fc 	.word	0x080249fc
 80070a4:	08024a08 	.word	0x08024a08
 80070a8:	08024a1c 	.word	0x08024a1c
 80070ac:	08024a24 	.word	0x08024a24
 80070b0:	08024a34 	.word	0x08024a34
 80070b4:	08024a44 	.word	0x08024a44
 80070b8:	08024a54 	.word	0x08024a54

080070bc <httpParseConnectionField>:
 * @param[in] value Connection field value
 **/

void httpParseConnectionField(HttpConnection *connection,
   char_t *value)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
   char_t *p;
   char_t *token;

   //Get the first value of the list
   token = osStrtok_r(value, ",", &p);
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	461a      	mov	r2, r3
 80070cc:	4918      	ldr	r1, [pc, #96]	; (8007130 <httpParseConnectionField+0x74>)
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f016 fe9d 	bl	801de0e <strtok_r>
 80070d4:	60f8      	str	r0, [r7, #12]

   //Parse the comma-separated list
   while(token != NULL)
 80070d6:	e022      	b.n	800711e <httpParseConnectionField+0x62>
   {
      //Trim whitespace characters
      value = strTrimWhitespace(token);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7fa fc53 	bl	8001984 <strTrimWhitespace>
 80070de:	6038      	str	r0, [r7, #0]

      //Check current value
      if(!osStrcasecmp(value, "keep-alive"))
 80070e0:	4914      	ldr	r1, [pc, #80]	; (8007134 <httpParseConnectionField+0x78>)
 80070e2:	6838      	ldr	r0, [r7, #0]
 80070e4:	f016 fdde 	bl	801dca4 <strcasecmp>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <httpParseConnectionField+0x3c>
      {
         //The connection is persistent
         connection->request.keepAlive = TRUE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80070f6:	e00a      	b.n	800710e <httpParseConnectionField+0x52>
      }
      else if(!osStrcasecmp(value, "close"))
 80070f8:	490f      	ldr	r1, [pc, #60]	; (8007138 <httpParseConnectionField+0x7c>)
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f016 fdd2 	bl	801dca4 <strcasecmp>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <httpParseConnectionField+0x52>
      {
         //The connection will be closed after completion of the response
         connection->request.keepAlive = FALSE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
         connection->request.connectionUpgrade = TRUE;
      }
#endif

      //Get next value
      token = osStrtok_r(NULL, ",", &p);
 800710e:	f107 0308 	add.w	r3, r7, #8
 8007112:	461a      	mov	r2, r3
 8007114:	4906      	ldr	r1, [pc, #24]	; (8007130 <httpParseConnectionField+0x74>)
 8007116:	2000      	movs	r0, #0
 8007118:	f016 fe79 	bl	801de0e <strtok_r>
 800711c:	60f8      	str	r0, [r7, #12]
   while(token != NULL)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1d9      	bne.n	80070d8 <httpParseConnectionField+0x1c>
   }
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	08024a64 	.word	0x08024a64
 8007134:	08024a68 	.word	0x08024a68
 8007138:	08024a74 	.word	0x08024a74

0800713c <httpParseContentTypeField>:
 * @param[in] value Content-Type field value
 **/

void httpParseContentTypeField(HttpConnection *connection,
   char_t *value)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
            connection->request.boundaryLength = n;
         }
      }
   }
#endif
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <httpParseAcceptEncodingField>:
 * @param[in] value Accept-Encoding field value
 **/

void httpParseAcceptEncodingField(HttpConnection *connection,
   char_t *value)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]

      //Get next value
      token = osStrtok_r(NULL, ",", &p);
   }
#endif
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <httpReadChunkSize>:
 * @brief Read chunk-size field from the input stream
 * @param[in] connection Structure representing an HTTP connection
 **/

error_t httpReadChunkSize(HttpConnection *connection)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
   size_t n;
   char_t *end;
   char_t s[8];

   //First chunk to be received?
   if(connection->request.firstChunk)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <httpReadChunkSize+0x1c>
   {
      //Clear the flag
      connection->request.firstChunk = FALSE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8007182:	e023      	b.n	80071cc <httpReadChunkSize+0x64>
   }
   else
   {
      //Read the CRLF that follows the previous chunk-data field
      error = httpReceive(connection, s, sizeof(s) - 1, &n, SOCKET_FLAG_BREAK_CRLF);
 8007184:	f107 0318 	add.w	r3, r7, #24
 8007188:	f107 010c 	add.w	r1, r7, #12
 800718c:	f241 020a 	movw	r2, #4106	; 0x100a
 8007190:	9200      	str	r2, [sp, #0]
 8007192:	2207      	movs	r2, #7
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa0e 	bl	80075b6 <httpReceive>
 800719a:	4603      	mov	r3, r0
 800719c:	83fb      	strh	r3, [r7, #30]
      //Any error to report?
      if(error)
 800719e:	8bfb      	ldrh	r3, [r7, #30]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <httpReadChunkSize+0x40>
         return error;
 80071a4:	8bfb      	ldrh	r3, [r7, #30]
 80071a6:	e074      	b.n	8007292 <httpReadChunkSize+0x12a>

      //Properly terminate the string with a NULL character
      s[n] = '\0';
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f107 0220 	add.w	r2, r7, #32
 80071ae:	4413      	add	r3, r2
 80071b0:	2200      	movs	r2, #0
 80071b2:	f803 2c14 	strb.w	r2, [r3, #-20]

      //The chunk data must be terminated by CRLF
      if(osStrcmp(s, "\r\n"))
 80071b6:	f107 030c 	add.w	r3, r7, #12
 80071ba:	4938      	ldr	r1, [pc, #224]	; (800729c <httpReadChunkSize+0x134>)
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f867 	bl	8000290 <strcmp>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <httpReadChunkSize+0x64>
         return ERROR_WRONG_ENCODING;
 80071c8:	23f7      	movs	r3, #247	; 0xf7
 80071ca:	e062      	b.n	8007292 <httpReadChunkSize+0x12a>
   }

   //Read the chunk-size field
   error = httpReceive(connection, s, sizeof(s) - 1, &n, SOCKET_FLAG_BREAK_CRLF);
 80071cc:	f107 0318 	add.w	r3, r7, #24
 80071d0:	f107 010c 	add.w	r1, r7, #12
 80071d4:	f241 020a 	movw	r2, #4106	; 0x100a
 80071d8:	9200      	str	r2, [sp, #0]
 80071da:	2207      	movs	r2, #7
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9ea 	bl	80075b6 <httpReceive>
 80071e2:	4603      	mov	r3, r0
 80071e4:	83fb      	strh	r3, [r7, #30]
   //Any error to report?
   if(error)
 80071e6:	8bfb      	ldrh	r3, [r7, #30]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <httpReadChunkSize+0x88>
      return error;
 80071ec:	8bfb      	ldrh	r3, [r7, #30]
 80071ee:	e050      	b.n	8007292 <httpReadChunkSize+0x12a>

   //Properly terminate the string with a NULL character
   s[n] = '\0';
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f107 0220 	add.w	r2, r7, #32
 80071f6:	4413      	add	r3, r2
 80071f8:	2200      	movs	r2, #0
 80071fa:	f803 2c14 	strb.w	r2, [r3, #-20]
   //Remove extra whitespaces
   strRemoveTrailingSpace(s);
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4618      	mov	r0, r3
 8007204:	f7fa fbfe 	bl	8001a04 <strRemoveTrailingSpace>

   //Retrieve the size of the chunk
   connection->request.byteCount = osStrtoul(s, &end, 16);
 8007208:	f107 0114 	add.w	r1, r7, #20
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	2210      	movs	r2, #16
 8007212:	4618      	mov	r0, r3
 8007214:	f016 ff08 	bl	801e028 <strtoul>
 8007218:	4602      	mov	r2, r0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

   //No valid conversion could be performed?
   if(end == s || *end != '\0')
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	429a      	cmp	r2, r3
 8007228:	d003      	beq.n	8007232 <httpReadChunkSize+0xca>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <httpReadChunkSize+0xce>
      return ERROR_WRONG_ENCODING;
 8007232:	23f7      	movs	r3, #247	; 0xf7
 8007234:	e02d      	b.n	8007292 <httpReadChunkSize+0x12a>

   //Any chunk whose size is zero terminates the data transfer
   if(!connection->request.byteCount)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800723c:	2b00      	cmp	r3, #0
 800723e:	d127      	bne.n	8007290 <httpReadChunkSize+0x128>
   {
      //The end of the HTTP request body has been reached
      connection->request.lastChunk = TRUE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

      //Skip the trailer
      while(1)
      {
         //Read a complete line
         error = httpReceive(connection, s, sizeof(s) - 1, &n, SOCKET_FLAG_BREAK_CRLF);
 8007248:	f107 0318 	add.w	r3, r7, #24
 800724c:	f107 010c 	add.w	r1, r7, #12
 8007250:	f241 020a 	movw	r2, #4106	; 0x100a
 8007254:	9200      	str	r2, [sp, #0]
 8007256:	2207      	movs	r2, #7
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9ac 	bl	80075b6 <httpReceive>
 800725e:	4603      	mov	r3, r0
 8007260:	83fb      	strh	r3, [r7, #30]
         //Unable to read any data?
         if(error)
 8007262:	8bfb      	ldrh	r3, [r7, #30]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <httpReadChunkSize+0x104>
            return error;
 8007268:	8bfb      	ldrh	r3, [r7, #30]
 800726a:	e012      	b.n	8007292 <httpReadChunkSize+0x12a>

         //Properly terminate the string with a NULL character
         s[n] = '\0';
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f107 0220 	add.w	r2, r7, #32
 8007272:	4413      	add	r3, r2
 8007274:	2200      	movs	r2, #0
 8007276:	f803 2c14 	strb.w	r2, [r3, #-20]

         //The trailer is terminated by an empty line
         if(!osStrcmp(s, "\r\n"))
 800727a:	f107 030c 	add.w	r3, r7, #12
 800727e:	4907      	ldr	r1, [pc, #28]	; (800729c <httpReadChunkSize+0x134>)
 8007280:	4618      	mov	r0, r3
 8007282:	f7f9 f805 	bl	8000290 <strcmp>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d000      	beq.n	800728e <httpReadChunkSize+0x126>
         error = httpReceive(connection, s, sizeof(s) - 1, &n, SOCKET_FLAG_BREAK_CRLF);
 800728c:	e7dc      	b.n	8007248 <httpReadChunkSize+0xe0>
            break;
 800728e:	bf00      	nop
      }
   }

   //Successful processing
   return NO_ERROR;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	080249d0 	.word	0x080249d0

080072a0 <httpInitResponseHeader>:
 * @brief Initialize response header
 * @param[in] connection Structure representing an HTTP connection
 **/

void httpInitResponseHeader(HttpConnection *connection)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
   //Default HTTP header fields
   connection->response.version = connection->request.version;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
   connection->response.statusCode = 200;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22c8      	movs	r2, #200	; 0xc8
 80072b6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
   connection->response.noCache = FALSE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
   connection->response.maxAge = 0;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
   connection->response.location = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   connection->response.contentType = mimeGetType(connection->request.uri);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3324      	adds	r3, #36	; 0x24
 80072d6:	4618      	mov	r0, r3
 80072d8:	f005 feb8 	bl	800d04c <mimeGetType>
 80072dc:	4602      	mov	r2, r0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   connection->response.chunkedEncoding = TRUE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
#if (HTTP_SERVER_PERSISTENT_CONN_SUPPORT == ENABLED)
   //Persistent connections are accepted
   connection->response.keepAlive = connection->request.keepAlive;
#else
   //Connections are not persistent by default
   connection->response.keepAlive = FALSE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#endif
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <httpFormatResponseHeader>:
 * @param[out] buffer Pointer to the buffer where to format the HTTP header
 * @return Error code
 **/

error_t httpFormatResponseHeader(HttpConnection *connection, char_t *buffer)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af02      	add	r7, sp, #8
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
   uint_t i;
   char_t *p;

   //HTTP version 0.9?
   if(connection->response.version == HTTP_VERSION_0_9)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800730c:	2b09      	cmp	r3, #9
 800730e:	d10e      	bne.n	800732e <httpFormatResponseHeader+0x32>
   {
      //Enforce default parameters
      connection->response.keepAlive = FALSE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
      connection->response.chunkedEncoding = FALSE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
      //The size of the response body is not limited
      connection->response.byteCount = UINT_MAX;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
      //We are done since HTTP 0.9 does not support Full-Response format
      return NO_ERROR;
 800732a:	2300      	movs	r3, #0
 800732c:	e109      	b.n	8007542 <httpFormatResponseHeader+0x246>
   }

   //When generating dynamic web pages with HTTP 1.0, the only way to
   //signal the end of the body is to close the connection
   if(connection->response.version == HTTP_VERSION_1_0 &&
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8007334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007338:	d112      	bne.n	8007360 <httpFormatResponseHeader+0x64>
      connection->response.chunkedEncoding)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
   if(connection->response.version == HTTP_VERSION_1_0 &&
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00d      	beq.n	8007360 <httpFormatResponseHeader+0x64>
   {
      //Make the connection non persistent
      connection->response.keepAlive = FALSE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
      connection->response.chunkedEncoding = FALSE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
      //The size of the response body is not limited
      connection->response.byteCount = UINT_MAX;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f04f 32ff 	mov.w	r2, #4294967295
 800735a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 800735e:	e005      	b.n	800736c <httpFormatResponseHeader+0x70>
   }
   else
   {
      //Limit the size of the response body
      connection->response.byteCount = connection->response.contentLength;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
   }

   //Point to the beginning of the buffer
   p = buffer;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	60bb      	str	r3, [r7, #8]

   //The first line of a response message is the Status-Line, consisting
   //of the protocol version followed by a numeric status code and its
   //associated textual phrase
   p += osSprintf(p, "HTTP/%u.%u %u ", MSB(connection->response.version),
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	b2da      	uxtb	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	460b      	mov	r3, r1
 800738c:	496f      	ldr	r1, [pc, #444]	; (800754c <httpFormatResponseHeader+0x250>)
 800738e:	68b8      	ldr	r0, [r7, #8]
 8007390:	f016 fc68 	bl	801dc64 <sprintf>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4413      	add	r3, r2
 800739c:	60bb      	str	r3, [r7, #8]
      LSB(connection->response.version), connection->response.statusCode);

   //Retrieve the Reason-Phrase that corresponds to the Status-Code
   for(i = 0; i < arraysize(statusCodeList); i++)
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e01c      	b.n	80073de <httpFormatResponseHeader+0xe2>
   {
      //Check the status code
      if(statusCodeList[i].value == connection->response.statusCode)
 80073a4:	4a6a      	ldr	r2, [pc, #424]	; (8007550 <httpFormatResponseHeader+0x254>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	015b      	lsls	r3, r3, #5
 80073aa:	4413      	add	r3, r2
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d10f      	bne.n	80073d8 <httpFormatResponseHeader+0xdc>
      {
         //Append the textual phrase to the Status-Line
         p += osSprintf(p, "%s", statusCodeList[i].message);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	015b      	lsls	r3, r3, #5
 80073bc:	4a64      	ldr	r2, [pc, #400]	; (8007550 <httpFormatResponseHeader+0x254>)
 80073be:	4413      	add	r3, r2
 80073c0:	3304      	adds	r3, #4
 80073c2:	461a      	mov	r2, r3
 80073c4:	4963      	ldr	r1, [pc, #396]	; (8007554 <httpFormatResponseHeader+0x258>)
 80073c6:	68b8      	ldr	r0, [r7, #8]
 80073c8:	f016 fc4c 	bl	801dc64 <sprintf>
 80073cc:	4603      	mov	r3, r0
 80073ce:	461a      	mov	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4413      	add	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]
         //Break the loop and continue processing
         break;
 80073d6:	e005      	b.n	80073e4 <httpFormatResponseHeader+0xe8>
   for(i = 0; i < arraysize(statusCodeList); i++)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b0e      	cmp	r3, #14
 80073e2:	d9df      	bls.n	80073a4 <httpFormatResponseHeader+0xa8>
      }
   }

   //Properly terminate the Status-Line
   p += osSprintf(p, "\r\n");
 80073e4:	495c      	ldr	r1, [pc, #368]	; (8007558 <httpFormatResponseHeader+0x25c>)
 80073e6:	68b8      	ldr	r0, [r7, #8]
 80073e8:	f016 fc3c 	bl	801dc64 <sprintf>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4413      	add	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]

   //Valid location?
   if(connection->response.location != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <httpFormatResponseHeader+0x11e>
   {
      //Set Location field
      p += osSprintf(p, "Location: %s\r\n", connection->response.location);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007406:	461a      	mov	r2, r3
 8007408:	4954      	ldr	r1, [pc, #336]	; (800755c <httpFormatResponseHeader+0x260>)
 800740a:	68b8      	ldr	r0, [r7, #8]
 800740c:	f016 fc2a 	bl	801dc64 <sprintf>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4413      	add	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
   }

   //Persistent connection?
   if(connection->response.keepAlive)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8007420:	2b00      	cmp	r3, #0
 8007422:	d015      	beq.n	8007450 <httpFormatResponseHeader+0x154>
   {
      //Set Connection field
      p += osSprintf(p, "Connection: keep-alive\r\n");
 8007424:	494e      	ldr	r1, [pc, #312]	; (8007560 <httpFormatResponseHeader+0x264>)
 8007426:	68b8      	ldr	r0, [r7, #8]
 8007428:	f016 fc1c 	bl	801dc64 <sprintf>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4413      	add	r3, r2
 8007434:	60bb      	str	r3, [r7, #8]

      //Set Keep-Alive field
      p += osSprintf(p, "Keep-Alive: timeout=%u, max=%u\r\n",
 8007436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800743a:	2205      	movs	r2, #5
 800743c:	4949      	ldr	r1, [pc, #292]	; (8007564 <httpFormatResponseHeader+0x268>)
 800743e:	68b8      	ldr	r0, [r7, #8]
 8007440:	f016 fc10 	bl	801dc64 <sprintf>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4413      	add	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	e008      	b.n	8007462 <httpFormatResponseHeader+0x166>
         HTTP_SERVER_IDLE_TIMEOUT / 1000, HTTP_SERVER_MAX_REQUESTS);
   }
   else
   {
      //Set Connection field
      p += osSprintf(p, "Connection: close\r\n");
 8007450:	4945      	ldr	r1, [pc, #276]	; (8007568 <httpFormatResponseHeader+0x26c>)
 8007452:	68b8      	ldr	r0, [r7, #8]
 8007454:	f016 fc06 	bl	801dc64 <sprintf>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4413      	add	r3, r2
 8007460:	60bb      	str	r3, [r7, #8]
   }

   //Specify the caching policy
   if(connection->response.noCache)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <httpFormatResponseHeader+0x1a8>
   {
      //Set Pragma field
      p += osSprintf(p, "Pragma: no-cache\r\n");
 800746c:	493f      	ldr	r1, [pc, #252]	; (800756c <httpFormatResponseHeader+0x270>)
 800746e:	68b8      	ldr	r0, [r7, #8]
 8007470:	f016 fbf8 	bl	801dc64 <sprintf>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4413      	add	r3, r2
 800747c:	60bb      	str	r3, [r7, #8]
      //Set Cache-Control field
      p += osSprintf(p, "Cache-Control: no-store, no-cache, must-revalidate\r\n");
 800747e:	493c      	ldr	r1, [pc, #240]	; (8007570 <httpFormatResponseHeader+0x274>)
 8007480:	68b8      	ldr	r0, [r7, #8]
 8007482:	f016 fbef 	bl	801dc64 <sprintf>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
      p += osSprintf(p, "Cache-Control: max-age=0, post-check=0, pre-check=0\r\n");
 8007490:	4938      	ldr	r1, [pc, #224]	; (8007574 <httpFormatResponseHeader+0x278>)
 8007492:	68b8      	ldr	r0, [r7, #8]
 8007494:	f016 fbe6 	bl	801dc64 <sprintf>
 8007498:	4603      	mov	r3, r0
 800749a:	461a      	mov	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4413      	add	r3, r2
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	e011      	b.n	80074c8 <httpFormatResponseHeader+0x1cc>
   }
   else if(connection->response.maxAge != 0)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <httpFormatResponseHeader+0x1cc>
   {
      //Set Cache-Control field
      p += osSprintf(p, "Cache-Control: max-age=%u\r\n", connection->response.maxAge);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074b4:	461a      	mov	r2, r3
 80074b6:	4930      	ldr	r1, [pc, #192]	; (8007578 <httpFormatResponseHeader+0x27c>)
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	f016 fbd3 	bl	801dc64 <sprintf>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]
      p += osSprintf(p, "Set-Cookie: %s\r\n", connection->response.setCookie);
   }
#endif

   //Valid content type?
   if(connection->response.contentType != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <httpFormatResponseHeader+0x1f0>
   {
      //Content type
      p += osSprintf(p, "Content-Type: %s\r\n", connection->response.contentType);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80074d8:	461a      	mov	r2, r3
 80074da:	4928      	ldr	r1, [pc, #160]	; (800757c <httpFormatResponseHeader+0x280>)
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f016 fbc1 	bl	801dc64 <sprintf>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	4413      	add	r3, r2
 80074ea:	60bb      	str	r3, [r7, #8]
      p += osSprintf(p, "Content-Encoding: gzip\r\n");
   }
#endif

   //Use chunked encoding transfer?
   if(connection->response.chunkedEncoding)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <httpFormatResponseHeader+0x20e>
   {
      //Set Transfer-Encoding field
      p += osSprintf(p, "Transfer-Encoding: chunked\r\n");
 80074f6:	4922      	ldr	r1, [pc, #136]	; (8007580 <httpFormatResponseHeader+0x284>)
 80074f8:	68b8      	ldr	r0, [r7, #8]
 80074fa:	f016 fbb3 	bl	801dc64 <sprintf>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4413      	add	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	e011      	b.n	800752e <httpFormatResponseHeader+0x232>
   }
   //Persistent connection?
   else if(connection->response.keepAlive)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <httpFormatResponseHeader+0x232>
   {
      //Set Content-Length field
      p += osSprintf(p, "Content-Length: %" PRIuSIZE "\r\n", connection->response.contentLength);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800751a:	461a      	mov	r2, r3
 800751c:	4919      	ldr	r1, [pc, #100]	; (8007584 <httpFormatResponseHeader+0x288>)
 800751e:	68b8      	ldr	r0, [r7, #8]
 8007520:	f016 fba0 	bl	801dc64 <sprintf>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4413      	add	r3, r2
 800752c:	60bb      	str	r3, [r7, #8]
   }

   //Terminate the header with an empty line
   p += osSprintf(p, "\r\n");
 800752e:	490a      	ldr	r1, [pc, #40]	; (8007558 <httpFormatResponseHeader+0x25c>)
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f016 fb97 	bl	801dc64 <sprintf>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]

   //Successful processing
   return NO_ERROR;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	08024a7c 	.word	0x08024a7c
 8007550:	080247f0 	.word	0x080247f0
 8007554:	08024a8c 	.word	0x08024a8c
 8007558:	080249d0 	.word	0x080249d0
 800755c:	08024a90 	.word	0x08024a90
 8007560:	08024aa0 	.word	0x08024aa0
 8007564:	08024abc 	.word	0x08024abc
 8007568:	08024ae0 	.word	0x08024ae0
 800756c:	08024af4 	.word	0x08024af4
 8007570:	08024b08 	.word	0x08024b08
 8007574:	08024b40 	.word	0x08024b40
 8007578:	08024b78 	.word	0x08024b78
 800757c:	08024b94 	.word	0x08024b94
 8007580:	08024ba8 	.word	0x08024ba8
 8007584:	08024bc8 	.word	0x08024bc8

08007588 <httpSend>:
 * @param[in] flags Set of flags that influences the behavior of this function
 **/

error_t httpSend(HttpConnection *connection,
   const void *data, size_t length, uint_t flags)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
   }
   else
#endif
   {
      //Transmit data to the client
      error = socketSend(connection->socket, data, length, NULL, flags);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6958      	ldr	r0, [r3, #20]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2300      	movs	r3, #0
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	f00b f870 	bl	8012688 <socketSend>
 80075a8:	4603      	mov	r3, r0
 80075aa:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80075ac:	8afb      	ldrh	r3, [r7, #22]
   connection->bufferLen += length;

   //Successful processing
   return NO_ERROR;
#endif
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <httpReceive>:
 * @return Error code
 **/

error_t httpReceive(HttpConnection *connection,
   void *data, size_t size, size_t *received, uint_t flags)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b088      	sub	sp, #32
 80075ba:	af02      	add	r7, sp, #8
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	603b      	str	r3, [r7, #0]
   }
   else
#endif
   {
      //Receive data from the client
      error = socketReceive(connection->socket, data, size, received, flags);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6958      	ldr	r0, [r3, #20]
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	f00b f8dd 	bl	8012790 <socketReceive>
 80075d6:	4603      	mov	r3, r0
 80075d8:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80075da:	8afb      	ldrh	r3, [r7, #22]
   }

   //Return status code
   return error;
#endif
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <httpGetAbsolutePath>:
 * @param[in] maxLen Maximum acceptable path length
 **/

void httpGetAbsolutePath(HttpConnection *connection,
   const char_t *relative, char_t *absolute, size_t maxLen)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
   //Copy the root directory
   osStrcpy(absolute, connection->settings->rootDirectory);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f016 fb7b 	bl	801dcf6 <strcpy>

   //Append the specified path
   pathCombine(absolute, relative, maxLen);
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fa f87d 	bl	8001704 <pathCombine>

   //Clean the resulting path
   pathCanonicalize(absolute);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7f9 fe6e 	bl	80012ec <pathCanonicalize>
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <httpCompExtension>:
 * @param[in] extension String defining the extension to be checked
 * @return TRUE is the filename matches the given extension, else FALSE
 **/

bool_t httpCompExtension(const char_t *filename, const char_t *extension)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
   uint_t n;
   uint_t m;

   //Get the length of the specified filename
   n = osStrlen(filename);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7f8 fe3e 	bl	80002a4 <strlen>
 8007628:	60f8      	str	r0, [r7, #12]
   //Get the length of the extension
   m = osStrlen(extension);
 800762a:	6838      	ldr	r0, [r7, #0]
 800762c:	f7f8 fe3a 	bl	80002a4 <strlen>
 8007630:	60b8      	str	r0, [r7, #8]

   //Check the length of the filename
   if(n < m)
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	429a      	cmp	r2, r3
 8007638:	d201      	bcs.n	800763e <httpCompExtension+0x26>
      return FALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	e00f      	b.n	800765e <httpCompExtension+0x46>

   //Compare extensions
   if(!osStrncasecmp(filename + n - m, extension, m))
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f016 fb5b 	bl	801dd08 <strncasecmp>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <httpCompExtension+0x44>
      return TRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <httpCompExtension+0x46>
   else
      return FALSE;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <httpDecodePercentEncodedString>:
 * @return Error code
 **/

error_t httpDecodePercentEncodedString(const char_t *input,
   char_t *output, size_t outputSize)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
   size_t i;
   char_t buffer[3];

   //Check parameters
   if(input == NULL || output == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <httpDecodePercentEncodedString+0x18>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <httpDecodePercentEncodedString+0x1c>
      return ERROR_INVALID_PARAMETER;
 800767e:	2302      	movs	r3, #2
 8007680:	e056      	b.n	8007730 <httpDecodePercentEncodedString+0xca>

   //Decode the percent-encoded string
   for(i = 0; *input != '\0' && i < outputSize; i++)
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e03f      	b.n	8007708 <httpDecodePercentEncodedString+0xa2>
   {
      //Check current character
      if(*input == '+')
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b2b      	cmp	r3, #43	; 0x2b
 800768e:	d108      	bne.n	80076a2 <httpDecodePercentEncodedString+0x3c>
      {
         //Replace '+' characters with spaces
         output[i] = ' ';
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	2220      	movs	r2, #32
 8007698:	701a      	strb	r2, [r3, #0]
         //Advance data pointer
         input++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e02f      	b.n	8007702 <httpDecodePercentEncodedString+0x9c>
      }
      else if(input[0] == '%' && input[1] != '\0' && input[2] != '\0')
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b25      	cmp	r3, #37	; 0x25
 80076a8:	d122      	bne.n	80076f0 <httpDecodePercentEncodedString+0x8a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01d      	beq.n	80076f0 <httpDecodePercentEncodedString+0x8a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3302      	adds	r3, #2
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d018      	beq.n	80076f0 <httpDecodePercentEncodedString+0x8a>
      {
         //Process percent-encoded characters
         buffer[0] = input[1];
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	743b      	strb	r3, [r7, #16]
         buffer[1] = input[2];
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	747b      	strb	r3, [r7, #17]
         buffer[2] = '\0';
 80076ca:	2300      	movs	r3, #0
 80076cc:	74bb      	strb	r3, [r7, #18]
         //String to integer conversion
         output[i] = (uint8_t) osStrtoul(buffer, NULL, 16);
 80076ce:	f107 0310 	add.w	r3, r7, #16
 80076d2:	2210      	movs	r2, #16
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f016 fca6 	bl	801e028 <strtoul>
 80076dc:	4601      	mov	r1, r0
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	b2ca      	uxtb	r2, r1
 80076e6:	701a      	strb	r2, [r3, #0]
         //Advance data pointer
         input += 3;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3303      	adds	r3, #3
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e008      	b.n	8007702 <httpDecodePercentEncodedString+0x9c>
      }
      else
      {
         //Copy any other characters
         output[i] = *input;
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
         //Advance data pointer
         input++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
   for(i = 0; *input != '\0' && i < outputSize; i++)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <httpDecodePercentEncodedString+0xb2>
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d3b7      	bcc.n	8007688 <httpDecodePercentEncodedString+0x22>
      }
   }

   //Check whether the output buffer runs out of space
   if(i >= outputSize)
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d301      	bcc.n	8007724 <httpDecodePercentEncodedString+0xbe>
      return ERROR_FAILURE;
 8007720:	2301      	movs	r3, #1
 8007722:	e005      	b.n	8007730 <httpDecodePercentEncodedString+0xca>

   //Properly terminate the resulting string
   output[i] = '\0';
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	4413      	add	r3, r2
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
   //Successful processing
   return NO_ERROR;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f009 f919 	bl	801097e <netBufferGetLength>
 800774c:	4602      	mov	r2, r0
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b03      	cmp	r3, #3
 8007758:	d922      	bls.n	80077a0 <icmpProcessMessage+0x68>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f009 f9d6 	bl	8010b0e <netBufferAt>
 8007762:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01c      	beq.n	80077a4 <icmpProcessMessage+0x6c>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 800776a:	6938      	ldr	r0, [r7, #16]
 800776c:	f000 fa20 	bl	8007bb0 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f8d6 	bl	8008926 <ipCalcChecksumEx>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d113      	bne.n	80077a8 <icmpProcessMessage+0x70>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f9ab 	bl	8007ae0 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b08      	cmp	r3, #8
 8007790:	d10c      	bne.n	80077ac <icmpProcessMessage+0x74>
   {
   //Echo Request?
   case ICMP_TYPE_ECHO_REQUEST:
      //Process Echo Request message
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f80b 	bl	80077b4 <icmpProcessEchoRequest>
      break;
 800779e:	e006      	b.n	80077ae <icmpProcessMessage+0x76>
      return;
 80077a0:	bf00      	nop
 80077a2:	e004      	b.n	80077ae <icmpProcessMessage+0x76>
      return;
 80077a4:	bf00      	nop
 80077a6:	e002      	b.n	80077ae <icmpProcessMessage+0x76>
      return;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <icmpProcessMessage+0x76>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 80077ac:	bf00      	nop
   }
}
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 80077b4:	b5b0      	push	{r4, r5, r7, lr}
 80077b6:	b098      	sub	sp, #96	; 0x60
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f009 f8db 	bl	801097e <netBufferGetLength>
 80077c8:	4602      	mov	r2, r0
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	657b      	str	r3, [r7, #84]	; 0x54

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 80077d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d2:	2b07      	cmp	r3, #7
 80077d4:	f240 80b1 	bls.w	800793a <icmpProcessEchoRequest+0x186>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f009 f997 	bl	8010b0e <netBufferAt>
 80077e0:	6538      	str	r0, [r7, #80]	; 0x50
   //Sanity check
   if(requestHeader == NULL)
 80077e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80aa 	beq.w	800793e <icmpProcessEchoRequest+0x18a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 80077ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80077ec:	f000 f9ea 	bl	8007bc4 <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f002 fb5f 	bl	8009ebc <ipv4IsBroadcastAddr>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d105      	bne.n	8007810 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 800780c:	2be0      	cmp	r3, #224	; 0xe0
 800780e:	d119      	bne.n	8007844 <icmpProcessEchoRequest+0x90>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8093 	beq.w	8007942 <icmpProcessEchoRequest+0x18e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f002 f9d7 	bl	8009bdc <ipv4SelectSourceAddr>
 800782e:	4603      	mov	r3, r0
 8007830:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         &ipAddr);
      //Any error to report?
      if(error)
 8007834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8084 	bne.w	8007946 <icmpProcessEchoRequest+0x192>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
   {
 8007842:	e002      	b.n	800784a <icmpProcessEchoRequest+0x96>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 800784a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800784e:	4619      	mov	r1, r3
 8007850:	2008      	movs	r0, #8
 8007852:	f001 f910 	bl	8008a76 <ipAllocBuffer>
 8007856:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(reply == NULL)
 8007858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785a:	2b00      	cmp	r3, #0
 800785c:	d075      	beq.n	800794a <icmpProcessEchoRequest+0x196>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	4619      	mov	r1, r3
 8007862:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007864:	f009 f953 	bl	8010b0e <netBufferAt>
 8007868:	6478      	str	r0, [r7, #68]	; 0x44

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 8007870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007872:	2200      	movs	r2, #0
 8007874:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 8007876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007878:	2200      	movs	r2, #0
 800787a:	709a      	strb	r2, [r3, #2]
 800787c:	2200      	movs	r2, #0
 800787e:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 8007880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007882:	889b      	ldrh	r3, [r3, #4]
 8007884:	b29a      	uxth	r2, r3
 8007886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007888:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	b29a      	uxth	r2, r3
 8007890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007892:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 800789a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789c:	3b08      	subs	r3, #8
 800789e:	657b      	str	r3, [r7, #84]	; 0x54

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 80078a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80078a8:	f009 f964 	bl	8010b74 <netBufferConcat>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

   //Check status code
   if(!error)
 80078b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d13b      	bne.n	8007932 <icmpProcessEchoRequest+0x17e>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 80078ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80078bc:	f009 f85f 	bl	801097e <netBufferGetLength>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	643b      	str	r3, [r7, #64]	; 0x40
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078cc:	4619      	mov	r1, r3
 80078ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80078d0:	f001 f829 	bl	8008926 <ipCalcChecksumEx>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078da:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
      replyPseudoHeader.reserved = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      replyPseudoHeader.length = htons(replyLength);
 80078ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7f9 faee 	bl	8000ed4 <swapInt16>
 80078f8:	4603      	mov	r3, r0
 80078fa:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 80078fc:	2000      	movs	r0, #0
 80078fe:	f000 f923 	bl	8007b48 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 8007902:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007904:	f000 f95e 	bl	8007bc4 <icmpDumpEchoMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007908:	4b12      	ldr	r3, [pc, #72]	; (8007954 <icmpProcessEchoRequest+0x1a0>)
 800790a:	f107 0414 	add.w	r4, r7, #20
 800790e:	461d      	mov	r5, r3
 8007910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007918:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007920:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4613      	mov	r3, r2
 800792c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792e:	f001 facd 	bl	8008ecc <ipv4SendDatagram>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8007932:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007934:	f009 f814 	bl	8010960 <netBufferFree>
 8007938:	e008      	b.n	800794c <icmpProcessEchoRequest+0x198>
      return;
 800793a:	bf00      	nop
 800793c:	e006      	b.n	800794c <icmpProcessEchoRequest+0x198>
      return;
 800793e:	bf00      	nop
 8007940:	e004      	b.n	800794c <icmpProcessEchoRequest+0x198>
         return;
 8007942:	bf00      	nop
 8007944:	e002      	b.n	800794c <icmpProcessEchoRequest+0x198>
         return;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <icmpProcessEchoRequest+0x198>
      return;
 800794a:	bf00      	nop
}
 800794c:	3758      	adds	r7, #88	; 0x58
 800794e:	46bd      	mov	sp, r7
 8007950:	bdb0      	pop	{r4, r5, r7, pc}
 8007952:	bf00      	nop
 8007954:	08025288 	.word	0x08025288

08007958 <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8007958:	b5b0      	push	{r4, r5, r7, lr}
 800795a:	b094      	sub	sp, #80	; 0x50
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	461a      	mov	r2, r3
 8007966:	4603      	mov	r3, r0
 8007968:	70fb      	strb	r3, [r7, #3]
 800796a:	460b      	mov	r3, r1
 800796c:	70bb      	strb	r3, [r7, #2]
 800796e:	4613      	mov	r3, r2
 8007970:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8007972:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007974:	f009 f803 	bl	801097e <netBufferGetLength>
 8007978:	4602      	mov	r2, r0
 800797a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	643b      	str	r3, [r7, #64]	; 0x40

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 8007980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007982:	2b13      	cmp	r3, #19
 8007984:	d801      	bhi.n	800798a <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 8007986:	23ec      	movs	r3, #236	; 0xec
 8007988:	e0a4      	b.n	8007ad4 <icmpSendErrorMessage+0x17c>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800798a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800798c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800798e:	f009 f8be 	bl	8010b0e <netBufferAt>
 8007992:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Sanity check
   if(ipHeader == NULL)
 8007994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 800799a:	2301      	movs	r3, #1
 800799c:	e09a      	b.n	8007ad4 <icmpSendErrorMessage+0x17c>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 800799e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f002 fa89 	bl	8009ebc <ipv4IsBroadcastAddr>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 80079b8:	2be0      	cmp	r3, #224	; 0xe0
 80079ba:	d101      	bne.n	80079c0 <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 80079bc:	23e4      	movs	r3, #228	; 0xe4
 80079be:	e089      	b.n	8007ad4 <icmpSendErrorMessage+0x17c>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	3302      	adds	r3, #2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bf28      	it	cs
 80079d4:	4613      	movcs	r3, r2
 80079d6:	643b      	str	r3, [r7, #64]	; 0x40

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 80079d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079dc:	4619      	mov	r1, r3
 80079de:	2008      	movs	r0, #8
 80079e0:	f001 f849 	bl	8008a76 <ipAllocBuffer>
 80079e4:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 80079ec:	2364      	movs	r3, #100	; 0x64
 80079ee:	e071      	b.n	8007ad4 <icmpSendErrorMessage+0x17c>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	4619      	mov	r1, r3
 80079f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f6:	f009 f88a 	bl	8010b0e <netBufferAt>
 80079fa:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ICMP message
   icmpHeader->type = type;
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	78ba      	ldrb	r2, [r7, #2]
 8007a06:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	709a      	strb	r2, [r3, #2]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	787a      	ldrb	r2, [r7, #1]
 8007a16:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused[0] = 0;
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	715a      	strb	r2, [r3, #5]
   icmpHeader->unused[1] = 0;
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	2200      	movs	r2, #0
 8007a22:	719a      	strb	r2, [r3, #6]
   icmpHeader->unused[2] = 0;
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	2200      	movs	r2, #0
 8007a28:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 8007a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a32:	f009 f89f 	bl	8010b74 <netBufferConcat>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Check status code
   if(!error)
 8007a3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d142      	bne.n	8007aca <icmpSendErrorMessage+0x172>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 8007a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a46:	f008 ff9a 	bl	801097e <netBufferGetLength>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a56:	4619      	mov	r1, r3
 8007a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a5a:	f000 ff64 	bl	8008926 <ipCalcChecksumEx>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 8007a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
      pseudoHeader.destAddr = ipHeader->srcAddr;
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
      pseudoHeader.reserved = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
      pseudoHeader.length = htons(length);
 8007a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f9 fa26 	bl	8000ed4 <swapInt16>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f85a 	bl	8007b48 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 8007a94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a96:	f000 f89f 	bl	8007bd8 <icmpDumpErrorMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <icmpSendErrorMessage+0x184>)
 8007a9c:	f107 040c 	add.w	r4, r7, #12
 8007aa0:	461d      	mov	r5, r3
 8007aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007aaa:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 8007aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 fa04 	bl	8008ecc <ipv4SendDatagram>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 8007aca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007acc:	f008 ff48 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 8007ad0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3748      	adds	r7, #72	; 0x48
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bdb0      	pop	{r4, r5, r7, pc}
 8007adc:	08025288 	.word	0x08025288

08007ae0 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	3b03      	subs	r3, #3
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d822      	bhi.n	8007b38 <icmpUpdateInStats+0x58>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <icmpUpdateInStats+0x18>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b39 	.word	0x08007b39
 8007afc:	08007b39 	.word	0x08007b39
 8007b00:	08007b39 	.word	0x08007b39
 8007b04:	08007b39 	.word	0x08007b39
 8007b08:	08007b39 	.word	0x08007b39
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	08007b39 	.word	0x08007b39
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b39 	.word	0x08007b39
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b39 	.word	0x08007b39
 8007b24:	08007b39 	.word	0x08007b39
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b39 	.word	0x08007b39
 8007b30:	08007b39 	.word	0x08007b39
 8007b34:	08007b39 	.word	0x08007b39
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8007b38:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop

08007b48 <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	3b03      	subs	r3, #3
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d822      	bhi.n	8007ba0 <icmpUpdateOutStats+0x58>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <icmpUpdateOutStats+0x18>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007ba1 	.word	0x08007ba1
 8007b64:	08007ba1 	.word	0x08007ba1
 8007b68:	08007ba1 	.word	0x08007ba1
 8007b6c:	08007ba1 	.word	0x08007ba1
 8007b70:	08007ba1 	.word	0x08007ba1
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007ba1 	.word	0x08007ba1
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba1 	.word	0x08007ba1
 8007b98:	08007ba1 	.word	0x08007ba1
 8007b9c:	08007ba1 	.word	0x08007ba1
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8007ba0:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop

08007bb0 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <icmpv6ProcessMessage>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void icmpv6ProcessMessage(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]

   //Total number of ICMP messages which the entity received
   IP_MIB_INC_COUNTER32(icmpv6Stats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMPv6 message
   length = netBufferGetLength(buffer) - offset;
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f008 febf 	bl	801097e <netBufferGetLength>
 8007c00:	4602      	mov	r2, r0
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(Icmpv6Header))
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	f240 809f 	bls.w	8007d4e <icmpv6ProcessMessage+0x162>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMPv6 message header
   header = netBufferAt(buffer, offset);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f008 ff7b 	bl	8010b0e <netBufferAt>
 8007c18:	6138      	str	r0, [r7, #16]

   //Sanity check
   if(header == NULL)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8098 	beq.w	8007d52 <icmpv6ProcessMessage+0x166>
      return;

   //Debug message
   TRACE_INFO("ICMPv6 message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpv6DumpMessage(header);
 8007c22:	6938      	ldr	r0, [r7, #16]
 8007c24:	f000 fad8 	bl	80081d8 <icmpv6DumpMessage>

   //Verify checksum value
   if(ipCalcUpperLayerChecksumEx(pseudoHeader,
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	2128      	movs	r1, #40	; 0x28
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f000 fef6 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f040 808b 	bne.w	8007d56 <icmpv6ProcessMessage+0x16a>
      //Exit immediately
      return;
   }

   //Check whether the destination address is the tentative address
   if(ipv6IsTentativeAddr(interface, &pseudoHeader->destAddr))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	3310      	adds	r3, #16
 8007c44:	4619      	mov	r1, r3
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f004 fb7c 	bl	800c344 <ipv6IsTentativeAddr>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <icmpv6ProcessMessage+0x76>
   {
      //The interface must accept Neighbor Solicitation and
      //Neighbor Advertisement messages
      if(header->type != ICMPV6_TYPE_NEIGHBOR_SOL &&
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b87      	cmp	r3, #135	; 0x87
 8007c58:	d003      	beq.n	8007c62 <icmpv6ProcessMessage+0x76>
         header->type != ICMPV6_TYPE_NEIGHBOR_ADV)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
      if(header->type != ICMPV6_TYPE_NEIGHBOR_SOL &&
 8007c5e:	2b88      	cmp	r3, #136	; 0x88
 8007c60:	d17b      	bne.n	8007d5a <icmpv6ProcessMessage+0x16e>

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsInPkts[header->type], 1);

   //Check the type of message
   switch(header->type)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b89      	cmp	r3, #137	; 0x89
 8007c68:	dc79      	bgt.n	8007d5e <icmpv6ProcessMessage+0x172>
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	da04      	bge.n	8007c78 <icmpv6ProcessMessage+0x8c>
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d01c      	beq.n	8007cac <icmpv6ProcessMessage+0xc0>
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d021      	beq.n	8007cba <icmpv6ProcessMessage+0xce>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMPv6 message type!\r\n");
      //Discard incoming ICMPv6 message
      break;
 8007c76:	e072      	b.n	8007d5e <icmpv6ProcessMessage+0x172>
 8007c78:	3b80      	subs	r3, #128	; 0x80
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d86f      	bhi.n	8007d5e <icmpv6ProcessMessage+0x172>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <icmpv6ProcessMessage+0x98>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007d5f 	.word	0x08007d5f
 8007c8c:	08007cd7 	.word	0x08007cd7
 8007c90:	08007ceb 	.word	0x08007ceb
 8007c94:	08007d5f 	.word	0x08007d5f
 8007c98:	08007d5f 	.word	0x08007d5f
 8007c9c:	08007cff 	.word	0x08007cff
 8007ca0:	08007d13 	.word	0x08007d13
 8007ca4:	08007d27 	.word	0x08007d27
 8007ca8:	08007d3b 	.word	0x08007d3b
      icmpv6ProcessDestUnreachable(interface, pseudoHeader, buffer, offset);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f858 	bl	8007d68 <icmpv6ProcessDestUnreachable>
      break;
 8007cb8:	e052      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      icmpv6ProcessPacketTooBig(interface, pseudoHeader, buffer, offset);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f874 	bl	8007dae <icmpv6ProcessPacketTooBig>
      break;
 8007cc6:	e04b      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      icmpv6ProcessEchoRequest(interface, pseudoHeader, buffer, offset);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f8b2 	bl	8007e38 <icmpv6ProcessEchoRequest>
      break;
 8007cd4:	e044      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      mldProcessListenerQuery(interface, pseudoHeader, buffer, offset, hopLimit);
 8007cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f005 fae4 	bl	800d2b0 <mldProcessListenerQuery>
      break;
 8007ce8:	e03a      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      mldProcessListenerReport(interface, pseudoHeader, buffer, offset, hopLimit);
 8007cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f005 fb7c 	bl	800d3f4 <mldProcessListenerReport>
      break;
 8007cfc:	e030      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      ndpProcessRouterAdv(interface, pseudoHeader, buffer, offset, hopLimit);
 8007cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f006 fc26 	bl	800e55c <ndpProcessRouterAdv>
      break;
 8007d10:	e026      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      ndpProcessNeighborSol(interface, pseudoHeader, buffer, offset, hopLimit);
 8007d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f006 fdac 	bl	800e87c <ndpProcessNeighborSol>
      break;
 8007d24:	e01c      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      ndpProcessNeighborAdv(interface, pseudoHeader, buffer, offset, hopLimit);
 8007d26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f006 fef0 	bl	800eb18 <ndpProcessNeighborAdv>
      break;
 8007d38:	e012      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      ndpProcessRedirect(interface, pseudoHeader, buffer, offset, hopLimit);
 8007d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f007 f82d 	bl	800eda6 <ndpProcessRedirect>
      break;
 8007d4c:	e008      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      return;
 8007d4e:	bf00      	nop
 8007d50:	e006      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      return;
 8007d52:	bf00      	nop
 8007d54:	e004      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      return;
 8007d56:	bf00      	nop
 8007d58:	e002      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
         return;
 8007d5a:	bf00      	nop
 8007d5c:	e000      	b.n	8007d60 <icmpv6ProcessMessage+0x174>
      break;
 8007d5e:	bf00      	nop
   }
}
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop

08007d68 <icmpv6ProcessDestUnreachable>:
 * @param[in] offset Offset to the first byte of the ICMPv6 message
 **/

void icmpv6ProcessDestUnreachable(NetInterface *interface,
   Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
   size_t length;
   Icmpv6DestUnreachableMessage *icmpHeader;

   //Retrieve the length of the Destination Unreachable message
   length = netBufferGetLength(buffer) - offset;
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f008 fe01 	bl	801097e <netBufferGetLength>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	617b      	str	r3, [r7, #20]

   //Ensure the packet length is correct
   if(length < sizeof(Icmpv6DestUnreachableMessage))
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b07      	cmp	r3, #7
 8007d88:	d90b      	bls.n	8007da2 <icmpv6ProcessDestUnreachable+0x3a>
      return;

   //Point to the ICMPv6 header
   icmpHeader = netBufferAt(buffer, offset);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f008 febe 	bl	8010b0e <netBufferAt>
 8007d92:	6138      	str	r0, [r7, #16]

   //Sanity check
   if(icmpHeader == NULL)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <icmpv6ProcessDestUnreachable+0x3e>
      return;

   //Debug message
   TRACE_INFO("ICMPv6 Destination Unreachable message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpv6DumpDestUnreachableMessage(icmpHeader);
 8007d9a:	6938      	ldr	r0, [r7, #16]
 8007d9c:	f000 fa26 	bl	80081ec <icmpv6DumpDestUnreachableMessage>
 8007da0:	e002      	b.n	8007da8 <icmpv6ProcessDestUnreachable+0x40>
      return;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <icmpv6ProcessDestUnreachable+0x40>
      return;
 8007da6:	bf00      	nop
}
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <icmpv6ProcessPacketTooBig>:
 * @param[in] offset Offset to the first byte of the ICMPv6 message
 **/

void icmpv6ProcessPacketTooBig(NetInterface *interface,
   Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b088      	sub	sp, #32
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	603b      	str	r3, [r7, #0]
   uint32_t tentativePathMtu;
   Ipv6Header *ipHeader;
#endif

   //Retrieve the length of the Packet Too Big message
   length = netBufferGetLength(buffer) - offset;
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f008 fdde 	bl	801097e <netBufferGetLength>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	61fb      	str	r3, [r7, #28]

   //Ensure the packet length is correct
   if(length < sizeof(Icmpv6PacketTooBigMessage))
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b07      	cmp	r3, #7
 8007dce:	d929      	bls.n	8007e24 <icmpv6ProcessPacketTooBig+0x76>
      return;

   //Point to the ICMPv6 header
   icmpHeader = netBufferAt(buffer, offset);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f008 fe9b 	bl	8010b0e <netBufferAt>
 8007dd8:	61b8      	str	r0, [r7, #24]

   //Sanity check
   if(icmpHeader == NULL)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d023      	beq.n	8007e28 <icmpv6ProcessPacketTooBig+0x7a>
      return;

   //Debug message
   TRACE_INFO("ICMPv6 Packet Too Big message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpv6DumpPacketTooBigMessage(icmpHeader);
 8007de0:	69b8      	ldr	r0, [r7, #24]
 8007de2:	f000 fa0d 	bl	8008200 <icmpv6DumpPacketTooBigMessage>

#if (IPV6_PMTU_SUPPORT == ENABLED)
   //Move to the beginning of the original IPv6 packet
   offset += sizeof(Icmpv6PacketTooBigMessage);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	603b      	str	r3, [r7, #0]
   length -= sizeof(Icmpv6PacketTooBigMessage);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3b08      	subs	r3, #8
 8007df0:	61fb      	str	r3, [r7, #28]

   //Ensure the packet length is correct
   if(length < sizeof(Ipv6Header))
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b27      	cmp	r3, #39	; 0x27
 8007df6:	d919      	bls.n	8007e2c <icmpv6ProcessPacketTooBig+0x7e>
      return;

   //Point to the original IPv6 header
   ipHeader = netBufferAt(buffer, offset);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f008 fe87 	bl	8010b0e <netBufferAt>
 8007e00:	6178      	str	r0, [r7, #20]

   //Sanity check
   if(ipHeader == NULL)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d013      	beq.n	8007e30 <icmpv6ProcessPacketTooBig+0x82>
      return;

   //The node uses the value in the MTU field in the Packet Too Big
   //message as a tentative PMTU value
   tentativePathMtu = ntohl(icmpHeader->mtu);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7f9 f86f 	bl	8000ef0 <swapInt32>
 8007e12:	6138      	str	r0, [r7, #16]

   //Update the PMTU for the specified destination address
   ipv6UpdatePathMtu(interface, &ipHeader->destAddr, tentativePathMtu);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	3318      	adds	r3, #24
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f004 fcb9 	bl	800c794 <ipv6UpdatePathMtu>
 8007e22:	e006      	b.n	8007e32 <icmpv6ProcessPacketTooBig+0x84>
      return;
 8007e24:	bf00      	nop
 8007e26:	e004      	b.n	8007e32 <icmpv6ProcessPacketTooBig+0x84>
      return;
 8007e28:	bf00      	nop
 8007e2a:	e002      	b.n	8007e32 <icmpv6ProcessPacketTooBig+0x84>
      return;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <icmpv6ProcessPacketTooBig+0x84>
      return;
 8007e30:	bf00      	nop
#endif
}
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <icmpv6ProcessEchoRequest>:
 * @param[in] requestOffset Offset to the first byte of the ICMPv6 message
 **/

void icmpv6ProcessEchoRequest(NetInterface *interface, Ipv6PseudoHeader *requestPseudoHeader,
   const NetBuffer *request, size_t requestOffset)
{
 8007e38:	b5b0      	push	{r4, r5, r7, lr}
 8007e3a:	b09e      	sub	sp, #120	; 0x78
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
   Icmpv6EchoMessage *requestHeader;
   Icmpv6EchoMessage *replyHeader;
   Ipv6PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f008 fd99 	bl	801097e <netBufferGetLength>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	66fb      	str	r3, [r7, #108]	; 0x6c

   //Ensure the packet length is correct
   if(requestLength < sizeof(Icmpv6EchoMessage))
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	2b07      	cmp	r3, #7
 8007e58:	f240 80b1 	bls.w	8007fbe <icmpv6ProcessEchoRequest+0x186>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f008 fe55 	bl	8010b0e <netBufferAt>
 8007e64:	66b8      	str	r0, [r7, #104]	; 0x68

   //Sanity check
   if(requestHeader == NULL)
 8007e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80aa 	beq.w	8007fc2 <icmpv6ProcessEchoRequest+0x18a>
      return;

   //Debug message
   TRACE_INFO("ICMPv6 Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpv6DumpEchoMessage(requestHeader);
 8007e6e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007e70:	f000 f9d0 	bl	8008214 <icmpv6DumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a multicast address
   if(ipv6IsMulticastAddr(&requestPseudoHeader->destAddr))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	7c1b      	ldrb	r3, [r3, #16]
 8007e78:	2bff      	cmp	r3, #255	; 0xff
 8007e7a:	d115      	bne.n	8007ea8 <icmpv6ProcessEchoRequest+0x70>
   {
      //If support for multicast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv6Context.enableMulticastEchoReq)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 809f 	beq.w	8007fc6 <icmpv6ProcessEchoRequest+0x18e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the multicast Echo Request message was received
      error = ipv6SelectSourceAddr(&interface, &requestPseudoHeader->srcAddr,
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007e8e:	f107 030c 	add.w	r3, r7, #12
 8007e92:	4618      	mov	r0, r3
 8007e94:	f004 f8fe 	bl	800c094 <ipv6SelectSourceAddr>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
         &replyPseudoHeader.srcAddr);
      //Any error to report?
      if(error)
 8007e9e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <icmpv6ProcessEchoRequest+0x82>
         return;
 8007ea6:	e091      	b.n	8007fcc <icmpv6ProcessEchoRequest+0x194>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007eae:	3310      	adds	r3, #16
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	6859      	ldr	r1, [r3, #4]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(Icmpv6EchoMessage), &replyOffset);
 8007eba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	2008      	movs	r0, #8
 8007ec2:	f000 fdd8 	bl	8008a76 <ipAllocBuffer>
 8007ec6:	6638      	str	r0, [r7, #96]	; 0x60
   //Failed to allocate memory?
   if(reply == NULL)
 8007ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d07d      	beq.n	8007fca <icmpv6ProcessEchoRequest+0x192>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 8007ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007ed4:	f008 fe1b 	bl	8010b0e <netBufferAt>
 8007ed8:	65f8      	str	r0, [r7, #92]	; 0x5c

   //Format Echo Reply header
   replyHeader->type = ICMPV6_TYPE_ECHO_REPLY;
 8007eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007edc:	2281      	movs	r2, #129	; 0x81
 8007ede:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 8007ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 8007ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee8:	2200      	movs	r2, #0
 8007eea:	709a      	strb	r2, [r3, #2]
 8007eec:	2200      	movs	r2, #0
 8007eee:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 8007ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ef2:	889b      	ldrh	r3, [r3, #4]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef8:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 8007efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f02:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(Icmpv6EchoMessage);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(Icmpv6EchoMessage);
 8007f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0c:	3b08      	subs	r3, #8
 8007f0e:	66fb      	str	r3, [r7, #108]	; 0x6c

   //The data received in the ICMPv6 Echo Request message must be returned
   //entirely and unmodified in the ICMPv6 Echo Reply message
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 8007f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007f18:	f008 fe2c 	bl	8010b74 <netBufferConcat>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

   //Check status code
   if(!error)
 8007f22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d145      	bne.n	8007fb6 <icmpv6ProcessEchoRequest+0x17e>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 8007f2a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007f2c:	f008 fd27 	bl	801097e <netBufferGetLength>
 8007f30:	4602      	mov	r2, r0
 8007f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	65bb      	str	r3, [r7, #88]	; 0x58

      //Format IPv6 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	6859      	ldr	r1, [r3, #4]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      replyPseudoHeader.length = htonl(replyLength);
 8007f48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f4a:	f7f8 ffd1 	bl	8000ef0 <swapInt32>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	64fb      	str	r3, [r7, #76]	; 0x4c
      replyPseudoHeader.reserved[0] = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      replyPseudoHeader.reserved[1] = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
      replyPseudoHeader.reserved[2] = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
      replyPseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 8007f64:	233a      	movs	r3, #58	; 0x3a
 8007f66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      //Message checksum calculation
      replyHeader->checksum = ipCalcUpperLayerChecksumEx(&replyPseudoHeader,
 8007f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f6c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f78:	2128      	movs	r1, #40	; 0x28
 8007f7a:	f000 fd53 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f84:	805a      	strh	r2, [r3, #2]
      IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsOutPkts[ICMPV6_TYPE_ECHO_REPLY], 1);

      //Debug message
      TRACE_INFO("Sending ICMPv6 Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpv6DumpEchoMessage(replyHeader);
 8007f86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007f88:	f000 f944 	bl	8008214 <icmpv6DumpEchoMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007f8c:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <icmpv6ProcessEchoRequest+0x19c>)
 8007f8e:	f107 0414 	add.w	r4, r7, #20
 8007f92:	461d      	mov	r5, r3
 8007f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f9c:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send Echo Reply message
      ipv6SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fa4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007fa8:	f107 0314 	add.w	r3, r7, #20
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fb2:	f002 fdd2 	bl	800ab5a <ipv6SendDatagram>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8007fb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007fb8:	f008 fcd2 	bl	8010960 <netBufferFree>
 8007fbc:	e006      	b.n	8007fcc <icmpv6ProcessEchoRequest+0x194>
      return;
 8007fbe:	bf00      	nop
 8007fc0:	e004      	b.n	8007fcc <icmpv6ProcessEchoRequest+0x194>
      return;
 8007fc2:	bf00      	nop
 8007fc4:	e002      	b.n	8007fcc <icmpv6ProcessEchoRequest+0x194>
         return;
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <icmpv6ProcessEchoRequest+0x194>
      return;
 8007fca:	bf00      	nop
}
 8007fcc:	3770      	adds	r7, #112	; 0x70
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	08025288 	.word	0x08025288

08007fd8 <icmpv6SendErrorMessage>:
 * @return Error code
 **/

error_t icmpv6SendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint32_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8007fd8:	b5b0      	push	{r4, r5, r7, lr}
 8007fda:	b09c      	sub	sp, #112	; 0x70
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	72fb      	strb	r3, [r7, #11]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	72bb      	strb	r3, [r7, #10]
   Icmpv6ErrorMessage *icmpHeader;
   Ipv6Header *ipHeader;
   Ipv6PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv6 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8007fea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007fec:	f008 fcc7 	bl	801097e <netBufferGetLength>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	663b      	str	r3, [r7, #96]	; 0x60

   //Check the length of the IPv6 packet
   if(length < sizeof(Ipv6Header))
 8007ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffa:	2b27      	cmp	r3, #39	; 0x27
 8007ffc:	d801      	bhi.n	8008002 <icmpv6SendErrorMessage+0x2a>
      return ERROR_INVALID_LENGTH;
 8007ffe:	23ec      	movs	r3, #236	; 0xec
 8008000:	e0e3      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 8008002:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008004:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008006:	f008 fd82 	bl	8010b0e <netBufferAt>
 800800a:	65f8      	str	r0, [r7, #92]	; 0x5c

   //Sanity check
   if(ipHeader == NULL)
 800800c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <icmpv6SendErrorMessage+0x3e>
      return ERROR_FAILURE;
 8008012:	2301      	movs	r3, #1
 8008014:	e0d9      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>

   //Check the type of the invoking packet
   if(ipHeader->nextHeader == IPV6_ICMPV6_HEADER)
 8008016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008018:	799b      	ldrb	r3, [r3, #6]
 800801a:	2b3a      	cmp	r3, #58	; 0x3a
 800801c:	d122      	bne.n	8008064 <icmpv6SendErrorMessage+0x8c>
   {
      //Make sure the ICMPv6 message is valid
      if(length >= (sizeof(Ipv6Header) + sizeof(Icmpv6Header)))
 800801e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008020:	2b2b      	cmp	r3, #43	; 0x2b
 8008022:	d91f      	bls.n	8008064 <icmpv6SendErrorMessage+0x8c>
      {
         //Point to the ICMPv6 header
         icmpHeader = netBufferAt(ipPacket, ipPacketOffset + sizeof(Ipv6Header));
 8008024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008026:	3328      	adds	r3, #40	; 0x28
 8008028:	4619      	mov	r1, r3
 800802a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800802c:	f008 fd6f 	bl	8010b0e <netBufferAt>
 8008030:	65b8      	str	r0, [r7, #88]	; 0x58

         //Sanity check
         if(icmpHeader != NULL)
 8008032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008034:	2b00      	cmp	r3, #0
 8008036:	d015      	beq.n	8008064 <icmpv6SendErrorMessage+0x8c>
         {
            //An ICMPv6 error message must not be originated as a result
            //of receiving an ICMPv6 error or redirect message
            if(icmpHeader->type == ICMPV6_TYPE_DEST_UNREACHABLE ||
 8008038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d00f      	beq.n	8008060 <icmpv6SendErrorMessage+0x88>
               icmpHeader->type == ICMPV6_TYPE_PACKET_TOO_BIG ||
 8008040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008042:	781b      	ldrb	r3, [r3, #0]
            if(icmpHeader->type == ICMPV6_TYPE_DEST_UNREACHABLE ||
 8008044:	2b02      	cmp	r3, #2
 8008046:	d00b      	beq.n	8008060 <icmpv6SendErrorMessage+0x88>
               icmpHeader->type == ICMPV6_TYPE_TIME_EXCEEDED ||
 8008048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800804a:	781b      	ldrb	r3, [r3, #0]
               icmpHeader->type == ICMPV6_TYPE_PACKET_TOO_BIG ||
 800804c:	2b03      	cmp	r3, #3
 800804e:	d007      	beq.n	8008060 <icmpv6SendErrorMessage+0x88>
               icmpHeader->type == ICMPV6_TYPE_PARAM_PROBLEM ||
 8008050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008052:	781b      	ldrb	r3, [r3, #0]
               icmpHeader->type == ICMPV6_TYPE_TIME_EXCEEDED ||
 8008054:	2b04      	cmp	r3, #4
 8008056:	d003      	beq.n	8008060 <icmpv6SendErrorMessage+0x88>
               icmpHeader->type == ICMPV6_TYPE_REDIRECT)
 8008058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800805a:	781b      	ldrb	r3, [r3, #0]
               icmpHeader->type == ICMPV6_TYPE_PARAM_PROBLEM ||
 800805c:	2b89      	cmp	r3, #137	; 0x89
 800805e:	d101      	bne.n	8008064 <icmpv6SendErrorMessage+0x8c>
            {
               //Do not send the ICMPv6 error message...
               return ERROR_INVALID_TYPE;
 8008060:	23f0      	movs	r3, #240	; 0xf0
 8008062:	e0b2      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>
      }
   }

   //An ICMPv6 error message must not be originated as a result of
   //receiving a packet destined to an IPv6 multicast address
   if(ipv6IsMulticastAddr(&ipHeader->destAddr))
 8008064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008066:	7e1b      	ldrb	r3, [r3, #24]
 8008068:	2bff      	cmp	r3, #255	; 0xff
 800806a:	d10a      	bne.n	8008082 <icmpv6SendErrorMessage+0xaa>
   {
      //There are two exceptions to this rule
      if(type == ICMPV6_TYPE_PACKET_TOO_BIG)
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d007      	beq.n	8008082 <icmpv6SendErrorMessage+0xaa>
      {
         //The Packet Too Big Message to allow Path MTU discovery to
         //work for IPv6 multicast
      }
      else if(type == ICMPV6_TYPE_PARAM_PROBLEM &&
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d102      	bne.n	800807e <icmpv6SendErrorMessage+0xa6>
 8008078:	7abb      	ldrb	r3, [r7, #10]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d001      	beq.n	8008082 <icmpv6SendErrorMessage+0xaa>
         //option that has the Option Type highest-order two bits set to 10
      }
      else
      {
         //Do not send the ICMPv6 error message...
         return ERROR_INVALID_ADDRESS;
 800807e:	23e4      	movs	r3, #228	; 0xe4
 8008080:	e0a3      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>

   //An ICMPv6 error message must not be originated as a result of receiving a
   //packet whose source address does not uniquely identify a single node (e.g.
   //the IPv6 unspecified address, an IPv6 multicast address, or an address
   //known by the ICMPv6 message originator to be an IPv6 anycast address)
   if(ipv6IsAnycastAddr(interface, &ipHeader->srcAddr))
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008086:	3308      	adds	r3, #8
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f004 f926 	bl	800c2dc <ipv6IsAnycastAddr>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <icmpv6SendErrorMessage+0xc2>
      return ERROR_INVALID_ADDRESS;
 8008096:	23e4      	movs	r3, #228	; 0xe4
 8008098:	e097      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>

   //Return as much of invoking IPv6 packet as possible without
   //the ICMPv6 packet exceeding the minimum IPv6 MTU
   length = MIN(length, IPV6_DEFAULT_MTU -
 800809a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809c:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
 80080a0:	bf28      	it	cs
 80080a2:	f44f 639a 	movcs.w	r3, #1232	; 0x4d0
 80080a6:	663b      	str	r3, [r7, #96]	; 0x60
      sizeof(Ipv6Header) - sizeof(Icmpv6ErrorMessage));

   //Allocate a memory buffer to hold the ICMPv6 message
   icmpMessage = ipAllocBuffer(sizeof(Icmpv6ErrorMessage), &offset);
 80080a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80080ac:	4619      	mov	r1, r3
 80080ae:	2008      	movs	r0, #8
 80080b0:	f000 fce1 	bl	8008a76 <ipAllocBuffer>
 80080b4:	6578      	str	r0, [r7, #84]	; 0x54

   //Failed to allocate memory?
   if(icmpMessage == NULL)
 80080b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <icmpv6SendErrorMessage+0xe8>
      return ERROR_OUT_OF_MEMORY;
 80080bc:	2364      	movs	r3, #100	; 0x64
 80080be:	e084      	b.n	80081ca <icmpv6SendErrorMessage+0x1f2>

   //Point to the ICMPv6 header
   icmpHeader = netBufferAt(icmpMessage, offset);
 80080c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c2:	4619      	mov	r1, r3
 80080c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80080c6:	f008 fd22 	bl	8010b0e <netBufferAt>
 80080ca:	65b8      	str	r0, [r7, #88]	; 0x58

   //Format ICMPv6 Error message
   icmpHeader->type = type;
 80080cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ce:	7afa      	ldrb	r2, [r7, #11]
 80080d0:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 80080d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d4:	7aba      	ldrb	r2, [r7, #10]
 80080d6:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 80080d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080da:	2200      	movs	r2, #0
 80080dc:	709a      	strb	r2, [r3, #2]
 80080de:	2200      	movs	r2, #0
 80080e0:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = htonl(parameter);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f8 ff04 	bl	8000ef0 <swapInt32>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ec:	605a      	str	r2, [r3, #4]

   //Copy incoming IPv6 packet contents
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 80080ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80080f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80080f6:	f008 fd3d 	bl	8010b74 <netBufferConcat>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

   //Check status code
   if(!error)
 8008100:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008104:	2b00      	cmp	r3, #0
 8008106:	d15b      	bne.n	80081c0 <icmpv6SendErrorMessage+0x1e8>
   {
      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 8008108:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800810a:	f008 fc38 	bl	801097e <netBufferGetLength>
 800810e:	4602      	mov	r2, r0
 8008110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	663b      	str	r3, [r7, #96]	; 0x60

      //Format IPv6 pseudo header
      pseudoHeader.destAddr = ipHeader->srcAddr;
 8008116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008118:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800811c:	3308      	adds	r3, #8
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	6859      	ldr	r1, [r3, #4]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      pseudoHeader.length = htonl(length);
 8008128:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800812a:	f7f8 fee1 	bl	8000ef0 <swapInt32>
 800812e:	4603      	mov	r3, r0
 8008130:	64bb      	str	r3, [r7, #72]	; 0x48
      pseudoHeader.reserved[0] = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
      pseudoHeader.reserved[1] = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      pseudoHeader.reserved[2] = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
      pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 8008144:	233a      	movs	r3, #58	; 0x3a
 8008146:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

      //Select the relevant source address
      error = ipv6SelectSourceAddr(&interface, &pseudoHeader.destAddr,
 800814a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800814e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008152:	f103 0110 	add.w	r1, r3, #16
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4618      	mov	r0, r3
 800815c:	f003 ff9a 	bl	800c094 <ipv6SelectSourceAddr>
 8008160:	4603      	mov	r3, r0
 8008162:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
         &pseudoHeader.srcAddr);

      //Check status code
      if(!error)
 8008166:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800816a:	2b00      	cmp	r3, #0
 800816c:	d128      	bne.n	80081c0 <icmpv6SendErrorMessage+0x1e8>
      {
         NetTxAncillary ancillary;

         //Message checksum calculation
         icmpHeader->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800816e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008170:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800817c:	2128      	movs	r1, #40	; 0x28
 800817e:	f000 fc51 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008188:	805a      	strh	r2, [r3, #2]
         IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsOutPkts[type], 1);

         //Debug message
         TRACE_INFO("Sending ICMPv6 Error message (%" PRIuSIZE " bytes)...\r\n", length);
         //Dump message contents for debugging purpose
         icmpv6DumpErrorMessage(icmpHeader);
 800818a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800818c:	f000 f84c 	bl	8008228 <icmpv6DumpErrorMessage>

         //Additional options can be passed to the stack along with the packet
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8008190:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <icmpv6SendErrorMessage+0x1fc>)
 8008192:	f107 0410 	add.w	r4, r7, #16
 8008196:	461d      	mov	r5, r3
 8008198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800819a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800819c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80081a0:	e884 0003 	stmia.w	r4, {r0, r1}

         //Send ICMPv6 Error message
         error = ipv6SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b6:	f002 fcd0 	bl	800ab5a <ipv6SendDatagram>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            &ancillary);
      }
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 80081c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80081c2:	f008 fbcd 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 80081c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3768      	adds	r7, #104	; 0x68
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bdb0      	pop	{r4, r5, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	08025288 	.word	0x08025288

080081d8 <icmpv6DumpMessage>:
 * @brief Dump ICMPv6 message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpv6DumpMessage(const Icmpv6Header *message)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
   //Dump ICMPv6 message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <icmpv6DumpDestUnreachableMessage>:
 * @brief Dump ICMPv6 Destination Unreachable message
 * @param[in] message Pointer to the ICMPv6 message
 **/

void icmpv6DumpDestUnreachableMessage(const Icmpv6DestUnreachableMessage *message)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
   //Dump ICMPv6 message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <icmpv6DumpPacketTooBigMessage>:
 * @brief Dump ICMPv6 Packet Too Big message
 * @param[in] message Pointer to the ICMPv6 message
 **/

void icmpv6DumpPacketTooBigMessage(const Icmpv6PacketTooBigMessage *message)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
   //Dump ICMPv6 message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  MTU = %" PRIu32 "\r\n", ntohl(message->mtu));
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <icmpv6DumpEchoMessage>:
 * @brief Dump ICMPv6 Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMPv6 message
 **/

void icmpv6DumpEchoMessage(const Icmpv6EchoMessage *message)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <icmpv6DumpErrorMessage>:
 * @brief Dump generic ICMPv6 Error message
 * @param[in] message Pointer to the ICMPv6 message
 **/

void icmpv6DumpErrorMessage(const Icmpv6ErrorMessage *message)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu32 "\r\n", ntohl(message->parameter));
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <igmpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t igmpInit(NetInterface *interface)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
   //The default host compatibility mode is IGMPv2
   interface->igmpv1RouterPresent = FALSE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c

   //Start IGMPv1 router present timer
   interface->igmpv1RouterPresentTimer =
      osGetSystemTime() + IGMP_V1_ROUTER_PRESENT_TIMEOUT;
 800824c:	f7f9 f828 	bl	80012a0 <osGetSystemTime>
 8008250:	4603      	mov	r3, r0
 8008252:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8008256:	f503 7320 	add.w	r3, r3, #640	; 0x280
   interface->igmpv1RouterPresentTimer =
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

   //Successful initialization
   return NO_ERROR;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <igmpJoinGroup>:
 * @param[in] entry IPv4 filter entry identifying the host group to join
 * @return Error code
 **/

error_t igmpJoinGroup(NetInterface *interface, Ipv4FilterEntry *entry)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
   //The all-systems group (address 224.0.0.1) is handled as a special
   //case. The host starts in Idle Member state for that group on every
   //interface and never transitions to another state
   if(entry->addr == IGMP_ALL_SYSTEMS_ADDR)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <igmpJoinGroup+0x6c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d106      	bne.n	800828e <igmpJoinGroup+0x22>
   {
      //Clear flag
      entry->flag = FALSE;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	60da      	str	r2, [r3, #12]
      //Enter the Idle Member state
      entry->state = IGMP_STATE_IDLE_MEMBER;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2202      	movs	r2, #2
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	e01e      	b.n	80082cc <igmpJoinGroup+0x60>
   }
   else
   {
      //Link is up?
      if(interface->linkState)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	2b00      	cmp	r3, #0
 8008294:	d014      	beq.n	80082c0 <igmpJoinGroup+0x54>
      {
         //When a host joins a multicast group, it should immediately transmit
         //an unsolicited Membership Report for that group
         igmpSendReportMessage(interface, entry->addr);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f9c7 	bl	8008630 <igmpSendReportMessage>

         //Set flag
         entry->flag = TRUE;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	60da      	str	r2, [r3, #12]
         //Start timer
         entry->timer = osGetSystemTime() + IGMP_UNSOLICITED_REPORT_INTERVAL;
 80082a8:	f7f8 fffa 	bl	80012a0 <osGetSystemTime>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80082b2:	3310      	adds	r3, #16
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	6113      	str	r3, [r2, #16]
         //Enter the Delaying Member state
         entry->state = IGMP_STATE_DELAYING_MEMBER;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	609a      	str	r2, [r3, #8]
 80082be:	e005      	b.n	80082cc <igmpJoinGroup+0x60>
      }
      //Link is down?
      else
      {
         //Clear flag
         entry->flag = FALSE;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	60da      	str	r2, [r3, #12]
         //Enter the Idle Member state
         entry->state = IGMP_STATE_IDLE_MEMBER;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2202      	movs	r2, #2
 80082ca:	609a      	str	r2, [r3, #8]
      }
   }

   //Successful processing
   return NO_ERROR;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	010000e0 	.word	0x010000e0

080082dc <igmpTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void igmpTick(NetInterface *interface)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4FilterEntry *entry;

   //Get current time
   time = osGetSystemTime();
 80082e4:	f7f8 ffdc 	bl	80012a0 <osGetSystemTime>
 80082e8:	6138      	str	r0, [r7, #16]

   //Check IGMPv1 router present timer
   if(timeCompare(time, interface->igmpv1RouterPresentTimer) >= 0)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	db03      	blt.n	8008300 <igmpTick+0x24>
      interface->igmpv1RouterPresent = FALSE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e027      	b.n	8008356 <igmpTick+0x7a>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	3308      	adds	r3, #8
 800831a:	60fb      	str	r3, [r7, #12]

      //Valid entry?
      if(entry->refCount > 0)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d015      	beq.n	8008350 <igmpTick+0x74>
      {
         //Delaying Member state?
         if(entry->state == IGMP_STATE_DELAYING_MEMBER)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d111      	bne.n	8008350 <igmpTick+0x74>
         {
            //Timer expired?
            if(timeCompare(time, entry->timer) >= 0)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	db0b      	blt.n	8008350 <igmpTick+0x74>
            {
               //Send a Membership Report message for the group on the interface
               igmpSendReportMessage(interface, entry->addr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f976 	bl	8008630 <igmpSendReportMessage>

               //Set flag
               entry->flag = TRUE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	60da      	str	r2, [r3, #12]
               //Switch to the Idle Member state
               entry->state = IGMP_STATE_IDLE_MEMBER;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2202      	movs	r2, #2
 800834e:	609a      	str	r2, [r3, #8]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3301      	adds	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b03      	cmp	r3, #3
 800835a:	d9d4      	bls.n	8008306 <igmpTick+0x2a>
            }
         }
      }
   }
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <igmpLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void igmpLinkChangeEvent(NetInterface *interface)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4FilterEntry *entry;

   //Get current time
   time = osGetSystemTime();
 8008370:	f7f8 ff96 	bl	80012a0 <osGetSystemTime>
 8008374:	6138      	str	r0, [r7, #16]

   //Link up event?
   if(interface->linkState)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	2b00      	cmp	r3, #0
 800837c:	d03b      	beq.n	80083f6 <igmpLinkChangeEvent+0x8e>
   {
      //The default host compatibility mode is IGMPv2
      interface->igmpv1RouterPresent = FALSE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
      //Start IGMPv1 router present timer
      interface->igmpv1RouterPresentTimer = time + IGMP_V1_ROUTER_PRESENT_TIMEOUT;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 800838c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008396:	2300      	movs	r3, #0
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	e028      	b.n	80083ee <igmpLinkChangeEvent+0x86>
      {
         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	3308      	adds	r3, #8
 80083b0:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->refCount > 0)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d016      	beq.n	80083e8 <igmpLinkChangeEvent+0x80>
         {
            //The all-systems group (address 224.0.0.1) is handled as a special
            //case. The host starts in Idle Member state for that group on every
            //interface and never transitions to another state
            if(entry->addr != IGMP_ALL_SYSTEMS_ADDR)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1f      	ldr	r2, [pc, #124]	; (800843c <igmpLinkChangeEvent+0xd4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d011      	beq.n	80083e8 <igmpLinkChangeEvent+0x80>
            {
               //Send an unsolicited Membership Report for that group
               igmpSendReportMessage(interface, entry->addr);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f930 	bl	8008630 <igmpSendReportMessage>

               //Set flag
               entry->flag = TRUE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	60da      	str	r2, [r3, #12]
               //Start timer
               entry->timer = time + IGMP_UNSOLICITED_REPORT_INTERVAL;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80083dc:	3310      	adds	r3, #16
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	6113      	str	r3, [r2, #16]
               //Enter the Delaying Member state
               entry->state = IGMP_STATE_DELAYING_MEMBER;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	609a      	str	r2, [r3, #8]
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	3301      	adds	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d9d3      	bls.n	800839c <igmpLinkChangeEvent+0x34>
            //Enter the Idle Member state
            entry->state = IGMP_STATE_IDLE_MEMBER;
         }
      }
   }
}
 80083f4:	e01d      	b.n	8008432 <igmpLinkChangeEvent+0xca>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e017      	b.n	800842c <igmpLinkChangeEvent+0xc4>
         entry = &interface->ipv4Context.multicastFilter[i];
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3308      	adds	r3, #8
 8008410:	60fb      	str	r3, [r7, #12]
         if(entry->refCount > 0)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <igmpLinkChangeEvent+0xbe>
            entry->flag = FALSE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	60da      	str	r2, [r3, #12]
            entry->state = IGMP_STATE_IDLE_MEMBER;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	609a      	str	r2, [r3, #8]
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3301      	adds	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b03      	cmp	r3, #3
 8008430:	d9e4      	bls.n	80083fc <igmpLinkChangeEvent+0x94>
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	010000e0 	.word	0x010000e0

08008440 <igmpProcessMessage>:
 * @param[in] offset Offset to the first byte of the IGMP message
 **/

void igmpProcessMessage(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
   size_t length;
   IgmpMessage *message;

   //Retrieve the length of the IGMP message
   length = netBufferGetLength(buffer) - offset;
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f008 fa95 	bl	801097e <netBufferGetLength>
 8008454:	4602      	mov	r2, r0
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IgmpMessage))
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b07      	cmp	r3, #7
 8008460:	d929      	bls.n	80084b6 <igmpProcessMessage+0x76>
      //Silently discard incoming message
      return;
   }

   //Point to the beginning of the IGMP message
   message = netBufferAt(buffer, offset);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f008 fb52 	bl	8010b0e <netBufferAt>
 800846a:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(message == NULL)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d023      	beq.n	80084ba <igmpProcessMessage+0x7a>
      return;

   //Debug message
   TRACE_INFO("IGMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   igmpDumpMessage(message);
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f000 f96c 	bl	8008750 <igmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa52 	bl	8008926 <ipCalcChecksumEx>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11a      	bne.n	80084be <igmpProcessMessage+0x7e>
      //Drop incoming message
      return;
   }

   //Check the type field
   switch(message->type)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b16      	cmp	r3, #22
 800848e:	d00c      	beq.n	80084aa <igmpProcessMessage+0x6a>
 8008490:	2b16      	cmp	r3, #22
 8008492:	dc16      	bgt.n	80084c2 <igmpProcessMessage+0x82>
 8008494:	2b11      	cmp	r3, #17
 8008496:	d002      	beq.n	800849e <igmpProcessMessage+0x5e>
 8008498:	2b12      	cmp	r3, #18
 800849a:	d006      	beq.n	80084aa <igmpProcessMessage+0x6a>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown IGMP message type!\r\n");
      //Discard incoming IGMP message
      break;
 800849c:	e011      	b.n	80084c2 <igmpProcessMessage+0x82>
      igmpProcessQueryMessage(interface, message, length);
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	6939      	ldr	r1, [r7, #16]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f812 	bl	80084cc <igmpProcessQueryMessage>
      break;
 80084a8:	e00c      	b.n	80084c4 <igmpProcessMessage+0x84>
      igmpProcessReportMessage(interface, message, length);
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	6939      	ldr	r1, [r7, #16]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f888 	bl	80085c4 <igmpProcessReportMessage>
      break;
 80084b4:	e006      	b.n	80084c4 <igmpProcessMessage+0x84>
      return;
 80084b6:	bf00      	nop
 80084b8:	e004      	b.n	80084c4 <igmpProcessMessage+0x84>
      return;
 80084ba:	bf00      	nop
 80084bc:	e002      	b.n	80084c4 <igmpProcessMessage+0x84>
      return;
 80084be:	bf00      	nop
 80084c0:	e000      	b.n	80084c4 <igmpProcessMessage+0x84>
      break;
 80084c2:	bf00      	nop
   }
}
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <igmpProcessQueryMessage>:
 * @param[in] length Message length
 **/

void igmpProcessQueryMessage(NetInterface *interface,
   const IgmpMessage *message, size_t length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
   systime_t time;
   systime_t maxRespTime;
   Ipv4FilterEntry *entry;

   //Get current time
   time = osGetSystemTime();
 80084d8:	f7f8 fee2 	bl	80012a0 <osGetSystemTime>
 80084dc:	6178      	str	r0, [r7, #20]

   //IGMPv1 Membership Query message?
   if(message->maxRespTime == 0)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10f      	bne.n	8008506 <igmpProcessQueryMessage+0x3a>
   {
      //The host receives a query with the Max Response Time field set to 0
      interface->igmpv1RouterPresent = TRUE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
      //Restart IGMPv1 router present timer
      interface->igmpv1RouterPresentTimer = time + IGMP_V1_ROUTER_PRESENT_TIMEOUT;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 80084f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
      //The maximum response time is 10 seconds by default
      maxRespTime = IGMP_V1_MAX_RESPONSE_TIME;
 80084fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e006      	b.n	8008514 <igmpProcessQueryMessage+0x48>
   //IGMPv2 Membership Query message?
   else
   {
      //The Max Resp Time field specifies the maximum time allowed
      //before sending a responding report
      maxRespTime = message->maxRespTime * 100;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	461a      	mov	r2, r3
 800850c:	2364      	movs	r3, #100	; 0x64
 800850e:	fb03 f302 	mul.w	r3, r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
   }

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e049      	b.n	80085ae <igmpProcessQueryMessage+0xe2>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	3308      	adds	r3, #8
 800852e:	613b      	str	r3, [r7, #16]

      //Valid entry?
      if(entry->refCount > 0)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d037      	beq.n	80085a8 <igmpProcessQueryMessage+0xdc>
      {
         //The all-systems group (224.0.0.1) is handled as a special case. The
         //host starts in Idle Member state for that group on every interface
         //and never transitions to another state
         if(entry->addr != IGMP_ALL_SYSTEMS_ADDR)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a20      	ldr	r2, [pc, #128]	; (80085c0 <igmpProcessQueryMessage+0xf4>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d032      	beq.n	80085a8 <igmpProcessQueryMessage+0xdc>
         {
            //A General Query applies to all memberships on the interface from which
            //the Query is received. A Group-Specific Query applies to membership
            //in a single group on the interface from which the Query is received
            if(message->groupAddr == IPV4_UNSPECIFIED_ADDR ||
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <igmpProcessQueryMessage+0x8a>
               message->groupAddr == entry->addr)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	681b      	ldr	r3, [r3, #0]
            if(message->groupAddr == IPV4_UNSPECIFIED_ADDR ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d128      	bne.n	80085a8 <igmpProcessQueryMessage+0xdc>
            {
               //Delaying Member state?
               if(entry->state == IGMP_STATE_DELAYING_MEMBER)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d115      	bne.n	800858a <igmpProcessQueryMessage+0xbe>
               {
                  //The timer has not yet expired?
                  if(timeCompare(time, entry->timer) < 0)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	da1e      	bge.n	80085a8 <igmpProcessQueryMessage+0xdc>
                  {
                     //If a timer for the group is already running, it is reset to
                     //the random value only if the requested Max Response Time is
                     //less than the remaining value of the running timer
                     if(maxRespTime < (entry->timer - time))
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	429a      	cmp	r2, r3
 8008576:	d217      	bcs.n	80085a8 <igmpProcessQueryMessage+0xdc>
                     {
                        //Restart delay timer
                        entry->timer = time + igmpRand(maxRespTime);
 8008578:	69b8      	ldr	r0, [r7, #24]
 800857a:	f000 f8d7 	bl	800872c <igmpRand>
 800857e:	4602      	mov	r2, r0
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	441a      	add	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	611a      	str	r2, [r3, #16]
 8008588:	e00e      	b.n	80085a8 <igmpProcessQueryMessage+0xdc>
                     }
                  }
               }
               //Idle Member state?
               else if(entry->state == IGMP_STATE_IDLE_MEMBER)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d10a      	bne.n	80085a8 <igmpProcessQueryMessage+0xdc>
               {
                  //Switch to the Delaying Member state
                  entry->state = IGMP_STATE_DELAYING_MEMBER;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2201      	movs	r2, #1
 8008596:	609a      	str	r2, [r3, #8]
                  //Delay the response by a random amount of time
                  entry->timer = time + igmpRand(maxRespTime);
 8008598:	69b8      	ldr	r0, [r7, #24]
 800859a:	f000 f8c7 	bl	800872c <igmpRand>
 800859e:	4602      	mov	r2, r0
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	441a      	add	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	611a      	str	r2, [r3, #16]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	3301      	adds	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d9b2      	bls.n	800851a <igmpProcessQueryMessage+0x4e>
               }
            }
         }
      }
   }
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	010000e0 	.word	0x010000e0

080085c4 <igmpProcessReportMessage>:
 * @param[in] length Message length
 **/

void igmpProcessReportMessage(NetInterface *interface,
   const IgmpMessage *message, size_t length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
   uint_t i;
   Ipv4FilterEntry *entry;

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e021      	b.n	800861a <igmpProcessReportMessage+0x56>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	3308      	adds	r3, #8
 80085ea:	613b      	str	r3, [r7, #16]

      //Valid entry?
      if(entry->refCount > 0)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00f      	beq.n	8008614 <igmpProcessReportMessage+0x50>
      {
         //Report messages are ignored for memberships in
         //the Non-Member or Idle Member state
         if(entry->state == IGMP_STATE_DELAYING_MEMBER)
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d10b      	bne.n	8008614 <igmpProcessReportMessage+0x50>
         {
            //The Membership Report message matches the current entry?
            if(message->groupAddr == entry->addr)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d105      	bne.n	8008614 <igmpProcessReportMessage+0x50>
            {
               //Clear flag
               entry->flag = FALSE;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2200      	movs	r2, #0
 800860c:	60da      	str	r2, [r3, #12]
               //Switch to the Idle Member state
               entry->state = IGMP_STATE_IDLE_MEMBER;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2202      	movs	r2, #2
 8008612:	609a      	str	r2, [r3, #8]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	3301      	adds	r3, #1
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d9da      	bls.n	80085d6 <igmpProcessReportMessage+0x12>
            }
         }
      }
   }
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <igmpSendReportMessage>:
 * @param[in] ipAddr IPv4 address specifying the group address
 * @return Error code
 **/

error_t igmpSendReportMessage(NetInterface *interface, Ipv4Addr ipAddr)
{
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b092      	sub	sp, #72	; 0x48
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;
   Ipv4PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Make sure the specified address is a valid multicast address
   if(!ipv4IsMulticastAddr(ipAddr))
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008640:	2be0      	cmp	r3, #224	; 0xe0
 8008642:	d001      	beq.n	8008648 <igmpSendReportMessage+0x18>
      return ERROR_INVALID_ADDRESS;
 8008644:	23e4      	movs	r3, #228	; 0xe4
 8008646:	e069      	b.n	800871c <igmpSendReportMessage+0xec>

   //The all-systems group (224.0.0.1) is handled as a special case.
   //The host never sends a report for that group
   if(ipAddr == IGMP_ALL_SYSTEMS_ADDR)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4a36      	ldr	r2, [pc, #216]	; (8008724 <igmpSendReportMessage+0xf4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d101      	bne.n	8008654 <igmpSendReportMessage+0x24>
      return ERROR_INVALID_ADDRESS;
 8008650:	23e4      	movs	r3, #228	; 0xe4
 8008652:	e063      	b.n	800871c <igmpSendReportMessage+0xec>

   //Allocate a memory buffer to hold an IGMP message
   buffer = ipAllocBuffer(sizeof(IgmpMessage), &offset);
 8008654:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008658:	4619      	mov	r1, r3
 800865a:	2008      	movs	r0, #8
 800865c:	f000 fa0b 	bl	8008a76 <ipAllocBuffer>
 8008660:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Failed to allocate memory?
   if(buffer == NULL)
 8008662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <igmpSendReportMessage+0x3c>
      return ERROR_OUT_OF_MEMORY;
 8008668:	2364      	movs	r3, #100	; 0x64
 800866a:	e057      	b.n	800871c <igmpSendReportMessage+0xec>

   //Point to the beginning of the IGMP message
   message = netBufferAt(buffer, offset);
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	4619      	mov	r1, r3
 8008670:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008672:	f008 fa4c 	bl	8010b0e <netBufferAt>
 8008676:	63b8      	str	r0, [r7, #56]	; 0x38

   //The type of report is determined by the state of the interface
   if(interface->igmpv1RouterPresent)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 363c 	ldr.w	r3, [r3, #1596]	; 0x63c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <igmpSendReportMessage+0x5a>
   {
      message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V1;
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	2212      	movs	r2, #18
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e002      	b.n	8008690 <igmpSendReportMessage+0x60>
   }
   else
   {
      message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V2;
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	2216      	movs	r2, #22
 800868e:	701a      	strb	r2, [r3, #0]
   }

   //Format the Membership Report message
   message->maxRespTime = 0;
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	2200      	movs	r2, #0
 8008694:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	2200      	movs	r2, #0
 800869a:	709a      	strb	r2, [r3, #2]
 800869c:	2200      	movs	r2, #0
 800869e:	70da      	strb	r2, [r3, #3]
   message->groupAddr = ipAddr;
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	605a      	str	r2, [r3, #4]

   //Message checksum calculation
   message->checksum = ipCalcChecksumEx(buffer, offset, sizeof(IgmpMessage));
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	2208      	movs	r2, #8
 80086aa:	4619      	mov	r1, r3
 80086ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086ae:	f000 f93a 	bl	8008926 <ipCalcChecksumEx>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	805a      	strh	r2, [r3, #2]

   //Format IPv4 pseudo header
   pseudoHeader.srcAddr = interface->ipv4Context.addrList[0].addr;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
   pseudoHeader.destAddr = ipAddr;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
   pseudoHeader.reserved = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   pseudoHeader.protocol = IPV4_PROTOCOL_IGMP;
 80086cc:	2302      	movs	r3, #2
 80086ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   pseudoHeader.length = HTONS(sizeof(IgmpMessage));
 80086d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Debug message
   TRACE_INFO("Sending IGMP message (%" PRIuSIZE " bytes)...\r\n", sizeof(IgmpMessage));
   //Dump message contents for debugging purpose
   igmpDumpMessage(message);
 80086d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086da:	f000 f839 	bl	8008750 <igmpDumpMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <igmpSendReportMessage+0xf8>)
 80086e0:	f107 040c 	add.w	r4, r7, #12
 80086e4:	461d      	mov	r5, r3
 80086e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80086ee:	e884 0003 	stmia.w	r4, {r0, r1}

   //All IGMP messages are sent with an IP TTL of 1 and contain an IP Router
   //Alert option in their IP header (refer to RFC 2236, section 2)
   ancillary.ttl = IGMP_TTL;
 80086f2:	2301      	movs	r3, #1
 80086f4:	733b      	strb	r3, [r7, #12]
   ancillary.routerAlert = TRUE;
 80086f6:	2301      	movs	r3, #1
 80086f8:	617b      	str	r3, [r7, #20]

   //The Membership Report message is sent to the group being reported
   error = ipv4SendDatagram(interface, &pseudoHeader, buffer, offset,
 80086fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fbde 	bl	8008ecc <ipv4SendDatagram>
 8008710:	4603      	mov	r3, r0
 8008712:	86fb      	strh	r3, [r7, #54]	; 0x36
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8008714:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008716:	f008 f923 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800871a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800871c:	4618      	mov	r0, r3
 800871e:	3740      	adds	r7, #64	; 0x40
 8008720:	46bd      	mov	sp, r7
 8008722:	bdb0      	pop	{r4, r5, r7, pc}
 8008724:	010000e0 	.word	0x010000e0
 8008728:	08025288 	.word	0x08025288

0800872c <igmpRand>:
 * @param[in] max Upper bound
 * @return Random value in the specified range
 **/

uint32_t igmpRand(uint32_t max)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
   //Return a random value in the given range
   return netGetRand() % (max + 1);
 8008734:	f009 f808 	bl	8011748 <netGetRand>
 8008738:	4602      	mov	r2, r0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3301      	adds	r3, #1
 800873e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008742:	fb03 f301 	mul.w	r3, r3, r1
 8008746:	1ad3      	subs	r3, r2, r3
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <igmpDumpMessage>:
 * @brief Dump IGMP message for debugging purpose
 * @param[in] message Pointer to the IGMP message
 **/

void igmpDumpMessage(const IgmpMessage *message)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
   //Dump IGMP message
   TRACE_DEBUG("  Type = 0x%02" PRIX8 "\r\n", message->type);
   TRACE_DEBUG("  Max Resp Time = %" PRIu8 "\r\n", message->maxRespTime);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Group Address = %s\r\n", ipv4AddrToString(message->groupAddr, NULL));
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af02      	add	r7, sp, #8
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b0c      	cmp	r3, #12
 8008778:	d10b      	bne.n	8008792 <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data, buffer,
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fba0 	bl	8008ecc <ipv4SendDatagram>
 800878c:	4603      	mov	r3, r0
 800878e:	82fb      	strh	r3, [r7, #22]
 8008790:	e011      	b.n	80087b6 <ipSendDatagram+0x52>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b28      	cmp	r3, #40	; 0x28
 8008798:	d10b      	bne.n	80087b2 <ipSendDatagram+0x4e>
   {
      //Form an IPv6 packet and send it
      error = ipv6SendDatagram(interface, &pseudoHeader->ipv6Data, buffer,
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	1d19      	adds	r1, r3, #4
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f002 f9d7 	bl	800ab5a <ipv6SendDatagram>
 80087ac:	4603      	mov	r3, r0
 80087ae:	82fb      	strh	r3, [r7, #22]
 80087b0:	e001      	b.n	80087b6 <ipSendDatagram+0x52>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80087b2:	23e4      	movs	r3, #228	; 0xe4
 80087b4:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80087b6:	8afb      	ldrh	r3, [r7, #22]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <ipIsMulticastAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is a multicast address, else FALSE
 **/

bool_t ipIsMulticastAddr(const IpAddr *ipAddr)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d10a      	bne.n	80087e6 <ipIsMulticastAddr+0x26>
   {
      //Check whether the IPv4 address is a multicast address
      result = ipv4IsMulticastAddr(ipAddr->ipv4Addr);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087d8:	2be0      	cmp	r3, #224	; 0xe0
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e00e      	b.n	8008804 <ipIsMulticastAddr+0x44>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b10      	cmp	r3, #16
 80087ec:	d108      	bne.n	8008800 <ipIsMulticastAddr+0x40>
   {
      //Check whether the IPv6 address is a multicast address
      result = ipv6IsMulticastAddr(&ipAddr->ipv6Addr);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	2bff      	cmp	r3, #255	; 0xff
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e001      	b.n	8008804 <ipIsMulticastAddr+0x44>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is a multicast address, else FALSE
   return result;
 8008804:	68fb      	ldr	r3, [r7, #12]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8008812:	b480      	push	{r7}
 8008814:	b087      	sub	sp, #28
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uintptr_t) p & 1) != 0)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00e      	beq.n	800884c <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	3301      	adds	r3, #1
 8008844:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uintptr_t) p & 2) != 0)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d024      	beq.n	80088a0 <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d921      	bls.n	80088a0 <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4413      	add	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3302      	adds	r3, #2
 800886c:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3b02      	subs	r3, #2
 8008872:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 8008874:	e014      	b.n	80088a0 <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	429a      	cmp	r2, r3
 8008886:	d203      	bcs.n	8008890 <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	e001      	b.n	8008894 <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3304      	adds	r3, #4
 8008898:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3b04      	subs	r3, #4
 800889e:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d8e7      	bhi.n	8008876 <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	4413      	add	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d90b      	bls.n	80088d0 <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3302      	adds	r3, #2
 80088c8:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	3b02      	subs	r3, #2
 80088ce:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	4413      	add	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	4413      	add	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	4413      	add	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uintptr_t) data & 1) != 0)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	0a1a      	lsrs	r2, r3, #8
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	4313      	orrs	r3, r2
 800890e:	b29b      	uxth	r3, r3
 8008910:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	b29b      	uxth	r3, r3
 8008916:	43db      	mvns	r3, r3
 8008918:	b29b      	uxth	r3, r3
}
 800891a:	4618      	mov	r0, r3
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08a      	sub	sp, #40	; 0x28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8008932:	2300      	movs	r3, #0
 8008934:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
 800893e:	e060      	b.n	8008a02 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	3301      	adds	r3, #1
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	889b      	ldrh	r3, [r3, #4]
 800894c:	461a      	mov	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4293      	cmp	r3, r2
 8008952:	d249      	bcs.n	80089e8 <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008958:	3201      	adds	r2, #1
 800895a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	3301      	adds	r3, #1
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	4413      	add	r3, r2
 800896e:	889b      	ldrh	r3, [r3, #4]
 8008970:	461a      	mov	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4293      	cmp	r3, r2
 8008982:	bf28      	it	cs
 8008984:	4613      	movcs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	0a1a      	lsrs	r2, r3, #8
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	4313      	orrs	r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 80089a0:	6979      	ldr	r1, [r7, #20]
 80089a2:	69b8      	ldr	r0, [r7, #24]
 80089a4:	f7ff ff35 	bl	8008812 <ipCalcChecksum>
 80089a8:	4603      	mov	r3, r0
 80089aa:	43db      	mvns	r3, r3
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	4413      	add	r3, r2
 80089c0:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d006      	beq.n	80089da <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	0a1a      	lsrs	r2, r3, #8
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	e009      	b.n	80089fc <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	3301      	adds	r3, #1
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	889b      	ldrh	r3, [r3, #4]
 80089f4:	461a      	mov	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	3301      	adds	r3, #1
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d203      	bcs.n	8008a14 <ipCalcChecksumEx+0xee>
 8008a0c:	6a3a      	ldr	r2, [r7, #32]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d395      	bcc.n	8008940 <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	b29b      	uxth	r3, r3
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3728      	adds	r7, #40	; 0x28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff feec 	bl	8008812 <ipCalcChecksum>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff6d 	bl	8008926 <ipCalcChecksumEx>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	4413      	add	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	b29b      	uxth	r3, r3
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
   size_t headerLen;
   NetBuffer *buffer;

#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
 8008a80:	2330      	movs	r3, #48	; 0x30
 8008a82:	60fb      	str	r3, [r7, #12]
   headerLen = sizeof(Ipv4Header);
#endif

#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fd f82e 	bl	8005aee <ethAllocBuffer>
 8008a92:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	441a      	add	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <ipAddrToString>:
 * @param[out] str NULL-terminated string representing the IP address
 * @return Pointer to the formatted string
 **/

char_t *ipAddrToString(const IpAddr *ipAddr, char_t *str)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d107      	bne.n	8008ad2 <ipAddrToString+0x22>
   {
      //Convert IPv4 address to string representation
      return ipv4AddrToString(ipAddr->ipv4Addr, str);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fc2f 	bl	800932c <ipv4AddrToString>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	e014      	b.n	8008afc <ipAddrToString+0x4c>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d107      	bne.n	8008aea <ipAddrToString+0x3a>
   {
      //Convert IPv6 address to string representation
      return ipv6AddrToString(&ipAddr->ipv6Addr, str);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3304      	adds	r3, #4
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 fb09 	bl	800b0f8 <ipv6AddrToString>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	e008      	b.n	8008afc <ipAddrToString+0x4c>
   //Invalid IP address?
   {
      static char_t c;

      //The last parameter is optional
      if(str == NULL)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <ipAddrToString+0x44>
      {
         str = &c;
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <ipAddrToString+0x54>)
 8008af2:	603b      	str	r3, [r7, #0]
      }

      //Properly terminate the string
      str[0] = '\0';
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]

      //Return an empty string
      return str;
 8008afa:	683b      	ldr	r3, [r7, #0]
   }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000a4c 	.word	0x20000a4c

08008b08 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f008 ff63 	bl	80119dc <nicGetPhysicalInterface>
 8008b16:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b1e:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   osMemset(context, 0, sizeof(Ipv4Context));
 8008b20:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008b24:	2100      	movs	r1, #0
 8008b26:	68b8      	ldr	r0, [r7, #8]
 8008b28:	f014 fed2 	bl	801d8d0 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	2100      	movs	r1, #0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f014 febd 	bl	801d8d0 <memset>
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	332c      	adds	r3, #44	; 0x2c
 8008b5a:	2250      	movs	r2, #80	; 0x50
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f014 feb6 	bl	801d8d0 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	337c      	adds	r3, #124	; 0x7c
 8008b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f014 feae 	bl	801d8d0 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f008 ff28 	bl	80119dc <nicGetPhysicalInterface>
 8008b8c:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b94:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	601a      	str	r2, [r3, #0]

#if (ETH_SUPPORT == ENABLED)
   //Flush ARP cache contents
   arpFlushCache(interface);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7f9 ffa7 	bl	8002af4 <arpFlushCache>
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 ff39 	bl	8009a1e <ipv4FlushFragQueue>
#endif

#if (IGMP_SUPPORT == ENABLED)
   //Notify IGMP of link state changes
   igmpLinkChangeEvent(interface);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fbdb 	bl	8008368 <igmpLinkChangeEvent>
   autoIpLinkChangeEvent(interface->autoIpContext);
#endif

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fa fe9f 	bl	80038fc <dhcpClientLinkChangeEvent>
#endif
}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <ipv4ProcessPacket>:
 *   the packet
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b08a      	sub	sp, #40	; 0x28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	603b      	str	r3, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b13      	cmp	r3, #19
 8008bdc:	d802      	bhi.n	8008be4 <ipv4ProcessPacket+0x1e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 8008bde:	23ec      	movs	r3, #236	; 0xec
 8008be0:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008be2:	e09c      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f000 fbcd 	bl	8009384 <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	f023 030f 	bic.w	r3, r3, #15
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	d002      	beq.n	8008bfe <ipv4ProcessPacket+0x38>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008bf8:	23d4      	movs	r3, #212	; 0xd4
 8008bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008bfc:	e08f      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d802      	bhi.n	8008c12 <ipv4ProcessPacket+0x4c>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008c0c:	23d4      	movs	r3, #212	; 0xd4
 8008c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008c10:	e085      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f8 f95b 	bl	8000ed4 <swapInt16>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	461a      	mov	r2, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	da02      	bge.n	8008c38 <ipv4ProcessPacket+0x72>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008c32:	23d4      	movs	r3, #212	; 0xd4
 8008c34:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008c36:	e072      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f8 f948 	bl	8000ed4 <swapInt16>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d202      	bcs.n	8008c54 <ipv4ProcessPacket+0x8e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 8008c4e:	23ec      	movs	r3, #236	; 0xec
 8008c50:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008c52:	e064      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 ff49 	bl	8009af2 <ipv4CheckSourceAddr>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <ipv4ProcessPacket+0xa6>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008c66:	23d4      	movs	r3, #212	; 0xd4
 8008c68:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008c6a:	e058      	b.n	8008d1e <ipv4ProcessPacket+0x158>

#if defined(IPV4_PACKET_FORWARD_HOOK)
      IPV4_PACKET_FORWARD_HOOK(interface, packet, length);
#else
      //Destination address filtering
      if(ipv4CheckDestAddr(interface, packet->destAddr))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	4619      	mov	r1, r3
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 ff55 	bl	8009b22 <ipv4CheckDestAddr>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <ipv4ProcessPacket+0xbe>

         //Forward the packet according to the routing table
         ipv4ForwardPacket(interface, (NetBuffer *) &buffer, 0);
#else
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 8008c7e:	23e4      	movs	r3, #228	; 0xe4
 8008c80:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
         //We are done
         break;
 8008c82:	e04c      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }
#endif

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f001 f957 	bl	8009f3e <ipv4IsTentativeAddr>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <ipv4ProcessPacket+0xd6>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 8008c96:	23e4      	movs	r3, #228	; 0xe4
 8008c98:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008c9a:	e040      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4619      	mov	r1, r3
 8008caa:	68b8      	ldr	r0, [r7, #8]
 8008cac:	f7ff fdb1 	bl	8008812 <ipCalcChecksum>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <ipv4ProcessPacket+0xf6>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 8008cb6:	23d4      	movs	r3, #212	; 0xd4
 8008cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008cba:	e030      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f001 fa57 	bl	800a178 <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	885b      	ldrh	r3, [r3, #2]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f8 f8ff 	bl	8000ed4 <swapInt16>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if(ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f8 f8f7 	bl	8000ed4 <swapInt16>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <ipv4ProcessPacket+0x138>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length, ancillary);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fbd9 	bl	80094ae <ipv4ReassembleDatagram>
 8008cfc:	e00f      	b.n	8008d1e <ipv4ProcessPacket+0x158>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 8008d02:	2301      	movs	r3, #1
 8008d04:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer, ancillary);
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f80d 	bl	8008d38 <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 8008d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <ipv4ProcessPacket+0x168>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8008d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 fa45 	bl	800a1b8 <ipv4UpdateErrorStats>
   }
}
 8008d2e:	bf00      	nop
 8008d30:	3728      	adds	r7, #40	; 0x28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <ipv4ProcessDatagram>:
 *   the packet
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer,
   NetRxAncillary *ancillary)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b096      	sub	sp, #88	; 0x58
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 8008d44:	68b8      	ldr	r0, [r7, #8]
 8008d46:	f007 fe1a 	bl	801097e <netBufferGetLength>
 8008d4a:	64b8      	str	r0, [r7, #72]	; 0x48

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	68b8      	ldr	r0, [r7, #8]
 8008d50:	f007 fedd 	bl	8010b0e <netBufferAt>
 8008d54:	6478      	str	r0, [r7, #68]	; 0x44
   //Sanity check
   if(header == NULL)
 8008d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 80b2 	beq.w	8008ec2 <ipv4ProcessDatagram+0x18a>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 8008d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008d60:	f000 fb10 	bl	8009384 <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 8008d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	643b      	str	r3, [r7, #64]	; 0x40
   //Compute the length of the payload
   length -= header->headerLength * 4;
 8008d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8008d86:	230c      	movs	r3, #12
 8008d88:	617b      	str	r3, [r7, #20]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	61bb      	str	r3, [r7, #24]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 8008d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	61fb      	str	r3, [r7, #28]
   pseudoHeader.ipv4Data.reserved = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 3020 	strb.w	r3, [r7, #32]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9e:	7a5b      	ldrb	r3, [r3, #9]
 8008da0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   pseudoHeader.ipv4Data.length = htons(length);
 8008da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f8 f893 	bl	8000ed4 <swapInt16>
 8008dae:	4603      	mov	r3, r0
 8008db0:	847b      	strh	r3, [r7, #34]	; 0x22

   //Save TTL value
   ancillary->ttl = header->timeToLive;
 8008db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db4:	7a1a      	ldrb	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	701a      	strb	r2, [r3, #0]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 8008dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbc:	7a5b      	ldrb	r3, [r3, #9]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d857      	bhi.n	8008e74 <ipv4ProcessDatagram+0x13c>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <ipv4ProcessDatagram+0x94>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008e11 	.word	0x08008e11
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e75 	.word	0x08008e75
 8008dd8:	08008e75 	.word	0x08008e75
 8008ddc:	08008e75 	.word	0x08008e75
 8008de0:	08008e41 	.word	0x08008e41
 8008de4:	08008e75 	.word	0x08008e75
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e75 	.word	0x08008e75
 8008df0:	08008e75 	.word	0x08008e75
 8008df4:	08008e75 	.word	0x08008e75
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008e75 	.word	0x08008e75
 8008e04:	08008e75 	.word	0x08008e75
 8008e08:	08008e75 	.word	0x08008e75
 8008e0c:	08008e5b 	.word	0x08008e5b
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	1d19      	adds	r1, r3, #4
 8008e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7fe fc8c 	bl	8007738 <icmpProcessMessage>
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
         ancillary);
#endif

      //No error to report
      error = NO_ERROR;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      //Continue processing
      break;
 8008e26:	e029      	b.n	8008e7c <ipv4ProcessDatagram+0x144>

#if (IGMP_SUPPORT == ENABLED)
   //IGMP protocol?
   case IPV4_PROTOCOL_IGMP:
      //Process incoming IGMP message
      igmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	1d19      	adds	r1, r3, #4
 8008e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fb04 	bl	8008440 <igmpProcessMessage>
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
         ancillary);
#endif

      //No error to report
      error = NO_ERROR;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      //Continue processing
      break;
 8008e3e:	e01d      	b.n	8008e7c <ipv4ProcessDatagram+0x144>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset, ancillary);
 8008e40:	f107 0114 	add.w	r1, r7, #20
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f00b fe51 	bl	8014af4 <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      //Continue processing
      break;
 8008e58:	e010      	b.n	8008e7c <ipv4ProcessDatagram+0x144>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset,
 8008e5a:	f107 0114 	add.w	r1, r7, #20
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f00e fe76 	bl	8017b58 <udpProcessDatagram>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         ancillary);
      //Continue processing
      break;
 8008e72:	e003      	b.n	8008e7c <ipv4ProcessDatagram+0x144>
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
         ancillary);
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
 8008e74:	23d1      	movs	r3, #209	; 0xd1
 8008e76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
#endif
      //Continue processing
      break;
 8008e7a:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 8008e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e80:	2bd1      	cmp	r3, #209	; 0xd1
 8008e82:	d10f      	bne.n	8008ea4 <ipv4ProcessDatagram+0x16c>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8008e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e88:	4619      	mov	r1, r3
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f001 f994 	bl	800a1b8 <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 8008e90:	2300      	movs	r3, #0
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	2103      	movs	r1, #3
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7fe fd5a 	bl	8007958 <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 8008ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ea8:	2bd2      	cmp	r3, #210	; 0xd2
 8008eaa:	d10b      	bne.n	8008ec4 <ipv4ProcessDatagram+0x18c>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 8008eac:	2300      	movs	r3, #0
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	2103      	movs	r1, #3
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7fe fd4c 	bl	8007958 <icmpSendErrorMessage>
 8008ec0:	e000      	b.n	8008ec4 <ipv4ProcessDatagram+0x18c>
      return;
 8008ec2:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 8008ec4:	3750      	adds	r7, #80	; 0x50
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop

08008ecc <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	; 0x30
 8008ed0:	af04      	add	r7, sp, #16
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f007 fd4f 	bl	801097e <netBufferGetLength>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	61bb      	str	r3, [r7, #24]

   //Identification field is primarily used to identify fragments of an
   //original IP datagram
   id = interface->ipv4Context.identification++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8b3 3188 	ldrh.w	r3, [r3, #392]	; 0x188
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	b291      	uxth	r1, r2
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	f8a2 1188 	strh.w	r1, [r2, #392]	; 0x188
 8008ef8:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network interface MTU then no
   //fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	f103 0214 	add.w	r2, r3, #20
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d80e      	bhi.n	8008f28 <ipv4SendDatagram+0x5c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 8008f0a:	8afa      	ldrh	r2, [r7, #22]
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	9302      	str	r3, [sp, #8]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f815 	bl	8008f4c <ipv4SendPacket>
 8008f22:	4603      	mov	r3, r0
 8008f24:	83fb      	strh	r3, [r7, #30]
 8008f26:	e00b      	b.n	8008f40 <ipv4SendDatagram+0x74>
   //must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 8008f28:	8afa      	ldrh	r2, [r7, #22]
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fa2e 	bl	8009398 <ipv4FragmentDatagram>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 8008f40:	8bfb      	ldrh	r3, [r7, #30]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   NetTxAncillary *ancillary)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08c      	sub	sp, #48	; 0x30
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Check whether an IP Router Alert option should be added
   if(ancillary->routerAlert)
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <ipv4SendPacket+0x32>
   {
      //Add an IP Router Alert option
      error = ipv4AddRouterAlertOption(buffer, &offset);
 8008f64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6c:	f000 fd96 	bl	8009a9c <ipv4AddRouterAlertOption>
 8008f70:	4603      	mov	r3, r0
 8008f72:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Any error to report?
      if(error)
 8008f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <ipv4SendPacket+0x32>
         return error;
 8008f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f7c:	e154      	b.n	8009228 <ipv4SendPacket+0x2dc>
   }

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f80:	2b13      	cmp	r3, #19
 8008f82:	d801      	bhi.n	8008f88 <ipv4SendPacket+0x3c>
      return ERROR_INVALID_PARAMETER;
 8008f84:	2302      	movs	r3, #2
 8008f86:	e14f      	b.n	8009228 <ipv4SendPacket+0x2dc>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	3b14      	subs	r3, #20
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 8008f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f90:	f007 fcf5 	bl	801097e <netBufferGetLength>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	623b      	str	r3, [r7, #32]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa2:	f007 fdb4 	bl	8010b0e <netBufferAt>
 8008fa6:	61f8      	str	r0, [r7, #28]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	7813      	ldrb	r3, [r2, #0]
 8008fac:	2104      	movs	r1, #4
 8008fae:	f361 1307 	bfi	r3, r1, #4, #4
 8008fb2:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	7813      	ldrb	r3, [r2, #0]
 8008fb8:	2105      	movs	r1, #5
 8008fba:	f361 0303 	bfi	r3, r1, #0, #4
 8008fbe:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f7 ff82 	bl	8000ed4 <swapInt16>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f7 ff7a 	bl	8000ed4 <swapInt16>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7f7 ff71 	bl	8000ed4 <swapInt16>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = ancillary->ttl;
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	7a5a      	ldrb	r2, [r3, #9]
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	2200      	movs	r2, #0
 800900e:	729a      	strb	r2, [r3, #10]
 8009010:	2200      	movs	r2, #0
 8009012:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	611a      	str	r2, [r3, #16]

   //The IHL field is the length of the internet header in 32-bit words, and
   //thus points to the beginning of the data. Note that the minimum value for
   //a correct header is 5 (refer to RFC 791, section 3.1)
   if(ancillary->routerAlert)
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <ipv4SendPacket+0xec>
   {
      packet->headerLength = 6;
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	7813      	ldrb	r3, [r2, #0]
 8009030:	2106      	movs	r1, #6
 8009032:	f361 0303 	bfi	r3, r1, #0, #4
 8009036:	7013      	strb	r3, [r2, #0]
   }

   //Check whether the TTL value is zero
   if(packet->timeToLive == 0)
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	7a1b      	ldrb	r3, [r3, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <ipv4SendPacket+0xfa>
   {
      //Use default Time-To-Live value
      packet->timeToLive = IPV4_DEFAULT_TTL;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	2240      	movs	r2, #64	; 0x40
 8009044:	721a      	strb	r2, [r3, #8]
   //Set DSCP field
   packet->typeOfService = (ancillary->dscp << 2) & 0xFC;
#endif

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 8009046:	6b79      	ldr	r1, [r7, #52]	; 0x34
      packet->headerLength * 4);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009050:	b2db      	uxtb	r3, r3
 8009052:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 8009054:	461a      	mov	r2, r3
 8009056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009058:	f7ff fc65 	bl	8008926 <ipCalcChecksumEx>
 800905c:	4603      	mov	r3, r0
 800905e:	461a      	mov	r2, r3
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4619      	mov	r1, r3
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fd41 	bl	8009af2 <ipv4CheckSourceAddr>
 8009070:	4603      	mov	r3, r0
 8009072:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Invalid source address?
   if(error)
 8009074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <ipv4SendPacket+0x132>
      return error;
 800907a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800907c:	e0d4      	b.n	8009228 <ipv4SendPacket+0x2dc>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <ipv4SendPacket+0x140>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 8009086:	23e4      	movs	r3, #228	; 0xe4
 8009088:	84fb      	strh	r3, [r7, #38]	; 0x26
 800908a:	e0cc      	b.n	8009226 <ipv4SendPacket+0x2da>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 ff7f 	bl	8009f94 <ipv4IsLocalHostAddr>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <ipv4SendPacket+0x158>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 800909c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80090a2:	e0c0      	b.n	8009226 <ipv4SendPacket+0x2da>
   }
   else
   {
#if (ETH_SUPPORT == ENABLED)
      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f008 fc99 	bl	80119dc <nicGetPhysicalInterface>
 80090aa:	61b8      	str	r0, [r7, #24]

      //Ethernet interface?
      if(physicalInterface->nicDriver != NULL &&
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80b4 	beq.w	800921e <ipv4SendPacket+0x2d2>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 80090bc:	2b01      	cmp	r3, #1
 80090be:	f040 80ae 	bne.w	800921e <ipv4SendPacket+0x2d2>
      {
         Ipv4Addr destIpAddr;

         //Get the destination IPv4 address
         destIpAddr = pseudoHeader->destAddr;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	617b      	str	r3, [r7, #20]

         //Perform address resolution
         if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	3312      	adds	r3, #18
 80090cc:	2206      	movs	r2, #6
 80090ce:	4958      	ldr	r1, [pc, #352]	; (8009230 <ipv4SendPacket+0x2e4>)
 80090d0:	4618      	mov	r0, r3
 80090d2:	f014 fbc7 	bl	801d864 <memcmp>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <ipv4SendPacket+0x196>
         {
            //The destination address is already resolved
            error = NO_ERROR;
 80090dc:	2300      	movs	r3, #0
 80090de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80090e0:	e06d      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else if(ipv4IsBroadcastAddr(interface, destIpAddr))
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	4619      	mov	r1, r3
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fee8 	bl	8009ebc <ipv4IsBroadcastAddr>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d009      	beq.n	8009106 <ipv4SendPacket+0x1ba>
         {
            //Use of the broadcast MAC address to send the packet
            ancillary->destMacAddr = MAC_BROADCAST_ADDR;
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	4a4f      	ldr	r2, [pc, #316]	; (8009234 <ipv4SendPacket+0x2e8>)
 80090f6:	3312      	adds	r3, #18
 80090f8:	6811      	ldr	r1, [r2, #0]
 80090fa:	6019      	str	r1, [r3, #0]
 80090fc:	8892      	ldrh	r2, [r2, #4]
 80090fe:	809a      	strh	r2, [r3, #4]
            //Successful address resolution
            error = NO_ERROR;
 8009100:	2300      	movs	r3, #0
 8009102:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009104:	e05b      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else if(ipv4IsMulticastAddr(destIpAddr))
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800910c:	2be0      	cmp	r3, #224	; 0xe0
 800910e:	d109      	bne.n	8009124 <ipv4SendPacket+0x1d8>
         {
            //Map IPv4 multicast address to MAC-layer multicast address
            error = ipv4MapMulticastAddrToMac(destIpAddr, &ancillary->destMacAddr);
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	3312      	adds	r3, #18
 8009116:	4619      	mov	r1, r3
 8009118:	4610      	mov	r0, r2
 800911a:	f000 ffff 	bl	800a11c <ipv4MapMulticastAddrToMac>
 800911e:	4603      	mov	r3, r0
 8009120:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009122:	e04c      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800912e:	4293      	cmp	r3, r2
 8009130:	d005      	beq.n	800913e <ipv4SendPacket+0x1f2>
            ipv4IsLinkLocalAddr(destIpAddr))
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	b29b      	uxth	r3, r3
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 8009136:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800913a:	4293      	cmp	r3, r2
 800913c:	d109      	bne.n	8009152 <ipv4SendPacket+0x206>
         {
            //Packets with a link-local source or destination address are not
            //routable off the link
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800913e:	6979      	ldr	r1, [r7, #20]
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	3312      	adds	r3, #18
 8009144:	461a      	mov	r2, r3
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7f9 fdd2 	bl	8002cf0 <arpResolve>
 800914c:	4603      	mov	r3, r0
 800914e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009150:	e035      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else if(ipv4IsOnLink(interface, destIpAddr))
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4619      	mov	r1, r3
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fe81 	bl	8009e5e <ipv4IsOnLink>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <ipv4SendPacket+0x22a>
         {
            //Resolve destination address before sending the packet
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	3312      	adds	r3, #18
 8009168:	461a      	mov	r2, r3
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7f9 fdc0 	bl	8002cf0 <arpResolve>
 8009170:	4603      	mov	r3, r0
 8009172:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009174:	e023      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else if(ancillary->dontRoute)
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <ipv4SendPacket+0x246>
         {
            //Do not send the packet via a gateway
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800917e:	6979      	ldr	r1, [r7, #20]
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	3312      	adds	r3, #18
 8009184:	461a      	mov	r2, r3
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7f9 fdb2 	bl	8002cf0 <arpResolve>
 800918c:	4603      	mov	r3, r0
 800918e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009190:	e015      	b.n	80091be <ipv4SendPacket+0x272>
         }
         else
         {
            //Default gateway selection
            error = ipv4SelectDefaultGateway(interface, pseudoHeader->srcAddr,
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f107 0214 	add.w	r2, r7, #20
 800919a:	4619      	mov	r1, r3
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fe29 	bl	8009df4 <ipv4SelectDefaultGateway>
 80091a2:	4603      	mov	r3, r0
 80091a4:	84fb      	strh	r3, [r7, #38]	; 0x26
               &destIpAddr);

            //Check status code
            if(!error)
 80091a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <ipv4SendPacket+0x272>
            {
               //Use the selected gateway to forward the packet
               error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 80091ac:	6979      	ldr	r1, [r7, #20]
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	3312      	adds	r3, #18
 80091b2:	461a      	mov	r2, r3
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7f9 fd9b 	bl	8002cf0 <arpResolve>
 80091ba:	4603      	mov	r3, r0
 80091bc:	84fb      	strh	r3, [r7, #38]	; 0x26
               IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutNoRoutes, 1);
            }
         }

         //Successful address resolution?
         if(error == NO_ERROR)
 80091be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d118      	bne.n	80091f6 <ipv4SendPacket+0x2aa>
         {
            //Update IP statistics
            ipv4UpdateOutStats(interface, destIpAddr, length);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	6a3a      	ldr	r2, [r7, #32]
 80091c8:	4619      	mov	r1, r3
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 ffe4 	bl	800a198 <ipv4UpdateOutStats>

            //Debug message
            TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 80091d0:	69f8      	ldr	r0, [r7, #28]
 80091d2:	f000 f8d7 	bl	8009384 <ipv4DumpHeader>

            //Send Ethernet frame
            error = ethSendFrame(interface, &ancillary->destMacAddr,
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	f103 0112 	add.w	r1, r3, #18
 80091dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e0:	9201      	str	r2, [sp, #4]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7fc fb4e 	bl	800588c <ethSendFrame>
 80091f0:	4603      	mov	r3, r0
 80091f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 80091f4:	e016      	b.n	8009224 <ipv4SendPacket+0x2d8>
               ETH_TYPE_IPV4, buffer, offset, ancillary);
         }
         else if(error == ERROR_IN_PROGRESS)
 80091f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091f8:	f240 2203 	movw	r2, #515	; 0x203
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d111      	bne.n	8009224 <ipv4SendPacket+0x2d8>
         {
            //Debug message
            TRACE_INFO("Enqueuing IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 8009200:	69f8      	ldr	r0, [r7, #28]
 8009202:	f000 f8bf 	bl	8009384 <ipv4DumpHeader>

            //Enqueue packets waiting for address resolution
            error = arpEnqueuePacket(interface, destIpAddr, buffer, offset,
 8009206:	6979      	ldr	r1, [r7, #20]
 8009208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	4613      	mov	r3, r2
 8009210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7f9 fdd6 	bl	8002dc4 <arpEnqueuePacket>
 8009218:	4603      	mov	r3, r0
 800921a:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 800921c:	e002      	b.n	8009224 <ipv4SendPacket+0x2d8>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 800921e:	2307      	movs	r3, #7
 8009220:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009222:	e000      	b.n	8009226 <ipv4SendPacket+0x2da>
      {
 8009224:	bf00      	nop
      }
   }

   //Return status code
   return error;
 8009226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8009228:	4618      	mov	r0, r3
 800922a:	3728      	adds	r7, #40	; 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	080243c4 	.word	0x080243c4
 8009234:	080243cc 	.word	0x080243cc

08009238 <ipv4JoinMulticastGroup>:
 * @param[in] groupAddr IPv4 address identifying the host group to join
 * @return Error code
 **/

error_t ipv4JoinMulticastGroup(NetInterface *interface, Ipv4Addr groupAddr)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
   NetInterface *physicalInterface;
   MacAddr macAddr;
#endif

   //The IPv4 address must be a valid multicast address
   if(!ipv4IsMulticastAddr(groupAddr))
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009248:	2be0      	cmp	r3, #224	; 0xe0
 800924a:	d001      	beq.n	8009250 <ipv4JoinMulticastGroup+0x18>
      return ERROR_INVALID_ADDRESS;
 800924c:	23e4      	movs	r3, #228	; 0xe4
 800924e:	e069      	b.n	8009324 <ipv4JoinMulticastGroup+0xec>

#if (ETH_SUPPORT == ENABLED)
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f008 fbc3 	bl	80119dc <nicGetPhysicalInterface>
 8009256:	61b8      	str	r0, [r7, #24]
#endif

   //Initialize error code
   error = NO_ERROR;
 8009258:	2300      	movs	r3, #0
 800925a:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Keep track of the first free entry
   firstFreeEntry = NULL;
 800925c:	2300      	movs	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8009260:	2300      	movs	r3, #0
 8009262:	623b      	str	r3, [r7, #32]
 8009264:	e022      	b.n	80092ac <ipv4JoinMulticastGroup+0x74>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 8009266:	6a3a      	ldr	r2, [r7, #32]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	4413      	add	r3, r2
 8009278:	3308      	adds	r3, #8
 800927a:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(entry->refCount > 0)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <ipv4JoinMulticastGroup+0x64>
      {
         //Check whether the table already contains the specified IPv4 address
         if(entry->addr == groupAddr)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d10b      	bne.n	80092a6 <ipv4JoinMulticastGroup+0x6e>
         {
            //Increment the reference count
            entry->refCount++;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	605a      	str	r2, [r3, #4]
            //Successful processing
            return NO_ERROR;
 8009298:	2300      	movs	r3, #0
 800929a:	e043      	b.n	8009324 <ipv4JoinMulticastGroup+0xec>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <ipv4JoinMulticastGroup+0x6e>
            firstFreeEntry = entry;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	61fb      	str	r3, [r7, #28]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	3301      	adds	r3, #1
 80092aa:	623b      	str	r3, [r7, #32]
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d9d9      	bls.n	8009266 <ipv4JoinMulticastGroup+0x2e>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <ipv4JoinMulticastGroup+0x84>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e033      	b.n	8009324 <ipv4JoinMulticastGroup+0xec>
   }

#if (ETH_SUPPORT == ENABLED)
   //Map the IPv4 multicast address to a MAC-layer address
   ipv4MapMulticastAddrToMac(groupAddr, &macAddr);
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4619      	mov	r1, r3
 80092c2:	6838      	ldr	r0, [r7, #0]
 80092c4:	f000 ff2a 	bl	800a11c <ipv4MapMulticastAddrToMac>
   //Add the corresponding address to the MAC filter table
   error = ethAcceptMacAddr(interface, &macAddr);
 80092c8:	f107 030c 	add.w	r3, r7, #12
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fc fb78 	bl	80059c4 <ethAcceptMacAddr>
 80092d4:	4603      	mov	r3, r0
 80092d6:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 80092d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d114      	bne.n	8009308 <ipv4JoinMulticastGroup+0xd0>
   {
      //Virtual interface?
      if(interface != physicalInterface)
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d010      	beq.n	8009308 <ipv4JoinMulticastGroup+0xd0>
      {
         //Configure the physical interface to accept the MAC address
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 80092e6:	f107 030c 	add.w	r3, r7, #12
 80092ea:	4619      	mov	r1, r3
 80092ec:	69b8      	ldr	r0, [r7, #24]
 80092ee:	f7fc fb69 	bl	80059c4 <ethAcceptMacAddr>
 80092f2:	4603      	mov	r3, r0
 80092f4:	84fb      	strh	r3, [r7, #38]	; 0x26

         //Any error to report?
         if(error)
 80092f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <ipv4JoinMulticastGroup+0xd0>
         {
            //Clean up side effects
            ethDropMacAddr(interface, &macAddr);
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fc fbb0 	bl	8005a68 <ethDropMacAddr>
      }
   }
#endif

   //MAC filter table successfully updated?
   if(!error)
 8009308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <ipv4JoinMulticastGroup+0xea>
   {
      //Now we can safely add a new entry to the table
      firstFreeEntry->addr = groupAddr;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	601a      	str	r2, [r3, #0]
      //Initialize the reference count
      firstFreeEntry->refCount = 1;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2201      	movs	r2, #1
 8009318:	605a      	str	r2, [r3, #4]

#if (IGMP_SUPPORT == ENABLED)
      //Report multicast group membership to the router
      igmpJoinGroup(interface, firstFreeEntry);
 800931a:	69f9      	ldr	r1, [r7, #28]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7fe ffa5 	bl	800826c <igmpJoinGroup>
#endif
   }

   //Return status code
   return error;
 8009322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8009324:	4618      	mov	r0, r3
 8009326:	3728      	adds	r7, #40	; 0x28
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <ipv4AddrToString+0x14>
      str = buffer;
 800933c:	4b0f      	ldr	r3, [pc, #60]	; (800937c <ipv4AddrToString+0x50>)
 800933e:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   osSprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3301      	adds	r3, #1
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3302      	adds	r3, #2
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3303      	adds	r3, #3
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	9200      	str	r2, [sp, #0]
 8009364:	4603      	mov	r3, r0
 8009366:	460a      	mov	r2, r1
 8009368:	4905      	ldr	r1, [pc, #20]	; (8009380 <ipv4AddrToString+0x54>)
 800936a:	6838      	ldr	r0, [r7, #0]
 800936c:	f014 fc7a 	bl	801dc64 <sprintf>

   //Return a pointer to the formatted string
   return str;
 8009370:	683b      	ldr	r3, [r7, #0]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000a50 	.word	0x20000a50
 8009380:	08024c18 	.word	0x08024c18

08009384 <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, NetTxAncillary *ancillary)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b090      	sub	sp, #64	; 0x40
 800939c:	af04      	add	r7, sp, #16
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80fb      	strh	r3, [r7, #6]
   //transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 80093a8:	6838      	ldr	r0, [r7, #0]
 80093aa:	f007 fae8 	bl	801097e <netBufferGetLength>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4619      	mov	r1, r3
 80093bc:	2000      	movs	r0, #0
 80093be:	f7ff fb5a 	bl	8008a76 <ipAllocBuffer>
 80093c2:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 80093ca:	2364      	movs	r3, #100	; 0x64
 80093cc:	e06b      	b.n	80094a6 <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80093d4:	3b14      	subs	r3, #20
 80093d6:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 80093e0:	2300      	movs	r3, #0
 80093e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 80093e4:	2300      	movs	r3, #0
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093e8:	e051      	b.n	800948e <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	4619      	mov	r1, r3
 80093ee:	69f8      	ldr	r0, [r7, #28]
 80093f0:	f007 fae7 	bl	80109c2 <netBufferSetLength>
 80093f4:	4603      	mov	r3, r0
 80093f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 80093f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d14c      	bne.n	8009498 <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 80093fe:	6a3a      	ldr	r2, [r7, #32]
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	429a      	cmp	r2, r3
 8009408:	d31d      	bcc.n	8009446 <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800940a:	6a3a      	ldr	r2, [r7, #32]
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8009412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	441a      	add	r2, r3
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	69f8      	ldr	r0, [r7, #28]
 800941e:	f007 fba9 	bl	8010b74 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id, offset / 8,
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	08d8      	lsrs	r0, r3, #3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	88f9      	ldrh	r1, [r7, #6]
 800942a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800942c:	9202      	str	r2, [sp, #8]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	4603      	mov	r3, r0
 8009436:	460a      	mov	r2, r1
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fd86 	bl	8008f4c <ipv4SendPacket>
 8009440:	4603      	mov	r3, r0
 8009442:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009444:	e01c      	b.n	8009480 <ipv4FragmentDatagram+0xe8>
            fragment, fragmentOffset, ancillary);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800944a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	441a      	add	r2, r3
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	69f8      	ldr	r0, [r7, #28]
 8009456:	f007 fb8d 	bl	8010b74 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
            (offset / 8), fragment, fragmentOffset, ancillary);
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
 800945e:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	88f9      	ldrh	r1, [r7, #6]
 8009466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009468:	9202      	str	r2, [sp, #8]
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4603      	mov	r3, r0
 8009472:	460a      	mov	r2, r1
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fd68 	bl	8008f4c <ipv4SendPacket>
 800947c:	4603      	mov	r3, r0
 800947e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 8009480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 8009486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	4413      	add	r3, r2
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28
 800948e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	429a      	cmp	r2, r3
 8009494:	d3a9      	bcc.n	80093ea <ipv4FragmentDatagram+0x52>
 8009496:	e002      	b.n	800949e <ipv4FragmentDatagram+0x106>
         break;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <ipv4FragmentDatagram+0x106>
         break;
 800949c:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 800949e:	69f8      	ldr	r0, [r7, #28]
 80094a0:	f007 fa5e 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 80094a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3730      	adds	r7, #48	; 0x30
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <ipv4ReassembleDatagram>:
 *   the packet
 **/

void ipv4ReassembleDatagram(NetInterface *interface, const Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b08c      	sub	sp, #48	; 0x30
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	603b      	str	r3, [r7, #0]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	461a      	mov	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	88db      	ldrh	r3, [r3, #6]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f7 fcfc 	bl	8000ed4 <swapInt16>
 80094dc:	4603      	mov	r3, r0
 80094de:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 80094e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <ipv4ReassembleDatagram+0x48>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 8170 	bne.w	80097d6 <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 80094f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	b29a      	uxth	r2, r3
 8009506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009508:	4413      	add	r3, r2
 800950a:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 800950c:	68b9      	ldr	r1, [r7, #8]
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 f9c9 	bl	80098a6 <ipv4SearchFragQueue>
 8009514:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 815e 	beq.w	80097da <ipv4ReassembleDatagram+0x32c>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 800951e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009524:	2b00      	cmp	r3, #0
 8009526:	d132      	bne.n	800958e <ipv4ReassembleDatagram+0xe0>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009530:	b2db      	uxtb	r3, r3
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	461a      	mov	r2, r3
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	4413      	add	r3, r2
 8009544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009548:	d906      	bls.n	8009558 <ipv4ReassembleDatagram+0xaa>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	3310      	adds	r3, #16
 800954e:	2100      	movs	r1, #0
 8009550:	4618      	mov	r0, r3
 8009552:	f007 fa36 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 8009556:	e141      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	8bd2      	ldrh	r2, [r2, #30]
 8009560:	4293      	cmp	r3, r2
 8009562:	d906      	bls.n	8009572 <ipv4ReassembleDatagram+0xc4>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	3310      	adds	r3, #16
 8009568:	2100      	movs	r1, #0
 800956a:	4618      	mov	r0, r3
 800956c:	f007 fa29 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 8009570:	e134      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	b29a      	uxth	r2, r3
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f103 0010 	add.w	r0, r3, #16
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	2100      	movs	r1, #0
 800958a:	f007 fc8b 	bl	8010ea4 <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 800958e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	429a      	cmp	r2, r3
 8009596:	d927      	bls.n	80095e8 <ipv4ReassembleDatagram+0x13a>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800959e:	4413      	add	r3, r2
 80095a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a4:	d906      	bls.n	80095b4 <ipv4ReassembleDatagram+0x106>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	3310      	adds	r3, #16
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f007 fa08 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 80095b2:	e113      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095c0:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 80095c2:	3306      	adds	r3, #6
 80095c4:	4619      	mov	r1, r3
 80095c6:	f007 f9fc 	bl	80109c2 <netBufferSetLength>
 80095ca:	4603      	mov	r3, r0
 80095cc:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 80095ce:	8b7b      	ldrh	r3, [r7, #26]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <ipv4ReassembleDatagram+0x134>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	3310      	adds	r3, #16
 80095d8:	2100      	movs	r1, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f007 f9f1 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 80095e0:	e0fc      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 80095e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	899b      	ldrh	r3, [r3, #12]
 80095ec:	4619      	mov	r1, r3
 80095ee:	69f8      	ldr	r0, [r7, #28]
 80095f0:	f000 fa35 	bl	8009a5e <ipv4FindHole>
 80095f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 80095fa:	e08b      	b.n	8009714 <ipv4ReassembleDatagram+0x266>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	4313      	orrs	r3, r2
 8009606:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	789a      	ldrb	r2, [r3, #2]
 800960c:	78db      	ldrb	r3, [r3, #3]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	4313      	orrs	r3, r2
 8009612:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole in
      //some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 8009614:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009616:	8a3b      	ldrh	r3, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d269      	bcs.n	80096f0 <ipv4ReassembleDatagram+0x242>
 800961c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800961e:	8a7b      	ldrh	r3, [r7, #18]
 8009620:	429a      	cmp	r2, r3
 8009622:	d965      	bls.n	80096f0 <ipv4ReassembleDatagram+0x242>
      {
         //The current descriptor is no longer valid. We will destroy it, and
         //in the next two steps, we will determine whether or not it is
         //necessary to create any new hole descriptors
         if(prevHole != NULL)
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <ipv4ReassembleDatagram+0x188>
            prevHole->next = hole->next;
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	889b      	ldrh	r3, [r3, #4]
 800962e:	b29a      	uxth	r2, r3
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	809a      	strh	r2, [r3, #4]
 8009634:	e004      	b.n	8009640 <ipv4ReassembleDatagram+0x192>
         else
            frag->firstHole = hole->next;
 8009636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009638:	889b      	ldrh	r3, [r3, #4]
 800963a:	b29a      	uxth	r2, r3
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 8009640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009642:	8a7b      	ldrh	r3, [r7, #18]
 8009644:	429a      	cmp	r2, r3
 8009646:	d924      	bls.n	8009692 <ipv4ReassembleDatagram+0x1e4>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 8009648:	8a7b      	ldrh	r3, [r7, #18]
 800964a:	4619      	mov	r1, r3
 800964c:	69f8      	ldr	r0, [r7, #28]
 800964e:	f000 fa06 	bl	8009a5e <ipv4FindHole>
 8009652:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	8a7a      	ldrh	r2, [r7, #18]
 8009658:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800965e:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <ipv4ReassembleDatagram+0x1ce>
            {
               hole->next = prevHole->next;
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	889b      	ldrh	r3, [r3, #4]
 800966a:	b29a      	uxth	r2, r3
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29a      	uxth	r2, r3
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	809a      	strh	r2, [r3, #4]
 800967a:	e008      	b.n	800968e <ipv4ReassembleDatagram+0x1e0>
            }
            else
            {
               hole->next = frag->firstHole;
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	899a      	ldrh	r2, [r3, #12]
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29a      	uxth	r2, r3
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8009692:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009694:	8a3b      	ldrh	r3, [r7, #16]
 8009696:	429a      	cmp	r2, r3
 8009698:	d22d      	bcs.n	80096f6 <ipv4ReassembleDatagram+0x248>
 800969a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800969c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d028      	beq.n	80096f6 <ipv4ReassembleDatagram+0x248>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 80096a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096a6:	4619      	mov	r1, r3
 80096a8:	69f8      	ldr	r0, [r7, #28]
 80096aa:	f000 f9d8 	bl	8009a5e <ipv4FindHole>
 80096ae:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80096b4:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	8a3a      	ldrh	r2, [r7, #16]
 80096ba:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <ipv4ReassembleDatagram+0x22a>
            {
               hole->next = prevHole->next;
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	889b      	ldrh	r3, [r3, #4]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	809a      	strh	r2, [r3, #4]
 80096d6:	e008      	b.n	80096ea <ipv4ReassembleDatagram+0x23c>
            }
            else
            {
               hole->next = frag->firstHole;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	899a      	ldrh	r2, [r3, #12]
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 80096ee:	e002      	b.n	80096f6 <ipv4ReassembleDatagram+0x248>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f4:	e000      	b.n	80096f8 <ipv4ReassembleDatagram+0x24a>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 80096f6:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <ipv4ReassembleDatagram+0x258>
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	889b      	ldrh	r3, [r3, #4]
 8009702:	b29b      	uxth	r3, r3
 8009704:	e001      	b.n	800970a <ipv4ReassembleDatagram+0x25c>
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	899b      	ldrh	r3, [r3, #12]
 800970a:	4619      	mov	r1, r3
 800970c:	69f8      	ldr	r0, [r7, #28]
 800970e:	f000 f9a6 	bl	8009a5e <ipv4FindHole>
 8009712:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	2b00      	cmp	r3, #0
 8009718:	f47f af70 	bne.w	80095fc <ipv4ReassembleDatagram+0x14e>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 8009726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009728:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009732:	b2db      	uxtb	r3, r3
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	441a      	add	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f007 fbb1 	bl	8010ea4 <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 8009742:	69f8      	ldr	r0, [r7, #28]
 8009744:	f000 f9a0 	bl	8009a88 <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now
   //complete
   if(!ipv4FindHole(frag, frag->firstHole))
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	899b      	ldrh	r3, [r3, #12]
 800974c:	4619      	mov	r1, r3
 800974e:	69f8      	ldr	r0, [r7, #28]
 8009750:	f000 f985 	bl	8009a5e <ipv4FindHole>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d140      	bne.n	80097dc <ipv4ReassembleDatagram+0x32e>
   {
      //Discard the extra hole descriptor that follows the reconstructed
      //datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8009768:	4413      	add	r3, r2
 800976a:	4619      	mov	r1, r3
 800976c:	f007 f929 	bl	80109c2 <netBufferSetLength>
 8009770:	4603      	mov	r3, r0
 8009772:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 8009774:	8b7b      	ldrh	r3, [r7, #26]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d126      	bne.n	80097c8 <ipv4ReassembleDatagram+0x31a>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	3310      	adds	r3, #16
 800977e:	2100      	movs	r1, #0
 8009780:	4618      	mov	r0, r3
 8009782:	f007 f9c4 	bl	8010b0e <netBufferAt>
 8009786:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	b29a      	uxth	r2, r3
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4413      	add	r3, r2
 8009796:	b29b      	uxth	r3, r3
 8009798:	4618      	mov	r0, r3
 800979a:	f7f7 fb9b 	bl	8000ed4 <swapInt16>
 800979e:	4603      	mov	r3, r0
 80097a0:	461a      	mov	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2200      	movs	r2, #0
 80097aa:	719a      	strb	r2, [r3, #6]
 80097ac:	2200      	movs	r2, #0
 80097ae:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2200      	movs	r2, #0
 80097b4:	729a      	strb	r2, [r3, #10]
 80097b6:	2200      	movs	r2, #0
 80097b8:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer, ancillary);
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	3310      	adds	r3, #16
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	4619      	mov	r1, r3
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fab8 	bl	8008d38 <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	3310      	adds	r3, #16
 80097cc:	2100      	movs	r1, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f007 f8f7 	bl	80109c2 <netBufferSetLength>
 80097d4:	e002      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      return;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <ipv4ReassembleDatagram+0x32e>
      return;
 80097da:	bf00      	nop
   }
}
 80097dc:	3730      	adds	r7, #48	; 0x30
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08a      	sub	sp, #40	; 0x28
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 80097ea:	f7f7 fd59 	bl	80012a0 <osGetSystemTime>
 80097ee:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e04f      	b.n	8009896 <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4413      	add	r3, r2
 8009808:	3308      	adds	r3, #8
 800980a:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d03d      	beq.n	8009890 <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009820:	4293      	cmp	r3, r2
 8009822:	d935      	bls.n	8009890 <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff fdab 	bl	8009384 <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	899b      	ldrh	r3, [r3, #12]
 8009832:	4619      	mov	r1, r3
 8009834:	6978      	ldr	r0, [r7, #20]
 8009836:	f000 f912 	bl	8009a5e <ipv4FindHole>
 800983a:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received before sending an
            //ICMP message
            if(hole != NULL && hole->first > 0)
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d020      	beq.n	8009884 <ipv4FragTick+0xa2>
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	b29b      	uxth	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01b      	beq.n	8009884 <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	8812      	ldrh	r2, [r2, #0]
 800985a:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800985c:	4413      	add	r3, r2
 800985e:	4619      	mov	r1, r3
 8009860:	f007 f8af 	bl	80109c2 <netBufferSetLength>
 8009864:	4603      	mov	r3, r0
 8009866:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 8009868:	89fb      	ldrh	r3, [r7, #14]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 8009872:	2200      	movs	r2, #0
 8009874:	9201      	str	r2, [sp, #4]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2300      	movs	r3, #0
 800987a:	2201      	movs	r2, #1
 800987c:	210b      	movs	r1, #11
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fe f86a 	bl	8007958 <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	3310      	adds	r3, #16
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f007 f899 	bl	80109c2 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	3301      	adds	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b03      	cmp	r3, #3
 800989a:	d9ac      	bls.n	80097f6 <ipv4FragTick+0x14>
         }
      }
   }
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b088      	sub	sp, #32
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	e03b      	b.n	800992e <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4413      	add	r3, r2
 80098c8:	3308      	adds	r3, #8
 80098ca:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d029      	beq.n	8009928 <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	3310      	adds	r3, #16
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f007 f917 	bl	8010b0e <netBufferAt>
 80098e0:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d115      	bne.n	800991a <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d111      	bne.n	800991e <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	889b      	ldrh	r3, [r3, #4]
 80098fe:	b29a      	uxth	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	889b      	ldrh	r3, [r3, #4]
 8009904:	b29b      	uxth	r3, r3
 8009906:	429a      	cmp	r2, r3
 8009908:	d10b      	bne.n	8009922 <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	7a5a      	ldrb	r2, [r3, #9]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	7a5b      	ldrb	r3, [r3, #9]
 8009912:	429a      	cmp	r2, r3
 8009914:	d107      	bne.n	8009926 <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	e07d      	b.n	8009a16 <ipv4SearchFragQueue+0x170>
            continue;
 800991a:	bf00      	nop
 800991c:	e004      	b.n	8009928 <ipv4SearchFragQueue+0x82>
            continue;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <ipv4SearchFragQueue+0x82>
            continue;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <ipv4SearchFragQueue+0x82>
            continue;
 8009926:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3301      	adds	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d9c0      	bls.n	80098b6 <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry in the reassembly
   //queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e069      	b.n	8009a0e <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	3308      	adds	r3, #8
 800994e:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d157      	bne.n	8009a08 <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2207      	movs	r2, #7
 800995c:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	3310      	adds	r3, #16
 8009962:	f240 6106 	movw	r1, #1542	; 0x606
 8009966:	4618      	mov	r0, r3
 8009968:	f007 f82b 	bl	80109c2 <netBufferSetLength>
 800996c:	4603      	mov	r3, r0
 800996e:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 8009970:	8afb      	ldrh	r3, [r7, #22]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	3310      	adds	r3, #16
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f007 f820 	bl	80109c2 <netBufferSetLength>
            //Exit immediately
            return NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	e047      	b.n	8009a16 <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800998e:	b2db      	uxtb	r3, r3
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	461a      	mov	r2, r3
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	f103 0010 	add.w	r0, r3, #16
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	2100      	movs	r1, #0
 80099b6:	f007 fa75 	bl	8010ea4 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 80099ba:	f7f7 fc71 	bl	80012a0 <osGetSystemTime>
 80099be:	4602      	mov	r2, r0
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2200      	movs	r2, #0
 80099c8:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	899b      	ldrh	r3, [r3, #12]
 80099ce:	4619      	mov	r1, r3
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	f000 f844 	bl	8009a5e <ipv4FindHole>
 80099d6:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	2200      	movs	r2, #0
 80099e0:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f04f 32ff 	mov.w	r2, #4294967295
 80099e8:	709a      	strb	r2, [r3, #2]
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f04f 32ff 	mov.w	r2, #4294967295
 80099f6:	711a      	strb	r2, [r3, #4]
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f000 f842 	bl	8009a88 <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	e006      	b.n	8009a16 <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d992      	bls.n	800993a <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e010      	b.n	8009a4e <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3308      	adds	r3, #8
 8009a40:	2100      	movs	r1, #0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f006 ffbd 	bl	80109c2 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d9eb      	bls.n	8009a2c <ipv4FlushFragQueue+0xe>
   }
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the specified
 *   offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	460b      	mov	r3, r1
 8009a68:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f103 0010 	add.w	r0, r3, #16
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	887b      	ldrh	r3, [r7, #2]
 8009a76:	4413      	add	r3, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f007 f848 	bl	8010b0e <netBufferAt>
 8009a7e:	4603      	mov	r3, r0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <ipv4AddRouterAlertOption>:
 * @param[in,out] offset Offset to the first payload byte
 * @return Error code
 **/

error_t ipv4AddRouterAlertOption(NetBuffer *buffer, size_t *offset)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
   error_t error;
   Ipv4Option *option;

   //Make sure there is enough room to add the option
   if(*offset >= sizeof(uint32_t))
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d91a      	bls.n	8009ae4 <ipv4AddRouterAlertOption+0x48>
   {
      //Make room for the IPv4 option
      *offset -= sizeof(uint32_t);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	1f1a      	subs	r2, r3, #4
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	601a      	str	r2, [r3, #0]
      //Point to the IPv4 option
      option = netBufferAt(buffer, *offset);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f007 f825 	bl	8010b0e <netBufferAt>
 8009ac4:	60b8      	str	r0, [r7, #8]

      //Format Router Alert option
      option->type = IPV4_OPTION_RTRALT;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2294      	movs	r2, #148	; 0x94
 8009aca:	701a      	strb	r2, [r3, #0]
      option->length = sizeof(uint32_t);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2204      	movs	r2, #4
 8009ad0:	705a      	strb	r2, [r3, #1]
      option->value[0] = 0;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	709a      	strb	r2, [r3, #2]
      option->value[1] = 0;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	70da      	strb	r2, [r3, #3]

      //Successful processing
      error = NO_ERROR;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	81fb      	strh	r3, [r7, #14]
 8009ae2:	e001      	b.n	8009ae8 <ipv4AddRouterAlertOption+0x4c>
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f9dc 	bl	8009ebc <ipv4IsBroadcastAddr>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d104      	bne.n	8009b14 <ipv4CheckSourceAddr+0x22>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b10:	2be0      	cmp	r3, #224	; 0xe0
 8009b12:	d101      	bne.n	8009b18 <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 8009b14:	23e4      	movs	r3, #228	; 0xe4
 8009b16:	e000      	b.n	8009b1a <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 8009b2c:	23e4      	movs	r3, #228	; 0xe4
 8009b2e:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9c2 	bl	8009ebc <ipv4IsBroadcastAddr>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	82fb      	strh	r3, [r7, #22]
 8009b42:	e045      	b.n	8009bd0 <ipv4CheckDestAddr+0xae>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b4a:	2be0      	cmp	r3, #224	; 0xe0
 8009b4c:	d120      	bne.n	8009b90 <ipv4CheckDestAddr+0x6e>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	613b      	str	r3, [r7, #16]
 8009b52:	e019      	b.n	8009b88 <ipv4CheckDestAddr+0x66>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4413      	add	r3, r2
 8009b66:	3308      	adds	r3, #8
 8009b68:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <ipv4CheckDestAddr+0x60>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d102      	bne.n	8009b82 <ipv4CheckDestAddr+0x60>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 8009b80:	e026      	b.n	8009bd0 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3301      	adds	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d9e2      	bls.n	8009b54 <ipv4CheckDestAddr+0x32>
 8009b8e:	e01f      	b.n	8009bd0 <ipv4CheckDestAddr+0xae>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009b90:	2300      	movs	r3, #0
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	e019      	b.n	8009bca <ipv4CheckDestAddr+0xa8>
      {
         Ipv4AddrEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	3304      	adds	r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	791b      	ldrb	r3, [r3, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <ipv4CheckDestAddr+0xa2>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d102      	bne.n	8009bc4 <ipv4CheckDestAddr+0xa2>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 8009bc2:	e005      	b.n	8009bd0 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	613b      	str	r3, [r7, #16]
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0e2      	beq.n	8009b96 <ipv4CheckDestAddr+0x74>
         }
      }
   }

   //Return status code
   return error;
 8009bd0:	8afb      	ldrh	r3, [r7, #22]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b08d      	sub	sp, #52	; 0x34
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bf4:	e0e2      	b.n	8009dbc <ipv4SelectSourceAddr+0x1e0>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8009bfc:	fb02 f303 	mul.w	r3, r2, r3
 8009c00:	3350      	adds	r3, #80	; 0x50
 8009c02:	4a7b      	ldr	r2, [pc, #492]	; (8009df0 <ipv4SelectSourceAddr+0x214>)
 8009c04:	4413      	add	r3, r2
 8009c06:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d004      	beq.n	8009c1c <ipv4SelectSourceAddr+0x40>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f040 80cc 	bne.w	8009db4 <ipv4SelectSourceAddr+0x1d8>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c20:	e0c3      	b.n	8009daa <ipv4SelectSourceAddr+0x1ce>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 8009c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	4413      	add	r3, r2
 8009c34:	3304      	adds	r3, #4
 8009c36:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	791b      	ldrb	r3, [r3, #4]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	f040 80b1 	bne.w	8009da4 <ipv4SelectSourceAddr+0x1c8>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <ipv4SelectSourceAddr+0x76>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8009c50:	e0a8      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	f000 8098 	beq.w	8009d8e <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d104      	bne.n	8009c72 <ipv4SelectSourceAddr+0x96>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8009c70:	e098      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	f000 808a 	beq.w	8009d92 <ipv4SelectSourceAddr+0x1b6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d104      	bne.n	8009c92 <ipv4SelectSourceAddr+0xb6>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8009c90:	e088      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f9ca 	bl	800a030 <ipv4GetAddrScope>
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f9c4 	bl	800a030 <ipv4GetAddrScope>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d210      	bcs.n	8009cd0 <ipv4SelectSourceAddr+0xf4>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f9bc 	bl	800a030 <ipv4GetAddrScope>
 8009cb8:	4604      	mov	r4, r0
 8009cba:	68b8      	ldr	r0, [r7, #8]
 8009cbc:	f000 f9b8 	bl	800a030 <ipv4GetAddrScope>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d367      	bcc.n	8009d96 <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 8009cce:	e062      	b.n	8009d96 <ipv4SelectSourceAddr+0x1ba>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 f9ab 	bl	800a030 <ipv4GetAddrScope>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f9a5 	bl	800a030 <ipv4GetAddrScope>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d210      	bcs.n	8009d0e <ipv4SelectSourceAddr+0x132>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f99d 	bl	800a030 <ipv4GetAddrScope>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	68b8      	ldr	r0, [r7, #8]
 8009cfa:	f000 f999 	bl	800a030 <ipv4GetAddrScope>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	429c      	cmp	r4, r3
 8009d02:	d24a      	bcs.n	8009d9a <ipv4SelectSourceAddr+0x1be>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 8009d0c:	e045      	b.n	8009d9a <ipv4SelectSourceAddr+0x1be>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	405a      	eors	r2, r3
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d11b      	bne.n	8009d58 <ipv4SelectSourceAddr+0x17c>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	405a      	eors	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d135      	bne.n	8009d9e <ipv4SelectSourceAddr+0x1c2>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f9ae 	bl	800a098 <ipv4GetPrefixLength>
 8009d3c:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f9a8 	bl	800a098 <ipv4GetPrefixLength>
 8009d48:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d927      	bls.n	8009d9e <ipv4SelectSourceAddr+0x1c2>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 8009d56:	e022      	b.n	8009d9e <ipv4SelectSourceAddr+0x1c2>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	405a      	eors	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	4013      	ands	r3, r2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d104      	bne.n	8009d74 <ipv4SelectSourceAddr+0x198>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 8009d72:	e017      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d112      	bne.n	8009da2 <ipv4SelectSourceAddr+0x1c6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00f      	beq.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8009d8c:	e00a      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009d8e:	bf00      	nop
 8009d90:	e008      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009d92:	bf00      	nop
 8009d94:	e006      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009d96:	bf00      	nop
 8009d98:	e004      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009d9a:	bf00      	nop
 8009d9c:	e002      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009d9e:	bf00      	nop
 8009da0:	e000      	b.n	8009da4 <ipv4SelectSourceAddr+0x1c8>
               continue;
 8009da2:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	3301      	adds	r3, #1
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f43f af38 	beq.w	8009c22 <ipv4SelectSourceAddr+0x46>
 8009db2:	e000      	b.n	8009db6 <ipv4SelectSourceAddr+0x1da>
         continue;
 8009db4:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	3301      	adds	r3, #1
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f43f af19 	beq.w	8009bf6 <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <ipv4SelectSourceAddr+0x202>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a3a      	ldr	r2, [r7, #32]
 8009dce:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ddc:	e002      	b.n	8009de4 <ipv4SelectSourceAddr+0x208>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 8009dde:	f240 13f7 	movw	r3, #503	; 0x1f7
 8009de2:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 8009de4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3734      	adds	r7, #52	; 0x34
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd90      	pop	{r4, r7, pc}
 8009dee:	bf00      	nop
 8009df0:	200046f4 	.word	0x200046f4

08009df4 <ipv4SelectDefaultGateway>:
 * @return Error code
 **/

error_t ipv4SelectDefaultGateway(NetInterface *interface, Ipv4Addr srcAddr,
   Ipv4Addr *defaultGatewayAddr)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of default gateways
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e020      	b.n	8009e48 <ipv4SelectDefaultGateway+0x54>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	3304      	adds	r3, #4
 8009e1a:	613b      	str	r3, [r7, #16]

      //Check whether the gateway address is valid
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	791b      	ldrb	r3, [r3, #4]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d10e      	bne.n	8009e42 <ipv4SelectDefaultGateway+0x4e>
         entry->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	691b      	ldr	r3, [r3, #16]
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <ipv4SelectDefaultGateway+0x4e>
      {
         //Under the strong ES model, the source address is included as a
         //parameter in order to select a gateway that is directly reachable
         //on the corresponding physical interface (refer to RFC 1122,
         //section 3.3.4.2)
         if(entry->addr == srcAddr)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d105      	bne.n	8009e42 <ipv4SelectDefaultGateway+0x4e>
         {
            //Return the IPv4 address of the default gateway
            *defaultGatewayAddr = entry->defaultGateway;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
            //Successful default gateway selection
            return NO_ERROR;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e007      	b.n	8009e52 <ipv4SelectDefaultGateway+0x5e>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	3301      	adds	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0db      	beq.n	8009e06 <ipv4SelectDefaultGateway+0x12>
         }
      }
   }

   //No default gateway found
   return ERROR_NO_ROUTE;
 8009e4e:	f44f 7302 	mov.w	r3, #520	; 0x208
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <ipv4IsOnLink>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is on-link, else FALSE
 **/

bool_t ipv4IsOnLink(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e01c      	b.n	8009ea8 <ipv4IsOnLink+0x4a>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	4413      	add	r3, r2
 8009e80:	3304      	adds	r3, #4
 8009e82:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	791b      	ldrb	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <ipv4IsOnLink+0x44>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	405a      	eors	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <ipv4IsOnLink+0x44>
         {
            //The specified IPv4 address is on-link
            return TRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e006      	b.n	8009eb0 <ipv4IsOnLink+0x52>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0df      	beq.n	8009e6e <ipv4IsOnLink+0x10>
         }
      }
   }

   //The specified IPv4 address is off-link
   return FALSE;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d101      	bne.n	8009ed2 <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e02f      	b.n	8009f32 <ipv4IsBroadcastAddr+0x76>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e028      	b.n	8009f2a <ipv4IsBroadcastAddr+0x6e>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3304      	adds	r3, #4
 8009eec:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d016      	beq.n	8009f24 <ipv4IsBroadcastAddr+0x68>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	405a      	eors	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10d      	bne.n	8009f24 <ipv4IsBroadcastAddr+0x68>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f10:	d008      	beq.n	8009f24 <ipv4IsBroadcastAddr+0x68>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	d101      	bne.n	8009f24 <ipv4IsBroadcastAddr+0x68>
               {
                  return TRUE;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e006      	b.n	8009f32 <ipv4IsBroadcastAddr+0x76>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0d3      	beq.n	8009ed8 <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e018      	b.n	8009f80 <ipv4IsTentativeAddr+0x42>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	4413      	add	r3, r2
 8009f60:	3304      	adds	r3, #4
 8009f62:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	791b      	ldrb	r3, [r3, #4]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d106      	bne.n	8009f7a <ipv4IsTentativeAddr+0x3c>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d101      	bne.n	8009f7a <ipv4IsTentativeAddr+0x3c>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e006      	b.n	8009f88 <ipv4IsTentativeAddr+0x4a>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0e3      	beq.n	8009f4e <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	; 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8009fa6:	d102      	bne.n	8009fae <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e036      	b.n	800a01c <ipv4IsLocalHostAddr+0x88>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8009fae:	2300      	movs	r3, #0
 8009fb0:	61fb      	str	r3, [r7, #28]
 8009fb2:	e02d      	b.n	800a010 <ipv4IsLocalHostAddr+0x7c>
      {
         //Point to the current interface
         interface = &netInterface[i];
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	3350      	adds	r3, #80	; 0x50
 8009fc0:	4a1a      	ldr	r2, [pc, #104]	; (800a02c <ipv4IsLocalHostAddr+0x98>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61bb      	str	r3, [r7, #24]
 8009fca:	e018      	b.n	8009ffe <ipv4IsLocalHostAddr+0x6a>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4413      	add	r3, r2
 8009fde:	3304      	adds	r3, #4
 8009fe0:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	791b      	ldrb	r3, [r3, #4]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d106      	bne.n	8009ff8 <ipv4IsLocalHostAddr+0x64>
               entry->addr == ipAddr)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d101      	bne.n	8009ff8 <ipv4IsLocalHostAddr+0x64>
            {
               flag = TRUE;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <ipv4IsLocalHostAddr+0x76>
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0e0      	beq.n	8009fcc <ipv4IsLocalHostAddr+0x38>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	3301      	adds	r3, #1
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <ipv4IsLocalHostAddr+0x88>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0cb      	beq.n	8009fb4 <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 800a01c:	697b      	ldr	r3, [r7, #20]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3724      	adds	r7, #36	; 0x24
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	200046f4 	.word	0x200046f4

0800a030 <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03e:	d102      	bne.n	800a046 <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800a040:	2302      	movs	r3, #2
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e021      	b.n	800a08a <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a04c:	2be0      	cmp	r3, #224	; 0xe0
 800a04e:	d10a      	bne.n	800a066 <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a056:	2be0      	cmp	r3, #224	; 0xe0
 800a058:	d102      	bne.n	800a060 <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800a05a:	2302      	movs	r3, #2
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	e014      	b.n	800a08a <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800a060:	2303      	movs	r3, #3
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e011      	b.n	800a08a <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b7f      	cmp	r3, #127	; 0x7f
 800a06c:	d102      	bne.n	800a074 <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 800a06e:	2301      	movs	r3, #1
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e00a      	b.n	800a08a <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	b29b      	uxth	r3, r3
 800a078:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d102      	bne.n	800a086 <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800a080:	2302      	movs	r3, #2
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e001      	b.n	800a08a <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800a086:	2303      	movs	r3, #3
 800a088:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7f6 ff25 	bl	8000ef0 <swapInt32>
 800a0a6:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	e00a      	b.n	800a0c4 <ipv4GetPrefixLength+0x2c>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 800a0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	40da      	lsrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <ipv4GetPrefixLength+0x34>
   for(i = 0; i < 32; i++)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b1f      	cmp	r3, #31
 800a0c8:	d9f1      	bls.n	800a0ae <ipv4GetPrefixLength+0x16>
 800a0ca:	e000      	b.n	800a0ce <ipv4GetPrefixLength+0x36>
         break;
 800a0cc:	bf00      	nop
   }

   //Return prefix length
   return i;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <ipv4GetBroadcastAddr>:
 * @param[in] interface Pointer to the desired network interface
 * @param[out] addr IPv4 broadcast address
 **/

error_t ipv4GetBroadcastAddr(NetInterface *interface, Ipv4Addr *addr)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || addr == NULL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <ipv4GetBroadcastAddr+0x16>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <ipv4GetBroadcastAddr+0x1a>
      return ERROR_INVALID_PARAMETER;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e00e      	b.n	800a110 <ipv4GetBroadcastAddr+0x38>

   //The broadcast address is obtained by performing a bitwise OR operation
   //between the bit complement of the subnet mask and the host IP address
   *addr = interface->ipv4Context.addrList[0].addr;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	601a      	str	r2, [r3, #0]
   *addr |= ~interface->ipv4Context.addrList[0].subnetMask;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a106:	43db      	mvns	r3, r3
 800a108:	431a      	orrs	r2, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <ipv4MapMulticastAddrToMac>:
 * @param[out] macAddr Corresponding MAC-layer multicast address
 * @return Error code
 **/

error_t ipv4MapMulticastAddrToMac(Ipv4Addr ipAddr, MacAddr *macAddr)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
   uint8_t *p;

   //Ensure the specified IPv4 address is a valid host group address
   if(!ipv4IsMulticastAddr(ipAddr))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a12c:	2be0      	cmp	r3, #224	; 0xe0
 800a12e:	d001      	beq.n	800a134 <ipv4MapMulticastAddrToMac+0x18>
      return ERROR_INVALID_ADDRESS;
 800a130:	23e4      	movs	r3, #228	; 0xe4
 800a132:	e01b      	b.n	800a16c <ipv4MapMulticastAddrToMac+0x50>

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 800a134:	1d3b      	adds	r3, r7, #4
 800a136:	60fb      	str	r3, [r7, #12]

   //An IP host group address is mapped to an Ethernet multicast address
   //by placing the low-order 23-bits of the IP address into the low-order
   //23 bits of the Ethernet multicast address 01-00-5E-00-00-00
   macAddr->b[0] = 0x01;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]
   macAddr->b[1] = 0x00;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2200      	movs	r2, #0
 800a142:	705a      	strb	r2, [r3, #1]
   macAddr->b[2] = 0x5E;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	225e      	movs	r2, #94	; 0x5e
 800a148:	709a      	strb	r2, [r3, #2]
   macAddr->b[3] = p[1] & 0x7F;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a154:	b2da      	uxtb	r2, r3
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	70da      	strb	r2, [r3, #3]
   macAddr->b[4] = p[2];
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	789a      	ldrb	r2, [r3, #2]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	711a      	strb	r2, [r3, #4]
   macAddr->b[5] = p[3];
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	78da      	ldrb	r2, [r3, #3]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	715a      	strb	r2, [r3, #5]

   //The specified host group address was successfully
   //mapped to a MAC-layer address
   return NO_ERROR;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff fe98 	bl	8009ebc <ipv4IsBroadcastAddr>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff fe88 	bl	8009ebc <ipv4IsBroadcastAddr>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 800a1c4:	887b      	ldrh	r3, [r7, #2]
 800a1c6:	3bd1      	subs	r3, #209	; 0xd1
 800a1c8:	2b1b      	cmp	r3, #27
 800a1ca:	d83b      	bhi.n	800a244 <ipv4UpdateErrorStats+0x8c>
 800a1cc:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <ipv4UpdateErrorStats+0x1c>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a245 	.word	0x0800a245
 800a1d8:	0800a245 	.word	0x0800a245
 800a1dc:	0800a245 	.word	0x0800a245
 800a1e0:	0800a245 	.word	0x0800a245
 800a1e4:	0800a245 	.word	0x0800a245
 800a1e8:	0800a245 	.word	0x0800a245
 800a1ec:	0800a245 	.word	0x0800a245
 800a1f0:	0800a245 	.word	0x0800a245
 800a1f4:	0800a245 	.word	0x0800a245
 800a1f8:	0800a245 	.word	0x0800a245
 800a1fc:	0800a245 	.word	0x0800a245
 800a200:	0800a245 	.word	0x0800a245
 800a204:	0800a245 	.word	0x0800a245
 800a208:	0800a245 	.word	0x0800a245
 800a20c:	0800a245 	.word	0x0800a245
 800a210:	0800a245 	.word	0x0800a245
 800a214:	0800a245 	.word	0x0800a245
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a245 	.word	0x0800a245
 800a228:	0800a245 	.word	0x0800a245
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a245 	.word	0x0800a245
 800a234:	0800a245 	.word	0x0800a245
 800a238:	0800a245 	.word	0x0800a245
 800a23c:	0800a245 	.word	0x0800a245
 800a240:	0800a245 	.word	0x0800a245
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 800a244:	bf00      	nop
   }
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop

0800a254 <ipv6Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv6Init(NetInterface *interface)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
   Ipv6Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f007 fbbd 	bl	80119dc <nicGetPhysicalInterface>
 800a262:	60f8      	str	r0, [r7, #12]

   //Point to the IPv6 context
   context = &interface->ipv6Context;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800a26a:	60bb      	str	r3, [r7, #8]

   //Clear the IPv6 context
   osMemset(context, 0, sizeof(Ipv6Context));
 800a26c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a270:	2100      	movs	r1, #0
 800a272:	68b8      	ldr	r0, [r7, #8]
 800a274:	f013 fb2c 	bl	801d8d0 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	605a      	str	r2, [r3, #4]
   context->curHopLimit = IPV6_DEFAULT_HOP_LIMIT;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2240      	movs	r2, #64	; 0x40
 800a28c:	721a      	strb	r2, [r3, #8]

   //Multicast ICMPv6 Echo Request messages are allowed by default
   context->enableMulticastEchoReq = TRUE;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2201      	movs	r2, #1
 800a292:	60da      	str	r2, [r3, #12]

   //Initialize the list of IPv6 addresses assigned to the interface
   osMemset(context->addrList, 0, sizeof(context->addrList));
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	3310      	adds	r3, #16
 800a298:	2290      	movs	r2, #144	; 0x90
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f013 fb17 	bl	801d8d0 <memset>
   //Initialize the Prefix List
   osMemset(context->prefixList, 0, sizeof(context->prefixList));
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	33b0      	adds	r3, #176	; 0xb0
 800a2a6:	2258      	movs	r2, #88	; 0x58
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f013 fb10 	bl	801d8d0 <memset>
   //Initialize the Default Router List
   osMemset(context->routerList, 0, sizeof(context->routerList));
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a2b6:	2240      	movs	r2, #64	; 0x40
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f013 fb08 	bl	801d8d0 <memset>
   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f013 fb00 	bl	801d8d0 <memset>
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a2d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f013 faf7 	bl	801d8d0 <memset>

#if (IPV6_FRAG_SUPPORT == ENABLED)
   //Identification field is used to identify fragments of an original IP datagram
   context->identification = 0;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800a2f0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f013 faea 	bl	801d8d0 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <ipv6LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv6LinkChangeEvent(NetInterface *interface)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b08a      	sub	sp, #40	; 0x28
 800a30a:	af04      	add	r7, sp, #16
 800a30c:	6078      	str	r0, [r7, #4]
   Ipv6Context *context;
   Ipv6AddrEntry *entry;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f007 fb64 	bl	80119dc <nicGetPhysicalInterface>
 800a314:	6138      	str	r0, [r7, #16]

   //Point to the IPv6 context
   context = &interface->ipv6Context;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800a31c:	60fb      	str	r3, [r7, #12]

   //Restore default parameters
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	601a      	str	r2, [r3, #0]
   context->curHopLimit = IPV6_DEFAULT_HOP_LIMIT;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2240      	movs	r2, #64	; 0x40
 800a32c:	721a      	strb	r2, [r3, #8]

   //Clear the list of IPv6 addresses
   ipv6FlushAddrList(interface);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 fd6e 	bl	800be10 <ipv6FlushAddrList>
   //Clear the Prefix List
   ipv6FlushPrefixList(interface);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 fd9f 	bl	800be78 <ipv6FlushPrefixList>
   //Clear the Default Router List
   ipv6FlushDefaultRouterList(interface);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 fdd2 	bl	800bee4 <ipv6FlushDefaultRouterList>

#if (IPV6_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv6FlushFragQueue(interface);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 faf9 	bl	800b938 <ipv6FlushFragQueue>
#endif

#if (MLD_SUPPORT == ENABLED)
   //Notify MLD of link state changes
   mldLinkChangeEvent(interface);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f002 ff56 	bl	800d1f8 <mldLinkChangeEvent>
#endif

#if (NDP_SUPPORT == ENABLED)
   //Notify NDP of link state changes
   ndpLinkChangeEvent(interface);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f004 f8d4 	bl	800e4fa <ndpLinkChangeEvent>
   ndpRouterAdvLinkChangeEvent(interface->ndpRouterAdvContext);
#endif

#if (SLAAC_SUPPORT == ENABLED)
   //Notify the SLAAC service of link state changes
   slaacLinkChangeEvent(interface->slaacContext);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	; 0xf0c
 800a358:	4618      	mov	r0, r3
 800a35a:	f007 fd35 	bl	8011dc8 <slaacLinkChangeEvent>
   //Notify the DHCPv6 client of link state changes
   dhcpv6ClientLinkChangeEvent(interface->dhcpv6ClientContext);
#endif

   //Go through the list of IPv6 addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	e031      	b.n	800a3c8 <ipv6LinkChangeEvent+0xc2>
   {
      //Point to the current entry
      entry = &context->addrList[i];
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4613      	mov	r3, r2
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	4413      	add	r3, r2
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	3310      	adds	r3, #16
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	60bb      	str	r3, [r7, #8]

      //Check whether the IPv6 address has been manually assigned
      if(entry->permanent)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d021      	beq.n	800a3c2 <ipv6LinkChangeEvent+0xbc>
      {
#if (NDP_SUPPORT == ENABLED)
         //Check whether Duplicate Address Detection should be performed
         if(interface->ndpContext.dupAddrDetectTransmits > 0)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00e      	beq.n	800a3a6 <ipv6LinkChangeEvent+0xa0>
         {
            //Use the IPv6 address as a tentative address
            ipv6SetAddr(interface, i, &entry->addr, IPV6_ADDR_STATE_TENTATIVE,
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	2301      	movs	r3, #1
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	f04f 33ff 	mov.w	r3, #4294967295
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	2301      	movs	r3, #1
 800a39c:	6979      	ldr	r1, [r7, #20]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 fb08 	bl	800b9b4 <ipv6SetAddr>
 800a3a4:	e00d      	b.n	800a3c2 <ipv6LinkChangeEvent+0xbc>
         }
         else
#endif
         {
            //The use of the IPv6 address is now unrestricted
            ipv6SetAddr(interface, i, &entry->addr, IPV6_ADDR_STATE_PREFERRED,
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	9302      	str	r3, [sp, #8]
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	6979      	ldr	r1, [r7, #20]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 faf9 	bl	800b9b4 <ipv6SetAddr>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d9ca      	bls.n	800a364 <ipv6LinkChangeEvent+0x5e>
               NDP_INFINITE_LIFETIME, NDP_INFINITE_LIFETIME, TRUE);
         }
      }
   }
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <ipv6ProcessPacket>:
 *   the packet
 **/

void ipv6ProcessPacket(NetInterface *interface, NetBuffer *ipPacket,
   size_t ipPacketOffset, NetRxAncillary *ancillary)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b099      	sub	sp, #100	; 0x64
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCInReceives, 1);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInReceives, 1);
   IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCInReceives, 1);

   //Retrieve the length of the IPv6 packet
   length = netBufferGetLength(ipPacket);
 800a3e6:	68b8      	ldr	r0, [r7, #8]
 800a3e8:	f006 fac9 	bl	801097e <netBufferGetLength>
 800a3ec:	6538      	str	r0, [r7, #80]	; 0x50
   IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCInOctets, length);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInOctets, length);
   IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCInOctets, length);

   //Ensure the packet length is greater than 40 bytes
   if(length < sizeof(Ipv6Header))
 800a3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f0:	2b27      	cmp	r3, #39	; 0x27
 800a3f2:	f240 81d0 	bls.w	800a796 <ipv6ProcessPacket+0x3be>
      //Discard the received packet
      return;
   }

   //Point to the IPv6 header
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f006 fb88 	bl	8010b0e <netBufferAt>
 800a3fe:	64f8      	str	r0, [r7, #76]	; 0x4c
   //Sanity check
   if(ipHeader == NULL)
 800a400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 81c9 	beq.w	800a79a <ipv6ProcessPacket+0x3c2>
      return;

   //Debug message
   TRACE_INFO("IPv6 packet received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IPv6 header contents for debugging purpose
   ipv6DumpHeader(ipHeader);
 800a408:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a40a:	f000 fef9 	bl	800b200 <ipv6DumpHeader>

   //Check IP version number
   if(ipHeader->version != IPV6_VERSION)
 800a40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f023 030f 	bic.w	r3, r3, #15
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b60      	cmp	r3, #96	; 0x60
 800a41a:	f040 81c0 	bne.w	800a79e <ipv6ProcessPacket+0x3c6>
      //Discard the received packet
      return;
   }

   //Ensure the payload length is correct before processing the packet
   if(ntohs(ipHeader->payloadLen) > (length - sizeof(Ipv6Header)))
 800a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a420:	889b      	ldrh	r3, [r3, #4]
 800a422:	b29b      	uxth	r3, r3
 800a424:	4618      	mov	r0, r3
 800a426:	f7f6 fd55 	bl	8000ed4 <swapInt16>
 800a42a:	4603      	mov	r3, r0
 800a42c:	461a      	mov	r2, r3
 800a42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a430:	3b28      	subs	r3, #40	; 0x28
 800a432:	429a      	cmp	r2, r3
 800a434:	f200 81b5 	bhi.w	800a7a2 <ipv6ProcessPacket+0x3ca>
      //Discard the received packet
      return;
   }

   //Source address filtering
   if(ipv6CheckSourceAddr(interface, &ipHeader->srcAddr))
 800a438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a43a:	3308      	adds	r3, #8
 800a43c:	4619      	mov	r1, r3
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f001 fd92 	bl	800bf68 <ipv6CheckSourceAddr>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 81ad 	bne.w	800a7a6 <ipv6ProcessPacket+0x3ce>

#if defined(IPV6_PACKET_FORWARD_HOOK)
   IPV6_PACKET_FORWARD_HOOK(interface, ipPacket, ipPacketOffset);
#else
   //Destination address filtering
   if(ipv6CheckDestAddr(interface, &ipHeader->destAddr))
 800a44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44e:	3318      	adds	r3, #24
 800a450:	4619      	mov	r1, r3
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f001 fd9a 	bl	800bf8c <ipv6CheckDestAddr>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 81a5 	bne.w	800a7aa <ipv6ProcessPacket+0x3d2>
      return;
   }
#endif

   //Update IP statistics
   ipv6UpdateInStats(interface, &ipHeader->destAddr, length);
 800a460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a462:	3318      	adds	r3, #24
 800a464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a466:	4619      	mov	r1, r3
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f002 f961 	bl	800c730 <ipv6UpdateInStats>

   //Calculate the effective length of the multi-part buffer
   length = ipPacketOffset + sizeof(Ipv6Header) +
      ntohs(ipHeader->payloadLen);
 800a46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a470:	889b      	ldrh	r3, [r3, #4]
 800a472:	b29b      	uxth	r3, r3
 800a474:	4618      	mov	r0, r3
 800a476:	f7f6 fd2d 	bl	8000ed4 <swapInt16>
 800a47a:	4603      	mov	r3, r0
 800a47c:	461a      	mov	r2, r3
   length = ipPacketOffset + sizeof(Ipv6Header) +
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	3328      	adds	r3, #40	; 0x28
 800a484:	653b      	str	r3, [r7, #80]	; 0x50

   //Adjust the length of the multi-part buffer if necessary
   netBufferSetLength(ipPacket, length);
 800a486:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a488:	68b8      	ldr	r0, [r7, #8]
 800a48a:	f006 fa9a 	bl	80109c2 <netBufferSetLength>

   //Form the IPv6 pseudo header
   pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 800a48e:	2328      	movs	r3, #40	; 0x28
 800a490:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv6Data.srcAddr = ipHeader->srcAddr;
 800a492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a494:	f107 0414 	add.w	r4, r7, #20
 800a498:	3308      	adds	r3, #8
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	6859      	ldr	r1, [r3, #4]
 800a49e:	689a      	ldr	r2, [r3, #8]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   pseudoHeader.ipv6Data.destAddr = ipHeader->destAddr;
 800a4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800a4aa:	3318      	adds	r3, #24
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	6859      	ldr	r1, [r3, #4]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   pseudoHeader.ipv6Data.reserved[0] = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   pseudoHeader.ipv6Data.reserved[1] = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   pseudoHeader.ipv6Data.reserved[2] = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

   //Save Hop Limit value
   ancillary->ttl = ipHeader->hopLimit;
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ca:	79da      	ldrb	r2, [r3, #7]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	701a      	strb	r2, [r3, #0]

   //Keep track of Next Header field
   nextHeaderOffset = ipPacketOffset + &ipHeader->nextHeader -
 800a4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d2:	1d9a      	adds	r2, r3, #6
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	441a      	add	r2, r3
 800a4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      (uint8_t *) ipHeader;

   //Point to the first extension header
   i = ipPacketOffset + sizeof(Ipv6Header);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3328      	adds	r3, #40	; 0x28
 800a4e2:	643b      	str	r3, [r7, #64]	; 0x40

   //Parse extension headers
   while(i < length)
 800a4e4:	e151      	b.n	800a78a <ipv6ProcessPacket+0x3b2>
   {
      //Retrieve the Next Header field of preceding header
      type = netBufferAt(ipPacket, nextHeaderOffset);
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	68b8      	ldr	r0, [r7, #8]
 800a4ec:	f006 fb0f 	bl	8010b0e <netBufferAt>
 800a4f0:	64b8      	str	r0, [r7, #72]	; 0x48
      //Sanity check
      if(type == NULL)
 800a4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 815a 	beq.w	800a7ae <ipv6ProcessPacket+0x3d6>
         return;

      //Update IPv6 pseudo header
      pseudoHeader.ipv6Data.length = htonl(length - i);
 800a4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	4618      	mov	r0, r3
 800a502:	f7f6 fcf5 	bl	8000ef0 <swapInt32>
 800a506:	4603      	mov	r3, r0
 800a508:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader.ipv6Data.nextHeader = *type;
 800a50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

      //Each extension header is identified by the Next Header field of the
      //preceding header
      switch(*type)
 800a512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b3c      	cmp	r3, #60	; 0x3c
 800a518:	f200 811b 	bhi.w	800a752 <ipv6ProcessPacket+0x37a>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <ipv6ProcessPacket+0x14c>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a619 	.word	0x0800a619
 800a528:	0800a753 	.word	0x0800a753
 800a52c:	0800a753 	.word	0x0800a753
 800a530:	0800a753 	.word	0x0800a753
 800a534:	0800a753 	.word	0x0800a753
 800a538:	0800a753 	.word	0x0800a753
 800a53c:	0800a6e1 	.word	0x0800a6e1
 800a540:	0800a753 	.word	0x0800a753
 800a544:	0800a753 	.word	0x0800a753
 800a548:	0800a753 	.word	0x0800a753
 800a54c:	0800a753 	.word	0x0800a753
 800a550:	0800a753 	.word	0x0800a753
 800a554:	0800a753 	.word	0x0800a753
 800a558:	0800a753 	.word	0x0800a753
 800a55c:	0800a753 	.word	0x0800a753
 800a560:	0800a753 	.word	0x0800a753
 800a564:	0800a753 	.word	0x0800a753
 800a568:	0800a709 	.word	0x0800a709
 800a56c:	0800a753 	.word	0x0800a753
 800a570:	0800a753 	.word	0x0800a753
 800a574:	0800a753 	.word	0x0800a753
 800a578:	0800a753 	.word	0x0800a753
 800a57c:	0800a753 	.word	0x0800a753
 800a580:	0800a753 	.word	0x0800a753
 800a584:	0800a753 	.word	0x0800a753
 800a588:	0800a753 	.word	0x0800a753
 800a58c:	0800a753 	.word	0x0800a753
 800a590:	0800a753 	.word	0x0800a753
 800a594:	0800a753 	.word	0x0800a753
 800a598:	0800a753 	.word	0x0800a753
 800a59c:	0800a753 	.word	0x0800a753
 800a5a0:	0800a753 	.word	0x0800a753
 800a5a4:	0800a753 	.word	0x0800a753
 800a5a8:	0800a753 	.word	0x0800a753
 800a5ac:	0800a753 	.word	0x0800a753
 800a5b0:	0800a753 	.word	0x0800a753
 800a5b4:	0800a753 	.word	0x0800a753
 800a5b8:	0800a753 	.word	0x0800a753
 800a5bc:	0800a753 	.word	0x0800a753
 800a5c0:	0800a753 	.word	0x0800a753
 800a5c4:	0800a753 	.word	0x0800a753
 800a5c8:	0800a753 	.word	0x0800a753
 800a5cc:	0800a753 	.word	0x0800a753
 800a5d0:	0800a655 	.word	0x0800a655
 800a5d4:	0800a673 	.word	0x0800a673
 800a5d8:	0800a753 	.word	0x0800a753
 800a5dc:	0800a753 	.word	0x0800a753
 800a5e0:	0800a753 	.word	0x0800a753
 800a5e4:	0800a753 	.word	0x0800a753
 800a5e8:	0800a753 	.word	0x0800a753
 800a5ec:	0800a6a9 	.word	0x0800a6a9
 800a5f0:	0800a68b 	.word	0x0800a68b
 800a5f4:	0800a753 	.word	0x0800a753
 800a5f8:	0800a753 	.word	0x0800a753
 800a5fc:	0800a753 	.word	0x0800a753
 800a600:	0800a753 	.word	0x0800a753
 800a604:	0800a753 	.word	0x0800a753
 800a608:	0800a753 	.word	0x0800a753
 800a60c:	0800a6c7 	.word	0x0800a6c7
 800a610:	0800a7b3 	.word	0x0800a7b3
 800a614:	0800a637 	.word	0x0800a637
      {
      //Hop-by-Hop Options header?
      case IPV6_HOP_BY_HOP_OPT_HEADER:
         //Parse current extension header
         error = ipv6ParseHopByHopOptHeader(interface, ipPacket, ipPacketOffset,
 800a618:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a61c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	4613      	mov	r3, r2
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 f8cf 	bl	800a7cc <ipv6ParseHopByHopOptHeader>
 800a62e:	4603      	mov	r3, r0
 800a630:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            &i, &nextHeaderOffset);
         //Continue processing
         break;
 800a634:	e0a5      	b.n	800a782 <ipv6ProcessPacket+0x3aa>

      //Destination Options header?
      case IPV6_DEST_OPT_HEADER:
         //Parse current extension header
         error = ipv6ParseDestOptHeader(interface, ipPacket, ipPacketOffset,
 800a636:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a63a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4613      	mov	r3, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f92b 	bl	800a8a2 <ipv6ParseDestOptHeader>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            &i, &nextHeaderOffset);
         //Continue processing
         break;
 800a652:	e096      	b.n	800a782 <ipv6ProcessPacket+0x3aa>

      //Routing header?
      case IPV6_ROUTING_HEADER:
         //Parse current extension header
         error = ipv6ParseRoutingHeader(interface, ipPacket, ipPacketOffset,
 800a654:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	4613      	mov	r3, r2
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 f970 	bl	800a94a <ipv6ParseRoutingHeader>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            &i, &nextHeaderOffset);
         //Continue processing
         break;
 800a670:	e087      	b.n	800a782 <ipv6ProcessPacket+0x3aa>

      //Fragment header?
      case IPV6_FRAGMENT_HEADER:
#if (IPV6_FRAG_SUPPORT == ENABLED)
         //Parse current extension header
         ipv6ParseFragmentHeader(interface, ipPacket, ipPacketOffset,
 800a672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	460b      	mov	r3, r1
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 fe58 	bl	800b338 <ipv6ParseFragmentHeader>
            i, nextHeaderOffset, ancillary);
#endif
         //Exit immediately
         return;
 800a688:	e09c      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>

      //Authentication header?
      case IPV6_AH_HEADER:
         //Parse current extension header
         error = ipv6ParseAuthHeader(interface, ipPacket, ipPacketOffset,
 800a68a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a68e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f9ac 	bl	800a9f8 <ipv6ParseAuthHeader>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            &i, &nextHeaderOffset);
         //Continue processing
         break;
 800a6a6:	e06c      	b.n	800a782 <ipv6ProcessPacket+0x3aa>

      //Encapsulating Security Payload header?
      case IPV6_ESP_HEADER:
         //Parse current extension header
         error = ipv6ParseEspHeader(interface, ipPacket, ipPacketOffset,
 800a6a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a6ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 f9ab 	bl	800aa14 <ipv6ParseEspHeader>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            &i, &nextHeaderOffset);
         //Continue processing
         break;
 800a6c4:	e05d      	b.n	800a782 <ipv6ProcessPacket+0x3aa>

      //ICMPv6 header?
      case IPV6_ICMPV6_HEADER:
         //Process incoming ICMPv6 message
         icmpv6ProcessMessage(interface, &pseudoHeader.ipv6Data, ipPacket,
 800a6c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ca:	79db      	ldrb	r3, [r3, #7]
 800a6cc:	f107 0210 	add.w	r2, r7, #16
 800a6d0:	1d11      	adds	r1, r2, #4
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7fd fa87 	bl	8007bec <icmpv6ProcessMessage>
            rawSocketProcessIpPacket(interface, &pseudoHeader, ipPacket, i,
               ancillary);
         }
#endif
         //Exit immediately
         return;
 800a6de:	e071      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>

#if (TCP_SUPPORT == ENABLED)
      //TCP header?
      case IPV6_TCP_HEADER:
         //Packets addressed to the tentative address should be silently discarded
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 800a6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6e2:	3318      	adds	r3, #24
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f001 fe2c 	bl	800c344 <ipv6IsTentativeAddr>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d161      	bne.n	800a7b6 <ipv6ProcessPacket+0x3de>
         {
            //Process incoming TCP segment
            tcpProcessSegment(interface, &pseudoHeader, ipPacket, i, ancillary);
 800a6f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6f4:	f107 0110 	add.w	r1, r7, #16
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f00a f9f7 	bl	8014af4 <tcpProcessSegment>
            IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsInAddrErrors, 1);
            IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInAddrErrors, 1);
         }

         //Exit immediately
         return;
 800a706:	e056      	b.n	800a7b6 <ipv6ProcessPacket+0x3de>

#if (UDP_SUPPORT == ENABLED)
      //UDP header?
      case IPV6_UDP_HEADER:
         //Packets addressed to the tentative address should be silently discarded
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 800a708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a70a:	3318      	adds	r3, #24
 800a70c:	4619      	mov	r1, r3
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f001 fe18 	bl	800c344 <ipv6IsTentativeAddr>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d14f      	bne.n	800a7ba <ipv6ProcessPacket+0x3e2>
         {
            //Process incoming UDP datagram
            error = udpProcessDatagram(interface, &pseudoHeader, ipPacket, i,
 800a71a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a71c:	f107 0110 	add.w	r1, r7, #16
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4613      	mov	r3, r2
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f00d fa15 	bl	8017b58 <udpProcessDatagram>
 800a72e:	4603      	mov	r3, r0
 800a730:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
               ancillary);

            //Unreachable port?
            if(error == ERROR_PORT_UNREACHABLE)
 800a734:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a738:	2bd2      	cmp	r3, #210	; 0xd2
 800a73a:	d13e      	bne.n	800a7ba <ipv6ProcessPacket+0x3e2>
            {
               //A destination node should originate a Destination Unreachable
               //message with Code 4 in response to a packet for which the
               //transport protocol has no listener
               icmpv6SendErrorMessage(interface, ICMPV6_TYPE_DEST_UNREACHABLE,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	2204      	movs	r2, #4
 800a748:	2101      	movs	r1, #1
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7fd fc44 	bl	8007fd8 <icmpv6SendErrorMessage>
            IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsInAddrErrors, 1);
            IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInAddrErrors, 1);
         }

         //Exit immediately
         return;
 800a750:	e033      	b.n	800a7ba <ipv6ProcessPacket+0x3e2>
      default:
         //Debug message
         TRACE_WARNING("Unrecognized Next Header type\r\n");

         //Packets addressed to the tentative address should be silently discarded
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 800a752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a754:	3318      	adds	r3, #24
 800a756:	4619      	mov	r1, r3
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f001 fdf3 	bl	800c344 <ipv6IsTentativeAddr>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d12c      	bne.n	800a7be <ipv6ProcessPacket+0x3e6>
         {
            //Compute the offset of the unrecognized Next Header field within the packet
            size_t n = nextHeaderOffset - ipPacketOffset;
 800a764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	647b      	str	r3, [r7, #68]	; 0x44

            //Send an ICMP Parameter Problem message
            icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a776:	2201      	movs	r2, #1
 800a778:	2104      	movs	r1, #4
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7fd fc2c 	bl	8007fd8 <icmpv6SendErrorMessage>
            IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsInAddrErrors, 1);
            IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInAddrErrors, 1);
         }

         //Discard incoming packet
         return;
 800a780:	e01d      	b.n	800a7be <ipv6ProcessPacket+0x3e6>
      }

      //Any error while processing the current extension header?
      if(error)
 800a782:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a786:	2b00      	cmp	r3, #0
 800a788:	d11b      	bne.n	800a7c2 <ipv6ProcessPacket+0x3ea>
   while(i < length)
 800a78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a78e:	429a      	cmp	r2, r3
 800a790:	f63f aea9 	bhi.w	800a4e6 <ipv6ProcessPacket+0x10e>
 800a794:	e016      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a796:	bf00      	nop
 800a798:	e014      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a79a:	bf00      	nop
 800a79c:	e012      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a79e:	bf00      	nop
 800a7a0:	e010      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a7a2:	bf00      	nop
 800a7a4:	e00e      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a7a6:	bf00      	nop
 800a7a8:	e00c      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
      return;
 800a7aa:	bf00      	nop
 800a7ac:	e00a      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7ae:	bf00      	nop
 800a7b0:	e008      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7b2:	bf00      	nop
 800a7b4:	e006      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7b6:	bf00      	nop
 800a7b8:	e004      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7ba:	bf00      	nop
 800a7bc:	e002      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <ipv6ProcessPacket+0x3ec>
         return;
 800a7c2:	bf00      	nop
   }
}
 800a7c4:	375c      	adds	r7, #92	; 0x5c
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
 800a7ca:	bf00      	nop

0800a7cc <ipv6ParseHopByHopOptHeader>:
 * @brief Error code
 **/

error_t ipv6ParseHopByHopOptHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t *headerOffset, size_t *nextHeaderOffset)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08c      	sub	sp, #48	; 0x30
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
   size_t length;
   size_t headerLen;
   Ipv6HopByHopOptHeader *header;

   //Remaining bytes to process in the IPv6 packet
   length = netBufferGetLength(ipPacket) - *headerOffset;
 800a7da:	68b8      	ldr	r0, [r7, #8]
 800a7dc:	f006 f8cf 	bl	801097e <netBufferGetLength>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24

   //Make sure the extension header is valid
   if(length < sizeof(Ipv6HopByHopOptHeader))
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d801      	bhi.n	800a7f4 <ipv6ParseHopByHopOptHeader+0x28>
      return ERROR_INVALID_HEADER;
 800a7f0:	23d4      	movs	r3, #212	; 0xd4
 800a7f2:	e052      	b.n	800a89a <ipv6ParseHopByHopOptHeader+0xce>

   //Point to the Hop-by-Hop Options header
   header = netBufferAt(ipPacket, *headerOffset);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	68b8      	ldr	r0, [r7, #8]
 800a7fc:	f006 f987 	bl	8010b0e <netBufferAt>
 800a800:	6238      	str	r0, [r7, #32]
   //Sanity check
   if(header == NULL)
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <ipv6ParseHopByHopOptHeader+0x40>
      return ERROR_FAILURE;
 800a808:	2301      	movs	r3, #1
 800a80a:	e046      	b.n	800a89a <ipv6ParseHopByHopOptHeader+0xce>

   //Calculate the length of the entire header
   headerLen = (header->hdrExtLen * 8) + 8;
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	3301      	adds	r3, #1
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	61fb      	str	r3, [r7, #28]

   //Check header length
   if(headerLen > length)
 800a816:	69fa      	ldr	r2, [r7, #28]
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d901      	bls.n	800a822 <ipv6ParseHopByHopOptHeader+0x56>
      return ERROR_INVALID_HEADER;
 800a81e:	23d4      	movs	r3, #212	; 0xd4
 800a820:	e03b      	b.n	800a89a <ipv6ParseHopByHopOptHeader+0xce>
   //Debug message
   TRACE_DEBUG("  Hop-by-Hop Options header\r\n");

   //The Hop-by-Hop Options header, when present, must immediately follow
   //the IPv6 header
   if(*headerOffset != (ipPacketOffset + sizeof(Ipv6Header)))
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3328      	adds	r3, #40	; 0x28
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d010      	beq.n	800a850 <ipv6ParseHopByHopOptHeader+0x84>
   {
      //Compute the offset of the unrecognized Next Header field within the packet
      n = *nextHeaderOffset - ipPacketOffset;
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	61bb      	str	r3, [r7, #24]

      //Send an ICMP Parameter Problem message to the source of the packet
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2201      	movs	r2, #1
 800a844:	2104      	movs	r1, #4
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f7fd fbc6 	bl	8007fd8 <icmpv6SendErrorMessage>
         ICMPV6_CODE_UNKNOWN_NEXT_HEADER, n, ipPacket, ipPacketOffset);

      //Discard incoming packet
      return ERROR_INVALID_HEADER;
 800a84c:	23d4      	movs	r3, #212	; 0xd4
 800a84e:	e024      	b.n	800a89a <ipv6ParseHopByHopOptHeader+0xce>
   }

   //Compute the length of the Options field
   n = headerLen - sizeof(Ipv6HopByHopOptHeader);
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	3b02      	subs	r3, #2
 800a854:	61bb      	str	r3, [r7, #24]

   //Parse options
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
      *headerOffset + sizeof(Ipv6HopByHopOptHeader), n);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
 800a85a:	1c9a      	adds	r2, r3, #2
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 f8e2 	bl	800aa30 <ipv6ParseOptions>
 800a86c:	4603      	mov	r3, r0
 800a86e:	82fb      	strh	r3, [r7, #22]

   //Any error to report?
   if(error)
 800a870:	8afb      	ldrh	r3, [r7, #22]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <ipv6ParseHopByHopOptHeader+0xae>
      return error;
 800a876:	8afb      	ldrh	r3, [r7, #22]
 800a878:	e00f      	b.n	800a89a <ipv6ParseHopByHopOptHeader+0xce>

   //Keep track of Next Header field
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 800a87a:	6a3a      	ldr	r2, [r7, #32]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	441a      	add	r2, r3
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	461a      	mov	r2, r3
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	601a      	str	r2, [r3, #0]
   //Point to the next extension header
   *headerOffset += headerLen;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	441a      	add	r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3728      	adds	r7, #40	; 0x28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <ipv6ParseDestOptHeader>:
 * @brief Error code
 **/

error_t ipv6ParseDestOptHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t *headerOffset, size_t *nextHeaderOffset)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b08c      	sub	sp, #48	; 0x30
 800a8a6:	af02      	add	r7, sp, #8
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	603b      	str	r3, [r7, #0]
   size_t length;
   size_t headerLen;
   Ipv6DestOptHeader *header;

   //Remaining bytes to process in the IPv6 packet
   length = netBufferGetLength(ipPacket) - *headerOffset;
 800a8b0:	68b8      	ldr	r0, [r7, #8]
 800a8b2:	f006 f864 	bl	801097e <netBufferGetLength>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24

   //Make sure the extension header is valid
   if(length < sizeof(Ipv6DestOptHeader))
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d801      	bhi.n	800a8ca <ipv6ParseDestOptHeader+0x28>
      return ERROR_INVALID_HEADER;
 800a8c6:	23d4      	movs	r3, #212	; 0xd4
 800a8c8:	e03b      	b.n	800a942 <ipv6ParseDestOptHeader+0xa0>

   //Point to the Destination Options header
   header = netBufferAt(ipPacket, *headerOffset);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68b8      	ldr	r0, [r7, #8]
 800a8d2:	f006 f91c 	bl	8010b0e <netBufferAt>
 800a8d6:	6238      	str	r0, [r7, #32]
   //Sanity check
   if(header == NULL)
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <ipv6ParseDestOptHeader+0x40>
      return ERROR_FAILURE;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e02f      	b.n	800a942 <ipv6ParseDestOptHeader+0xa0>

   //Calculate the length of the entire header
   headerLen = (header->hdrExtLen * 8) + 8;
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	61fb      	str	r3, [r7, #28]

   //Check header length
   if(headerLen > length)
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d901      	bls.n	800a8f8 <ipv6ParseDestOptHeader+0x56>
      return ERROR_INVALID_HEADER;
 800a8f4:	23d4      	movs	r3, #212	; 0xd4
 800a8f6:	e024      	b.n	800a942 <ipv6ParseDestOptHeader+0xa0>

   //Debug message
   TRACE_DEBUG("  Destination Options header\r\n");

   //Compute the length of the Options field
   n = headerLen - sizeof(Ipv6DestOptHeader);
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	3b02      	subs	r3, #2
 800a8fc:	61bb      	str	r3, [r7, #24]

   //Parse options
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
      *headerOffset + sizeof(Ipv6DestOptHeader), n);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	4613      	mov	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68b9      	ldr	r1, [r7, #8]
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 f88e 	bl	800aa30 <ipv6ParseOptions>
 800a914:	4603      	mov	r3, r0
 800a916:	82fb      	strh	r3, [r7, #22]

   //Any error to report?
   if(error)
 800a918:	8afb      	ldrh	r3, [r7, #22]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <ipv6ParseDestOptHeader+0x80>
      return error;
 800a91e:	8afb      	ldrh	r3, [r7, #22]
 800a920:	e00f      	b.n	800a942 <ipv6ParseDestOptHeader+0xa0>

   //Keep track of Next Header field
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 800a922:	6a3a      	ldr	r2, [r7, #32]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	441a      	add	r2, r3
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	601a      	str	r2, [r3, #0]
   //Point to the next extension header
   *headerOffset += headerLen;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	441a      	add	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3728      	adds	r7, #40	; 0x28
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <ipv6ParseRoutingHeader>:
 * @brief Error code
 **/

error_t ipv6ParseRoutingHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t *headerOffset, size_t *nextHeaderOffset)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b08a      	sub	sp, #40	; 0x28
 800a94e:	af02      	add	r7, sp, #8
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	603b      	str	r3, [r7, #0]
   size_t length;
   size_t headerLen;
   Ipv6RoutingHeader *header;

   //Remaining bytes to process in the IPv6 packet
   length = netBufferGetLength(ipPacket) - *headerOffset;
 800a958:	68b8      	ldr	r0, [r7, #8]
 800a95a:	f006 f810 	bl	801097e <netBufferGetLength>
 800a95e:	4602      	mov	r2, r0
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	61fb      	str	r3, [r7, #28]

   //Make sure the extension header is valid
   if(length < sizeof(Ipv6RoutingHeader))
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	d801      	bhi.n	800a972 <ipv6ParseRoutingHeader+0x28>
      return ERROR_INVALID_HEADER;
 800a96e:	23d4      	movs	r3, #212	; 0xd4
 800a970:	e03e      	b.n	800a9f0 <ipv6ParseRoutingHeader+0xa6>

   //Point to the Routing header
   header = netBufferAt(ipPacket, *headerOffset);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4619      	mov	r1, r3
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f006 f8c8 	bl	8010b0e <netBufferAt>
 800a97e:	61b8      	str	r0, [r7, #24]
   //Sanity check
   if(header == NULL)
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <ipv6ParseRoutingHeader+0x40>
      return ERROR_FAILURE;
 800a986:	2301      	movs	r3, #1
 800a988:	e032      	b.n	800a9f0 <ipv6ParseRoutingHeader+0xa6>

   //Calculate the length of the entire header
   headerLen = (header->hdrExtLen * 8) + 8;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	785b      	ldrb	r3, [r3, #1]
 800a98e:	3301      	adds	r3, #1
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	617b      	str	r3, [r7, #20]

   //Check header length
   if(headerLen > length)
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d901      	bls.n	800a9a0 <ipv6ParseRoutingHeader+0x56>
      return ERROR_INVALID_HEADER;
 800a99c:	23d4      	movs	r3, #212	; 0xd4
 800a99e:	e027      	b.n	800a9f0 <ipv6ParseRoutingHeader+0xa6>
   TRACE_DEBUG("  Routing header\r\n");

   //If, while processing a received packet, a node encounters a Routing
   //header with an unrecognized Routing Type value, the required behavior
   //of the node depends on the value of the Segments Left field
   if(header->segmentsLeft != 0)
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	78db      	ldrb	r3, [r3, #3]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d013      	beq.n	800a9d0 <ipv6ParseRoutingHeader+0x86>
   {
      //Retrieve the offset of the Routing header within the packet
      n = *headerOffset - ipPacketOffset;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	613b      	str	r3, [r7, #16]
      //Compute the exact offset of the Routing Type field
      n += (uint8_t *) &header->routingType - (uint8_t *) header;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	613b      	str	r3, [r7, #16]

      //If Segments Left is non-zero, send an ICMP Parameter Problem,
      //Code 0, message to the packet's Source Address, pointing to
      //the unrecognized Routing Type
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fd fb06 	bl	8007fd8 <icmpv6SendErrorMessage>
         ICMPV6_CODE_INVALID_HEADER_FIELD, n, ipPacket, ipPacketOffset);

      //The node must discard the packet
      return ERROR_INVALID_TYPE;
 800a9cc:	23f0      	movs	r3, #240	; 0xf0
 800a9ce:	e00f      	b.n	800a9f0 <ipv6ParseRoutingHeader+0xa6>
   }

   //Keep track of Next Header field
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	441a      	add	r2, r3
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	461a      	mov	r2, r3
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	601a      	str	r2, [r3, #0]
   //Point to the next extension header
   *headerOffset += headerLen;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	441a      	add	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <ipv6ParseAuthHeader>:
 * @brief Error code
 **/

error_t ipv6ParseAuthHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t *headerOffset, size_t *nextHeaderOffset)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("  Authentication header\r\n");
   //Authentication not supported
   return ERROR_FAILURE;
 800aa06:	2301      	movs	r3, #1
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <ipv6ParseEspHeader>:
 * @brief Error code
 **/

error_t ipv6ParseEspHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t *headerOffset, size_t *nextHeaderOffset)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("  Encapsulating Security Payload header\r\n");
   //Authentication not supported
   return ERROR_FAILURE;
 800aa22:	2301      	movs	r3, #1
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <ipv6ParseOptions>:
 * @brief Error code
 **/

error_t ipv6ParseOptions(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t optionOffset, size_t optionLen)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08e      	sub	sp, #56	; 0x38
 800aa34:	af02      	add	r7, sp, #8
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
   uint8_t *options;
   Ipv6Option *option;
   Ipv6Header *ipHeader;

   //Point to the first byte of the Options field
   options = netBufferAt(ipPacket, optionOffset);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	f006 f864 	bl	8010b0e <netBufferAt>
 800aa46:	62b8      	str	r0, [r7, #40]	; 0x28

   //Sanity check
   if(options == NULL)
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <ipv6ParseOptions+0x22>
      return ERROR_FAILURE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e07f      	b.n	800ab52 <ipv6ParseOptions+0x122>

   //Parse options
   for(i = 0; i < optionLen; )
 800aa52:	2300      	movs	r3, #0
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa56:	e077      	b.n	800ab48 <ipv6ParseOptions+0x118>
   {
      //Point to the current option
      option = (Ipv6Option *) (options + i);
 800aa58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
      //Get option type
      type = option->type & IPV6_OPTION_TYPE_MASK;
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	f003 031f 	and.w	r3, r3, #31
 800aa68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      //Pad1 option?
      if(type == IPV6_OPTION_TYPE_PAD1)
 800aa6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d103      	bne.n	800aa7c <ipv6ParseOptions+0x4c>
      {
         //Advance data pointer
         i++;
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	3301      	adds	r3, #1
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7a:	e065      	b.n	800ab48 <ipv6ParseOptions+0x118>
      }
      //PadN option?
      else if(type == IPV6_OPTION_TYPE_PADN)
 800aa7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d10e      	bne.n	800aaa2 <ipv6ParseOptions+0x72>
      {
         //Malformed IPv6 packet?
         if((i + sizeof(Ipv6Option)) > optionLen)
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	3302      	adds	r3, #2
 800aa88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d201      	bcs.n	800aa92 <ipv6ParseOptions+0x62>
            return ERROR_INVALID_LENGTH;
 800aa8e:	23ec      	movs	r3, #236	; 0xec
 800aa90:	e05f      	b.n	800ab52 <ipv6ParseOptions+0x122>

         //Advance data pointer
         i += sizeof(Ipv6Option) + option->length;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	461a      	mov	r2, r3
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa0:	e052      	b.n	800ab48 <ipv6ParseOptions+0x118>
      }
      //Unrecognized option?
      else
      {
         //Point to the IPv6 header
         ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	68b8      	ldr	r0, [r7, #8]
 800aaa6:	f006 f832 	bl	8010b0e <netBufferAt>
 800aaaa:	61f8      	str	r0, [r7, #28]

         //Sanity check
         if(ipHeader == NULL)
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <ipv6ParseOptions+0x86>
            return ERROR_FAILURE;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e04d      	b.n	800ab52 <ipv6ParseOptions+0x122>

         //Get the value of the highest-order two bits
         action = option->type & IPV6_ACTION_MASK;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aabe:	76fb      	strb	r3, [r7, #27]

         //The highest-order two bits specify the action that must be taken
         //if the processing IPv6 node does not recognize the option type
         if(action == IPV6_ACTION_SKIP_OPTION)
 800aac0:	7efb      	ldrb	r3, [r7, #27]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d032      	beq.n	800ab2c <ipv6ParseOptions+0xfc>
         {
            //Skip over this option and continue processing the header
         }
         else if(action == IPV6_ACTION_DISCARD_PACKET)
 800aac6:	7efb      	ldrb	r3, [r7, #27]
 800aac8:	2b40      	cmp	r3, #64	; 0x40
 800aaca:	d101      	bne.n	800aad0 <ipv6ParseOptions+0xa0>
         {
            //Discard the packet
            return ERROR_INVALID_OPTION;
 800aacc:	23df      	movs	r3, #223	; 0xdf
 800aace:	e040      	b.n	800ab52 <ipv6ParseOptions+0x122>
         }
         else if(action == IPV6_ACTION_SEND_ICMP_ERROR_ALL)
 800aad0:	7efb      	ldrb	r3, [r7, #27]
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	d111      	bne.n	800aafa <ipv6ParseOptions+0xca>
         {
            //Calculate the octet offset within the invoking packet
            //where the error was detected
            n = optionOffset + i - ipPacketOffset;
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	441a      	add	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	617b      	str	r3, [r7, #20]

            //Send an ICMP Parameter Problem message to the source of the
            //packet, regardless of whether or not the destination address
            //was a multicast address
            icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2202      	movs	r2, #2
 800aaee:	2104      	movs	r1, #4
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7fd fa71 	bl	8007fd8 <icmpv6SendErrorMessage>
               ICMPV6_CODE_UNKNOWN_IPV6_OPTION, n, ipPacket, ipPacketOffset);

            //Discard the packet
            return ERROR_INVALID_OPTION;
 800aaf6:	23df      	movs	r3, #223	; 0xdf
 800aaf8:	e02b      	b.n	800ab52 <ipv6ParseOptions+0x122>
         }
         else if(action == IPV6_ACTION_SEND_ICMP_ERROR_UNI)
 800aafa:	7efb      	ldrb	r3, [r7, #27]
 800aafc:	2bc0      	cmp	r3, #192	; 0xc0
 800aafe:	d115      	bne.n	800ab2c <ipv6ParseOptions+0xfc>
         {
            //Send an ICMP Parameter Problem message to the source of the
            //packet, only if the destination address was not a multicast
            //address
            if(!ipv6IsMulticastAddr(&ipHeader->destAddr))
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	7e1b      	ldrb	r3, [r3, #24]
 800ab04:	2bff      	cmp	r3, #255	; 0xff
 800ab06:	d00f      	beq.n	800ab28 <ipv6ParseOptions+0xf8>
            {
               //Calculate the octet offset within the invoking packet
               //where the error was detected
               n = optionOffset + i - ipPacketOffset;
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	441a      	add	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	617b      	str	r3, [r7, #20]

               //Send the ICMP Parameter Problem message
               icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	2104      	movs	r1, #4
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7fd fa58 	bl	8007fd8 <icmpv6SendErrorMessage>
                  ICMPV6_CODE_UNKNOWN_IPV6_OPTION, n, ipPacket, ipPacketOffset);
            }

            //Discard the packet
            return ERROR_INVALID_OPTION;
 800ab28:	23df      	movs	r3, #223	; 0xdf
 800ab2a:	e012      	b.n	800ab52 <ipv6ParseOptions+0x122>
         }

         //Malformed IPv6 packet?
         if((i + sizeof(Ipv6Option)) > optionLen)
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	3302      	adds	r3, #2
 800ab30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d201      	bcs.n	800ab3a <ipv6ParseOptions+0x10a>
            return ERROR_INVALID_LENGTH;
 800ab36:	23ec      	movs	r3, #236	; 0xec
 800ab38:	e00b      	b.n	800ab52 <ipv6ParseOptions+0x122>

         //Advance data pointer
         i += sizeof(Ipv6Option) + option->length;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	4413      	add	r3, r2
 800ab44:	3302      	adds	r3, #2
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c
   for(i = 0; i < optionLen; )
 800ab48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d383      	bcc.n	800aa58 <ipv6ParseOptions+0x28>
      }
   }

   //Successful processing
   return NO_ERROR;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3730      	adds	r7, #48	; 0x30
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <ipv6SendDatagram>:
 * @return Error code
 **/

error_t ipv6SendDatagram(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b08c      	sub	sp, #48	; 0x30
 800ab5e:	af04      	add	r7, sp, #16
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f005 ff08 	bl	801097e <netBufferGetLength>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	617b      	str	r3, [r7, #20]

#if (IPV6_PMTU_SUPPORT == ENABLED)
   //Retrieve the PMTU for the specified destination address
   pathMtu = ipv6GetPathMtu(interface, &pseudoHeader->destAddr);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	3310      	adds	r3, #16
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f001 fdef 	bl	800c760 <ipv6GetPathMtu>
 800ab82:	61b8      	str	r0, [r7, #24]

   //The PMTU should not exceed the MTU of the first-hop link
   if(pathMtu > interface->ipv6Context.linkMtu)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 3644 	ldr.w	r3, [r3, #1604]	; 0x644
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <ipv6SendDatagram+0x3e>
      pathMtu = interface->ipv6Context.linkMtu;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8d3 3644 	ldr.w	r3, [r3, #1604]	; 0x644
 800ab96:	61bb      	str	r3, [r7, #24]
   pathMtu = interface->ipv6Context.linkMtu;
#endif

   //If the payload length is smaller than the PMTU then no fragmentation is
   //needed
   if((length + sizeof(Ipv6Header)) <= pathMtu)
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	3328      	adds	r3, #40	; 0x28
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d30e      	bcc.n	800abc0 <ipv6SendDatagram+0x66>
   {
      //Send data as is
      error = ipv6SendPacket(interface, pseudoHeader, 0, 0, buffer, offset,
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	9302      	str	r3, [sp, #8]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	2200      	movs	r2, #0
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 f815 	bl	800abe4 <ipv6SendPacket>
 800abba:	4603      	mov	r3, r0
 800abbc:	83fb      	strh	r3, [r7, #30]
 800abbe:	e00b      	b.n	800abd8 <ipv6SendDatagram+0x7e>
   //data
   else
   {
#if (IPV6_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv6FragmentDatagram(interface, pseudoHeader, buffer, offset,
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68b9      	ldr	r1, [r7, #8]
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 fb20 	bl	800b214 <ipv6FragmentDatagram>
 800abd4:	4603      	mov	r3, r0
 800abd6:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 800abd8:	8bfb      	ldrh	r3, [r7, #30]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <ipv6SendPacket>:
 **/

error_t ipv6SendPacket(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   uint32_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   NetTxAncillary *ancillary)
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b091      	sub	sp, #68	; 0x44
 800abe8:	af02      	add	r7, sp, #8
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Calculate the length of the payload
   length = netBufferGetLength(buffer) - offset;
 800abf2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800abf4:	f005 fec3 	bl	801097e <netBufferGetLength>
 800abf8:	4602      	mov	r2, r0
 800abfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	633b      	str	r3, [r7, #48]	; 0x30

   //Add Fragment header?
   if(fragOffset != 0)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d035      	beq.n	800ac72 <ipv6SendPacket+0x8e>
   {
      Ipv6FragmentHeader *header;

      //Is there enough space for the IPv6 header and the Fragment header?
      if(offset < (sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader)))
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	2b2f      	cmp	r3, #47	; 0x2f
 800ac0a:	d801      	bhi.n	800ac10 <ipv6SendPacket+0x2c>
         return ERROR_INVALID_PARAMETER;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e18d      	b.n	800af2c <ipv6SendPacket+0x348>

      //Make room for the Fragment header
      offset -= sizeof(Ipv6FragmentHeader);
 800ac10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac12:	3b08      	subs	r3, #8
 800ac14:	64fb      	str	r3, [r7, #76]	; 0x4c
      length += sizeof(Ipv6FragmentHeader);
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	3308      	adds	r3, #8
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30

      //Point to the Fragment header
      header = netBufferAt(buffer, offset);
 800ac1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac20:	f005 ff75 	bl	8010b0e <netBufferAt>
 800ac24:	62b8      	str	r0, [r7, #40]	; 0x28
      //Format the Fragment header
      header->nextHeader = pseudoHeader->nextHeader;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	701a      	strb	r2, [r3, #0]
      header->reserved = 0;
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	2200      	movs	r2, #0
 800ac34:	705a      	strb	r2, [r3, #1]
      header->fragmentOffset = htons(fragOffset);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f6 f94a 	bl	8000ed4 <swapInt16>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	805a      	strh	r2, [r3, #2]
      header->identification = htonl(fragId);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7f6 f951 	bl	8000ef0 <swapInt32>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	605a      	str	r2, [r3, #4]

      //Make room for the IPv6 header
      offset -= sizeof(Ipv6Header);
 800ac54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac56:	3b28      	subs	r3, #40	; 0x28
 800ac58:	64fb      	str	r3, [r7, #76]	; 0x4c
      length += sizeof(Ipv6Header);
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	3328      	adds	r3, #40	; 0x28
 800ac5e:	633b      	str	r3, [r7, #48]	; 0x30

      //Point to the IPv6 header
      packet = netBufferAt(buffer, offset);
 800ac60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac64:	f005 ff53 	bl	8010b0e <netBufferAt>
 800ac68:	62f8      	str	r0, [r7, #44]	; 0x2c
      //Properly set the Next Header field
      packet->nextHeader = IPV6_FRAGMENT_HEADER;
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	222c      	movs	r2, #44	; 0x2c
 800ac6e:	719a      	strb	r2, [r3, #6]
 800ac70:	e014      	b.n	800ac9c <ipv6SendPacket+0xb8>
   }
   else
   {
      //Is there enough space for the IPv6 header?
      if(offset < sizeof(Ipv6Header))
 800ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac74:	2b27      	cmp	r3, #39	; 0x27
 800ac76:	d801      	bhi.n	800ac7c <ipv6SendPacket+0x98>
         return ERROR_INVALID_PARAMETER;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e157      	b.n	800af2c <ipv6SendPacket+0x348>

      //Make room for the IPv6 header
      offset -= sizeof(Ipv6Header);
 800ac7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7e:	3b28      	subs	r3, #40	; 0x28
 800ac80:	64fb      	str	r3, [r7, #76]	; 0x4c
      length += sizeof(Ipv6Header);
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	3328      	adds	r3, #40	; 0x28
 800ac86:	633b      	str	r3, [r7, #48]	; 0x30

      //Point to the IPv6 header
      packet = netBufferAt(buffer, offset);
 800ac88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac8c:	f005 ff3f 	bl	8010b0e <netBufferAt>
 800ac90:	62f8      	str	r0, [r7, #44]	; 0x2c
      //Properly set the Next Header field
      packet->nextHeader = pseudoHeader->nextHeader;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	719a      	strb	r2, [r3, #6]
   }

   //Format IPv6 header
   packet->version = IPV6_VERSION;
 800ac9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9e:	7813      	ldrb	r3, [r2, #0]
 800aca0:	2106      	movs	r1, #6
 800aca2:	f361 1307 	bfi	r3, r1, #4, #4
 800aca6:	7013      	strb	r3, [r2, #0]
   packet->trafficClassH = 0;
 800aca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acaa:	7813      	ldrb	r3, [r2, #0]
 800acac:	f36f 0303 	bfc	r3, #0, #4
 800acb0:	7013      	strb	r3, [r2, #0]
   packet->trafficClassL = 0;
 800acb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb4:	7853      	ldrb	r3, [r2, #1]
 800acb6:	f36f 1307 	bfc	r3, #4, #4
 800acba:	7053      	strb	r3, [r2, #1]
   packet->flowLabelH = 0;
 800acbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acbe:	7853      	ldrb	r3, [r2, #1]
 800acc0:	f36f 0303 	bfc	r3, #0, #4
 800acc4:	7053      	strb	r3, [r2, #1]
   packet->flowLabelL = 0;
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2200      	movs	r2, #0
 800acca:	709a      	strb	r2, [r3, #2]
 800accc:	2200      	movs	r2, #0
 800acce:	70da      	strb	r2, [r3, #3]
   packet->payloadLen = htons(length - sizeof(Ipv6Header));
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b28      	subs	r3, #40	; 0x28
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f6 f8fb 	bl	8000ed4 <swapInt16>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	809a      	strh	r2, [r3, #4]
   packet->hopLimit = ancillary->ttl;
 800ace6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	71da      	strb	r2, [r3, #7]
   packet->srcAddr = pseudoHeader->srcAddr;
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	3308      	adds	r3, #8
 800acf4:	6814      	ldr	r4, [r2, #0]
 800acf6:	6850      	ldr	r0, [r2, #4]
 800acf8:	6891      	ldr	r1, [r2, #8]
 800acfa:	68d2      	ldr	r2, [r2, #12]
 800acfc:	601c      	str	r4, [r3, #0]
 800acfe:	6058      	str	r0, [r3, #4]
 800ad00:	6099      	str	r1, [r3, #8]
 800ad02:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	3318      	adds	r3, #24
 800ad0a:	3210      	adds	r2, #16
 800ad0c:	6814      	ldr	r4, [r2, #0]
 800ad0e:	6850      	ldr	r0, [r2, #4]
 800ad10:	6891      	ldr	r1, [r2, #8]
 800ad12:	68d2      	ldr	r2, [r2, #12]
 800ad14:	601c      	str	r4, [r3, #0]
 800ad16:	6058      	str	r0, [r3, #4]
 800ad18:	6099      	str	r1, [r3, #8]
 800ad1a:	60da      	str	r2, [r3, #12]

   //Check whether the Hop Limit value is zero
   if(packet->hopLimit == 0)
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	79db      	ldrb	r3, [r3, #7]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d104      	bne.n	800ad2e <ipv6SendPacket+0x14a>
   {
      //Use default Hop Limit value
      packet->hopLimit = interface->ipv6Context.curHopLimit;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 264c 	ldrb.w	r2, [r3, #1612]	; 0x64c
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	71da      	strb	r2, [r3, #7]
   packet->trafficClassH = (ancillary->dscp >> 2) & 0x0F;
   packet->trafficClassL = (ancillary->dscp << 2) & 0x0C;
#endif

   //Ensure the source address is valid
   error = ipv6CheckSourceAddr(interface, &pseudoHeader->srcAddr);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4619      	mov	r1, r3
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f001 f918 	bl	800bf68 <ipv6CheckSourceAddr>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	86fb      	strh	r3, [r7, #54]	; 0x36
   //Invalid source address?
   if(error)
 800ad3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <ipv6SendPacket+0x162>
      return error;
 800ad42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad44:	e0f2      	b.n	800af2c <ipv6SendPacket+0x348>

   //Check destination address
   if(ipv6CompAddr(&pseudoHeader->destAddr, &IPV6_UNSPECIFIED_ADDR))
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	3310      	adds	r3, #16
 800ad4a:	2210      	movs	r2, #16
 800ad4c:	4979      	ldr	r1, [pc, #484]	; (800af34 <ipv6SendPacket+0x350>)
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f012 fd88 	bl	801d864 <memcmp>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <ipv6SendPacket+0x17c>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 800ad5a:	23e4      	movs	r3, #228	; 0xe4
 800ad5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad5e:	e0e4      	b.n	800af2a <ipv6SendPacket+0x346>
   }
   else if(ipv6IsLocalHostAddr(&pseudoHeader->destAddr))
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	3310      	adds	r3, #16
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 fb1b 	bl	800c3a0 <ipv6IsLocalHostAddr>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <ipv6SendPacket+0x194>
            break;
         }
      }
#else
      //The loopback address must not appear on the public Internet
      error = ERROR_NO_ROUTE;
 800ad70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad74:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad76:	e0d8      	b.n	800af2a <ipv6SendPacket+0x346>
   }
   else
   {
#if (ETH_SUPPORT == ENABLED)
      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f006 fe2f 	bl	80119dc <nicGetPhysicalInterface>
 800ad7e:	6278      	str	r0, [r7, #36]	; 0x24

      //Ethernet interface?
      if(physicalInterface->nicDriver != NULL &&
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80b0 	beq.w	800aeea <ipv6SendPacket+0x306>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	f040 80aa 	bne.w	800aeea <ipv6SendPacket+0x306>
         Ipv6Addr destIpAddr;
         NdpDestCacheEntry *entry;

         //When the sending node has a packet to send, it first examines
         //the Destination Cache
         entry = ndpFindDestCacheEntry(interface, &pseudoHeader->destAddr);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	3310      	adds	r3, #16
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f004 fe7b 	bl	800fa98 <ndpFindDestCacheEntry>
 800ada2:	6238      	str	r0, [r7, #32]

         //Check whether a matching entry exists
         if(entry != NULL)
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00e      	beq.n	800adc8 <ipv6SendPacket+0x1e4>
         {
            //Retrieve the address of the next-hop
            destIpAddr = entry->nextHop;
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	f107 0410 	add.w	r4, r7, #16
 800adb0:	3310      	adds	r3, #16
 800adb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            //Update timestamp
            entry->timestamp = osGetSystemTime();
 800adb8:	f7f6 fa72 	bl	80012a0 <osGetSystemTime>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6a3b      	ldr	r3, [r7, #32]
 800adc0:	625a      	str	r2, [r3, #36]	; 0x24
            //No error to report
            error = NO_ERROR;
 800adc2:	2300      	movs	r3, #0
 800adc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800adc6:	e033      	b.n	800ae30 <ipv6SendPacket+0x24c>
         }
         else
         {
            //Perform next-hop determination
            error = ndpSelectNextHop(interface, &pseudoHeader->destAddr, NULL,
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f103 0110 	add.w	r1, r3, #16
 800adce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f107 0210 	add.w	r2, r7, #16
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	4613      	mov	r3, r2
 800adda:	2200      	movs	r2, #0
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f005 f92e 	bl	801003e <ndpSelectNextHop>
 800ade2:	4603      	mov	r3, r0
 800ade4:	86fb      	strh	r3, [r7, #54]	; 0x36
               &destIpAddr, ancillary->dontRoute);

            //Check status code
            if(error == NO_ERROR)
 800ade6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d121      	bne.n	800ae30 <ipv6SendPacket+0x24c>
            {
               //Create a new Destination Cache entry
               entry = ndpCreateDestCacheEntry(interface);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f004 fe0b 	bl	800fa08 <ndpCreateDestCacheEntry>
 800adf2:	6238      	str	r0, [r7, #32]

               //Destination cache entry successfully created?
               if(entry != NULL)
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01a      	beq.n	800ae30 <ipv6SendPacket+0x24c>
               {
                  //Destination address
                  entry->destAddr = pseudoHeader->destAddr;
 800adfa:	6a3a      	ldr	r2, [r7, #32]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	4614      	mov	r4, r2
 800ae00:	3310      	adds	r3, #16
 800ae02:	6818      	ldr	r0, [r3, #0]
 800ae04:	6859      	ldr	r1, [r3, #4]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                  //Address of the next hop
                  entry->nextHop = destIpAddr;
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	f103 0410 	add.w	r4, r3, #16
 800ae12:	f107 0310 	add.w	r3, r7, #16
 800ae16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

                  //Initially, the PMTU value for a path is assumed to be the
                  //MTU of the first-hop link
                  entry->pathMtu = interface->ipv6Context.linkMtu;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	621a      	str	r2, [r3, #32]

                  //Set timestamp
                  entry->timestamp = osGetSystemTime();
 800ae26:	f7f6 fa3b 	bl	80012a0 <osGetSystemTime>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	625a      	str	r2, [r3, #36]	; 0x24
               IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutNoRoutes, 1);
            }
         }

         //Successful next-hop determination?
         if(error == NO_ERROR)
 800ae30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d178      	bne.n	800af28 <ipv6SendPacket+0x344>
         {
            //Perform address resolution
            if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 800ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae38:	3312      	adds	r3, #18
 800ae3a:	2206      	movs	r2, #6
 800ae3c:	493e      	ldr	r1, [pc, #248]	; (800af38 <ipv6SendPacket+0x354>)
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f012 fd10 	bl	801d864 <memcmp>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <ipv6SendPacket+0x26c>
            {
               //The destination address is already resolved
               error = NO_ERROR;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ae4e:	e019      	b.n	800ae84 <ipv6SendPacket+0x2a0>
            }
            else if(ipv6IsMulticastAddr(&destIpAddr))
 800ae50:	7c3b      	ldrb	r3, [r7, #16]
 800ae52:	2bff      	cmp	r3, #255	; 0xff
 800ae54:	d10b      	bne.n	800ae6e <ipv6SendPacket+0x28a>
            {
               //Map IPv6 multicast address to MAC-layer multicast address
               error = ipv6MapMulticastAddrToMac(&destIpAddr,
 800ae56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae58:	f103 0212 	add.w	r2, r3, #18
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	4611      	mov	r1, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 fc02 	bl	800c66c <ipv6MapMulticastAddrToMac>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ae6c:	e00a      	b.n	800ae84 <ipv6SendPacket+0x2a0>
                  &ancillary->destMacAddr);
            }
            else
            {
               //Resolve host address using Neighbor Discovery protocol
               error = ndpResolve(interface, &destIpAddr, &ancillary->destMacAddr);
 800ae6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae70:	f103 0212 	add.w	r2, r3, #18
 800ae74:	f107 0310 	add.w	r3, r7, #16
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f003 f9b4 	bl	800e1e8 <ndpResolve>
 800ae80:	4603      	mov	r3, r0
 800ae82:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            //Successful address resolution?
            if(error == NO_ERROR)
 800ae84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d119      	bne.n	800aebe <ipv6SendPacket+0x2da>
            {
               //Update IP statistics
               ipv6UpdateOutStats(interface, &destIpAddr, length);
 800ae8a:	f107 0310 	add.w	r3, r7, #16
 800ae8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae90:	4619      	mov	r1, r3
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f001 fc58 	bl	800c748 <ipv6UpdateOutStats>

               //Debug message
               TRACE_INFO("Sending IPv6 packet (%" PRIuSIZE " bytes)...\r\n", length);
               //Dump IP header contents for debugging purpose
               ipv6DumpHeader(packet);
 800ae98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae9a:	f000 f9b1 	bl	800b200 <ipv6DumpHeader>

               //Send Ethernet frame
               error = ethSendFrame(interface, &ancillary->destMacAddr,
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea0:	f103 0112 	add.w	r1, r3, #18
 800aea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeae:	f248 62dd 	movw	r2, #34525	; 0x86dd
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7fa fcea 	bl	800588c <ethSendFrame>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	86fb      	strh	r3, [r7, #54]	; 0x36
      {
 800aebc:	e034      	b.n	800af28 <ipv6SendPacket+0x344>
                  ETH_TYPE_IPV6, buffer, offset, ancillary);
            }
            else if(error == ERROR_IN_PROGRESS)
 800aebe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aec0:	f240 2203 	movw	r2, #515	; 0x203
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d12f      	bne.n	800af28 <ipv6SendPacket+0x344>
            {
               //Debug message
               TRACE_INFO("Enqueuing IPv6 packet (%" PRIuSIZE " bytes)...\r\n", length);
               //Dump IP header contents for debugging purpose
               ipv6DumpHeader(packet);
 800aec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeca:	f000 f999 	bl	800b200 <ipv6DumpHeader>

               //Enqueue packets waiting for address resolution
               error = ndpEnqueuePacket(NULL, interface, &destIpAddr, buffer,
 800aece:	f107 0210 	add.w	r2, r7, #16
 800aed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aedc:	68f9      	ldr	r1, [r7, #12]
 800aede:	2000      	movs	r0, #0
 800aee0:	f003 f9f1 	bl	800e2c6 <ndpEnqueuePacket>
 800aee4:	4603      	mov	r3, r0
 800aee6:	86fb      	strh	r3, [r7, #54]	; 0x36
      {
 800aee8:	e01e      	b.n	800af28 <ipv6SendPacket+0x344>
         error = pppSendFrame(interface, buffer, offset, PPP_PROTOCOL_IPV6);
      }
      else
#endif
      //6LoWPAN interface?
      if(interface->nicDriver != NULL &&
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d017      	beq.n	800af22 <ipv6SendPacket+0x33e>
         interface->nicDriver->type == NIC_TYPE_6LOWPAN)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef6:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d112      	bne.n	800af22 <ipv6SendPacket+0x33e>
      {
         //Update IP statistics
         ipv6UpdateOutStats(interface, &pseudoHeader->destAddr, length);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	3310      	adds	r3, #16
 800af00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af02:	4619      	mov	r1, r3
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f001 fc1f 	bl	800c748 <ipv6UpdateOutStats>

         //Debug message
         TRACE_INFO("Sending IPv6 packet (%" PRIuSIZE " bytes)...\r\n", length);
         //Dump IP header contents for debugging purpose
         ipv6DumpHeader(packet);
 800af0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af0c:	f000 f978 	bl	800b200 <ipv6DumpHeader>

         //Send the packet over the specified link
         error = nicSendPacket(interface, buffer, offset, ancillary);
 800af10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f006 fda8 	bl	8011a6c <nicSendPacket>
 800af1c:	4603      	mov	r3, r0
 800af1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af20:	e003      	b.n	800af2a <ipv6SendPacket+0x346>
      }
      else
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 800af22:	2307      	movs	r3, #7
 800af24:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af26:	e000      	b.n	800af2a <ipv6SendPacket+0x346>
      {
 800af28:	bf00      	nop
      }
   }

   //Return status code
   return error;
 800af2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	373c      	adds	r7, #60	; 0x3c
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	08024c2c 	.word	0x08024c2c
 800af38:	080243c4 	.word	0x080243c4

0800af3c <ipv6JoinMulticastGroup>:
 * @param[in] groupAddr IPv6 Multicast address to join
 * @return Error code
 **/

error_t ipv6JoinMulticastGroup(NetInterface *interface, const Ipv6Addr *groupAddr)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b08b      	sub	sp, #44	; 0x2c
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
   NetInterface *physicalInterface;
   MacAddr macAddr;
#endif

   //The IPv6 address must be a valid multicast address
   if(!ipv6IsMulticastAddr(groupAddr))
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2bff      	cmp	r3, #255	; 0xff
 800af4c:	d001      	beq.n	800af52 <ipv6JoinMulticastGroup+0x16>
      return ERROR_INVALID_ADDRESS;
 800af4e:	23e4      	movs	r3, #228	; 0xe4
 800af50:	e06f      	b.n	800b032 <ipv6JoinMulticastGroup+0xf6>

#if (ETH_SUPPORT == ENABLED)
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f006 fd42 	bl	80119dc <nicGetPhysicalInterface>
 800af58:	61b8      	str	r0, [r7, #24]
#endif

   //Initialize error code
   error = NO_ERROR;
 800af5a:	2300      	movs	r3, #0
 800af5c:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Keep track of the first free entry
   firstFreeEntry = NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	61fb      	str	r3, [r7, #28]

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800af62:	2300      	movs	r3, #0
 800af64:	623b      	str	r3, [r7, #32]
 800af66:	e023      	b.n	800afb0 <ipv6JoinMulticastGroup+0x74>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	015b      	lsls	r3, r3, #5
 800af6c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4413      	add	r3, r2
 800af74:	3304      	adds	r3, #4
 800af76:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(entry->refCount > 0)
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00f      	beq.n	800afa0 <ipv6JoinMulticastGroup+0x64>
      {
         //Check whether the table already contains the specified IPv6 address
         if(ipv6CompAddr(&entry->addr, groupAddr))
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2210      	movs	r2, #16
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f012 fc6c 	bl	801d864 <memcmp>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10b      	bne.n	800afaa <ipv6JoinMulticastGroup+0x6e>
         {
            //Increment the reference count
            entry->refCount++;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	611a      	str	r2, [r3, #16]
            //Successful processing
            return NO_ERROR;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e048      	b.n	800b032 <ipv6JoinMulticastGroup+0xf6>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <ipv6JoinMulticastGroup+0x6e>
            firstFreeEntry = entry;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	61fb      	str	r3, [r7, #28]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	3301      	adds	r3, #1
 800afae:	623b      	str	r3, [r7, #32]
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	2b07      	cmp	r3, #7
 800afb4:	d9d8      	bls.n	800af68 <ipv6JoinMulticastGroup+0x2c>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <ipv6JoinMulticastGroup+0x84>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e038      	b.n	800b032 <ipv6JoinMulticastGroup+0xf6>
   }

#if (ETH_SUPPORT == ENABLED)
   //Map the IPv6 multicast address to a MAC-layer address
   ipv6MapMulticastAddrToMac(groupAddr, &macAddr);
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	4619      	mov	r1, r3
 800afc6:	6838      	ldr	r0, [r7, #0]
 800afc8:	f001 fb50 	bl	800c66c <ipv6MapMulticastAddrToMac>

   //Add the corresponding address to the MAC filter table
   error = ethAcceptMacAddr(interface, &macAddr);
 800afcc:	f107 030c 	add.w	r3, r7, #12
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7fa fcf6 	bl	80059c4 <ethAcceptMacAddr>
 800afd8:	4603      	mov	r3, r0
 800afda:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800afdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d114      	bne.n	800b00c <ipv6JoinMulticastGroup+0xd0>
   {
      //Virtual interface?
      if(interface != physicalInterface)
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d010      	beq.n	800b00c <ipv6JoinMulticastGroup+0xd0>
      {
         //Configure the physical interface to accept the MAC address
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 800afea:	f107 030c 	add.w	r3, r7, #12
 800afee:	4619      	mov	r1, r3
 800aff0:	69b8      	ldr	r0, [r7, #24]
 800aff2:	f7fa fce7 	bl	80059c4 <ethAcceptMacAddr>
 800aff6:	4603      	mov	r3, r0
 800aff8:	84fb      	strh	r3, [r7, #38]	; 0x26

         //Any error to report?
         if(error)
 800affa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <ipv6JoinMulticastGroup+0xd0>
         {
            //Clean up side effects
            ethDropMacAddr(interface, &macAddr);
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7fa fd2e 	bl	8005a68 <ethDropMacAddr>
      }
   }
#endif

   //MAC filter table successfully updated?
   if(!error)
 800b00c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10e      	bne.n	800b030 <ipv6JoinMulticastGroup+0xf4>
   {
      //Now we can safely add a new entry to the table
      firstFreeEntry->addr = *groupAddr;
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	4614      	mov	r4, r2
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	6859      	ldr	r1, [r3, #4]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      //Initialize the reference count
      firstFreeEntry->refCount = 1;
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	2201      	movs	r2, #1
 800b026:	611a      	str	r2, [r3, #16]

#if (MLD_SUPPORT == ENABLED)
      //Start listening to the multicast address
      mldStartListening(interface, firstFreeEntry);
 800b028:	69f9      	ldr	r1, [r7, #28]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f002 f85a 	bl	800d0e4 <mldStartListening>
#endif
   }

   //Return status code
   return error;
 800b030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800b032:	4618      	mov	r0, r3
 800b034:	372c      	adds	r7, #44	; 0x2c
 800b036:	46bd      	mov	sp, r7
 800b038:	bd90      	pop	{r4, r7, pc}

0800b03a <ipv6LeaveMulticastGroup>:
 * @param[in] groupAddr IPv6 multicast address to drop
 * @return Error code
 **/

error_t ipv6LeaveMulticastGroup(NetInterface *interface, const Ipv6Addr *groupAddr)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b088      	sub	sp, #32
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
   NetInterface *physicalInterface;
   MacAddr macAddr;
#endif

   //The IPv6 address must be a valid multicast address
   if(!ipv6IsMulticastAddr(groupAddr))
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2bff      	cmp	r3, #255	; 0xff
 800b04a:	d001      	beq.n	800b050 <ipv6LeaveMulticastGroup+0x16>
      return ERROR_INVALID_ADDRESS;
 800b04c:	23e4      	movs	r3, #228	; 0xe4
 800b04e:	e04f      	b.n	800b0f0 <ipv6LeaveMulticastGroup+0xb6>

#if (ETH_SUPPORT == ENABLED)
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f006 fcc3 	bl	80119dc <nicGetPhysicalInterface>
 800b056:	61b8      	str	r0, [r7, #24]
#endif

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800b058:	2300      	movs	r3, #0
 800b05a:	61fb      	str	r3, [r7, #28]
 800b05c:	e043      	b.n	800b0e6 <ipv6LeaveMulticastGroup+0xac>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	015b      	lsls	r3, r3, #5
 800b062:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	4413      	add	r3, r2
 800b06a:	3304      	adds	r3, #4
 800b06c:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(entry->refCount > 0)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d034      	beq.n	800b0e0 <ipv6LeaveMulticastGroup+0xa6>
      {
         //Specified IPv6 address found?
         if(ipv6CompAddr(&entry->addr, groupAddr))
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2210      	movs	r2, #16
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f012 fbf1 	bl	801d864 <memcmp>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d12b      	bne.n	800b0e0 <ipv6LeaveMulticastGroup+0xa6>
         {
            //Decrement the reference count
            entry->refCount--;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	1e5a      	subs	r2, r3, #1
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	611a      	str	r2, [r3, #16]

            //Remove the entry if the reference count drops to zero
            if(entry->refCount == 0)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d120      	bne.n	800b0dc <ipv6LeaveMulticastGroup+0xa2>
            {
#if (MLD_SUPPORT == ENABLED)
               //Stop listening to the multicast address
               mldStopListening(interface, entry);
 800b09a:	6979      	ldr	r1, [r7, #20]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f002 f85b 	bl	800d158 <mldStopListening>
#endif
#if (ETH_SUPPORT == ENABLED)
               //Map the IPv6 multicast address to a MAC-layer address
               ipv6MapMulticastAddrToMac(groupAddr, &macAddr);
 800b0a2:	f107 030c 	add.w	r3, r7, #12
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6838      	ldr	r0, [r7, #0]
 800b0aa:	f001 fadf 	bl	800c66c <ipv6MapMulticastAddrToMac>
               //Drop the corresponding address from the MAC filter table
               ethDropMacAddr(interface, &macAddr);
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7fa fcd7 	bl	8005a68 <ethDropMacAddr>

               //Virtual interface?
               if(interface != physicalInterface)
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d005      	beq.n	800b0ce <ipv6LeaveMulticastGroup+0x94>
               {
                  //Drop the corresponding address from the MAC filter table of
                  //the physical interface
                  ethDropMacAddr(physicalInterface, &macAddr);
 800b0c2:	f107 030c 	add.w	r3, r7, #12
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	69b8      	ldr	r0, [r7, #24]
 800b0ca:	f7fa fccd 	bl	8005a68 <ethDropMacAddr>
               }
#endif
               //Remove the multicast address from the list
               entry->addr = IPV6_UNSPECIFIED_ADDR;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	6053      	str	r3, [r2, #4]
 800b0d8:	6093      	str	r3, [r2, #8]
 800b0da:	60d3      	str	r3, [r2, #12]
            }

            //Successful processing
            return NO_ERROR;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e007      	b.n	800b0f0 <ipv6LeaveMulticastGroup+0xb6>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	2b07      	cmp	r3, #7
 800b0ea:	d9b8      	bls.n	800b05e <ipv6LeaveMulticastGroup+0x24>
         }
      }
   }

   //The specified IPv6 address does not exist
   return ERROR_ADDRESS_NOT_FOUND;
 800b0ec:	f44f 730a 	mov.w	r3, #552	; 0x228
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <ipv6AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv6 address
 * @return Pointer to the formatted string
 **/

char_t *ipv6AddrToString(const Ipv6Addr *ipAddr, char_t *str)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   char_t *p;

   //Best run of zeroes
   uint_t zeroRunStart = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	613b      	str	r3, [r7, #16]
   uint_t zeroRunEnd = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <ipv6AddrToString+0x1c>
      str = buffer;
 800b110:	4b39      	ldr	r3, [pc, #228]	; (800b1f8 <ipv6AddrToString+0x100>)
 800b112:	603b      	str	r3, [r7, #0]

   //Find the longest run of zeros for "::" short-handing
   for(i = 0; i < 8; i++)
 800b114:	2300      	movs	r3, #0
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	e023      	b.n	800b162 <ipv6AddrToString+0x6a>
   {
      //Compute the length of the current sequence of zeroes
      for(j = i; j < 8 && !ipAddr->w[j]; j++);
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e002      	b.n	800b126 <ipv6AddrToString+0x2e>
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	3301      	adds	r3, #1
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b07      	cmp	r3, #7
 800b12a:	d806      	bhi.n	800b13a <ipv6AddrToString+0x42>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b134:	b29b      	uxth	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0f2      	beq.n	800b120 <ipv6AddrToString+0x28>

      //Keep track of the longest one
      if((j - i) > 1 && (j - i) > (zeroRunEnd - zeroRunStart))
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	2b01      	cmp	r3, #1
 800b142:	d90b      	bls.n	800b15c <ipv6AddrToString+0x64>
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	1ad2      	subs	r2, r2, r3
 800b14a:	68f9      	ldr	r1, [r7, #12]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1acb      	subs	r3, r1, r3
 800b150:	429a      	cmp	r2, r3
 800b152:	d903      	bls.n	800b15c <ipv6AddrToString+0x64>
      {
         //The symbol "::" should not be used to shorten just one zero field
         zeroRunStart = i;
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	613b      	str	r3, [r7, #16]
         zeroRunEnd = j;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < 8; i++)
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	3301      	adds	r3, #1
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	2b07      	cmp	r3, #7
 800b166:	d9d8      	bls.n	800b11a <ipv6AddrToString+0x22>
      }
   }

   //Format IPv6 address
   for(p = str, i = 0; i < 8; i++)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	2300      	movs	r3, #0
 800b16e:	61fb      	str	r3, [r7, #28]
 800b170:	e02e      	b.n	800b1d0 <ipv6AddrToString+0xd8>
   {
      //Are we inside the best run of zeroes?
      if(i >= zeroRunStart && i < zeroRunEnd)
 800b172:	69fa      	ldr	r2, [r7, #28]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	429a      	cmp	r2, r3
 800b178:	d30c      	bcc.n	800b194 <ipv6AddrToString+0x9c>
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d208      	bcs.n	800b194 <ipv6AddrToString+0x9c>
      {
         //Append a separator
         *(p++) = ':';
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	617a      	str	r2, [r7, #20]
 800b188:	223a      	movs	r2, #58	; 0x3a
 800b18a:	701a      	strb	r2, [r3, #0]
         //Skip the sequence of zeroes
         i = zeroRunEnd - 1;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3b01      	subs	r3, #1
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	e01a      	b.n	800b1ca <ipv6AddrToString+0xd2>
      }
      else
      {
         //Add a separator between each 16-bit word
         if(i > 0)
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <ipv6AddrToString+0xac>
            *(p++) = ':';
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	617a      	str	r2, [r7, #20]
 800b1a0:	223a      	movs	r2, #58	; 0x3a
 800b1a2:	701a      	strb	r2, [r3, #0]

         //Convert the current 16-bit word to string
         p += osSprintf(p, "%" PRIx16, ntohs(ipAddr->w[i]));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f5 fe90 	bl	8000ed4 <swapInt16>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4910      	ldr	r1, [pc, #64]	; (800b1fc <ipv6AddrToString+0x104>)
 800b1ba:	6978      	ldr	r0, [r7, #20]
 800b1bc:	f012 fd52 	bl	801dc64 <sprintf>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]
   for(p = str, i = 0; i < 8; i++)
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	2b07      	cmp	r3, #7
 800b1d4:	d9cd      	bls.n	800b172 <ipv6AddrToString+0x7a>
      }
   }

   //A trailing run of zeroes has been found?
   if(zeroRunEnd == 8)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d104      	bne.n	800b1e6 <ipv6AddrToString+0xee>
      *(p++) = ':';
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	617a      	str	r2, [r7, #20]
 800b1e2:	223a      	movs	r2, #58	; 0x3a
 800b1e4:	701a      	strb	r2, [r3, #0]

   //Properly terminate the string
   *p = '\0';
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	701a      	strb	r2, [r3, #0]

   //Return a pointer to the formatted string
   return str;
 800b1ec:	683b      	ldr	r3, [r7, #0]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000a60 	.word	0x20000a60
 800b1fc:	08024c90 	.word	0x08024c90

0800b200 <ipv6DumpHeader>:
 * @brief Dump IPv6 header for debugging purpose
 * @param[in] ipHeader IPv6 header
 **/

void ipv6DumpHeader(const Ipv6Header *ipHeader)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Payload Length = %" PRIu16 "\r\n", ntohs(ipHeader->payloadLen));
   TRACE_DEBUG("  Next Header = %" PRIu8 "\r\n", ipHeader->nextHeader);
   TRACE_DEBUG("  Hop Limit = %" PRIu8 "\r\n", ipHeader->hopLimit);
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv6AddrToString(&ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv6AddrToString(&ipHeader->destAddr, NULL));
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <ipv6FragmentDatagram>:
 **/

error_t ipv6FragmentDatagram(NetInterface *interface,
   Ipv6PseudoHeader *pseudoHeader, const NetBuffer *payload,
   size_t payloadOffset, size_t pathMtu, NetTxAncillary *ancillary)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b090      	sub	sp, #64	; 0x40
 800b218:	af04      	add	r7, sp, #16
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
   //Number of IP datagrams that would require fragmentation in order to be transmitted
   IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f005 fbab 	bl	801097e <netBufferGetLength>
 800b228:	4602      	mov	r2, r0
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 800b230:	f107 0310 	add.w	r3, r7, #16
 800b234:	4619      	mov	r1, r3
 800b236:	2000      	movs	r0, #0
 800b238:	f7fd fc1d 	bl	8008a76 <ipAllocBuffer>
 800b23c:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <ipv6FragmentDatagram+0x34>
      return ERROR_OUT_OF_MEMORY;
 800b244:	2364      	movs	r3, #100	; 0x64
 800b246:	e073      	b.n	800b330 <ipv6FragmentDatagram+0x11c>

   //Identification field is used to identify fragments of an original IP datagram
   id = interface->ipv6Context.identification++;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	; 0x8ac
 800b24e:	1c59      	adds	r1, r3, #1
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	f8c2 18ac 	str.w	r1, [r2, #2220]	; 0x8ac
 800b256:	61bb      	str	r3, [r7, #24]

   //The node should never set its PMTU estimate below the IPv6 minimum link MTU
   pathMtu = MAX(pathMtu, IPV6_DEFAULT_MTU);
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b25e:	bf38      	it	cc
 800b260:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
 800b264:	63bb      	str	r3, [r7, #56]	; 0x38

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = pathMtu - sizeof(Ipv6Header) - sizeof(Ipv6FragmentHeader);
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	3b30      	subs	r3, #48	; 0x30
 800b26a:	617b      	str	r3, [r7, #20]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	617b      	str	r3, [r7, #20]

   //Initialize error code
   error = NO_ERROR;
 800b274:	2300      	movs	r3, #0
 800b276:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 800b278:	2300      	movs	r3, #0
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27c:	e04c      	b.n	800b318 <ipv6FragmentDatagram+0x104>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	4619      	mov	r1, r3
 800b282:	69f8      	ldr	r0, [r7, #28]
 800b284:	f005 fb9d 	bl	80109c2 <netBufferSetLength>
 800b288:	4603      	mov	r3, r0
 800b28a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 800b28c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d147      	bne.n	800b322 <ipv6FragmentDatagram+0x10e>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d31a      	bcc.n	800b2d4 <ipv6FragmentDatagram+0xc0>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800b29e:	6a3a      	ldr	r2, [r7, #32]
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	441a      	add	r2, r3
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	69f8      	ldr	r0, [r7, #28]
 800b2b2:	f005 fc5f 	bl	8010b74 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv6SendPacket(interface, pseudoHeader, id, offset, fragment,
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2ba:	9202      	str	r2, [sp, #8]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7ff fc8b 	bl	800abe4 <ipv6SendPacket>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b2d2:	e01a      	b.n	800b30a <ipv6FragmentDatagram+0xf6>
            fragmentOffset, ancillary);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	441a      	add	r2, r3
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	69f8      	ldr	r0, [r7, #28]
 800b2e4:	f005 fc46 	bl	8010b74 <netBufferConcat>

         //Fragmented packets must have the M flag set
         error = ipv6SendPacket(interface, pseudoHeader, id, IPV6_FLAG_M |
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	f043 0101 	orr.w	r1, r3, #1
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2f2:	9202      	str	r2, [sp, #8]
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff fc6f 	bl	800abe4 <ipv6SendPacket>
 800b306:	4603      	mov	r3, r0
 800b308:	85fb      	strh	r3, [r7, #46]	; 0x2e
            offset, fragment, fragmentOffset, ancillary);
      }

      //Failed to send current IP fragment?
      if(error)
 800b30a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <ipv6FragmentDatagram+0x112>
   for(offset = 0; offset < payloadLen; offset += length)
 800b310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	4413      	add	r3, r2
 800b316:	62bb      	str	r3, [r7, #40]	; 0x28
 800b318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d3ae      	bcc.n	800b27e <ipv6FragmentDatagram+0x6a>
 800b320:	e002      	b.n	800b328 <ipv6FragmentDatagram+0x114>
         break;
 800b322:	bf00      	nop
 800b324:	e000      	b.n	800b328 <ipv6FragmentDatagram+0x114>
         break;
 800b326:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 800b328:	69f8      	ldr	r0, [r7, #28]
 800b32a:	f005 fb19 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800b32e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800b330:	4618      	mov	r0, r3
 800b332:	3730      	adds	r7, #48	; 0x30
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <ipv6ParseFragmentHeader>:
 **/

void ipv6ParseFragmentHeader(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t fragHeaderOffset, size_t nextHeaderOffset,
   NetRxAncillary *ancillary)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b094      	sub	sp, #80	; 0x50
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
   //Number of IP fragments received which needed to be reassembled
   IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Remaining bytes to process in the payload
   length = netBufferGetLength(ipPacket) - fragHeaderOffset;
 800b346:	68b8      	ldr	r0, [r7, #8]
 800b348:	f005 fb19 	bl	801097e <netBufferGetLength>
 800b34c:	4602      	mov	r2, r0
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Ensure the fragment header is valid
   if(length < sizeof(Ipv6FragmentHeader))
 800b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b356:	2b07      	cmp	r3, #7
 800b358:	f240 81c8 	bls.w	800b6ec <ipv6ParseFragmentHeader+0x3b4>
      //Drop the incoming fragment
      return;
   }

   //Point to the IPv6 header
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	68b8      	ldr	r0, [r7, #8]
 800b360:	f005 fbd5 	bl	8010b0e <netBufferAt>
 800b364:	63b8      	str	r0, [r7, #56]	; 0x38
   //Sanity check
   if(ipHeader == NULL)
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 81c1 	beq.w	800b6f0 <ipv6ParseFragmentHeader+0x3b8>
      return;

   //Point to the Fragment header
   fragHeader = netBufferAt(ipPacket, fragHeaderOffset);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	68b8      	ldr	r0, [r7, #8]
 800b372:	f005 fbcc 	bl	8010b0e <netBufferAt>
 800b376:	6378      	str	r0, [r7, #52]	; 0x34
   //Sanity check
   if(fragHeader == NULL)
 800b378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 81ba 	beq.w	800b6f4 <ipv6ParseFragmentHeader+0x3bc>
      return;

   //Calculate the length of the fragment
   length -= sizeof(Ipv6FragmentHeader);
 800b380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b382:	3b08      	subs	r3, #8
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
   //Convert the fragment offset from network byte order
   offset = ntohs(fragHeader->fragmentOffset);
 800b386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b388:	885b      	ldrh	r3, [r3, #2]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f5 fda1 	bl	8000ed4 <swapInt16>
 800b392:	4603      	mov	r3, r0
 800b394:	867b      	strh	r3, [r7, #50]	; 0x32

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV6_FLAG_M) && (length % 8))
 800b396:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d011      	beq.n	800b3c4 <ipv6ParseFragmentHeader+0x8c>
 800b3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <ipv6ParseFragmentHeader+0x8c>
      //Number of failures detected by the IP reassembly algorithm
      IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
      IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

      //Compute the offset of the Payload Length field within the packet
      n = (uint8_t *) &ipHeader->payloadLen - (uint8_t *) ipHeader;
 800b3aa:	2304      	movs	r3, #4
 800b3ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      //The fragment must be discarded and an ICMP Parameter Problem
      //message should be sent to the source of the fragment, pointing
      //to the Payload Length field of the fragment packet
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2104      	movs	r1, #4
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7fc fe0b 	bl	8007fd8 <icmpv6SendErrorMessage>
         ICMPV6_CODE_INVALID_HEADER_FIELD, n, ipPacket, ipPacketOffset);

      //Drop the incoming fragment
      return;
 800b3c2:	e19a      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
   }

   //Calculate the index of the first byte
   dataFirst = offset & IPV6_OFFSET_MASK;
 800b3c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b3c6:	f023 0307 	bic.w	r3, r3, #7
 800b3ca:	857b      	strh	r3, [r7, #42]	; 0x2a
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 800b3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3d2:	4413      	add	r3, r2
 800b3d4:	853b      	strh	r3, [r7, #40]	; 0x28

   //Search for a matching IP datagram being reassembled
   frag = ipv6SearchFragQueue(interface, ipHeader, fragHeader);
 800b3d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f9f1 	bl	800b7c2 <ipv6SearchFragQueue>
 800b3e0:	6278      	str	r0, [r7, #36]	; 0x24

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 8187 	beq.w	800b6f8 <ipv6ParseFragmentHeader+0x3c0>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV6_OFFSET_MASK))
 800b3ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b3ec:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d14f      	bne.n	800b496 <ipv6ParseFragmentHeader+0x15e>
   {
      uint8_t *p;

      //Calculate the length of the unfragmentable part
      frag->unfragPartLength = fragHeaderOffset - ipPacketOffset;
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	1ad2      	subs	r2, r2, r3
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	609a      	str	r2, [r3, #8]

      //The size of the reconstructed datagram exceeds the maximum value?
      if((frag->unfragPartLength + frag->fragPartLength) > IPV6_MAX_FRAG_DATAGRAM_SIZE)
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b40e:	d917      	bls.n	800b440 <ipv6ParseFragmentHeader+0x108>
         //Number of failures detected by the IP reassembly algorithm
         IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Retrieve the offset of the Fragment header within the packet
         n = fragHeaderOffset - ipPacketOffset;
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	62fb      	str	r3, [r7, #44]	; 0x2c
         //Compute the exact offset of the Fragment Offset field
         n += (uint8_t *) &fragHeader->fragmentOffset - (uint8_t *) fragHeader;
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	3302      	adds	r3, #2
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c

         //The fragment must be discarded and an ICMP Parameter Problem
         //message should be sent to the source of the fragment, pointing
         //to the Fragment Offset field of the fragment packet
         icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	2200      	movs	r2, #0
 800b42a:	2104      	movs	r1, #4
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7fc fdd3 	bl	8007fd8 <icmpv6SendErrorMessage>
            ICMPV6_CODE_INVALID_HEADER_FIELD, n, ipPacket, ipPacketOffset);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	3314      	adds	r3, #20
 800b436:	2100      	movs	r1, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f005 fac2 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 800b43e:	e15c      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      }

      //Make sure the unfragmentable part entirely fits in the first chunk
      if(frag->unfragPartLength > frag->buffer.chunk[0].size)
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b446:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800b448:	4293      	cmp	r3, r2
 800b44a:	d906      	bls.n	800b45a <ipv6ParseFragmentHeader+0x122>
         //Number of failures detected by the IP reassembly algorithm
         IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	3314      	adds	r3, #20
 800b450:	2100      	movs	r1, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f005 fab5 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 800b458:	e14f      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->unfragPartLength;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	841a      	strh	r2, [r3, #32]

      //The unfragmentable part of the reassembled packet consists
      //of all headers up to, but not including, the Fragment header
      //of the first fragment packet
      netBufferCopy((NetBuffer *) &frag->buffer, 0, ipPacket,
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	f103 0014 	add.w	r0, r3, #20
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	2100      	movs	r1, #0
 800b476:	f005 fc18 	bl	8010caa <netBufferCopy>
         ipPacketOffset, frag->unfragPartLength);

      //Point to the Next Header field of the last header
      p = netBufferAt((NetBuffer *) &frag->buffer,
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	f103 0014 	add.w	r0, r3, #20
 800b480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	4619      	mov	r1, r3
 800b488:	f005 fb41 	bl	8010b0e <netBufferAt>
 800b48c:	6238      	str	r0, [r7, #32]
         nextHeaderOffset - ipPacketOffset);

      //The Next Header field of the last header of the unfragmentable
      //part is obtained from the Next Header field of the first
      //fragment's Fragment header
      *p = fragHeader->nextHeader;
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	781a      	ldrb	r2, [r3, #0]
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	701a      	strb	r2, [r3, #0]
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->fragPartLength)
 800b496:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d938      	bls.n	800b512 <ipv6ParseFragmentHeader+0x1da>
   {
      //The size of the reconstructed datagram exceeds the maximum value?
      if((frag->unfragPartLength + dataLast) > IPV6_MAX_FRAG_DATAGRAM_SIZE)
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ac:	d917      	bls.n	800b4de <ipv6ParseFragmentHeader+0x1a6>
         //Number of failures detected by the IP reassembly algorithm
         IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Retrieve the offset of the Fragment header within the packet
         n = fragHeaderOffset - ipPacketOffset;
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
         //Compute the exact offset of the Fragment Offset field
         n += (uint8_t *) &fragHeader->fragmentOffset - (uint8_t *) fragHeader;
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

         //The fragment must be discarded and an ICMP Parameter Problem
         //message should be sent to the source of the fragment, pointing
         //to the Fragment Offset field of the fragment packet
         icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2104      	movs	r1, #4
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7fc fd84 	bl	8007fd8 <icmpv6SendErrorMessage>
            ICMPV6_CODE_INVALID_HEADER_FIELD, n, ipPacket, ipPacketOffset);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	3314      	adds	r3, #20
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f005 fa73 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 800b4dc:	e10d      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	f103 0014 	add.w	r0, r3, #20
         frag->unfragPartLength + dataLast + sizeof(Ipv6HoleDesc));
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4ea:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b4ec:	3306      	adds	r3, #6
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	f005 fa67 	bl	80109c2 <netBufferSetLength>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error)
 800b4f8:	8bfb      	ldrh	r3, [r7, #30]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d006      	beq.n	800b50c <ipv6ParseFragmentHeader+0x1d4>
         //Number of failures detected by the IP reassembly algorithm
         IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	3314      	adds	r3, #20
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f005 fa5c 	bl	80109c2 <netBufferSetLength>
         //Exit immediately
         return;
 800b50a:	e0f6      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      }

      //Actual length of the fragmentable part
      frag->fragPartLength = dataLast;
 800b50c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	60da      	str	r2, [r3, #12]
   }

   //Select the first hole descriptor from the list
   hole = ipv6FindHole(frag, frag->firstHole);
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	8a1b      	ldrh	r3, [r3, #16]
 800b516:	4619      	mov	r1, r3
 800b518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b51a:	f000 fa2c 	bl	800b976 <ipv6FindHole>
 800b51e:	6478      	str	r0, [r7, #68]	; 0x44
   //Keep track of the previous hole in the list
   prevHole = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	643b      	str	r3, [r7, #64]	; 0x40

   //Iterate through the hole descriptors
   while(hole != NULL)
 800b524:	e08b      	b.n	800b63e <ipv6ParseFragmentHeader+0x306>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 800b526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	4313      	orrs	r3, r2
 800b530:	82fb      	strh	r3, [r7, #22]
      uint16_t holeLast = hole->last;
 800b532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b534:	789a      	ldrb	r2, [r3, #2]
 800b536:	78db      	ldrb	r3, [r3, #3]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	4313      	orrs	r3, r2
 800b53c:	82bb      	strh	r3, [r7, #20]

      //Check whether the newly arrived fragment interacts with this hole
      //in some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 800b53e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b540:	8abb      	ldrh	r3, [r7, #20]
 800b542:	429a      	cmp	r2, r3
 800b544:	d269      	bcs.n	800b61a <ipv6ParseFragmentHeader+0x2e2>
 800b546:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b548:	8afb      	ldrh	r3, [r7, #22]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d965      	bls.n	800b61a <ipv6ParseFragmentHeader+0x2e2>
         }
#endif
         //The current descriptor is no longer valid. We will destroy it,
         //and in the next two steps, we will determine whether or not it
         //is necessary to create any new hole descriptors
         if(prevHole != NULL)
 800b54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <ipv6ParseFragmentHeader+0x228>
            prevHole->next = hole->next;
 800b554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b556:	889b      	ldrh	r3, [r3, #4]
 800b558:	b29a      	uxth	r2, r3
 800b55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b55c:	809a      	strh	r2, [r3, #4]
 800b55e:	e004      	b.n	800b56a <ipv6ParseFragmentHeader+0x232>
         else
            frag->firstHole = hole->next;
 800b560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b562:	889b      	ldrh	r3, [r3, #4]
 800b564:	b29a      	uxth	r2, r3
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	821a      	strh	r2, [r3, #16]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 800b56a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b56c:	8afb      	ldrh	r3, [r7, #22]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d924      	bls.n	800b5bc <ipv6ParseFragmentHeader+0x284>
         {
            //Create a new entry that describes this hole
            hole = ipv6FindHole(frag, holeFirst);
 800b572:	8afb      	ldrh	r3, [r7, #22]
 800b574:	4619      	mov	r1, r3
 800b576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b578:	f000 f9fd 	bl	800b976 <ipv6FindHole>
 800b57c:	6478      	str	r0, [r7, #68]	; 0x44
            hole->first = holeFirst;
 800b57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b580:	8afa      	ldrh	r2, [r7, #22]
 800b582:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 800b584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b586:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b588:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800b58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00a      	beq.n	800b5a6 <ipv6ParseFragmentHeader+0x26e>
            {
               hole->next = prevHole->next;
 800b590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b592:	889b      	ldrh	r3, [r3, #4]
 800b594:	b29a      	uxth	r2, r3
 800b596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b598:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800b59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5a2:	809a      	strh	r2, [r3, #4]
 800b5a4:	e008      	b.n	800b5b8 <ipv6ParseFragmentHeader+0x280>
            }
            else
            {
               hole->next = frag->firstHole;
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	8a1a      	ldrh	r2, [r3, #16]
 800b5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ac:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800b5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	821a      	strh	r2, [r3, #16]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800b5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ba:	643b      	str	r3, [r7, #64]	; 0x40
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV6_FLAG_M))
 800b5bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b5be:	8abb      	ldrh	r3, [r7, #20]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d22d      	bcs.n	800b620 <ipv6ParseFragmentHeader+0x2e8>
 800b5c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d028      	beq.n	800b620 <ipv6ParseFragmentHeader+0x2e8>
         {
            //Create a new entry that describes this hole
            hole = ipv6FindHole(frag, dataLast);
 800b5ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5d4:	f000 f9cf 	bl	800b976 <ipv6FindHole>
 800b5d8:	6478      	str	r0, [r7, #68]	; 0x44
            hole->first = dataLast;
 800b5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b5de:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 800b5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5e2:	8aba      	ldrh	r2, [r7, #20]
 800b5e4:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800b5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00a      	beq.n	800b602 <ipv6ParseFragmentHeader+0x2ca>
            {
               hole->next = prevHole->next;
 800b5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ee:	889b      	ldrh	r3, [r3, #4]
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f4:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800b5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5fe:	809a      	strh	r2, [r3, #4]
 800b600:	e008      	b.n	800b614 <ipv6ParseFragmentHeader+0x2dc>
            }
            else
            {
               hole->next = frag->firstHole;
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	8a1a      	ldrh	r2, [r3, #16]
 800b606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b608:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800b60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29a      	uxth	r2, r3
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	821a      	strh	r2, [r3, #16]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800b614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b616:	643b      	str	r3, [r7, #64]	; 0x40
         if(dataLast < holeLast && (offset & IPV6_FLAG_M))
 800b618:	e002      	b.n	800b620 <ipv6ParseFragmentHeader+0x2e8>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 800b61a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61c:	643b      	str	r3, [r7, #64]	; 0x40
 800b61e:	e000      	b.n	800b622 <ipv6ParseFragmentHeader+0x2ea>
         if(dataLast < holeLast && (offset & IPV6_FLAG_M))
 800b620:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv6FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 800b622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <ipv6ParseFragmentHeader+0x2f8>
 800b628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62a:	889b      	ldrh	r3, [r3, #4]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	e001      	b.n	800b634 <ipv6ParseFragmentHeader+0x2fc>
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	8a1b      	ldrh	r3, [r3, #16]
 800b634:	4619      	mov	r1, r3
 800b636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b638:	f000 f99d 	bl	800b976 <ipv6FindHole>
 800b63c:	6478      	str	r0, [r7, #68]	; 0x44
   while(hole != NULL)
 800b63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b640:	2b00      	cmp	r3, #0
 800b642:	f47f af70 	bne.w	800b526 <ipv6ParseFragmentHeader+0x1ee>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferCopy((NetBuffer *) &frag->buffer, frag->unfragPartLength + dataFirst,
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	f103 0014 	add.w	r0, r3, #20
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b652:	18d1      	adds	r1, r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	f103 0208 	add.w	r2, r3, #8
 800b65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	4613      	mov	r3, r2
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	f005 fb22 	bl	8010caa <netBufferCopy>
      ipPacket, fragHeaderOffset + sizeof(Ipv6FragmentHeader), length);

   //Dump hole descriptor list
   ipv6DumpHoleList(frag);
 800b666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b668:	f000 f99a 	bl	800b9a0 <ipv6DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now complete
   if(!ipv6FindHole(frag, frag->firstHole))
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	8a1b      	ldrh	r3, [r3, #16]
 800b670:	4619      	mov	r1, r3
 800b672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b674:	f000 f97f 	bl	800b976 <ipv6FindHole>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d13d      	bne.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
   {
      //Discard the extra hole descriptor that follows the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	f103 0014 	add.w	r0, r3, #20
         frag->unfragPartLength + frag->fragPartLength);
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	68db      	ldr	r3, [r3, #12]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b68c:	4413      	add	r3, r2
 800b68e:	4619      	mov	r1, r3
 800b690:	f005 f997 	bl	80109c2 <netBufferSetLength>
 800b694:	4603      	mov	r3, r0
 800b696:	83fb      	strh	r3, [r7, #30]

      //Check status code
      if(error)
 800b698:	8bfb      	ldrh	r3, [r7, #30]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d11f      	bne.n	800b6de <ipv6ParseFragmentHeader+0x3a6>
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IPv6 header
         Ipv6Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	3314      	adds	r3, #20
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f005 fa32 	bl	8010b0e <netBufferAt>
 800b6aa:	61b8      	str	r0, [r7, #24]

         //Fix the Payload Length field
         datagram->payloadLen = htons(frag->unfragPartLength +
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	4413      	add	r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	3b28      	subs	r3, #40	; 0x28
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7f5 fc07 	bl	8000ed4 <swapInt16>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	809a      	strh	r2, [r3, #4]
         //Number of IP datagrams successfully reassembled
         IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv6 datagram to the higher protocol layer
         ipv6ProcessPacket(interface, (NetBuffer *) &frag->buffer, 0, ancillary);
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	f103 0114 	add.w	r1, r3, #20
 800b6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7fe fe7d 	bl	800a3d8 <ipv6ProcessPacket>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	3314      	adds	r3, #20
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f005 f96c 	bl	80109c2 <netBufferSetLength>
 800b6ea:	e006      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      return;
 800b6ec:	bf00      	nop
 800b6ee:	e004      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      return;
 800b6f0:	bf00      	nop
 800b6f2:	e002      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      return;
 800b6f4:	bf00      	nop
 800b6f6:	e000      	b.n	800b6fa <ipv6ParseFragmentHeader+0x3c2>
      return;
 800b6f8:	bf00      	nop
   }
}
 800b6fa:	3748      	adds	r7, #72	; 0x48
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <ipv6FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv6FragTick(NetInterface *interface)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv6HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 800b708:	f7f5 fdca 	bl	80012a0 <osGetSystemTime>
 800b70c:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b70e:	2300      	movs	r3, #0
 800b710:	61fb      	str	r3, [r7, #28]
 800b712:	e04e      	b.n	800b7b2 <ipv6FragTick+0xb2>
   {
      //Point to the current entry in the reassembly queue
      Ipv6FragDesc *frag = &interface->ipv6Context.fragQueue[i];
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	2254      	movs	r2, #84	; 0x54
 800b718:	fb02 f303 	mul.w	r3, r2, r3
 800b71c:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	4413      	add	r3, r2
 800b724:	3308      	adds	r3, #8
 800b726:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d03d      	beq.n	800b7ac <ipv6FragTick+0xac>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMPv6 Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV6_FRAG_TIME_TO_LIVE)
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	f643 2297 	movw	r2, #14999	; 0x3a97
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d935      	bls.n	800b7ac <ipv6FragTick+0xac>
         {
            //Debug message
            TRACE_INFO("IPv6 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv6DumpHeader(frag->buffer.chunk[0].address);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fd5b 	bl	800b200 <ipv6DumpHeader>
            //Number of failures detected by the IP reassembly algorithm
            IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv6FindHole(frag, frag->firstHole);
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	8a1b      	ldrh	r3, [r3, #16]
 800b74e:	4619      	mov	r1, r3
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f000 f910 	bl	800b976 <ipv6FindHole>
 800b756:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received
            //before sending an ICMPv6 message
            if(hole != NULL && hole->first > 0)
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d020      	beq.n	800b7a0 <ipv6FragTick+0xa0>
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01b      	beq.n	800b7a0 <ipv6FragTick+0xa0>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f103 0014 	add.w	r0, r3, #20
                  frag->unfragPartLength + hole->first);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	8812      	ldrh	r2, [r2, #0]
 800b776:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b778:	4413      	add	r3, r2
 800b77a:	4619      	mov	r1, r3
 800b77c:	f005 f921 	bl	80109c2 <netBufferSetLength>
 800b780:	4603      	mov	r3, r0
 800b782:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <ipv6FragTick+0xa0>
               {
                  //Send an ICMPv6 Time Exceeded message
                  icmpv6SendErrorMessage(interface, ICMPV6_TYPE_TIME_EXCEEDED,
                     ICMPV6_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	3314      	adds	r3, #20
                  icmpv6SendErrorMessage(interface, ICMPV6_TYPE_TIME_EXCEEDED,
 800b78e:	2200      	movs	r2, #0
 800b790:	9201      	str	r2, [sp, #4]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	2300      	movs	r3, #0
 800b796:	2201      	movs	r2, #1
 800b798:	2103      	movs	r1, #3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fc fc1c 	bl	8007fd8 <icmpv6SendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	3314      	adds	r3, #20
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f005 f90b 	bl	80109c2 <netBufferSetLength>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d9ad      	bls.n	800b714 <ipv6FragTick+0x14>
         }
      }
   }
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <ipv6SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv6FragDesc *ipv6SearchFragQueue(NetInterface *interface,
   Ipv6Header *packet, Ipv6FragmentHeader *header)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b08a      	sub	sp, #40	; 0x28
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
   Ipv6Header *datagram;
   Ipv6FragDesc *frag;
   Ipv6HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d2:	e03c      	b.n	800b84e <ipv6SearchFragQueue+0x8c>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv6Context.fragQueue[i];
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	2254      	movs	r2, #84	; 0x54
 800b7d8:	fb02 f303 	mul.w	r3, r2, r3
 800b7dc:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	623b      	str	r3, [r7, #32]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d02b      	beq.n	800b848 <ipv6SearchFragQueue+0x86>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	3314      	adds	r3, #20
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f005 f989 	bl	8010b0e <netBufferAt>
 800b7fc:	6178      	str	r0, [r7, #20]

         //Check source and destination addresses
         if(!ipv6CompAddr(&datagram->srcAddr, &packet->srcAddr))
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f103 0008 	add.w	r0, r3, #8
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	3308      	adds	r3, #8
 800b808:	2210      	movs	r2, #16
 800b80a:	4619      	mov	r1, r3
 800b80c:	f012 f82a 	bl	801d864 <memcmp>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d113      	bne.n	800b83e <ipv6SearchFragQueue+0x7c>
            continue;
         if(!ipv6CompAddr(&datagram->destAddr, &packet->destAddr))
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f103 0018 	add.w	r0, r3, #24
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	3318      	adds	r3, #24
 800b820:	2210      	movs	r2, #16
 800b822:	4619      	mov	r1, r3
 800b824:	f012 f81e 	bl	801d864 <memcmp>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d109      	bne.n	800b842 <ipv6SearchFragQueue+0x80>
            continue;
         //Compare fragment identification fields
         if(frag->identification != header->identification)
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	429a      	cmp	r2, r3
 800b838:	d105      	bne.n	800b846 <ipv6SearchFragQueue+0x84>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	e078      	b.n	800b930 <ipv6SearchFragQueue+0x16e>
            continue;
 800b83e:	bf00      	nop
 800b840:	e002      	b.n	800b848 <ipv6SearchFragQueue+0x86>
            continue;
 800b842:	bf00      	nop
 800b844:	e000      	b.n	800b848 <ipv6SearchFragQueue+0x86>
            continue;
 800b846:	bf00      	nop
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	3301      	adds	r3, #1
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	2b03      	cmp	r3, #3
 800b852:	d9bf      	bls.n	800b7d4 <ipv6SearchFragQueue+0x12>
      }
   }

   //If the current packet does not match an existing entry
   //in the reassembly queue, then create a new entry
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b854:	2300      	movs	r3, #0
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
 800b858:	e066      	b.n	800b928 <ipv6SearchFragQueue+0x166>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv6Context.fragQueue[i];
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2254      	movs	r2, #84	; 0x54
 800b85e:	fb02 f303 	mul.w	r3, r2, r3
 800b862:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	4413      	add	r3, r2
 800b86a:	3308      	adds	r3, #8
 800b86c:	623b      	str	r3, [r7, #32]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d155      	bne.n	800b922 <ipv6SearchFragQueue+0x160>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	2207      	movs	r2, #7
 800b87a:	619a      	str	r2, [r3, #24]

         //Allocate sufficient memory to hold the IPv6 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	3314      	adds	r3, #20
 800b880:	f240 6106 	movw	r1, #1542	; 0x606
 800b884:	4618      	mov	r0, r3
 800b886:	f005 f89c 	bl	80109c2 <netBufferSetLength>
 800b88a:	4603      	mov	r3, r0
 800b88c:	83fb      	strh	r3, [r7, #30]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv6HoleDesc));

         //Failed to allocate memory?
         if(error)
 800b88e:	8bfb      	ldrh	r3, [r7, #30]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <ipv6SearchFragQueue+0xe2>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	3314      	adds	r3, #20
 800b898:	2100      	movs	r1, #0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f005 f891 	bl	80109c2 <netBufferSetLength>
            //Exit immediately
            return NULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e045      	b.n	800b930 <ipv6SearchFragQueue+0x16e>
         }

         //Initial length of the reconstructed datagram
         frag->unfragPartLength = sizeof(Ipv6Header);
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	2228      	movs	r2, #40	; 0x28
 800b8a8:	609a      	str	r2, [r3, #8]
         frag->fragPartLength = 0;
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	60da      	str	r2, [r3, #12]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->unfragPartLength;
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	841a      	strh	r2, [r3, #32]
         //Copy IPv6 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->unfragPartLength);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f103 0014 	add.w	r0, r3, #20
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	f005 faec 	bl	8010ea4 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 800b8cc:	f7f5 fce8 	bl	80012a0 <osGetSystemTime>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	601a      	str	r2, [r3, #0]
         //Record fragment identification field
         frag->identification = header->identification;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	605a      	str	r2, [r3, #4]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	821a      	strh	r2, [r3, #16]

         //Point to first hole descriptor
         hole = ipv6FindHole(frag, frag->firstHole);
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	8a1b      	ldrh	r3, [r3, #16]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6a38      	ldr	r0, [r7, #32]
 800b8ec:	f000 f843 	bl	800b976 <ipv6FindHole>
 800b8f0:	61b8      	str	r0, [r7, #24]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	705a      	strb	r2, [r3, #1]
         hole->last = IPV6_INFINITY;
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b902:	709a      	strb	r2, [r3, #2]
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	70da      	strb	r2, [r3, #3]
         hole->next = IPV6_INFINITY;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	711a      	strb	r2, [r3, #4]
 800b912:	f04f 32ff 	mov.w	r2, #4294967295
 800b916:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv6DumpHoleList(frag);
 800b918:	6a38      	ldr	r0, [r7, #32]
 800b91a:	f000 f841 	bl	800b9a0 <ipv6DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	e006      	b.n	800b930 <ipv6SearchFragQueue+0x16e>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	3301      	adds	r3, #1
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d995      	bls.n	800b85a <ipv6SearchFragQueue+0x98>
      }
   }

   //The reassembly queue is full
   return NULL;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3728      	adds	r7, #40	; 0x28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <ipv6FlushFragQueue>:
 * @brief Flush IPv6 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushFragQueue(NetInterface *interface)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b940:	2300      	movs	r3, #0
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e00f      	b.n	800b966 <ipv6FlushFragQueue+0x2e>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv6Context.fragQueue[i].buffer, 0);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2254      	movs	r2, #84	; 0x54
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
 800b94e:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4413      	add	r3, r2
 800b956:	330c      	adds	r3, #12
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f005 f831 	bl	80109c2 <netBufferSetLength>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3301      	adds	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d9ec      	bls.n	800b946 <ipv6FlushFragQueue+0xe>
   }
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <ipv6FindHole>:
 * @return A pointer to the hole descriptor is returned if the
 *   specified offset is valid. Otherwise NULL is returned
 **/

Ipv6HoleDesc *ipv6FindHole(Ipv6FragDesc *frag, uint16_t offset)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->unfragPartLength + offset);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f103 0014 	add.w	r0, r3, #20
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	887b      	ldrh	r3, [r7, #2]
 800b98e:	4413      	add	r3, r2
 800b990:	4619      	mov	r1, r3
 800b992:	f005 f8bc 	bl	8010b0e <netBufferAt>
 800b996:	4603      	mov	r3, r0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <ipv6DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv6 fragment descriptor
 **/

void ipv6DumpHoleList(Ipv6FragDesc *frag)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv6FindHole(frag, hole->next);
   }
#endif
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <ipv6SetAddr>:
 **/

error_t ipv6SetAddr(NetInterface *interface, uint_t index,
   const Ipv6Addr *addr, Ipv6AddrState state, systime_t validLifetime,
   systime_t preferredLifetime, bool_t permanent)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b08d      	sub	sp, #52	; 0x34
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	70fb      	strb	r3, [r7, #3]
   NetInterface *physicalInterface;
   Ipv6AddrEntry *entry;
   Ipv6Addr solicitedNodeAddr;

   //Check parameters
   if(interface == NULL || addr == NULL)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <ipv6SetAddr+0x1a>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <ipv6SetAddr+0x1e>
      return ERROR_INVALID_PARAMETER;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e097      	b.n	800bb02 <ipv6SetAddr+0x14e>

   //Make sure that the index is valid
   if(index >= IPV6_ADDR_LIST_SIZE)
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d902      	bls.n	800b9de <ipv6SetAddr+0x2a>
      return ERROR_OUT_OF_RANGE;
 800b9d8:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b9dc:	e091      	b.n	800bb02 <ipv6SetAddr+0x14e>

   //The IPv6 address must be a valid unicast address
   if(ipv6IsMulticastAddr(addr))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2bff      	cmp	r3, #255	; 0xff
 800b9e4:	d101      	bne.n	800b9ea <ipv6SetAddr+0x36>
      return ERROR_INVALID_ADDRESS;
 800b9e6:	23e4      	movs	r3, #228	; 0xe4
 800b9e8:	e08b      	b.n	800bb02 <ipv6SetAddr+0x14e>

   //Initialize status code
   error = NO_ERROR;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f005 fff4 	bl	80119dc <nicGetPhysicalInterface>
 800b9f4:	62b8      	str	r0, [r7, #40]	; 0x28

   //Point to the corresponding entry
   entry = &interface->ipv6Context.addrList[index];
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	4413      	add	r3, r2
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	3304      	adds	r3, #4
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24

   //Check whether an IPv6 address is already assigned
   if(!ipv6CompAddr(&entry->addr, &IPV6_UNSPECIFIED_ADDR))
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	2210      	movs	r2, #16
 800ba10:	493e      	ldr	r1, [pc, #248]	; (800bb0c <ipv6SetAddr+0x158>)
 800ba12:	4618      	mov	r0, r3
 800ba14:	f011 ff26 	bl	801d864 <memcmp>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d019      	beq.n	800ba52 <ipv6SetAddr+0x9e>
   {
      //Check the state of the IPv6 address
      if(entry->state != IPV6_ADDR_STATE_INVALID)
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d015      	beq.n	800ba52 <ipv6SetAddr+0x9e>
      {
         //Ethernet interface?
         if(physicalInterface->nicDriver != NULL &&
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d011      	beq.n	800ba52 <ipv6SetAddr+0x9e>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba32:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d10c      	bne.n	800ba52 <ipv6SetAddr+0x9e>
         {
            //Form the Solicited-Node address
            ipv6ComputeSolicitedNodeAddr(&entry->addr, &solicitedNodeAddr);
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	f107 0214 	add.w	r2, r7, #20
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 fde7 	bl	800c614 <ipv6ComputeSolicitedNodeAddr>
            //Leave the Solicited-Node multicast group
            ipv6LeaveMulticastGroup(interface, &solicitedNodeAddr);
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7ff faf4 	bl	800b03a <ipv6LeaveMulticastGroup>
         }
      }
   }

   //The current IPv6 address is no more valid
   entry->state = IPV6_ADDR_STATE_INVALID;
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	2200      	movs	r2, #0
 800ba56:	741a      	strb	r2, [r3, #16]
   entry->validLifetime = 0;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	619a      	str	r2, [r3, #24]
   entry->preferredLifetime = 0;
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	2200      	movs	r2, #0
 800ba62:	61da      	str	r2, [r3, #28]
   entry->permanent = FALSE;
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	2200      	movs	r2, #0
 800ba68:	621a      	str	r2, [r3, #32]

   //Assign the new IPv6 address
   entry->addr = *addr;
 800ba6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4614      	mov	r4, r2
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	6859      	ldr	r1, [r3, #4]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	c40f      	stmia	r4!, {r0, r1, r2, r3}

   //Check whether the new IPv6 address is valid
   if(!ipv6CompAddr(addr, &IPV6_UNSPECIFIED_ADDR))
 800ba7a:	2210      	movs	r2, #16
 800ba7c:	4923      	ldr	r1, [pc, #140]	; (800bb0c <ipv6SetAddr+0x158>)
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f011 fef0 	bl	801d864 <memcmp>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d03a      	beq.n	800bb00 <ipv6SetAddr+0x14c>
   {
      //Check the state of the IPv6 address
      if(state != IPV6_ADDR_STATE_INVALID)
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01a      	beq.n	800bac6 <ipv6SetAddr+0x112>
      {
         //Ethernet interface?
         if(physicalInterface->nicDriver != NULL &&
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d016      	beq.n	800bac6 <ipv6SetAddr+0x112>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9c:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d10e      	bne.n	800bac0 <ipv6SetAddr+0x10c>
         {
            //Form the Solicited-Node address for the link-local address
            ipv6ComputeSolicitedNodeAddr(addr, &solicitedNodeAddr);
 800baa2:	f107 0314 	add.w	r3, r7, #20
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fdb3 	bl	800c614 <ipv6ComputeSolicitedNodeAddr>
            //Join the Solicited-Node multicast group for each assigned address
            error = ipv6JoinMulticastGroup(interface, &solicitedNodeAddr);
 800baae:	f107 0314 	add.w	r3, r7, #20
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fa41 	bl	800af3c <ipv6JoinMulticastGroup>
 800baba:	4603      	mov	r3, r0
 800babc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800babe:	e002      	b.n	800bac6 <ipv6SetAddr+0x112>
         }
         //6LoWPAN interface?
         else if(interface->nicDriver != NULL &&
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	2b00      	cmp	r3, #0
            //network (refer to RFC 6775 section 5.2)
         }
      }

      //Check status code
      if(!error)
 800bac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d116      	bne.n	800bafa <ipv6SetAddr+0x146>
      {
         //Set the state of the IPv6 address
         entry->state = state;
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	78fa      	ldrb	r2, [r7, #3]
 800bad0:	741a      	strb	r2, [r3, #16]

         //Clear duplicate flag
         entry->duplicate = FALSE;
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	2200      	movs	r2, #0
 800bad6:	615a      	str	r2, [r3, #20]

         //Save preferred and valid lifetimes
         entry->preferredLifetime = preferredLifetime;
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800badc:	61da      	str	r2, [r3, #28]
         entry->validLifetime = validLifetime;
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bae2:	619a      	str	r2, [r3, #24]

         //Set time stamp
         entry->timestamp = osGetSystemTime();
 800bae4:	f7f5 fbdc 	bl	80012a0 <osGetSystemTime>
 800bae8:	4602      	mov	r2, r0
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	625a      	str	r2, [r3, #36]	; 0x24

         //Initialize DAD related variables
         entry->dadTimeout = 0;
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	2200      	movs	r2, #0
 800baf2:	629a      	str	r2, [r3, #40]	; 0x28
         entry->dadRetransmitCount = 0;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	2200      	movs	r2, #0
 800baf8:	62da      	str	r2, [r3, #44]	; 0x2c
      }

      //This flag tells whether the IPv6 address should be permanently assigned
      entry->permanent = permanent;
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bafe:	621a      	str	r2, [r3, #32]
      mdnsResponderStartProbing(interface->mdnsResponderContext);
   }
#endif

   //Return status code
   return error;
 800bb00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3734      	adds	r7, #52	; 0x34
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	08024c2c 	.word	0x08024c2c

0800bb10 <ipv6AddPrefix>:
 **/

void ipv6AddPrefix(NetInterface *interface, const Ipv6Addr *prefix,
   uint_t length, bool_t onLinkFlag, bool_t autonomousFlag,
   uint32_t validLifetime, uint32_t preferredLifetime)
{
 800bb10:	b590      	push	{r4, r7, lr}
 800bb12:	b089      	sub	sp, #36	; 0x24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
   uint_t i;
   Ipv6PrefixEntry *entry;
   Ipv6PrefixEntry *firstFreeEntry;

   //Initialize variables
   entry = NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	61bb      	str	r3, [r7, #24]
   firstFreeEntry = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]

   //Loop through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800bb26:	2300      	movs	r3, #0
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	e029      	b.n	800bb80 <ipv6AddPrefix+0x70>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	222c      	movs	r2, #44	; 0x2c
 800bb30:	fb02 f303 	mul.w	r3, r2, r3
 800bb34:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	61bb      	str	r3, [r7, #24]

      //Valid prefix?
      if(entry->validLifetime)
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00f      	beq.n	800bb68 <ipv6AddPrefix+0x58>
      {
         //Compare prefix length against the specified value
         if(entry->prefixLen == length)
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	7c1b      	ldrb	r3, [r3, #16]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d112      	bne.n	800bb7a <ipv6AddPrefix+0x6a>
         {
            //Check whether the current entry matches the specified prefix
            if(ipv6CompPrefix(&entry->prefix, prefix, length))
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	68b9      	ldr	r1, [r7, #8]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 fc7a 	bl	800c454 <ipv6CompPrefix>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d009      	beq.n	800bb7a <ipv6AddPrefix+0x6a>
               break;
 800bb66:	e00e      	b.n	800bb86 <ipv6AddPrefix+0x76>
         }
      }
      else
      {
         //The IPv6 prefix should be preserved if it has been manually assigned
         if(!entry->permanent)
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d104      	bne.n	800bb7a <ipv6AddPrefix+0x6a>
         {
            //Keep track of the first free entry
            if(firstFreeEntry == NULL)
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <ipv6AddPrefix+0x6a>
               firstFreeEntry = entry;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	617b      	str	r3, [r7, #20]
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	61fb      	str	r3, [r7, #28]
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d9d2      	bls.n	800bb2c <ipv6AddPrefix+0x1c>
         }
      }
   }

   //No matching entry found?
   if(i >= IPV6_PREFIX_LIST_SIZE)
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d901      	bls.n	800bb90 <ipv6AddPrefix+0x80>
      entry = firstFreeEntry;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	61bb      	str	r3, [r7, #24]

   //Update the entry if necessary
   if(entry != NULL)
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d04c      	beq.n	800bc30 <ipv6AddPrefix+0x120>
   {
      //The IPv6 prefix should be preserved if it has been manually assigned
      if(!entry->permanent)
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d148      	bne.n	800bc30 <ipv6AddPrefix+0x120>
      {
         //Save the IPv6 prefix
         entry->prefix = *prefix;
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	4614      	mov	r4, r2
 800bba4:	6818      	ldr	r0, [r3, #0]
 800bba6:	6859      	ldr	r1, [r3, #4]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         entry->prefixLen = length;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	741a      	strb	r2, [r3, #16]

         //Save On-link and Autonomous flags
         entry->onLinkFlag = onLinkFlag;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	615a      	str	r2, [r3, #20]
         entry->autonomousFlag = autonomousFlag;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbc0:	619a      	str	r2, [r3, #24]

         //Check the valid lifetime
         if(validLifetime != NDP_INFINITE_LIFETIME)
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d010      	beq.n	800bbec <ipv6AddPrefix+0xdc>
         {
            //The length of time in seconds that the prefix is valid
            //for the purpose of on-link determination
            if(validLifetime < (MAX_DELAY / 1000))
 800bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbcc:	4a1a      	ldr	r2, [pc, #104]	; (800bc38 <ipv6AddPrefix+0x128>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d807      	bhi.n	800bbe2 <ipv6AddPrefix+0xd2>
               entry->validLifetime = validLifetime * 1000;
 800bbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbd8:	fb02 f203 	mul.w	r2, r2, r3
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	61da      	str	r2, [r3, #28]
 800bbe0:	e008      	b.n	800bbf4 <ipv6AddPrefix+0xe4>
            else
               entry->validLifetime = MAX_DELAY;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bbe8:	61da      	str	r2, [r3, #28]
 800bbea:	e003      	b.n	800bbf4 <ipv6AddPrefix+0xe4>
         }
         else
         {
            //A value of all one bits (0xffffffff) represents infinity
            entry->validLifetime = INFINITE_DELAY;
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf2:	61da      	str	r2, [r3, #28]
         }

         //Check the preferred lifetime
         if(preferredLifetime != NDP_INFINITE_LIFETIME)
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfa:	d010      	beq.n	800bc1e <ipv6AddPrefix+0x10e>
         {
            //The length of time in seconds that addresses generated from the
            //prefix via stateless address autoconfiguration remain preferred
            if(preferredLifetime < (MAX_DELAY / 1000))
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	4a0e      	ldr	r2, [pc, #56]	; (800bc38 <ipv6AddPrefix+0x128>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d807      	bhi.n	800bc14 <ipv6AddPrefix+0x104>
               entry->preferredLifetime = preferredLifetime * 1000;
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc0a:	fb02 f203 	mul.w	r2, r2, r3
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	621a      	str	r2, [r3, #32]
 800bc12:	e008      	b.n	800bc26 <ipv6AddPrefix+0x116>
            else
               entry->preferredLifetime = MAX_DELAY;
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bc1a:	621a      	str	r2, [r3, #32]
 800bc1c:	e003      	b.n	800bc26 <ipv6AddPrefix+0x116>
         }
         else
         {
            //A value of all one bits (0xffffffff) represents infinity
            entry->preferredLifetime = INFINITE_DELAY;
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	621a      	str	r2, [r3, #32]
         }

         //Save current time
         entry->timestamp = osGetSystemTime();
 800bc26:	f7f5 fb3b 	bl	80012a0 <osGetSystemTime>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28
      }
   }
}
 800bc30:	bf00      	nop
 800bc32:	3724      	adds	r7, #36	; 0x24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd90      	pop	{r4, r7, pc}
 800bc38:	0020c49a 	.word	0x0020c49a

0800bc3c <ipv6RemovePrefix>:
 * @param[in] length The number of leading bits in the prefix that are valid
 **/

void ipv6RemovePrefix(NetInterface *interface, const Ipv6Addr *prefix,
   uint_t length)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
   uint_t i;
   Ipv6PrefixEntry *entry;

   //Loop through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	e032      	b.n	800bcb4 <ipv6RemovePrefix+0x78>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	222c      	movs	r2, #44	; 0x2c
 800bc52:	fb02 f303 	mul.w	r3, r2, r3
 800bc56:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	3304      	adds	r3, #4
 800bc60:	613b      	str	r3, [r7, #16]

      //Valid prefix?
      if(entry->validLifetime)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d021      	beq.n	800bcae <ipv6RemovePrefix+0x72>
      {
         //Compare prefix length against the specified value
         if(entry->prefixLen == length)
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	7c1b      	ldrb	r3, [r3, #16]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d11b      	bne.n	800bcae <ipv6RemovePrefix+0x72>
         {
            //Check whether the current entry matches the specified prefix
            if(ipv6CompPrefix(&entry->prefix, prefix, length))
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 fbe9 	bl	800c454 <ipv6CompPrefix>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d012      	beq.n	800bcae <ipv6RemovePrefix+0x72>
            {
               //The IPv6 prefix should be preserved if it has been manually assigned
               if(!entry->permanent)
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10e      	bne.n	800bcae <ipv6RemovePrefix+0x72>
               {
                  //When removing an entry from the Prefix List, there is no need
                  //to purge any entries from the Destination or Neighbor Caches
                  entry->prefix = IPV6_UNSPECIFIED_ADDR;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	4a0c      	ldr	r2, [pc, #48]	; (800bcc4 <ipv6RemovePrefix+0x88>)
 800bc94:	461c      	mov	r4, r3
 800bc96:	4613      	mov	r3, r2
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	6859      	ldr	r1, [r3, #4]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                  entry->prefixLen = 0;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2200      	movs	r2, #0
 800bca6:	741a      	strb	r2, [r3, #16]
                  entry->validLifetime = 0;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	61da      	str	r2, [r3, #28]
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d9c9      	bls.n	800bc4e <ipv6RemovePrefix+0x12>
               }
            }
         }
      }
   }
}
 800bcba:	bf00      	nop
 800bcbc:	bf00      	nop
 800bcbe:	371c      	adds	r7, #28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd90      	pop	{r4, r7, pc}
 800bcc4:	08024c2c 	.word	0x08024c2c

0800bcc8 <ipv6AddDefaultRouter>:
 * @param[in] preference Preference value
 **/

void ipv6AddDefaultRouter(NetInterface *interface, const Ipv6Addr *addr,
   uint16_t lifetime, uint8_t preference)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b089      	sub	sp, #36	; 0x24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	80fb      	strh	r3, [r7, #6]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	717b      	strb	r3, [r7, #5]
   uint_t i;
   Ipv6RouterEntry *entry;
   Ipv6RouterEntry *firstFreeEntry;

   //Initialize variables
   entry = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	61bb      	str	r3, [r7, #24]
   firstFreeEntry = NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]

   //Loop through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800bce6:	2300      	movs	r3, #0
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	e021      	b.n	800bd30 <ipv6AddDefaultRouter+0x68>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	015b      	lsls	r3, r3, #5
 800bcf0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	61bb      	str	r3, [r7, #24]

      //Check the lifetime associated with the default router
      if(entry->lifetime)
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <ipv6AddDefaultRouter+0x50>
      {
         //Check whether the current entry matches the specified router address
         if(ipv6CompAddr(&entry->addr, addr))
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2210      	movs	r2, #16
 800bd08:	68b9      	ldr	r1, [r7, #8]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f011 fdaa 	bl	801d864 <memcmp>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <ipv6AddDefaultRouter+0x62>
            break;
 800bd16:	e00e      	b.n	800bd36 <ipv6AddDefaultRouter+0x6e>
      }
      else
      {
         //The router address should be preserved if it has been manually assigned
         if(!entry->permanent)
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d104      	bne.n	800bd2a <ipv6AddDefaultRouter+0x62>
         {
            //Keep track of the first free entry
            if(firstFreeEntry == NULL)
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <ipv6AddDefaultRouter+0x62>
               firstFreeEntry = entry;
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	617b      	str	r3, [r7, #20]
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	61fb      	str	r3, [r7, #28]
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d9da      	bls.n	800bcec <ipv6AddDefaultRouter+0x24>
         }
      }
   }

   //No matching entry found?
   if(i >= IPV6_ROUTER_LIST_SIZE)
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d901      	bls.n	800bd40 <ipv6AddDefaultRouter+0x78>
      entry = firstFreeEntry;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	61bb      	str	r3, [r7, #24]

   //Update the entry if necessary
   if(entry != NULL)
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d01b      	beq.n	800bd7e <ipv6AddDefaultRouter+0xb6>
   {
      //The router address should be preserved if it has been manually assigned
      if(!entry->permanent)
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d117      	bne.n	800bd7e <ipv6AddDefaultRouter+0xb6>
      {
         //Save the IPv6 address of the router
         entry->addr = *addr;
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4614      	mov	r4, r2
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	6859      	ldr	r1, [r3, #4]
 800bd58:	689a      	ldr	r2, [r3, #8]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         //The lifetime associated with the default router
         entry->lifetime = lifetime * 1000;
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd64:	fb02 f303 	mul.w	r3, r2, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	611a      	str	r2, [r3, #16]
         //Save preference value
         entry->preference = preference;
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	797a      	ldrb	r2, [r7, #5]
 800bd72:	751a      	strb	r2, [r3, #20]
         //Save current time
         entry->timestamp = osGetSystemTime();
 800bd74:	f7f5 fa94 	bl	80012a0 <osGetSystemTime>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	61da      	str	r2, [r3, #28]
      }
   }
}
 800bd7e:	bf00      	nop
 800bd80:	3724      	adds	r7, #36	; 0x24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd90      	pop	{r4, r7, pc}
	...

0800bd88 <ipv6RemoveDefaultRouter>:
 * @param[in] interface Underlying network interface
 * @param[in] addr IPv6 address of the router to be removed from the list
 **/

void ipv6RemoveDefaultRouter(NetInterface *interface, const Ipv6Addr *addr)
{
 800bd88:	b590      	push	{r4, r7, lr}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
   bool_t flag;
   Ipv6RouterEntry *entry;

   //This flag will be set if any entry has been removed from
   //the Default Router List
   flag = FALSE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	613b      	str	r3, [r7, #16]

   //Loop through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	e029      	b.n	800bdf0 <ipv6RemoveDefaultRouter+0x68>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	015b      	lsls	r3, r3, #5
 800bda0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	4413      	add	r3, r2
 800bda8:	3304      	adds	r3, #4
 800bdaa:	60fb      	str	r3, [r7, #12]

      //Check the lifetime associated with the default router
      if(entry->lifetime)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d01a      	beq.n	800bdea <ipv6RemoveDefaultRouter+0x62>
      {
         //Check whether the current entry matches the specified router address
         if(ipv6CompAddr(&entry->addr, addr))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2210      	movs	r2, #16
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f011 fd52 	bl	801d864 <memcmp>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d111      	bne.n	800bdea <ipv6RemoveDefaultRouter+0x62>
         {
            //The router address should be preserved if it has been manually assigned
            if(!entry->permanent)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10d      	bne.n	800bdea <ipv6RemoveDefaultRouter+0x62>
            {
               //Immediately time-out the entry
               entry->addr = IPV6_UNSPECIFIED_ADDR;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	4a0e      	ldr	r2, [pc, #56]	; (800be0c <ipv6RemoveDefaultRouter+0x84>)
 800bdd2:	461c      	mov	r4, r3
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	6859      	ldr	r1, [r3, #4]
 800bdda:	689a      	ldr	r2, [r3, #8]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
               entry->lifetime = 0;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	611a      	str	r2, [r3, #16]

               //Set flag
               flag = TRUE;
 800bde6:	2301      	movs	r3, #1
 800bde8:	613b      	str	r3, [r7, #16]
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	3301      	adds	r3, #1
 800bdee:	617b      	str	r3, [r7, #20]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d9d2      	bls.n	800bd9c <ipv6RemoveDefaultRouter+0x14>
         }
      }
   }

   //Check whether an entry has been removed from the list
   if(flag)
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <ipv6RemoveDefaultRouter+0x7a>
   {
#if (NDP_SUPPORT == ENABLED)
      //When removing a router from the Default Router list, the node must
      //update the Destination Cache in such a way that all entries using
      //the router perform next-hop determination again
      ndpFlushDestCache(interface);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f003 fe74 	bl	800faea <ndpFlushDestCache>
#endif
   }
}
 800be02:	bf00      	nop
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd90      	pop	{r4, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08024c2c 	.word	0x08024c2c

0800be10 <ipv6FlushAddrList>:
 * @brief Flush the list of IPv6 addresses
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushAddrList(NetInterface *interface)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af04      	add	r7, sp, #16
 800be16:	6078      	str	r0, [r7, #4]
   uint_t i;
   Ipv6AddrEntry *entry;

   //Go through the list of IPv6 addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e021      	b.n	800be62 <ipv6FlushAddrList+0x52>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4613      	mov	r3, r2
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	4413      	add	r3, r2
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	4413      	add	r3, r2
 800be30:	3304      	adds	r3, #4
 800be32:	60bb      	str	r3, [r7, #8]

      //Valid IPv6 address?
      if(entry->validLifetime > 0)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00f      	beq.n	800be5c <ipv6FlushAddrList+0x4c>
      {
         //The IPv6 address should be preserved if it has been manually assigned
         if(!entry->permanent)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10b      	bne.n	800be5c <ipv6FlushAddrList+0x4c>
         {
            //The IPv6 address is not longer valid
            ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 800be44:	2300      	movs	r3, #0
 800be46:	9302      	str	r3, [sp, #8]
 800be48:	2300      	movs	r3, #0
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	2300      	movs	r3, #0
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	2300      	movs	r3, #0
 800be52:	4a08      	ldr	r2, [pc, #32]	; (800be74 <ipv6FlushAddrList+0x64>)
 800be54:	68f9      	ldr	r1, [r7, #12]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff fdac 	bl	800b9b4 <ipv6SetAddr>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3301      	adds	r3, #1
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b02      	cmp	r3, #2
 800be66:	d9da      	bls.n	800be1e <ipv6FlushAddrList+0xe>
               IPV6_ADDR_STATE_INVALID, 0, 0, FALSE);
         }
      }
   }
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	08024c2c 	.word	0x08024c2c

0800be78 <ipv6FlushPrefixList>:
 * @brief Flush the Prefix List
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushPrefixList(NetInterface *interface)
{
 800be78:	b490      	push	{r4, r7}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
   uint_t i;
   Ipv6PrefixEntry *entry;

   //Go through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	e023      	b.n	800bece <ipv6FlushPrefixList+0x56>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	222c      	movs	r2, #44	; 0x2c
 800be8a:	fb02 f303 	mul.w	r3, r2, r3
 800be8e:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	3304      	adds	r3, #4
 800be98:	60bb      	str	r3, [r7, #8]

      //Valid IPv6 prefix?
      if(entry->validLifetime > 0)
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d012      	beq.n	800bec8 <ipv6FlushPrefixList+0x50>
      {
         //The IPv6 prefix should be preserved if it has been manually assigned
         if(!entry->permanent)
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10e      	bne.n	800bec8 <ipv6FlushPrefixList+0x50>
         {
            //Remove the entry from the Prefix List
            entry->prefix = IPV6_UNSPECIFIED_ADDR;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	4a0c      	ldr	r2, [pc, #48]	; (800bee0 <ipv6FlushPrefixList+0x68>)
 800beae:	461c      	mov	r4, r3
 800beb0:	4613      	mov	r3, r2
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	6859      	ldr	r1, [r3, #4]
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            entry->prefixLen = 0;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2200      	movs	r2, #0
 800bec0:	741a      	strb	r2, [r3, #16]
            entry->validLifetime = 0;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2200      	movs	r2, #0
 800bec6:	61da      	str	r2, [r3, #28]
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d9d8      	bls.n	800be86 <ipv6FlushPrefixList+0xe>
         }
      }
   }
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc90      	pop	{r4, r7}
 800bede:	4770      	bx	lr
 800bee0:	08024c2c 	.word	0x08024c2c

0800bee4 <ipv6FlushDefaultRouterList>:
 * @brief Flush the Default Router List
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushDefaultRouterList(NetInterface *interface)
{
 800bee4:	b490      	push	{r4, r7}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
   uint_t i;
   Ipv6RouterEntry *entry;

   //Go through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	e01e      	b.n	800bf30 <ipv6FlushDefaultRouterList+0x4c>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	015b      	lsls	r3, r3, #5
 800bef6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	4413      	add	r3, r2
 800befe:	3304      	adds	r3, #4
 800bf00:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->lifetime > 0)
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00f      	beq.n	800bf2a <ipv6FlushDefaultRouterList+0x46>
      {
         //The router address should be preserved if it has been manually assigned
         if(!entry->permanent)
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <ipv6FlushDefaultRouterList+0x46>
         {
            //Clear the current entry
            entry->addr = IPV6_UNSPECIFIED_ADDR;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	4a0b      	ldr	r2, [pc, #44]	; (800bf44 <ipv6FlushDefaultRouterList+0x60>)
 800bf16:	461c      	mov	r4, r3
 800bf18:	4613      	mov	r3, r2
 800bf1a:	6818      	ldr	r0, [r3, #0]
 800bf1c:	6859      	ldr	r1, [r3, #4]
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            //Remove the entry from the Default Router List
            entry->lifetime = 0;
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2200      	movs	r2, #0
 800bf28:	611a      	str	r2, [r3, #16]
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d9dd      	bls.n	800bef2 <ipv6FlushDefaultRouterList+0xe>
         }
      }
   }
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bc90      	pop	{r4, r7}
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	08024c2c 	.word	0x08024c2c

0800bf48 <ipv6FlushDnsServerList>:
 * @brief Flush the list of DNS servers
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushDnsServerList(NetInterface *interface)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
   //Clear the list of DNS servers
   osMemset(interface->ipv6Context.dnsServerList, 0,
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 800bf56:	2220      	movs	r2, #32
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f011 fcb8 	bl	801d8d0 <memset>
      sizeof(interface->ipv6Context.dnsServerList));
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <ipv6CheckSourceAddr>:
 * @param[in] ipAddr Source IPv6 address to be checked
 * @return Error code
 **/

error_t ipv6CheckSourceAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
   //Multicast addresses cannot be used as source address
   if(ipv6IsMulticastAddr(ipAddr))
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2bff      	cmp	r3, #255	; 0xff
 800bf78:	d101      	bne.n	800bf7e <ipv6CheckSourceAddr+0x16>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv6 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 800bf7a:	23e4      	movs	r3, #228	; 0xe4
 800bf7c:	e000      	b.n	800bf80 <ipv6CheckSourceAddr+0x18>
   }

   //The source address is acceptable
   return NO_ERROR;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <ipv6CheckDestAddr>:
 * @param[in] ipAddr Destination IPv6 address to be checked
 * @return Error code
 **/

error_t ipv6CheckDestAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 800bf96:	23e4      	movs	r3, #228	; 0xe4
 800bf98:	83fb      	strh	r3, [r7, #30]

   //Multicast address?
   if(ipv6IsMulticastAddr(ipAddr))
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2bff      	cmp	r3, #255	; 0xff
 800bfa0:	d121      	bne.n	800bfe6 <ipv6CheckDestAddr+0x5a>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61bb      	str	r3, [r7, #24]
 800bfa6:	e01a      	b.n	800bfde <ipv6CheckDestAddr+0x52>
      {
         Ipv6FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv6Context.multicastFilter[i];
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	015b      	lsls	r3, r3, #5
 800bfac:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->refCount > 0)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00b      	beq.n	800bfd8 <ipv6CheckDestAddr+0x4c>
         {
            //Check whether the destination IPv6 address matches
            //a relevant multicast address
            if(ipv6CompAddr(&entry->addr, ipAddr))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f011 fc4c 	bl	801d864 <memcmp>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d102      	bne.n	800bfd8 <ipv6CheckDestAddr+0x4c>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	83fb      	strh	r3, [r7, #30]
               //Stop immediately
               break;
 800bfd6:	e055      	b.n	800c084 <ipv6CheckDestAddr+0xf8>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61bb      	str	r3, [r7, #24]
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	2b07      	cmp	r3, #7
 800bfe2:	d9e1      	bls.n	800bfa8 <ipv6CheckDestAddr+0x1c>
 800bfe4:	e04e      	b.n	800c084 <ipv6CheckDestAddr+0xf8>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv6 unicast addresses
      for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e01d      	b.n	800c028 <ipv6CheckDestAddr+0x9c>
      {
         Ipv6AddrEntry *entry;

         //Point to the current entry
         entry = &interface->ipv6Context.addrList[i];
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	011b      	lsls	r3, r3, #4
 800bff6:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	3304      	adds	r3, #4
 800c000:	617b      	str	r3, [r7, #20]

         //Valid entry?
         if(entry->state != IPV6_ADDR_STATE_INVALID)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	7c1b      	ldrb	r3, [r3, #16]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <ipv6CheckDestAddr+0x96>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(ipv6CompAddr(&entry->addr, ipAddr))
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	2210      	movs	r2, #16
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f011 fc27 	bl	801d864 <memcmp>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d102      	bne.n	800c022 <ipv6CheckDestAddr+0x96>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 800c01c:	2300      	movs	r3, #0
 800c01e:	83fb      	strh	r3, [r7, #30]
               //We are done
               break;
 800c020:	e005      	b.n	800c02e <ipv6CheckDestAddr+0xa2>
      for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	3301      	adds	r3, #1
 800c026:	61bb      	str	r3, [r7, #24]
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d9de      	bls.n	800bfec <ipv6CheckDestAddr+0x60>
            }
         }
      }

      //Check whether the specified is a valid unicast address
      if(error == ERROR_INVALID_ADDRESS)
 800c02e:	8bfb      	ldrh	r3, [r7, #30]
 800c030:	2be4      	cmp	r3, #228	; 0xe4
 800c032:	d127      	bne.n	800c084 <ipv6CheckDestAddr+0xf8>
      {
         Ipv6Addr *anycastAddrList;

         //Point to the list of anycast addresses assigned to the interface
         anycastAddrList = interface->ipv6Context.anycastAddrList;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 800c03a:	613b      	str	r3, [r7, #16]

         //Loop through the list of IPv6 anycast addresses
         for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 800c03c:	2300      	movs	r3, #0
 800c03e:	61bb      	str	r3, [r7, #24]
 800c040:	e01d      	b.n	800c07e <ipv6CheckDestAddr+0xf2>
         {
            //Valid entry?
            if(!ipv6CompAddr(&anycastAddrList[i], &IPV6_UNSPECIFIED_ADDR))
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	4413      	add	r3, r2
 800c04a:	2210      	movs	r2, #16
 800c04c:	4910      	ldr	r1, [pc, #64]	; (800c090 <ipv6CheckDestAddr+0x104>)
 800c04e:	4618      	mov	r0, r3
 800c050:	f011 fc08 	bl	801d864 <memcmp>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00e      	beq.n	800c078 <ipv6CheckDestAddr+0xec>
            {
               //Check whether the destination address matches a valid anycast
               //address assigned to the interface
               if(ipv6CompAddr(&anycastAddrList[i], ipAddr))
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4413      	add	r3, r2
 800c062:	2210      	movs	r2, #16
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f011 fbfc 	bl	801d864 <memcmp>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d102      	bne.n	800c078 <ipv6CheckDestAddr+0xec>
               {
                  //The destination address is acceptable
                  error = NO_ERROR;
 800c072:	2300      	movs	r3, #0
 800c074:	83fb      	strh	r3, [r7, #30]
                  //We are done
                  break;
 800c076:	e005      	b.n	800c084 <ipv6CheckDestAddr+0xf8>
         for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	3301      	adds	r3, #1
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0de      	beq.n	800c042 <ipv6CheckDestAddr+0xb6>
         }
      }
   }

   //Return status code
   return error;
 800c084:	8bfb      	ldrh	r3, [r7, #30]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	08024c2c 	.word	0x08024c2c

0800c094 <ipv6SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv6SelectSourceAddr(NetInterface **interface,
   const Ipv6Addr *destAddr, Ipv6Addr *srcAddr)
{
 800c094:	b5b0      	push	{r4, r5, r7, lr}
 800c096:	b08c      	sub	sp, #48	; 0x30
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv6AddrEntry *currentAddr;
   Ipv6AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ac:	e0bb      	b.n	800c226 <ipv6SelectSourceAddr+0x192>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 800c0b4:	fb02 f303 	mul.w	r3, r2, r3
 800c0b8:	3350      	adds	r3, #80	; 0x50
 800c0ba:	4a6a      	ldr	r2, [pc, #424]	; (800c264 <ipv6SelectSourceAddr+0x1d0>)
 800c0bc:	4413      	add	r3, r2
 800c0be:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d004      	beq.n	800c0d4 <ipv6SelectSourceAddr+0x40>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f040 80a5 	bne.w	800c21e <ipv6SelectSourceAddr+0x18a>
         continue;
      }

      //A sort of the candidate source addresses is being performed, where a
      //set of rules define the ordering among addresses (refer to RFC 6724)
      for(j = 0; j < IPV6_ADDR_LIST_SIZE; j++)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d8:	e09c      	b.n	800c214 <ipv6SelectSourceAddr+0x180>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv6Context.addrList[j];
 800c0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0dc:	4613      	mov	r3, r2
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	4413      	add	r3, r2
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED ||
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	7c1b      	ldrb	r3, [r3, #16]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d004      	beq.n	800c102 <ipv6SelectSourceAddr+0x6e>
            currentAddr->state == IPV6_ADDR_STATE_DEPRECATED)
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	7c1b      	ldrb	r3, [r3, #16]
         if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED ||
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	f040 8086 	bne.w	800c20e <ipv6SelectSourceAddr+0x17a>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <ipv6SelectSourceAddr+0x7e>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800c110:	e07d      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
            }

            //Rule 1: Prefer same address
            if(ipv6CompAddr(&bestAddr->addr, destAddr))
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	2210      	movs	r2, #16
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	4618      	mov	r0, r3
 800c11a:	f011 fba3 	bl	801d864 <memcmp>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d06d      	beq.n	800c200 <ipv6SelectSourceAddr+0x16c>
            {
               //Select the next address in the list
               continue;
            }
            else if(ipv6CompAddr(&currentAddr->addr, destAddr))
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2210      	movs	r2, #16
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f011 fb9a 	bl	801d864 <memcmp>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d104      	bne.n	800c140 <ipv6SelectSourceAddr+0xac>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800c13e:	e066      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
            }

            //Rule 2: Prefer appropriate scope
            if(ipv6GetAddrScope(&currentAddr->addr) < ipv6GetAddrScope(&bestAddr->addr))
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f9ca 	bl	800c4dc <ipv6GetAddrScope>
 800c148:	4604      	mov	r4, r0
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 f9c5 	bl	800c4dc <ipv6GetAddrScope>
 800c152:	4603      	mov	r3, r0
 800c154:	429c      	cmp	r4, r3
 800c156:	d20f      	bcs.n	800c178 <ipv6SelectSourceAddr+0xe4>
            {
               if(ipv6GetAddrScope(&currentAddr->addr) >= ipv6GetAddrScope(destAddr))
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 f9be 	bl	800c4dc <ipv6GetAddrScope>
 800c160:	4604      	mov	r4, r0
 800c162:	68b8      	ldr	r0, [r7, #8]
 800c164:	f000 f9ba 	bl	800c4dc <ipv6GetAddrScope>
 800c168:	4603      	mov	r3, r0
 800c16a:	429c      	cmp	r4, r3
 800c16c:	d34a      	bcc.n	800c204 <ipv6SelectSourceAddr+0x170>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800c176:	e045      	b.n	800c204 <ipv6SelectSourceAddr+0x170>
            }
            else if(ipv6GetAddrScope(&bestAddr->addr) < ipv6GetAddrScope(&currentAddr->addr))
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 f9ae 	bl	800c4dc <ipv6GetAddrScope>
 800c180:	4604      	mov	r4, r0
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f9a9 	bl	800c4dc <ipv6GetAddrScope>
 800c18a:	4603      	mov	r3, r0
 800c18c:	429c      	cmp	r4, r3
 800c18e:	d20f      	bcs.n	800c1b0 <ipv6SelectSourceAddr+0x11c>
            {
               if(ipv6GetAddrScope(&bestAddr->addr) < ipv6GetAddrScope(destAddr))
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f9a2 	bl	800c4dc <ipv6GetAddrScope>
 800c198:	4604      	mov	r4, r0
 800c19a:	68b8      	ldr	r0, [r7, #8]
 800c19c:	f000 f99e 	bl	800c4dc <ipv6GetAddrScope>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	d230      	bcs.n	800c208 <ipv6SelectSourceAddr+0x174>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800c1ae:	e02b      	b.n	800c208 <ipv6SelectSourceAddr+0x174>
            }

            //Rule 3: Avoid deprecated addresses
            if(bestAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	7c1b      	ldrb	r3, [r3, #16]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d103      	bne.n	800c1c0 <ipv6SelectSourceAddr+0x12c>
               currentAddr->state == IPV6_ADDR_STATE_DEPRECATED)
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	7c1b      	ldrb	r3, [r3, #16]
            if(bestAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d025      	beq.n	800c20c <ipv6SelectSourceAddr+0x178>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	7c1b      	ldrb	r3, [r3, #16]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d108      	bne.n	800c1da <ipv6SelectSourceAddr+0x146>
               bestAddr->state == IPV6_ADDR_STATE_DEPRECATED)
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	7c1b      	ldrb	r3, [r3, #16]
            else if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d104      	bne.n	800c1da <ipv6SelectSourceAddr+0x146>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800c1d8:	e019      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
            }

            //Rule 8: Use longest matching prefix
            if(ipv6GetCommonPrefixLength(&currentAddr->addr, destAddr) >
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f9cd 	bl	800c57e <ipv6GetCommonPrefixLength>
 800c1e4:	4604      	mov	r4, r0
               ipv6GetCommonPrefixLength(&bestAddr->addr, destAddr))
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 f9c7 	bl	800c57e <ipv6GetCommonPrefixLength>
 800c1f0:	4603      	mov	r3, r0
            if(ipv6GetCommonPrefixLength(&currentAddr->addr, destAddr) >
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d90b      	bls.n	800c20e <ipv6SelectSourceAddr+0x17a>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	e006      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
               continue;
 800c200:	bf00      	nop
 800c202:	e004      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
               continue;
 800c204:	bf00      	nop
 800c206:	e002      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
               continue;
 800c208:	bf00      	nop
 800c20a:	e000      	b.n	800c20e <ipv6SelectSourceAddr+0x17a>
               continue;
 800c20c:	bf00      	nop
      for(j = 0; j < IPV6_ADDR_LIST_SIZE; j++)
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	3301      	adds	r3, #1
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	2b02      	cmp	r3, #2
 800c218:	f67f af5f 	bls.w	800c0da <ipv6SelectSourceAddr+0x46>
 800c21c:	e000      	b.n	800c220 <ipv6SelectSourceAddr+0x18c>
         continue;
 800c21e:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	3301      	adds	r3, #1
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f43f af40 	beq.w	800c0ae <ipv6SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00e      	beq.n	800c252 <ipv6SelectSourceAddr+0x1be>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a3a      	ldr	r2, [r7, #32]
 800c238:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	4614      	mov	r4, r2
 800c240:	461d      	mov	r5, r3
 800c242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c244:	6020      	str	r0, [r4, #0]
 800c246:	6061      	str	r1, [r4, #4]
 800c248:	60a2      	str	r2, [r4, #8]
 800c24a:	60e3      	str	r3, [r4, #12]

      //Successful source address selection
      error = NO_ERROR;
 800c24c:	2300      	movs	r3, #0
 800c24e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c250:	e002      	b.n	800c258 <ipv6SelectSourceAddr+0x1c4>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 800c252:	f240 13f7 	movw	r3, #503	; 0x1f7
 800c256:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 800c258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3730      	adds	r7, #48	; 0x30
 800c25e:	46bd      	mov	sp, r7
 800c260:	bdb0      	pop	{r4, r5, r7, pc}
 800c262:	bf00      	nop
 800c264:	200046f4 	.word	0x200046f4

0800c268 <ipv6IsOnLink>:
 * @param[in] ipAddr IPv6 address to be checked
 * @return TRUE if the IPv6 address is on-link, else FALSE
 **/

bool_t ipv6IsOnLink(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv6PrefixEntry *entry;

   //Link-local prefix?
   if(ipv6IsLinkLocalUnicastAddr(ipAddr))
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2bfe      	cmp	r3, #254	; 0xfe
 800c278:	d107      	bne.n	800c28a <ipv6IsOnLink+0x22>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c282:	2b80      	cmp	r3, #128	; 0x80
 800c284:	d101      	bne.n	800c28a <ipv6IsOnLink+0x22>
   {
      //The link-local prefix is considered to be on the prefix list with
      //an infinite invalidation timer regardless of whether routers are
      //advertising a prefix for it
      return TRUE;
 800c286:	2301      	movs	r3, #1
 800c288:	e023      	b.n	800c2d2 <ipv6IsOnLink+0x6a>
   }

   //Loop through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	e01c      	b.n	800c2ca <ipv6IsOnLink+0x62>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	222c      	movs	r2, #44	; 0x2c
 800c294:	fb02 f303 	mul.w	r3, r2, r3
 800c298:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	4413      	add	r3, r2
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	60bb      	str	r3, [r7, #8]

      //Valid prefix?
      if(entry->validLifetime > 0)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	69db      	ldr	r3, [r3, #28]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <ipv6IsOnLink+0x5c>
      {
         //Check the specified address against the prefix
         if(ipv6CompPrefix(ipAddr, &entry->prefix, entry->prefixLen))
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	7c1b      	ldrb	r3, [r3, #16]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f000 f8cd 	bl	800c454 <ipv6CompPrefix>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <ipv6IsOnLink+0x5c>
         {
            //The specified IPv6 address is on-link
            return TRUE;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e006      	b.n	800c2d2 <ipv6IsOnLink+0x6a>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d9df      	bls.n	800c290 <ipv6IsOnLink+0x28>
         }
      }
   }

   //The specified IPv6 address is off-link
   return FALSE;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <ipv6IsAnycastAddr>:
 * @param[in] ipAddr IPv6 address to be checked
 * @return TRUE if the IPv6 address is an anycast address, else FALSE
 **/

bool_t ipv6IsAnycastAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv6Addr *anycastAddrList;

   //Point to the list of anycast addresses assigned to the interface
   anycastAddrList = interface->ipv6Context.anycastAddrList;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 800c2ec:	60bb      	str	r3, [r7, #8]

   //Loop through the list of IPv6 anycast addresses
   for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e01c      	b.n	800c32e <ipv6IsAnycastAddr+0x52>
   {
      //Valid entry?
      if(!ipv6CompAddr(&anycastAddrList[i], &IPV6_UNSPECIFIED_ADDR))
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	2210      	movs	r2, #16
 800c2fe:	4910      	ldr	r1, [pc, #64]	; (800c340 <ipv6IsAnycastAddr+0x64>)
 800c300:	4618      	mov	r0, r3
 800c302:	f011 faaf 	bl	801d864 <memcmp>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00d      	beq.n	800c328 <ipv6IsAnycastAddr+0x4c>
      {
         //Check whether the specified address matches a valid anycast
         //address assigned to the interface
         if(ipv6CompAddr(&anycastAddrList[i], ipAddr))
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	011b      	lsls	r3, r3, #4
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	4413      	add	r3, r2
 800c314:	2210      	movs	r2, #16
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f011 faa3 	bl	801d864 <memcmp>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <ipv6IsAnycastAddr+0x4c>
         {
            //The specified IPv6 address is an anycast address
            return TRUE;
 800c324:	2301      	movs	r3, #1
 800c326:	e006      	b.n	800c336 <ipv6IsAnycastAddr+0x5a>
   for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0df      	beq.n	800c2f4 <ipv6IsAnycastAddr+0x18>
         }
      }
   }

   //The specified IPv6 address is not an anycast address
   return FALSE;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	08024c2c 	.word	0x08024c2c

0800c344 <ipv6IsTentativeAddr>:
 * @param[in] ipAddr IPv6 address to be checked
 * @return TRUE if the IPv6 address is a tentative address, else FALSE
 **/

bool_t ipv6IsTentativeAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv6AddrEntry *entry;

   //Loop through the list of IPv6 unicast addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	e01c      	b.n	800c38e <ipv6IsTentativeAddr+0x4a>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	4613      	mov	r3, r2
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4413      	add	r3, r2
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	4413      	add	r3, r2
 800c366:	3304      	adds	r3, #4
 800c368:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	7c1b      	ldrb	r3, [r3, #16]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d10a      	bne.n	800c388 <ipv6IsTentativeAddr+0x44>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(ipv6CompAddr(&entry->addr, ipAddr))
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2210      	movs	r2, #16
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f011 fa73 	bl	801d864 <memcmp>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <ipv6IsTentativeAddr+0x44>
         {
            //The specified IPv6 address is a tentative address
            return TRUE;
 800c384:	2301      	movs	r3, #1
 800c386:	e006      	b.n	800c396 <ipv6IsTentativeAddr+0x52>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3301      	adds	r3, #1
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b02      	cmp	r3, #2
 800c392:	d9df      	bls.n	800c354 <ipv6IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv6 address is not a tentative address
   return FALSE;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <ipv6IsLocalHostAddr>:
 * @return TRUE if the IPv6 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv6IsLocalHostAddr(const Ipv6Addr *ipAddr)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv6AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv6CompAddr(ipAddr, &IPV6_LOOPBACK_ADDR))
 800c3ac:	2210      	movs	r2, #16
 800c3ae:	4927      	ldr	r1, [pc, #156]	; (800c44c <ipv6IsLocalHostAddr+0xac>)
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f011 fa57 	bl	801d864 <memcmp>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <ipv6IsLocalHostAddr+0x22>
   {
      //If an application in a host sends packets to this address, the IPv6
      //stack will loop these packets back on the same virtual interface
      flag = TRUE;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	617b      	str	r3, [r7, #20]
 800c3c0:	e03e      	b.n	800c440 <ipv6IsLocalHostAddr+0xa0>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	e035      	b.n	800c434 <ipv6IsLocalHostAddr+0x94>
      {
         //Point to the current interface
         interface = &netInterface[i];
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
 800c3d2:	3350      	adds	r3, #80	; 0x50
 800c3d4:	4a1e      	ldr	r2, [pc, #120]	; (800c450 <ipv6IsLocalHostAddr+0xb0>)
 800c3d6:	4413      	add	r3, r2
 800c3d8:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV6_ADDR_LIST_SIZE && !flag; j++)
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61bb      	str	r3, [r7, #24]
 800c3de:	e020      	b.n	800c422 <ipv6IsLocalHostAddr+0x82>
         {
            //Point to the current entry
            entry = &interface->ipv6Context.addrList[j];
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4413      	add	r3, r2
 800c3e8:	011b      	lsls	r3, r3, #4
 800c3ea:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	60fb      	str	r3, [r7, #12]

            //Valid entry?
            if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	7c1b      	ldrb	r3, [r3, #16]
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d003      	beq.n	800c406 <ipv6IsLocalHostAddr+0x66>
               entry->state == IPV6_ADDR_STATE_DEPRECATED)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	7c1b      	ldrb	r3, [r3, #16]
            if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 800c402:	2b03      	cmp	r3, #3
 800c404:	d10a      	bne.n	800c41c <ipv6IsLocalHostAddr+0x7c>
            {
               //Check whether the specified IPv6 address matches any address
               //assigned to the host
               if(ipv6CompAddr(&entry->addr, ipAddr))
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2210      	movs	r2, #16
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f011 fa29 	bl	801d864 <memcmp>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <ipv6IsLocalHostAddr+0x7c>
               {
                  flag = TRUE;
 800c418:	2301      	movs	r3, #1
 800c41a:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV6_ADDR_LIST_SIZE && !flag; j++)
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	3301      	adds	r3, #1
 800c420:	61bb      	str	r3, [r7, #24]
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d802      	bhi.n	800c42e <ipv6IsLocalHostAddr+0x8e>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0d8      	beq.n	800c3e0 <ipv6IsLocalHostAddr+0x40>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	3301      	adds	r3, #1
 800c432:	61fb      	str	r3, [r7, #28]
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <ipv6IsLocalHostAddr+0xa0>
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0c3      	beq.n	800c3c8 <ipv6IsLocalHostAddr+0x28>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 800c440:	697b      	ldr	r3, [r7, #20]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3720      	adds	r7, #32
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	08024c3c 	.word	0x08024c3c
 800c450:	200046f4 	.word	0x200046f4

0800c454 <ipv6CompPrefix>:
 * @return TRUE if the prefixes match each other, else FALSE
 **/

bool_t ipv6CompPrefix(const Ipv6Addr *ipAddr1, const Ipv6Addr *ipAddr2,
   size_t length)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
   size_t n;
   size_t m;
   uint8_t mask;

   //Ensure the prefix length is valid
   if(length > 128)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b80      	cmp	r3, #128	; 0x80
 800c464:	d901      	bls.n	800c46a <ipv6CompPrefix+0x16>
      return FALSE;
 800c466:	2300      	movs	r3, #0
 800c468:	e033      	b.n	800c4d2 <ipv6CompPrefix+0x7e>

   //Number of complete bytes
   n = length / 8;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	08db      	lsrs	r3, r3, #3
 800c46e:	61fb      	str	r3, [r7, #28]
   //Number of bits in the last byte, if any
   m = length % 8;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	61bb      	str	r3, [r7, #24]

   //Compare the first part
   if(n > 0)
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d009      	beq.n	800c492 <ipv6CompPrefix+0x3e>
   {
      if(osMemcmp(ipAddr1, ipAddr2, n))
 800c47e:	69fa      	ldr	r2, [r7, #28]
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f011 f9ee 	bl	801d864 <memcmp>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <ipv6CompPrefix+0x3e>
         return FALSE;
 800c48e:	2300      	movs	r3, #0
 800c490:	e01f      	b.n	800c4d2 <ipv6CompPrefix+0x7e>
   }

   //Compare the remaining bits, if any
   if(m > 0)
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d01b      	beq.n	800c4d0 <ipv6CompPrefix+0x7c>
   {
      //Calculate the mask to be applied
      mask = ((1 << m) - 1) << (8 - m);
 800c498:	2201      	movs	r2, #1
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a0:	1e5a      	subs	r2, r3, #1
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	f1c3 0308 	rsb	r3, r3, #8
 800c4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ac:	75fb      	strb	r3, [r7, #23]

      //Check remaining bits
      if((ipAddr1->b[n] & mask) != (ipAddr2->b[n] & mask))
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	781a      	ldrb	r2, [r3, #0]
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	440b      	add	r3, r1
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	4053      	eors	r3, r2
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <ipv6CompPrefix+0x7c>
         return FALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e000      	b.n	800c4d2 <ipv6CompPrefix+0x7e>
   }

   //The prefixes match each other
   return TRUE;
 800c4d0:	2301      	movs	r3, #1
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <ipv6GetAddrScope>:
 * @param[in] ipAddr Pointer to an IPv6 address
 * @return IPv6 address scope
 **/

uint_t ipv6GetAddrScope(const Ipv6Addr *ipAddr)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Multicast address?
   if(ipv6IsMulticastAddr(ipAddr))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2bff      	cmp	r3, #255	; 0xff
 800c4ea:	d104      	bne.n	800c4f6 <ipv6GetAddrScope+0x1a>
   {
      //Retrieve the scope of the multicast address
      scope = ipv6GetMulticastAddrScope(ipAddr);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f831 	bl	800c554 <ipv6GetMulticastAddrScope>
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	e026      	b.n	800c544 <ipv6GetAddrScope+0x68>
   }
   //Loopback address?
   else if(ipv6CompAddr(ipAddr, &IPV6_LOOPBACK_ADDR))
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	4915      	ldr	r1, [pc, #84]	; (800c550 <ipv6GetAddrScope+0x74>)
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f011 f9b2 	bl	801d864 <memcmp>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <ipv6GetAddrScope+0x30>
   {
      //The loopback address may be used by a node to send an IPv6 packet
      //to itself
      scope = IPV6_ADDR_SCOPE_INTERFACE_LOCAL;
 800c506:	2301      	movs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	e01b      	b.n	800c544 <ipv6GetAddrScope+0x68>
   }
   //Link-local unicast address?
   else if(ipv6IsLinkLocalUnicastAddr(ipAddr))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2bfe      	cmp	r3, #254	; 0xfe
 800c512:	d108      	bne.n	800c526 <ipv6GetAddrScope+0x4a>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c51c:	2b80      	cmp	r3, #128	; 0x80
 800c51e:	d102      	bne.n	800c526 <ipv6GetAddrScope+0x4a>
   {
      //A link-local address is for use on a single link
      scope = IPV6_ADDR_SCOPE_LINK_LOCAL;
 800c520:	2302      	movs	r3, #2
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	e00e      	b.n	800c544 <ipv6GetAddrScope+0x68>
   }
   //Site-local unicast address?
   else if(ipv6IsSiteLocalUnicastAddr(ipAddr))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	2bfe      	cmp	r3, #254	; 0xfe
 800c52c:	d108      	bne.n	800c540 <ipv6GetAddrScope+0x64>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	785b      	ldrb	r3, [r3, #1]
 800c532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c536:	2bc0      	cmp	r3, #192	; 0xc0
 800c538:	d102      	bne.n	800c540 <ipv6GetAddrScope+0x64>
   {
      //A site-local address is for use in a single site
      scope = IPV6_ADDR_SCOPE_SITE_LOCAL;
 800c53a:	2305      	movs	r3, #5
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e001      	b.n	800c544 <ipv6GetAddrScope+0x68>
   }
   //Global address?
   else
   {
      //Global scope
      scope = IPV6_ADDR_SCOPE_GLOBAL;
 800c540:	230e      	movs	r3, #14
 800c542:	60fb      	str	r3, [r7, #12]
   }

   //Return the scope of the specified IPv6 address
   return scope;
 800c544:	68fb      	ldr	r3, [r7, #12]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	08024c3c 	.word	0x08024c3c

0800c554 <ipv6GetMulticastAddrScope>:
 * @param[in] ipAddr Pointer to an IPv6 multicast address
 * @return IPv6 address scope
 **/

uint_t ipv6GetMulticastAddrScope(const Ipv6Addr *ipAddr)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //The scope field is a 4-bit value
   scope = ipAddr->b[1] & 0x0F;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	785b      	ldrb	r3, [r3, #1]
 800c560:	f003 030f 	and.w	r3, r3, #15
 800c564:	60fb      	str	r3, [r7, #12]

   //If the scope field contains the reserved value F, an IPv6 packet
   //must be treated the same as packets destined to a global multicast
   //address (refer to RFC 3513 section 2.7)
   if(scope == 0x0F)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b0f      	cmp	r3, #15
 800c56a:	d101      	bne.n	800c570 <ipv6GetMulticastAddrScope+0x1c>
   {
      scope = IPV6_ADDR_SCOPE_GLOBAL;
 800c56c:	230e      	movs	r3, #14
 800c56e:	60fb      	str	r3, [r7, #12]
   }

   //Return the scope of the specified IPv6 multicast address
   return scope;
 800c570:	68fb      	ldr	r3, [r7, #12]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <ipv6GetCommonPrefixLength>:
 * @return The length of the longest common prefix, in bits
 **/

uint_t ipv6GetCommonPrefixLength(const Ipv6Addr *ipAddr1,
   const Ipv6Addr *ipAddr2)
{
 800c57e:	b480      	push	{r7}
 800c580:	b087      	sub	sp, #28
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   uint8_t mask;

   //Clear bit counter
   j = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]

   //Perform a byte-for-byte comparison
   for(i = 0; i < sizeof(Ipv6Addr); i++)
 800c58c:	2300      	movs	r3, #0
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e00c      	b.n	800c5ac <ipv6GetCommonPrefixLength+0x2e>
   {
      //Loop as long as prefixes match
      if(ipAddr1->b[i] != ipAddr2->b[i])
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	4413      	add	r3, r2
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	440b      	add	r3, r1
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d106      	bne.n	800c5b4 <ipv6GetCommonPrefixLength+0x36>
   for(i = 0; i < sizeof(Ipv6Addr); i++)
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2b0f      	cmp	r3, #15
 800c5b0:	d9ef      	bls.n	800c592 <ipv6GetCommonPrefixLength+0x14>
 800c5b2:	e000      	b.n	800c5b6 <ipv6GetCommonPrefixLength+0x38>
      {
         break;
 800c5b4:	bf00      	nop
      }
   }

   //Any mismatch?
   if(i < sizeof(Ipv6Addr))
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b0f      	cmp	r3, #15
 800c5ba:	d820      	bhi.n	800c5fe <ipv6GetCommonPrefixLength+0x80>
   {
      //Perform a bit-for-bit comparison
      for(j = 0; j < 8; j++)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	613b      	str	r3, [r7, #16]
 800c5c0:	e018      	b.n	800c5f4 <ipv6GetCommonPrefixLength+0x76>
      {
         //Calculate the mask to be applied
         mask = 1 << (7 - j);
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f1c3 0307 	rsb	r3, r3, #7
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ce:	73fb      	strb	r3, [r7, #15]

         //Loop as long as prefixes match
         if((ipAddr1->b[i] & mask) != (ipAddr2->b[i] & mask))
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	440b      	add	r3, r1
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	4053      	eors	r3, r2
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d106      	bne.n	800c5fc <ipv6GetCommonPrefixLength+0x7e>
      for(j = 0; j < 8; j++)
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2b07      	cmp	r3, #7
 800c5f8:	d9e3      	bls.n	800c5c2 <ipv6GetCommonPrefixLength+0x44>
 800c5fa:	e000      	b.n	800c5fe <ipv6GetCommonPrefixLength+0x80>
         {
            break;
 800c5fc:	bf00      	nop
      }
   }

   //Return the length of the longest prefix that the two addresses
   //have in common
   return i * 8 + j;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	00da      	lsls	r2, r3, #3
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	4413      	add	r3, r2
}
 800c606:	4618      	mov	r0, r3
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <ipv6ComputeSolicitedNodeAddr>:
 * @return Error code
 **/

error_t ipv6ComputeSolicitedNodeAddr(const Ipv6Addr *ipAddr,
   Ipv6Addr *solicitedNodeAddr)
{
 800c614:	b490      	push	{r4, r7}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
   error_t error;

   //Ensure the specified address is a valid unicast or anycast address
   if(!ipv6IsMulticastAddr(ipAddr))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2bff      	cmp	r3, #255	; 0xff
 800c624:	d018      	beq.n	800c658 <ipv6ComputeSolicitedNodeAddr+0x44>
   {
      //Copy the 104-bit prefix
      ipv6CopyAddr(solicitedNodeAddr, &IPV6_SOLICITED_NODE_ADDR_PREFIX);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	4a0f      	ldr	r2, [pc, #60]	; (800c668 <ipv6ComputeSolicitedNodeAddr+0x54>)
 800c62a:	6814      	ldr	r4, [r2, #0]
 800c62c:	6850      	ldr	r0, [r2, #4]
 800c62e:	6891      	ldr	r1, [r2, #8]
 800c630:	68d2      	ldr	r2, [r2, #12]
 800c632:	601c      	str	r4, [r3, #0]
 800c634:	6058      	str	r0, [r3, #4]
 800c636:	6099      	str	r1, [r3, #8]
 800c638:	60da      	str	r2, [r3, #12]

      //Take the low-order 24 bits of the address (unicast or anycast) and
      //append those bits to the prefix
      solicitedNodeAddr->b[13] = ipAddr->b[13];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7b5a      	ldrb	r2, [r3, #13]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	735a      	strb	r2, [r3, #13]
      solicitedNodeAddr->b[14] = ipAddr->b[14];
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	7b9a      	ldrb	r2, [r3, #14]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	739a      	strb	r2, [r3, #14]
      solicitedNodeAddr->b[15] = ipAddr->b[15];
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7bda      	ldrb	r2, [r3, #15]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	73da      	strb	r2, [r3, #15]

      //Successful processing
      error = NO_ERROR;
 800c652:	2300      	movs	r3, #0
 800c654:	81fb      	strh	r3, [r7, #14]
 800c656:	e001      	b.n	800c65c <ipv6ComputeSolicitedNodeAddr+0x48>
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 800c658:	23e4      	movs	r3, #228	; 0xe4
 800c65a:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800c65c:	89fb      	ldrh	r3, [r7, #14]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bc90      	pop	{r4, r7}
 800c666:	4770      	bx	lr
 800c668:	08024c7c 	.word	0x08024c7c

0800c66c <ipv6MapMulticastAddrToMac>:
 * @param[out] macAddr Corresponding MAC-layer multicast address
 * @return Error code
 **/

error_t ipv6MapMulticastAddrToMac(const Ipv6Addr *ipAddr, MacAddr *macAddr)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
   error_t error;

   //Ensure the specified IPv6 address is a multicast address
   if(ipv6IsMulticastAddr(ipAddr))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2bff      	cmp	r3, #255	; 0xff
 800c67c:	d118      	bne.n	800c6b0 <ipv6MapMulticastAddrToMac+0x44>
   {
      //To support IPv6 multicasting, MAC address range of 33-33-00-00-00-00
      //to 33-33-FF-FF-FF-FF is reserved (refer to RFC 2464)
      macAddr->b[0] = 0x33;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2233      	movs	r2, #51	; 0x33
 800c682:	701a      	strb	r2, [r3, #0]
      macAddr->b[1] = 0x33;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2233      	movs	r2, #51	; 0x33
 800c688:	705a      	strb	r2, [r3, #1]

      //The low-order 32 bits of the IPv6 multicast address are mapped directly
      //to the low-order 32 bits in the MAC-layer multicast address
      macAddr->b[2] = ipAddr->b[12];
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7b1a      	ldrb	r2, [r3, #12]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	709a      	strb	r2, [r3, #2]
      macAddr->b[3] = ipAddr->b[13];
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7b5a      	ldrb	r2, [r3, #13]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	70da      	strb	r2, [r3, #3]
      macAddr->b[4] = ipAddr->b[14];
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	7b9a      	ldrb	r2, [r3, #14]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	711a      	strb	r2, [r3, #4]
      macAddr->b[5] = ipAddr->b[15];
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	7bda      	ldrb	r2, [r3, #15]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	715a      	strb	r2, [r3, #5]

      //The specified IPv6 multicast address was successfully mapped to a
      //MAC-layer address
      error = NO_ERROR;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	81fb      	strh	r3, [r7, #14]
 800c6ae:	e001      	b.n	800c6b4 <ipv6MapMulticastAddrToMac+0x48>
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 800c6b0:	23e4      	movs	r3, #228	; 0xe4
 800c6b2:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800c6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <ipv6GenerateLinkLocalAddr>:
 * @param[in] interfaceId Interface identifier
 * @param[out] ipAddr Corresponding IPv6 link-local address
 **/

void ipv6GenerateLinkLocalAddr(const Eui64 *interfaceId, Ipv6Addr *ipAddr)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
   //A link-local address is formed by combining the well-known link-local
   //prefix fe80::/10 with the interface identifier
   ipAddr->w[0] = HTONS(0xFE80);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f062 0201 	orn	r2, r2, #1
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6dc:	705a      	strb	r2, [r3, #1]
   ipAddr->w[1] = HTONS(0x0000);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	709a      	strb	r2, [r3, #2]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	70da      	strb	r2, [r3, #3]
   ipAddr->w[2] = HTONS(0x0000);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	711a      	strb	r2, [r3, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	715a      	strb	r2, [r3, #5]
   ipAddr->w[3] = HTONS(0x0000);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	719a      	strb	r2, [r3, #6]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	71da      	strb	r2, [r3, #7]
   ipAddr->w[4] = interfaceId->w[0];
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	b29a      	uxth	r2, r3
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	811a      	strh	r2, [r3, #8]
   ipAddr->w[5] = interfaceId->w[1];
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	815a      	strh	r2, [r3, #10]
   ipAddr->w[6] = interfaceId->w[2];
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	889b      	ldrh	r3, [r3, #4]
 800c714:	b29a      	uxth	r2, r3
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	819a      	strh	r2, [r3, #12]
   ipAddr->w[7] = interfaceId->w[3];
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	88db      	ldrh	r3, [r3, #6]
 800c71e:	b29a      	uxth	r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	81da      	strh	r2, [r3, #14]
}
 800c724:	bf00      	nop
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <ipv6UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv6UpdateInStats(NetInterface *interface, const Ipv6Addr *destIpAddr,
   size_t length)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
      IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 800c73c:	bf00      	nop
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <ipv6UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv6UpdateOutStats(NetInterface *interface, const Ipv6Addr *destIpAddr,
   size_t length)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
   //for transmission
   IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <ipv6GetPathMtu>:
 * @param[in] destAddr Destination IPv6 address
 * @return PMTU value
 **/

size_t ipv6GetPathMtu(NetInterface *interface, const Ipv6Addr *destAddr)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]

#if (NDP_SUPPORT == ENABLED)
   NdpDestCacheEntry *entry;

   //Search the Destination Cache for the specified IPv6 address
   entry = ndpFindDestCacheEntry(interface, destAddr);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f003 f993 	bl	800fa98 <ndpFindDestCacheEntry>
 800c772:	60b8      	str	r0, [r7, #8]

   //Check whether a matching entry has been found in the Destination Cache
   if(entry != NULL)
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <ipv6GetPathMtu+0x22>
   {
      //Use the existing PMTU estimate
      pathMtu = entry->pathMtu;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	60fb      	str	r3, [r7, #12]
 800c780:	e003      	b.n	800c78a <ipv6GetPathMtu+0x2a>
   }
   else
   {
      //If no entry exists in the Destination Cache, the PMTU value for
      //the path is assumed to be the MTU of the first-hop link
      pathMtu = interface->ipv6Context.linkMtu;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 3644 	ldr.w	r3, [r3, #1604]	; 0x644
 800c788:	60fb      	str	r3, [r7, #12]
   //The PMTU value for the path is assumed to be the MTU of the first-hop link
   pathMtu = interface->ipv6Context.linkMtu;
#endif

   //Return the PMTU value
   return pathMtu;
 800c78a:	68fb      	ldr	r3, [r7, #12]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <ipv6UpdatePathMtu>:
 * @param[in] tentativePathMtu Tentative PMTU value
 **/

void ipv6UpdatePathMtu(NetInterface *interface,
   const Ipv6Addr *destAddr, size_t tentativePathMtu)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
#if (NDP_SUPPORT == ENABLED)
   NdpDestCacheEntry *entry;

   //The destination address from the original packet is used to determine
   //which path the message applies to
   entry = ndpFindDestCacheEntry(interface, destAddr);
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f003 f978 	bl	800fa98 <ndpFindDestCacheEntry>
 800c7a8:	6178      	str	r0, [r7, #20]

   //Check whether a matching entry has been found in the Destination Cache
   if(entry != NULL)
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <ipv6UpdatePathMtu+0x2c>
   {
      //Compare the tentative PMTU to the existing PMTU
      if(tentativePathMtu < entry->pathMtu)
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d202      	bcs.n	800c7c0 <ipv6UpdatePathMtu+0x2c>
      {
         //If the tentative PMTU is less than the existing PMTU estimate,
         //the tentative PMTU replaces the existing PMTU
         entry->pathMtu = tentativePathMtu;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	621a      	str	r2, [r3, #32]
      }
   }
#endif
}
 800c7c0:	bf00      	nop
 800c7c2:	3718      	adds	r7, #24
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <lan8742Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t lan8742Init(NetInterface *interface)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("Initializing LAN8742...\r\n");
 800c7d0:	f7f4 fc63 	bl	800109a <osSuspendAllTasks>
 800c7d4:	4b29      	ldr	r3, [pc, #164]	; (800c87c <lan8742Init+0xb4>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	2219      	movs	r2, #25
 800c7dc:	2101      	movs	r1, #1
 800c7de:	4828      	ldr	r0, [pc, #160]	; (800c880 <lan8742Init+0xb8>)
 800c7e0:	f010 fdb8 	bl	801d354 <fwrite>
 800c7e4:	f7f4 fc64 	bl	80010b0 <osResumeAllTasks>

   //Undefined PHY address?
   if(interface->phyAddr >= 32)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c7ee:	2b1f      	cmp	r3, #31
 800c7f0:	d903      	bls.n	800c7fa <lan8742Init+0x32>
   {
      //Use the default address
      interface->phyAddr = LAN8742_PHY_ADDR;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   }

   //Initialize serial management interface
   if(interface->smiDriver != NULL)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c800:	2b00      	cmp	r3, #0
 800c802:	d004      	beq.n	800c80e <lan8742Init+0x46>
   {
      interface->smiDriver->init();
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4798      	blx	r3
   }

   //Initialize external interrupt line driver
   if(interface->extIntDriver != NULL)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <lan8742Init+0x56>
   {
      interface->extIntDriver->init();
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4798      	blx	r3
   }

   //Reset PHY transceiver (soft reset)
   lan8742WritePhyReg(interface, LAN8742_BMCR, LAN8742_BMCR_RESET);
 800c81e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c822:	2100      	movs	r1, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f925 	bl	800ca74 <lan8742WritePhyReg>

   //Wait for the reset to complete
   while(lan8742ReadPhyReg(interface, LAN8742_BMCR) & LAN8742_BMCR_RESET)
 800c82a:	bf00      	nop
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f947 	bl	800cac2 <lan8742ReadPhyReg>
 800c834:	4603      	mov	r3, r0
 800c836:	b21b      	sxth	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dbf7      	blt.n	800c82c <lan8742Init+0x64>
   {
   }

   //Restore default auto-negotiation advertisement parameters
   lan8742WritePhyReg(interface, LAN8742_ANAR, LAN8742_ANAR_100BTX_FD |
 800c83c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c840:	2104      	movs	r1, #4
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f916 	bl	800ca74 <lan8742WritePhyReg>
      LAN8742_ANAR_100BTX_HD | LAN8742_ANAR_10BT_FD | LAN8742_ANAR_10BT_HD |
      LAN8742_ANAR_SELECTOR_DEFAULT);

   //Enable auto-negotiation
   lan8742WritePhyReg(interface, LAN8742_BMCR, LAN8742_BMCR_AN_EN);
 800c848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c84c:	2100      	movs	r1, #0
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f910 	bl	800ca74 <lan8742WritePhyReg>

   //Dump PHY registers for debugging purpose
   lan8742DumpPhyReg(interface);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f95c 	bl	800cb12 <lan8742DumpPhyReg>

   //The PHY will generate interrupts when link status changes are detected
   lan8742WritePhyReg(interface, LAN8742_IMR, LAN8742_IMR_AN_COMPLETE |
 800c85a:	2250      	movs	r2, #80	; 0x50
 800c85c:	211e      	movs	r1, #30
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f908 	bl	800ca74 <lan8742WritePhyReg>
      LAN8742_IMR_LINK_DOWN);

   //Force the TCP/IP stack to poll the link state at startup
   interface->phyEvent = TRUE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	679a      	str	r2, [r3, #120]	; 0x78
   //Notify the TCP/IP stack of the event
   osSetEvent(&netEvent);
 800c86a:	4806      	ldr	r0, [pc, #24]	; (800c884 <lan8742Init+0xbc>)
 800c86c:	f7f4 fc53 	bl	8001116 <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20000044 	.word	0x20000044
 800c880:	08024ca8 	.word	0x08024ca8
 800c884:	200046f8 	.word	0x200046f8

0800c888 <lan8742Tick>:
 * @brief LAN8742 timer handler
 * @param[in] interface Underlying network interface
 **/

void lan8742Tick(NetInterface *interface)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
   uint16_t value;
   bool_t linkState;

   //No external interrupt line driver?
   if(interface->extIntDriver == NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c894:	2b00      	cmp	r3, #0
 800c896:	d125      	bne.n	800c8e4 <lan8742Tick+0x5c>
   {
      //Read basic status register
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 800c898:	2101      	movs	r1, #1
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f911 	bl	800cac2 <lan8742ReadPhyReg>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	81fb      	strh	r3, [r7, #14]
      //Retrieve current link state
      linkState = (value & LAN8742_BMSR_LINK_STATUS) ? TRUE : FALSE;
 800c8a4:	89fb      	ldrh	r3, [r7, #14]
 800c8a6:	109b      	asrs	r3, r3, #2
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	60bb      	str	r3, [r7, #8]

      //Link up event?
      if(linkState && !interface->linkState)
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00a      	beq.n	800c8ca <lan8742Tick+0x42>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <lan8742Tick+0x42>
      {
         //Set event flag
         interface->phyEvent = TRUE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	679a      	str	r2, [r3, #120]	; 0x78
         //Notify the TCP/IP stack of the event
         osSetEvent(&netEvent);
 800c8c2:	480a      	ldr	r0, [pc, #40]	; (800c8ec <lan8742Tick+0x64>)
 800c8c4:	f7f4 fc27 	bl	8001116 <osSetEvent>
         interface->phyEvent = TRUE;
         //Notify the TCP/IP stack of the event
         osSetEvent(&netEvent);
      }
   }
}
 800c8c8:	e00c      	b.n	800c8e4 <lan8742Tick+0x5c>
      else if(!linkState && interface->linkState)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d109      	bne.n	800c8e4 <lan8742Tick+0x5c>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <lan8742Tick+0x5c>
         interface->phyEvent = TRUE;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	679a      	str	r2, [r3, #120]	; 0x78
         osSetEvent(&netEvent);
 800c8de:	4803      	ldr	r0, [pc, #12]	; (800c8ec <lan8742Tick+0x64>)
 800c8e0:	f7f4 fc19 	bl	8001116 <osSetEvent>
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	200046f8 	.word	0x200046f8

0800c8f0 <lan8742EnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void lan8742EnableIrq(NetInterface *interface)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
   //Enable PHY transceiver interrupts
   if(interface->extIntDriver != NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <lan8742EnableIrq+0x18>
   {
      interface->extIntDriver->enableIrq();
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	4798      	blx	r3
   }
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <lan8742DisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void lan8742DisableIrq(NetInterface *interface)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
   //Disable PHY transceiver interrupts
   if(interface->extIntDriver != NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <lan8742DisableIrq+0x18>
   {
      interface->extIntDriver->disableIrq();
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	4798      	blx	r3
   }
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <lan8742EventHandler>:
 * @brief LAN8742 event handler
 * @param[in] interface Underlying network interface
 **/

void lan8742EventHandler(NetInterface *interface)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
   uint16_t value;

   //Read status register to acknowledge the interrupt
   value = lan8742ReadPhyReg(interface, LAN8742_ISR);
 800c938:	211d      	movs	r1, #29
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f8c1 	bl	800cac2 <lan8742ReadPhyReg>
 800c940:	4603      	mov	r3, r0
 800c942:	81fb      	strh	r3, [r7, #14]

   //Link status change?
   if((value & (LAN8742_IMR_AN_COMPLETE | LAN8742_IMR_LINK_DOWN)) != 0)
 800c944:	89fb      	ldrh	r3, [r7, #14]
 800c946:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 8086 	beq.w	800ca5c <lan8742EventHandler+0x12c>
   {
      //Any link failure condition is latched in the BMSR register. Reading
      //the register twice will always return the actual link status
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f8b5 	bl	800cac2 <lan8742ReadPhyReg>
 800c958:	4603      	mov	r3, r0
 800c95a:	81fb      	strh	r3, [r7, #14]
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 800c95c:	2101      	movs	r1, #1
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f8af 	bl	800cac2 <lan8742ReadPhyReg>
 800c964:	4603      	mov	r3, r0
 800c966:	81fb      	strh	r3, [r7, #14]

      //Link is up?
      if((value & LAN8742_BMSR_LINK_STATUS) != 0)
 800c968:	89fb      	ldrh	r3, [r7, #14]
 800c96a:	f003 0304 	and.w	r3, r3, #4
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d06e      	beq.n	800ca50 <lan8742EventHandler+0x120>
      {
         //Read PHY special control/status register
         value = lan8742ReadPhyReg(interface, LAN8742_PSCSR);
 800c972:	211f      	movs	r1, #31
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f8a4 	bl	800cac2 <lan8742ReadPhyReg>
 800c97a:	4603      	mov	r3, r0
 800c97c:	81fb      	strh	r3, [r7, #14]

         //Check current operation mode
         switch(value & LAN8742_PSCSR_HCDSPEED)
 800c97e:	89fb      	ldrh	r3, [r7, #14]
 800c980:	f003 031c 	and.w	r3, r3, #28
 800c984:	3b04      	subs	r3, #4
 800c986:	2b14      	cmp	r3, #20
 800c988:	d84c      	bhi.n	800ca24 <lan8742EventHandler+0xf4>
 800c98a:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <lan8742EventHandler+0x60>)
 800c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800ca25 	.word	0x0800ca25
 800c998:	0800ca25 	.word	0x0800ca25
 800c99c:	0800ca25 	.word	0x0800ca25
 800c9a0:	0800ca05 	.word	0x0800ca05
 800c9a4:	0800ca25 	.word	0x0800ca25
 800c9a8:	0800ca25 	.word	0x0800ca25
 800c9ac:	0800ca25 	.word	0x0800ca25
 800c9b0:	0800ca25 	.word	0x0800ca25
 800c9b4:	0800ca25 	.word	0x0800ca25
 800c9b8:	0800ca25 	.word	0x0800ca25
 800c9bc:	0800ca25 	.word	0x0800ca25
 800c9c0:	0800ca25 	.word	0x0800ca25
 800c9c4:	0800ca25 	.word	0x0800ca25
 800c9c8:	0800ca25 	.word	0x0800ca25
 800c9cc:	0800ca25 	.word	0x0800ca25
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	0800ca25 	.word	0x0800ca25
 800c9d8:	0800ca25 	.word	0x0800ca25
 800c9dc:	0800ca25 	.word	0x0800ca25
 800c9e0:	0800ca15 	.word	0x0800ca15
         {
         //10BASE-T half-duplex
         case LAN8742_PSCSR_HCDSPEED_10BT_HD:
            interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a1f      	ldr	r2, [pc, #124]	; (800ca64 <lan8742EventHandler+0x134>)
 800c9e8:	665a      	str	r2, [r3, #100]	; 0x64
            interface->duplexMode = NIC_HALF_DUPLEX_MODE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            break;
 800c9f2:	e024      	b.n	800ca3e <lan8742EventHandler+0x10e>
         //10BASE-T full-duplex
         case LAN8742_PSCSR_HCDSPEED_10BT_FD:
            interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a1b      	ldr	r2, [pc, #108]	; (800ca64 <lan8742EventHandler+0x134>)
 800c9f8:	665a      	str	r2, [r3, #100]	; 0x64
            interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            break;
 800ca02:	e01c      	b.n	800ca3e <lan8742EventHandler+0x10e>
         //100BASE-TX half-duplex
         case LAN8742_PSCSR_HCDSPEED_100BTX_HD:
            interface->linkSpeed = NIC_LINK_SPEED_100MBPS;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a18      	ldr	r2, [pc, #96]	; (800ca68 <lan8742EventHandler+0x138>)
 800ca08:	665a      	str	r2, [r3, #100]	; 0x64
            interface->duplexMode = NIC_HALF_DUPLEX_MODE;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            break;
 800ca12:	e014      	b.n	800ca3e <lan8742EventHandler+0x10e>
         //100BASE-TX full-duplex
         case LAN8742_PSCSR_HCDSPEED_100BTX_FD:
            interface->linkSpeed = NIC_LINK_SPEED_100MBPS;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a14      	ldr	r2, [pc, #80]	; (800ca68 <lan8742EventHandler+0x138>)
 800ca18:	665a      	str	r2, [r3, #100]	; 0x64
            interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            break;
 800ca22:	e00c      	b.n	800ca3e <lan8742EventHandler+0x10e>
         //Unknown operation mode
         default:
            //Debug message
            TRACE_WARNING("Invalid operation mode!\r\n");
 800ca24:	f7f4 fb39 	bl	800109a <osSuspendAllTasks>
 800ca28:	4b10      	ldr	r3, [pc, #64]	; (800ca6c <lan8742EventHandler+0x13c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	2219      	movs	r2, #25
 800ca30:	2101      	movs	r1, #1
 800ca32:	480f      	ldr	r0, [pc, #60]	; (800ca70 <lan8742EventHandler+0x140>)
 800ca34:	f010 fc8e 	bl	801d354 <fwrite>
 800ca38:	f7f4 fb3a 	bl	80010b0 <osResumeAllTasks>
            break;
 800ca3c:	bf00      	nop
         }

         //Update link state
         interface->linkState = TRUE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	661a      	str	r2, [r3, #96]	; 0x60

         //Adjust MAC configuration parameters for proper operation
         interface->nicDriver->updateMacConfig(interface);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	4798      	blx	r3
 800ca4e:	e002      	b.n	800ca56 <lan8742EventHandler+0x126>
      }
      else
      {
         //Update link state
         interface->linkState = FALSE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	661a      	str	r2, [r3, #96]	; 0x60
      }

      //Process link state change event
      nicNotifyLinkChange(interface);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f005 f8ca 	bl	8011bf0 <nicNotifyLinkChange>
   }
}
 800ca5c:	bf00      	nop
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	00989680 	.word	0x00989680
 800ca68:	05f5e100 	.word	0x05f5e100
 800ca6c:	20000044 	.word	0x20000044
 800ca70:	08024cc4 	.word	0x08024cc4

0800ca74 <lan8742WritePhyReg>:
 * @param[in] data Register value
 **/

void lan8742WritePhyReg(NetInterface *interface, uint8_t address,
   uint16_t data)
{
 800ca74:	b590      	push	{r4, r7, lr}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
 800ca80:	4613      	mov	r3, r2
 800ca82:	803b      	strh	r3, [r7, #0]
   //Write the specified PHY register
   if(interface->smiDriver != NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <lan8742WritePhyReg+0x32>
   {
      interface->smiDriver->writePhyReg(SMI_OPCODE_WRITE,
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca94:	685c      	ldr	r4, [r3, #4]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800ca9c:	883b      	ldrh	r3, [r7, #0]
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	2001      	movs	r0, #1
 800caa2:	47a0      	blx	r4
   else
   {
      interface->nicDriver->writePhyReg(SMI_OPCODE_WRITE,
         interface->phyAddr, address, data);
   }
}
 800caa4:	e009      	b.n	800caba <lan8742WritePhyReg+0x46>
      interface->nicDriver->writePhyReg(SMI_OPCODE_WRITE,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caaa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800cab2:	883b      	ldrh	r3, [r7, #0]
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	2001      	movs	r0, #1
 800cab8:	47a0      	blx	r4
}
 800caba:	bf00      	nop
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd90      	pop	{r4, r7, pc}

0800cac2 <lan8742ReadPhyReg>:
 * @param[in] address PHY register address
 * @return Register value
 **/

uint16_t lan8742ReadPhyReg(NetInterface *interface, uint8_t address)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	460b      	mov	r3, r1
 800cacc:	70fb      	strb	r3, [r7, #3]
   uint16_t data;

   //Read the specified PHY register
   if(interface->smiDriver != NULL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00c      	beq.n	800caf2 <lan8742ReadPhyReg+0x30>
   {
      data = interface->smiDriver->readPhyReg(SMI_OPCODE_READ,
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800cae6:	78fa      	ldrb	r2, [r7, #3]
 800cae8:	2002      	movs	r0, #2
 800caea:	4798      	blx	r3
 800caec:	4603      	mov	r3, r0
 800caee:	81fb      	strh	r3, [r7, #14]
 800caf0:	e00a      	b.n	800cb08 <lan8742ReadPhyReg+0x46>
         interface->phyAddr, address);
   }
   else
   {
      data = interface->nicDriver->readPhyReg(SMI_OPCODE_READ,
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800cafe:	78fa      	ldrb	r2, [r7, #3]
 800cb00:	2002      	movs	r0, #2
 800cb02:	4798      	blx	r3
 800cb04:	4603      	mov	r3, r0
 800cb06:	81fb      	strh	r3, [r7, #14]
         interface->phyAddr, address);
   }

   //Return the value of the PHY register
   return data;
 800cb08:	89fb      	ldrh	r3, [r7, #14]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <lan8742DumpPhyReg>:
 * @brief Dump PHY registers for debugging purpose
 * @param[in] interface Underlying network interface
 **/

void lan8742DumpPhyReg(NetInterface *interface)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b085      	sub	sp, #20
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
   uint8_t i;

   //Loop through PHY registers
   for(i = 0; i < 32; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	73fb      	strb	r3, [r7, #15]
 800cb1e:	e002      	b.n	800cb26 <lan8742DumpPhyReg+0x14>
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	3301      	adds	r3, #1
 800cb24:	73fb      	strb	r3, [r7, #15]
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2b1f      	cmp	r3, #31
 800cb2a:	d9f9      	bls.n	800cb20 <lan8742DumpPhyReg+0xe>
         lan8742ReadPhyReg(interface, i));
   }

   //Terminate with a line feed
   TRACE_DEBUG("\r\n");
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
	...

0800cb3c <llmnrResponderInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t llmnrResponderInit(NetInterface *interface)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Join the LLMNR IPv4 multicast group
   error = ipv4JoinMulticastGroup(interface, LLMNR_IPV4_MULTICAST_ADDR);
 800cb44:	4914      	ldr	r1, [pc, #80]	; (800cb98 <llmnrResponderInit+0x5c>)
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7fc fb76 	bl	8009238 <ipv4JoinMulticastGroup>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 800cb50:	89fb      	ldrh	r3, [r7, #14]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <llmnrResponderInit+0x1e>
      return error;
 800cb56:	89fb      	ldrh	r3, [r7, #14]
 800cb58:	e019      	b.n	800cb8e <llmnrResponderInit+0x52>
#endif

#if (IPV6_SUPPORT == ENABLED)
   //Join the LLMNR IPv6 multicast group
   error = ipv6JoinMulticastGroup(interface, &LLMNR_IPV6_MULTICAST_ADDR);
 800cb5a:	4910      	ldr	r1, [pc, #64]	; (800cb9c <llmnrResponderInit+0x60>)
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7fe f9ed 	bl	800af3c <ipv6JoinMulticastGroup>
 800cb62:	4603      	mov	r3, r0
 800cb64:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 800cb66:	89fb      	ldrh	r3, [r7, #14]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <llmnrResponderInit+0x34>
      return error;
 800cb6c:	89fb      	ldrh	r3, [r7, #14]
 800cb6e:	e00e      	b.n	800cb8e <llmnrResponderInit+0x52>
#endif

   //LLMNR responders must listen on UDP port 5355
   error = udpAttachRxCallback(interface, LLMNR_PORT, llmnrProcessQuery,
 800cb70:	2300      	movs	r3, #0
 800cb72:	4a0b      	ldr	r2, [pc, #44]	; (800cba0 <llmnrResponderInit+0x64>)
 800cb74:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f00b fc0b 	bl	8018394 <udpAttachRxCallback>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	81fb      	strh	r3, [r7, #14]
      NULL);
   //Any error to report?
   if(error)
 800cb82:	89fb      	ldrh	r3, [r7, #14]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <llmnrResponderInit+0x50>
      return error;
 800cb88:	89fb      	ldrh	r3, [r7, #14]
 800cb8a:	e000      	b.n	800cb8e <llmnrResponderInit+0x52>

   //Successful initialization
   return NO_ERROR;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	fc0000e0 	.word	0xfc0000e0
 800cb9c:	08024ce0 	.word	0x08024ce0
 800cba0:	0800cba5 	.word	0x0800cba5

0800cba4 <llmnrProcessQuery>:

void llmnrProcessQuery(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 800cba4:	b5b0      	push	{r4, r5, r7, lr}
 800cba6:	b092      	sub	sp, #72	; 0x48
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
 800cbb0:	603b      	str	r3, [r7, #0]
   IpAddr destIpAddr;
   LlmnrHeader *message;
   DnsQuestion *question;

   //Retrieve the length of the LLMNR message
   length = netBufferGetLength(buffer) - offset;
 800cbb2:	6838      	ldr	r0, [r7, #0]
 800cbb4:	f003 fee3 	bl	801097e <netBufferGetLength>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Ensure the LLMNR message is valid
   if(length < sizeof(LlmnrHeader))
 800cbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc2:	2b0b      	cmp	r3, #11
 800cbc4:	f240 80be 	bls.w	800cd44 <llmnrProcessQuery+0x1a0>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 800cbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbce:	f200 80bb 	bhi.w	800cd48 <llmnrProcessQuery+0x1a4>
      return;

   //Point to the LLMNR message header
   message = netBufferAt(buffer, offset);
 800cbd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbd4:	6838      	ldr	r0, [r7, #0]
 800cbd6:	f003 ff9a 	bl	8010b0e <netBufferAt>
 800cbda:	63b8      	str	r0, [r7, #56]	; 0x38
   //Sanity check
   if(message == NULL)
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f000 80b4 	beq.w	800cd4c <llmnrProcessQuery+0x1a8>
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 query received?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b0c      	cmp	r3, #12
 800cbea:	d10c      	bne.n	800cc06 <llmnrProcessQuery+0x62>
   {
      //Unicast UDP queries must be silently discarded (refer to RFC 4795,
      //section 2.4)
      if(!ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf4:	2be0      	cmp	r3, #224	; 0xe0
 800cbf6:	f040 80ab 	bne.w	800cd50 <llmnrProcessQuery+0x1ac>
         return;

      //A responder responds to a multicast query by sending a unicast UDP
      //response to the sender (refer to RFC 4795, section 2)
      destIpAddr.length = sizeof(Ipv4Addr);
 800cbfa:	2304      	movs	r3, #4
 800cbfc:	617b      	str	r3, [r7, #20]
      destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	e012      	b.n	800cc2c <llmnrProcessQuery+0x88>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 query received?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b28      	cmp	r3, #40	; 0x28
 800cc0c:	f040 80a2 	bne.w	800cd54 <llmnrProcessQuery+0x1b0>
   {
      //Unicast UDP queries must be silently discarded (refer to RFC 4795,
      //section 2.4)
      if(!ipv6IsMulticastAddr(&pseudoHeader->ipv6Data.destAddr))
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	7d1b      	ldrb	r3, [r3, #20]
 800cc14:	2bff      	cmp	r3, #255	; 0xff
 800cc16:	f040 809f 	bne.w	800cd58 <llmnrProcessQuery+0x1b4>
         return;

      //A responder responds to a multicast query by sending a unicast UDP
      //response to the sender (refer to RFC 4795, section 2)
      destIpAddr.length = sizeof(Ipv6Addr);
 800cc1a:	2310      	movs	r3, #16
 800cc1c:	617b      	str	r3, [r7, #20]
      destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f107 0418 	add.w	r4, r7, #24
 800cc24:	3304      	adds	r3, #4
 800cc26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      //Discard the LLMNR query message
      return;
   }

   //Discard LLMNR responses received on port 5355
   if(message->qr)
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	789b      	ldrb	r3, [r3, #2]
 800cc30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 8090 	bne.w	800cd5c <llmnrProcessQuery+0x1b8>
      return;

   //LLMNR messages received with an opcode other than zero must be silently
   //ignored
   if(message->opcode != DNS_OPCODE_QUERY)
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	789b      	ldrb	r3, [r3, #2]
 800cc40:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 808a 	bne.w	800cd60 <llmnrProcessQuery+0x1bc>
      return;

   //LLMNR messages received with non-zero response codes must be silently
   //ignored
   if(message->rcode != DNS_RCODE_NO_ERROR)
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	78db      	ldrb	r3, [r3, #3]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f040 8084 	bne.w	800cd64 <llmnrProcessQuery+0x1c0>
      return;

   //LLMNR responders must silently discard LLMNR queries with QDCOUNT not
   //equal to one (refer to RFC 4795, section 2.1.1)
   if(ntohs(message->qdcount) != 1)
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	889b      	ldrh	r3, [r3, #4]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f4 f936 	bl	8000ed4 <swapInt16>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d17c      	bne.n	800cd68 <llmnrProcessQuery+0x1c4>
      return;

   //LLMNR responders must silently discard LLMNR queries with ANCOUNT or
   //NSCOUNT not equal to zero
   if(ntohs(message->ancount) != 0 || ntohs(message->nscount) != 0)
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	88db      	ldrh	r3, [r3, #6]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7f4 f92d 	bl	8000ed4 <swapInt16>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d175      	bne.n	800cd6c <llmnrProcessQuery+0x1c8>
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	891b      	ldrh	r3, [r3, #8]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f4 f924 	bl	8000ed4 <swapInt16>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d16c      	bne.n	800cd6c <llmnrProcessQuery+0x1c8>
      return;

   //Point to the first question
   pos = sizeof(LlmnrHeader);
 800cc92:	230c      	movs	r3, #12
 800cc94:	637b      	str	r3, [r7, #52]	; 0x34

   //Parse resource record name
   n = dnsParseName((DnsHeader *) message, length, pos, NULL, 0);
 800cc96:	2300      	movs	r3, #0
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cca2:	f7f8 fbfc 	bl	800549e <dnsParseName>
 800cca6:	6338      	str	r0, [r7, #48]	; 0x30
   //Invalid name?
   if(n == 0)
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d060      	beq.n	800cd70 <llmnrProcessQuery+0x1cc>
      return;

   //Malformed LLMNR message?
   if((n + sizeof(DnsQuestion)) > length)
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d35d      	bcc.n	800cd74 <llmnrProcessQuery+0x1d0>
      return;

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, n);
 800ccb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	4413      	add	r3, r2
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Check the class of the query
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	885b      	ldrh	r3, [r3, #2]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f4 f904 	bl	8000ed4 <swapInt16>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d008      	beq.n	800cce4 <llmnrProcessQuery+0x140>
      ntohs(question->qclass) == DNS_RR_CLASS_ANY)
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	885b      	ldrh	r3, [r3, #2]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7f4 f8fb 	bl	8000ed4 <swapInt16>
 800ccde:	4603      	mov	r3, r0
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800cce0:	2bff      	cmp	r3, #255	; 0xff
 800cce2:	d148      	bne.n	800cd76 <llmnrProcessQuery+0x1d2>
   {
      //Responders must respond to LLMNR queries for names and addresses for
      //which they are authoritative
      if(!dnsCompareName((DnsHeader *) message, length, pos,
         interface->hostname, 0))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3319      	adds	r3, #25
      if(!dnsCompareName((DnsHeader *) message, length, pos,
 800cce8:	2200      	movs	r2, #0
 800ccea:	9200      	str	r2, [sp, #0]
 800ccec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccf2:	f7f8 fc72 	bl	80055da <dnsCompareName>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d13c      	bne.n	800cd76 <llmnrProcessQuery+0x1d2>
      {
         //Responders must direct responses to the port from which the query
         //was sent
         destPort = ntohs(udpHeader->srcPort);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7f4 f8e6 	bl	8000ed4 <swapInt16>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	857b      	strh	r3, [r7, #42]	; 0x2a

         //Send LLMNR response
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	b29c      	uxth	r4, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f4 f8db 	bl	8000ed4 <swapInt16>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	461d      	mov	r5, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	885b      	ldrh	r3, [r3, #2]
 800cd26:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f4 f8d3 	bl	8000ed4 <swapInt16>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cd32:	f107 0114 	add.w	r1, r7, #20
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	9500      	str	r5, [sp, #0]
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f81d 	bl	800cd7c <llmnrSendResponse>
 800cd42:	e018      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd44:	bf00      	nop
 800cd46:	e016      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd48:	bf00      	nop
 800cd4a:	e014      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd4c:	bf00      	nop
 800cd4e:	e012      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
         return;
 800cd50:	bf00      	nop
 800cd52:	e010      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd54:	bf00      	nop
 800cd56:	e00e      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
         return;
 800cd58:	bf00      	nop
 800cd5a:	e00c      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd5c:	bf00      	nop
 800cd5e:	e00a      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd60:	bf00      	nop
 800cd62:	e008      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd64:	bf00      	nop
 800cd66:	e006      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd68:	bf00      	nop
 800cd6a:	e004      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd6c:	bf00      	nop
 800cd6e:	e002      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd70:	bf00      	nop
 800cd72:	e000      	b.n	800cd76 <llmnrProcessQuery+0x1d2>
      return;
 800cd74:	bf00      	nop
      }
   }
}
 800cd76:	3740      	adds	r7, #64	; 0x40
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bdb0      	pop	{r4, r5, r7, pc}

0800cd7c <llmnrSendResponse>:
 * @param[in] qclass Resource record class
 **/

error_t llmnrSendResponse(NetInterface *interface, const IpAddr *destIpAddr,
   uint16_t destPort, uint16_t id, uint16_t qtype, uint16_t qclass)
{
 800cd7c:	b5b0      	push	{r4, r5, r7, lr}
 800cd7e:	b096      	sub	sp, #88	; 0x58
 800cd80:	af04      	add	r7, sp, #16
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4611      	mov	r1, r2
 800cd88:	461a      	mov	r2, r3
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	80fb      	strh	r3, [r7, #6]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	80bb      	strh	r3, [r7, #4]
   DnsQuestion *question;
   DnsResourceRecord *record;
   NetTxAncillary ancillary;

   //Initialize status code
   error = NO_ERROR;
 800cd92:	2300      	movs	r3, #0
 800cd94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Allocate a memory buffer to hold the LLMNR response message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800cd98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cda2:	f00b fa95 	bl	80182d0 <udpAllocBuffer>
 800cda6:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Failed to allocate buffer?
   if(buffer == NULL)
 800cda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <llmnrSendResponse+0x36>
      return ERROR_OUT_OF_MEMORY;
 800cdae:	2364      	movs	r3, #100	; 0x64
 800cdb0:	e146      	b.n	800d040 <llmnrSendResponse+0x2c4>

   //Point to the LLMNR header
   message = netBufferAt(buffer, offset);
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdb8:	f003 fea9 	bl	8010b0e <netBufferAt>
 800cdbc:	63b8      	str	r0, [r7, #56]	; 0x38

   //Take the identifier from the query message
   message->id = id;
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	88ba      	ldrh	r2, [r7, #4]
 800cdc2:	801a      	strh	r2, [r3, #0]

   //Format LLMNR response header
   message->qr = 1;
 800cdc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc6:	7893      	ldrb	r3, [r2, #2]
 800cdc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdcc:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800cdce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdd0:	7893      	ldrb	r3, [r2, #2]
 800cdd2:	f36f 03c6 	bfc	r3, #3, #4
 800cdd6:	7093      	strb	r3, [r2, #2]
   message->c = 0;
 800cdd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdda:	7893      	ldrb	r3, [r2, #2]
 800cddc:	f36f 0382 	bfc	r3, #2, #1
 800cde0:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800cde2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde4:	7893      	ldrb	r3, [r2, #2]
 800cde6:	f36f 0341 	bfc	r3, #1, #1
 800cdea:	7093      	strb	r3, [r2, #2]
   message->t = 0;
 800cdec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdee:	7893      	ldrb	r3, [r2, #2]
 800cdf0:	f36f 0300 	bfc	r3, #0, #1
 800cdf4:	7093      	strb	r3, [r2, #2]
   message->z = 0;
 800cdf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf8:	78d3      	ldrb	r3, [r2, #3]
 800cdfa:	f36f 1307 	bfc	r3, #4, #4
 800cdfe:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800ce00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce02:	78d3      	ldrb	r3, [r2, #3]
 800ce04:	f36f 0303 	bfc	r3, #0, #4
 800ce08:	70d3      	strb	r3, [r2, #3]
   message->qdcount = HTONS(1);
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	711a      	strb	r2, [r3, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f042 0201 	orr.w	r2, r2, #1
 800ce16:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	719a      	strb	r2, [r3, #6]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	2200      	movs	r2, #0
 800ce26:	721a      	strb	r2, [r3, #8]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	2200      	movs	r2, #0
 800ce30:	729a      	strb	r2, [r3, #10]
 800ce32:	2200      	movs	r2, #0
 800ce34:	72da      	strb	r2, [r3, #11]

   //Set the length of the LLMNR response message
   length = sizeof(DnsHeader);
 800ce36:	230c      	movs	r3, #12
 800ce38:	643b      	str	r3, [r7, #64]	; 0x40

   //Encode the requested host name using the DNS name notation
   length += dnsEncodeName(interface->hostname,
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f103 0019 	add.w	r0, r3, #25
 800ce40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce44:	4413      	add	r3, r2
 800ce46:	4619      	mov	r1, r3
 800ce48:	f7f8 fabe 	bl	80053c8 <dnsEncodeName>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce50:	4413      	add	r3, r2
 800ce52:	643b      	str	r3, [r7, #64]	; 0x40
      (uint8_t *) message + length);

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, length);
 800ce54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce58:	4413      	add	r3, r2
 800ce5a:	637b      	str	r3, [r7, #52]	; 0x34

   //Fill in resource record
   question->qtype = htons(qtype);
 800ce5c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7f4 f837 	bl	8000ed4 <swapInt16>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6c:	801a      	strh	r2, [r3, #0]
   question->qclass = htons(qclass);
 800ce6e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f4 f82e 	bl	8000ed4 <swapInt16>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	805a      	strh	r2, [r3, #2]

   //Update the length of the response message
   length += sizeof(DnsQuestion);
 800ce80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce82:	3304      	adds	r3, #4
 800ce84:	643b      	str	r3, [r7, #64]	; 0x40

#if (IPV4_SUPPORT == ENABLED)
   //A resource record requested?
   if(qtype == DNS_RR_TYPE_A || qtype == DNS_RR_TYPE_ANY)
 800ce86:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d003      	beq.n	800ce96 <llmnrSendResponse+0x11a>
 800ce8e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ce92:	2bff      	cmp	r3, #255	; 0xff
 800ce94:	d146      	bne.n	800cf24 <llmnrSendResponse+0x1a8>
   {
      //Valid IPv4 host address?
      if(interface->ipv4Context.addrList[0].state == IPV4_ADDR_STATE_VALID)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d141      	bne.n	800cf24 <llmnrSendResponse+0x1a8>
      {
         //Encode the host name using the DNS name notation
         length += dnsEncodeName(interface->hostname,
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f103 0019 	add.w	r0, r3, #25
 800cea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceaa:	4413      	add	r3, r2
 800ceac:	4619      	mov	r1, r3
 800ceae:	f7f8 fa8b 	bl	80053c8 <dnsEncodeName>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb6:	4413      	add	r3, r2
 800ceb8:	643b      	str	r3, [r7, #64]	; 0x40
            (uint8_t *) message + length);

         //Point to the corresponding resource record
         record = DNS_GET_RESOURCE_RECORD(message, length);
 800ceba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebe:	4413      	add	r3, r2
 800cec0:	633b      	str	r3, [r7, #48]	; 0x30

         //Fill in resource record
         record->rtype = HTONS(DNS_RR_TYPE_A);
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f042 0201 	orr.w	r2, r2, #1
 800cece:	705a      	strb	r2, [r3, #1]
         record->rclass = HTONS(DNS_RR_CLASS_IN);
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	2200      	movs	r2, #0
 800ced4:	709a      	strb	r2, [r3, #2]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f042 0201 	orr.w	r2, r2, #1
 800cedc:	70da      	strb	r2, [r3, #3]
         record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	711a      	strb	r2, [r3, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	715a      	strb	r2, [r3, #5]
 800cee8:	2200      	movs	r2, #0
 800ceea:	719a      	strb	r2, [r3, #6]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f042 021e 	orr.w	r2, r2, #30
 800cef2:	71da      	strb	r2, [r3, #7]
         record->rdlength = HTONS(sizeof(Ipv4Addr));
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	2200      	movs	r2, #0
 800cef8:	721a      	strb	r2, [r3, #8]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f042 0204 	orr.w	r2, r2, #4
 800cf00:	725a      	strb	r2, [r3, #9]

         //Copy IPv4 address
         ipv4CopyAddr(record->rdata, &interface->ipv4Context.addrList[0].addr);
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	330a      	adds	r3, #10
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	601a      	str	r2, [r3, #0]

         //Number of resource records in the answer section
         message->ancount++;
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	88db      	ldrh	r3, [r3, #6]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	3301      	adds	r3, #1
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	80da      	strh	r2, [r3, #6]

         //Update the length of the response message
         length += sizeof(DnsResourceRecord) + sizeof(Ipv4Addr);
 800cf1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf20:	330e      	adds	r3, #14
 800cf22:	643b      	str	r3, [r7, #64]	; 0x40
   }
#endif

#if (IPV6_SUPPORT == ENABLED)
   //AAAA resource record requested?
   if(qtype == DNS_RR_TYPE_AAAA || qtype == DNS_RR_TYPE_ANY)
 800cf24:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cf28:	2b1c      	cmp	r3, #28
 800cf2a:	d003      	beq.n	800cf34 <llmnrSendResponse+0x1b8>
 800cf2c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cf30:	2bff      	cmp	r3, #255	; 0xff
 800cf32:	d149      	bne.n	800cfc8 <llmnrSendResponse+0x24c>
   {
      //Valid IPv6 link-local address?
      if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f893 3664 	ldrb.w	r3, [r3, #1636]	; 0x664
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d144      	bne.n	800cfc8 <llmnrSendResponse+0x24c>
      {
         //Encode the host name using the DNS name notation
         length += dnsEncodeName(interface->hostname,
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f103 0019 	add.w	r0, r3, #25
 800cf44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf48:	4413      	add	r3, r2
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f7f8 fa3c 	bl	80053c8 <dnsEncodeName>
 800cf50:	4602      	mov	r2, r0
 800cf52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf54:	4413      	add	r3, r2
 800cf56:	643b      	str	r3, [r7, #64]	; 0x40
            (uint8_t *) message + length);

         //Point to the corresponding resource record
         record = DNS_GET_RESOURCE_RECORD(message, length);
 800cf58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5c:	4413      	add	r3, r2
 800cf5e:	633b      	str	r3, [r7, #48]	; 0x30

         //Fill in resource record
         record->rtype = HTONS(DNS_RR_TYPE_AAAA);
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	2200      	movs	r2, #0
 800cf64:	701a      	strb	r2, [r3, #0]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f042 021c 	orr.w	r2, r2, #28
 800cf6c:	705a      	strb	r2, [r3, #1]
         record->rclass = HTONS(DNS_RR_CLASS_IN);
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	2200      	movs	r2, #0
 800cf72:	709a      	strb	r2, [r3, #2]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	70da      	strb	r2, [r3, #3]
         record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	2200      	movs	r2, #0
 800cf80:	711a      	strb	r2, [r3, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	715a      	strb	r2, [r3, #5]
 800cf86:	2200      	movs	r2, #0
 800cf88:	719a      	strb	r2, [r3, #6]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f042 021e 	orr.w	r2, r2, #30
 800cf90:	71da      	strb	r2, [r3, #7]
         record->rdlength = HTONS(sizeof(Ipv6Addr));
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	2200      	movs	r2, #0
 800cf96:	721a      	strb	r2, [r3, #8]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f042 0210 	orr.w	r2, r2, #16
 800cf9e:	725a      	strb	r2, [r3, #9]

         //Copy IPv6 address
         ipv6CopyAddr(record->rdata, &interface->ipv6Context.addrList[0].addr);
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa2:	f103 000a 	add.w	r0, r3, #10
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800cfac:	2210      	movs	r2, #16
 800cfae:	4619      	mov	r1, r3
 800cfb0:	f010 fc66 	bl	801d880 <memcpy>

         //Number of resource records in the answer section
         message->ancount++;
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	88db      	ldrh	r3, [r3, #6]
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	80da      	strh	r2, [r3, #6]

         //Update the length of the response message
         length += sizeof(DnsResourceRecord) + sizeof(Ipv6Addr);
 800cfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc4:	331a      	adds	r3, #26
 800cfc6:	643b      	str	r3, [r7, #64]	; 0x40
      }
   }
#endif

   //Valid LLMNR response?
   if(message->ancount > 0)
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	88db      	ldrh	r3, [r3, #6]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d031      	beq.n	800d036 <llmnrSendResponse+0x2ba>
   {
      //The ANCOUNT field specifies the number of resource records in the
      //answer section
      message->ancount = htons(message->ancount);
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	88db      	ldrh	r3, [r3, #6]
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7f3 ff7b 	bl	8000ed4 <swapInt16>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	80da      	strh	r2, [r3, #6]

      //Adjust the length of the multi-part buffer
      netBufferSetLength(buffer, offset + length);
 800cfe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfea:	4413      	add	r3, r2
 800cfec:	4619      	mov	r1, r3
 800cfee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cff0:	f003 fce7 	bl	80109c2 <netBufferSetLength>
      TRACE_INFO("Sending LLMNR message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message
      dnsDumpMessage((DnsHeader *) message, length);

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800cff4:	4b14      	ldr	r3, [pc, #80]	; (800d048 <llmnrSendResponse+0x2cc>)
 800cff6:	f107 0414 	add.w	r4, r7, #20
 800cffa:	461d      	mov	r5, r3
 800cffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d000:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d004:	e884 0003 	stmia.w	r4, {r0, r1}

      //For UDP responses, the Hop Limit field in the IPv6 header and the TTL
      //field in the IPV4 header MAY be set to any value. However, it is
      //recommended that the value 255 be used for compatibility with early
      //implementations (refer to RFC 4795, section 2.5)
      ancillary.ttl = LLMNR_DEFAULT_IP_TTL;
 800d008:	23ff      	movs	r3, #255	; 0xff
 800d00a:	753b      	strb	r3, [r7, #20]

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      ancillary.dontRoute = TRUE;
 800d00c:	2301      	movs	r3, #1
 800d00e:	61bb      	str	r3, [r7, #24]

      //Send LLMNR response
      error = udpSendBuffer(interface, NULL, LLMNR_PORT, destIpAddr, destPort,
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	f107 0214 	add.w	r2, r7, #20
 800d016:	9203      	str	r2, [sp, #12]
 800d018:	9302      	str	r3, [sp, #8]
 800d01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f241 42eb 	movw	r2, #5355	; 0x14eb
 800d028:	2100      	movs	r1, #0
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f00a ffc0 	bl	8017fb0 <udpSendBuffer>
 800d030:	4603      	mov	r3, r0
 800d032:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 800d036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d038:	f003 fc92 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800d03c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 800d040:	4618      	mov	r0, r3
 800d042:	3748      	adds	r7, #72	; 0x48
 800d044:	46bd      	mov	sp, r7
 800d046:	bdb0      	pop	{r4, r5, r7, pc}
 800d048:	08025288 	.word	0x08025288

0800d04c <mimeGetType>:
 * @param[in] filename Filename from which to extract the MIME type
 * @return NULL-terminated string containing the associated MIME type
 **/

const char_t *mimeGetType(const char_t *filename)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]

   //MIME type for unknown extensions
   static const char_t defaultMimeType[] = "application/octet-stream";

   //Valid filename?
   if(filename != NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d02e      	beq.n	800d0b8 <mimeGetType+0x6c>
   {
      //Get the length of the specified filename
      n = osStrlen(filename);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7f3 f922 	bl	80002a4 <strlen>
 800d060:	6138      	str	r0, [r7, #16]

      //Search the MIME type that matches the specified extension
      for(i = 0; i < arraysize(mimeTypeList); i++)
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	e024      	b.n	800d0b2 <mimeGetType+0x66>
      {
         //Length of the extension
         m = osStrlen(mimeTypeList[i].extension);
 800d068:	4a16      	ldr	r2, [pc, #88]	; (800d0c4 <mimeGetType+0x78>)
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d070:	4618      	mov	r0, r3
 800d072:	f7f3 f917 	bl	80002a4 <strlen>
 800d076:	60f8      	str	r0, [r7, #12]
         //Compare file extensions
         if(m <= n && !osStrcasecmp(filename + n - m, mimeTypeList[i].extension))
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d815      	bhi.n	800d0ac <mimeGetType+0x60>
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	441a      	add	r2, r3
 800d08a:	490e      	ldr	r1, [pc, #56]	; (800d0c4 <mimeGetType+0x78>)
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f010 fe05 	bl	801dca4 <strcasecmp>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d105      	bne.n	800d0ac <mimeGetType+0x60>
            return mimeTypeList[i].type;
 800d0a0:	4a08      	ldr	r2, [pc, #32]	; (800d0c4 <mimeGetType+0x78>)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	4413      	add	r3, r2
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	e006      	b.n	800d0ba <mimeGetType+0x6e>
      for(i = 0; i < arraysize(mimeTypeList); i++)
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0b6:	d9d7      	bls.n	800d068 <mimeGetType+0x1c>
      }
   }

   //Return the default MIME type when an unknown extension is encountered
   return defaultMimeType;
 800d0b8:	4b03      	ldr	r3, [pc, #12]	; (800d0c8 <mimeGetType+0x7c>)
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	080250c0 	.word	0x080250c0
 800d0c8:	08025238 	.word	0x08025238

0800d0cc <mldInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t mldInit(NetInterface *interface)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
   //Successful initialization
   return NO_ERROR;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <mldStartListening>:
 * @param[in] entry IPv6 filter entry identifying the address to listen to
 * @return Error code
 **/

error_t mldStartListening(NetInterface *interface, Ipv6FilterEntry *entry)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
   //The link-scope all-nodes address (FF02::1) is handled as a special
   //case. The host starts in Idle Listener state for that address on
   //every interface and never transitions to another state
   if(ipv6CompAddr(&entry->addr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2210      	movs	r2, #16
 800d0f2:	4918      	ldr	r1, [pc, #96]	; (800d154 <mldStartListening+0x70>)
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f010 fbb5 	bl	801d864 <memcmp>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <mldStartListening+0x2a>
   {
      //Clear flag
      entry->flag = FALSE;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	619a      	str	r2, [r3, #24]
      //Enter the Idle Listener state
      entry->state = MLD_STATE_IDLE_LISTENER;
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2202      	movs	r2, #2
 800d10a:	615a      	str	r2, [r3, #20]
 800d10c:	e01d      	b.n	800d14a <mldStartListening+0x66>
   }
   else
   {
      //Link is up?
      if(interface->linkState)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d112:	2b00      	cmp	r3, #0
 800d114:	d013      	beq.n	800d13e <mldStartListening+0x5a>
      {
         //Send a Multicast Listener Report message for the group on the interface
         mldSendListenerReport(interface, &entry->addr);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f9c8 	bl	800d4b0 <mldSendListenerReport>

         //Set flag
         entry->flag = TRUE;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2201      	movs	r2, #1
 800d124:	619a      	str	r2, [r3, #24]
         //Start timer
         entry->timer = osGetSystemTime() + MLD_UNSOLICITED_REPORT_INTERVAL;
 800d126:	f7f4 f8bb 	bl	80012a0 <osGetSystemTime>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d130:	3310      	adds	r3, #16
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	61d3      	str	r3, [r2, #28]
         //Enter the Delaying Listener state
         entry->state = MLD_STATE_DELAYING_LISTENER;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2201      	movs	r2, #1
 800d13a:	615a      	str	r2, [r3, #20]
 800d13c:	e005      	b.n	800d14a <mldStartListening+0x66>
      }
      //Link is down?
      else
      {
         //Clear flag
         entry->flag = FALSE;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2200      	movs	r2, #0
 800d142:	619a      	str	r2, [r3, #24]
         //Enter the Idle Listener state
         entry->state = MLD_STATE_IDLE_LISTENER;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2202      	movs	r2, #2
 800d148:	615a      	str	r2, [r3, #20]
      }
   }

   //Successful processing
   return NO_ERROR;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	08024c4c 	.word	0x08024c4c

0800d158 <mldStopListening>:
 * @param[in] entry IPv6 filter entry identifying the multicast address to leave
 * @return Error code
 **/

error_t mldStopListening(NetInterface *interface, Ipv6FilterEntry *entry)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
   //Check link state
   if(interface->linkState)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d166:	2b00      	cmp	r3, #0
 800d168:	d008      	beq.n	800d17c <mldStopListening+0x24>
   {
      //Send a Multicast Listener Done message if the flag is set
      if(entry->flag)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <mldStopListening+0x24>
         mldSendListenerDone(interface, &entry->addr);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fa38 	bl	800d5ec <mldSendListenerDone>
   }

   //Switch to the Non-Listener state
   entry->state = MLD_STATE_NON_LISTENER;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	2200      	movs	r2, #0
 800d180:	615a      	str	r2, [r3, #20]

   //Successful processing
   return NO_ERROR;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <mldTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void mldTick(NetInterface *interface)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv6FilterEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800d194:	f7f4 f884 	bl	80012a0 <osGetSystemTime>
 800d198:	6138      	str	r0, [r7, #16]

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d19a:	2300      	movs	r3, #0
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e023      	b.n	800d1e8 <mldTick+0x5c>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	015b      	lsls	r3, r3, #5
 800d1a4:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	60fb      	str	r3, [r7, #12]

      //Valid entry?
      if(entry->refCount > 0)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d014      	beq.n	800d1e2 <mldTick+0x56>
      {
         //Delaying Listener state?
         if(entry->state == MLD_STATE_DELAYING_LISTENER)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d110      	bne.n	800d1e2 <mldTick+0x56>
         {
            //Timer expired?
            if(timeCompare(time, entry->timer) >= 0)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	69db      	ldr	r3, [r3, #28]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	db0a      	blt.n	800d1e2 <mldTick+0x56>
            {
               //Send a Multicast Listener Report message
               mldSendListenerReport(interface, &entry->addr);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f96d 	bl	800d4b0 <mldSendListenerReport>

               //Set flag
               entry->flag = TRUE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	619a      	str	r2, [r3, #24]
               //Switch to the Idle Listener state
               entry->state = MLD_STATE_IDLE_LISTENER;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	615a      	str	r2, [r3, #20]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	2b07      	cmp	r3, #7
 800d1ec:	d9d8      	bls.n	800d1a0 <mldTick+0x14>
            }
         }
      }
   }
}
 800d1ee:	bf00      	nop
 800d1f0:	bf00      	nop
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <mldLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void mldLinkChangeEvent(NetInterface *interface)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv6FilterEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800d200:	f7f4 f84e 	bl	80012a0 <osGetSystemTime>
 800d204:	6138      	str	r0, [r7, #16]

   //Link up event?
   if(interface->linkState)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d02f      	beq.n	800d26e <mldLinkChangeEvent+0x76>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	e028      	b.n	800d266 <mldLinkChangeEvent+0x6e>
      {
         //Point to the current entry
         entry = &interface->ipv6Context.multicastFilter[i];
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	015b      	lsls	r3, r3, #5
 800d218:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4413      	add	r3, r2
 800d220:	3304      	adds	r3, #4
 800d222:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->refCount > 0)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d019      	beq.n	800d260 <mldLinkChangeEvent+0x68>
         {
            //The link-scope all-nodes address (FF02::1) is handled as a special
            //case. The host starts in Idle Listener state for that address on
            //every interface and never transitions to another state
            if(!ipv6CompAddr(&entry->addr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2210      	movs	r2, #16
 800d230:	491e      	ldr	r1, [pc, #120]	; (800d2ac <mldLinkChangeEvent+0xb4>)
 800d232:	4618      	mov	r0, r3
 800d234:	f010 fb16 	bl	801d864 <memcmp>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <mldLinkChangeEvent+0x68>
            {
               //Send an unsolicited Multicast Listener Report message for that group
               mldSendListenerReport(interface, &entry->addr);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f934 	bl	800d4b0 <mldSendListenerReport>

               //Set flag
               entry->flag = TRUE;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2201      	movs	r2, #1
 800d24c:	619a      	str	r2, [r3, #24]
               //Start timer
               entry->timer = time + MLD_UNSOLICITED_REPORT_INTERVAL;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d254:	3310      	adds	r3, #16
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	61d3      	str	r3, [r2, #28]
               //Enter the Delaying Listener state
               entry->state = MLD_STATE_DELAYING_LISTENER;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2201      	movs	r2, #1
 800d25e:	615a      	str	r2, [r3, #20]
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	3301      	adds	r3, #1
 800d264:	617b      	str	r3, [r7, #20]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b07      	cmp	r3, #7
 800d26a:	d9d3      	bls.n	800d214 <mldLinkChangeEvent+0x1c>
            //Enter the Idle Listener state
            entry->state = MLD_STATE_IDLE_LISTENER;
         }
      }
   }
}
 800d26c:	e01a      	b.n	800d2a4 <mldLinkChangeEvent+0xac>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d26e:	2300      	movs	r3, #0
 800d270:	617b      	str	r3, [r7, #20]
 800d272:	e014      	b.n	800d29e <mldLinkChangeEvent+0xa6>
         entry = &interface->ipv6Context.multicastFilter[i];
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	015b      	lsls	r3, r3, #5
 800d278:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	4413      	add	r3, r2
 800d280:	3304      	adds	r3, #4
 800d282:	60fb      	str	r3, [r7, #12]
         if(entry->refCount > 0)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d005      	beq.n	800d298 <mldLinkChangeEvent+0xa0>
            entry->flag = FALSE;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	619a      	str	r2, [r3, #24]
            entry->state = MLD_STATE_IDLE_LISTENER;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2202      	movs	r2, #2
 800d296:	615a      	str	r2, [r3, #20]
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	3301      	adds	r3, #1
 800d29c:	617b      	str	r3, [r7, #20]
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2b07      	cmp	r3, #7
 800d2a2:	d9e7      	bls.n	800d274 <mldLinkChangeEvent+0x7c>
}
 800d2a4:	bf00      	nop
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	08024c4c 	.word	0x08024c4c

0800d2b0 <mldProcessListenerQuery>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void mldProcessListenerQuery(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08a      	sub	sp, #40	; 0x28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
   systime_t maxRespDelay;
   MldMessage *message;
   Ipv6FilterEntry *entry;

   //Retrieve the length of the MLD message
   length = netBufferGetLength(buffer) - offset;
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f003 fb5d 	bl	801097e <netBufferGetLength>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	623b      	str	r3, [r7, #32]

   //The message must be at least 24 octets long
   if(length < sizeof(MldMessage))
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	2b17      	cmp	r3, #23
 800d2d0:	f240 8081 	bls.w	800d3d6 <mldProcessListenerQuery+0x126>
      return;

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset);
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f003 fc19 	bl	8010b0e <netBufferAt>
 800d2dc:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(message == NULL)
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d07a      	beq.n	800d3da <mldProcessListenerQuery+0x12a>
      return;

   //Debug message
   TRACE_INFO("MLD message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   mldDumpMessage(message);
 800d2e4:	69f8      	ldr	r0, [r7, #28]
 800d2e6:	f000 fa33 	bl	800d750 <mldDumpMessage>

   //Make sure the source address of the message is a valid link-local address
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2bfe      	cmp	r3, #254	; 0xfe
 800d2f0:	d175      	bne.n	800d3de <mldProcessListenerQuery+0x12e>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	785b      	ldrb	r3, [r3, #1]
 800d2f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d2fa:	2b80      	cmp	r3, #128	; 0x80
 800d2fc:	d16f      	bne.n	800d3de <mldProcessListenerQuery+0x12e>
      return;

   //Check the Hop Limit field
   if(hopLimit != MLD_HOP_LIMIT)
 800d2fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d302:	2b01      	cmp	r3, #1
 800d304:	d16d      	bne.n	800d3e2 <mldProcessListenerQuery+0x132>
      return;

   //Get current time
   time = osGetSystemTime();
 800d306:	f7f3 ffcb 	bl	80012a0 <osGetSystemTime>
 800d30a:	61b8      	str	r0, [r7, #24]

   //The Max Resp Delay field specifies the maximum time allowed
   //before sending a responding report
   maxRespDelay = message->maxRespDelay * 10;
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	889b      	ldrh	r3, [r3, #4]
 800d310:	b29b      	uxth	r3, r3
 800d312:	461a      	mov	r2, r3
 800d314:	4613      	mov	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	617b      	str	r3, [r7, #20]

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d31e:	2300      	movs	r3, #0
 800d320:	627b      	str	r3, [r7, #36]	; 0x24
 800d322:	e054      	b.n	800d3ce <mldProcessListenerQuery+0x11e>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	015b      	lsls	r3, r3, #5
 800d328:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	3304      	adds	r3, #4
 800d332:	613b      	str	r3, [r7, #16]

      //Valid entry?
      if(entry->refCount > 0)
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d045      	beq.n	800d3c8 <mldProcessListenerQuery+0x118>
      {
         //The link-scope all-nodes address (FF02::1) is handled as a special
         //case. The host starts in Idle Listener state for that address on
         //every interface and never transitions to another state
         if(!ipv6CompAddr(&entry->addr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2210      	movs	r2, #16
 800d340:	492a      	ldr	r1, [pc, #168]	; (800d3ec <mldProcessListenerQuery+0x13c>)
 800d342:	4618      	mov	r0, r3
 800d344:	f010 fa8e 	bl	801d864 <memcmp>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d03c      	beq.n	800d3c8 <mldProcessListenerQuery+0x118>
         {
            //A General Query is used to learn which multicast addresses have listeners
            //on an attached link. A Multicast-Address-Specific Query is used to learn
            //if a particular multicast address has any listeners on an attached link
            if(ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) ||
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	3308      	adds	r3, #8
 800d352:	2210      	movs	r2, #16
 800d354:	4926      	ldr	r1, [pc, #152]	; (800d3f0 <mldProcessListenerQuery+0x140>)
 800d356:	4618      	mov	r0, r3
 800d358:	f010 fa84 	bl	801d864 <memcmp>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d009      	beq.n	800d376 <mldProcessListenerQuery+0xc6>
               ipv6CompAddr(&message->multicastAddr, &entry->addr))
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	3308      	adds	r3, #8
 800d366:	6939      	ldr	r1, [r7, #16]
 800d368:	2210      	movs	r2, #16
 800d36a:	4618      	mov	r0, r3
 800d36c:	f010 fa7a 	bl	801d864 <memcmp>
 800d370:	4603      	mov	r3, r0
            if(ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) ||
 800d372:	2b00      	cmp	r3, #0
 800d374:	d128      	bne.n	800d3c8 <mldProcessListenerQuery+0x118>
            {
               //Delaying Listener state?
               if(entry->state == MLD_STATE_DELAYING_LISTENER)
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d115      	bne.n	800d3aa <mldProcessListenerQuery+0xfa>
               {
                  //The timer has not yet expired?
                  if(timeCompare(time, entry->timer) < 0)
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	69db      	ldr	r3, [r3, #28]
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	da1e      	bge.n	800d3c8 <mldProcessListenerQuery+0x118>
                  {
                     //If a timer for the address is already running, it is reset to
                     //the new random value only if the requested Max Response Delay
                     //is less than the remaining value of the running timer
                     if(maxRespDelay < (entry->timer - time))
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	69da      	ldr	r2, [r3, #28]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	429a      	cmp	r2, r3
 800d396:	d217      	bcs.n	800d3c8 <mldProcessListenerQuery+0x118>
                     {
                        //Restart delay timer
                        entry->timer = time + mldRand(maxRespDelay);
 800d398:	6978      	ldr	r0, [r7, #20]
 800d39a:	f000 f9c7 	bl	800d72c <mldRand>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	441a      	add	r2, r3
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	61da      	str	r2, [r3, #28]
 800d3a8:	e00e      	b.n	800d3c8 <mldProcessListenerQuery+0x118>
                     }
                  }
               }
               //Idle Listener state?
               else if(entry->state == MLD_STATE_IDLE_LISTENER)
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d10a      	bne.n	800d3c8 <mldProcessListenerQuery+0x118>
               {
                  //Switch to the Delaying Listener state
                  entry->state = MLD_STATE_DELAYING_LISTENER;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	615a      	str	r2, [r3, #20]
                  //Delay the response by a random amount of time
                  entry->timer = time + mldRand(maxRespDelay);
 800d3b8:	6978      	ldr	r0, [r7, #20]
 800d3ba:	f000 f9b7 	bl	800d72c <mldRand>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	441a      	add	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	61da      	str	r2, [r3, #28]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	2b07      	cmp	r3, #7
 800d3d2:	d9a7      	bls.n	800d324 <mldProcessListenerQuery+0x74>
 800d3d4:	e006      	b.n	800d3e4 <mldProcessListenerQuery+0x134>
      return;
 800d3d6:	bf00      	nop
 800d3d8:	e004      	b.n	800d3e4 <mldProcessListenerQuery+0x134>
      return;
 800d3da:	bf00      	nop
 800d3dc:	e002      	b.n	800d3e4 <mldProcessListenerQuery+0x134>
      return;
 800d3de:	bf00      	nop
 800d3e0:	e000      	b.n	800d3e4 <mldProcessListenerQuery+0x134>
      return;
 800d3e2:	bf00      	nop
               }
            }
         }
      }
   }
}
 800d3e4:	3728      	adds	r7, #40	; 0x28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	08024c4c 	.word	0x08024c4c
 800d3f0:	08024c2c 	.word	0x08024c2c

0800d3f4 <mldProcessListenerReport>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void mldProcessListenerReport(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	603b      	str	r3, [r7, #0]
   size_t length;
   MldMessage *message;
   Ipv6FilterEntry *entry;

   //Retrieve the length of the MLD message
   length = netBufferGetLength(buffer) - offset;
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f003 fabb 	bl	801097e <netBufferGetLength>
 800d408:	4602      	mov	r2, r0
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	61bb      	str	r3, [r7, #24]

   //The message must be at least 24 octets long
   if(length < sizeof(MldMessage))
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2b17      	cmp	r3, #23
 800d414:	d942      	bls.n	800d49c <mldProcessListenerReport+0xa8>
      return;

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset);
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f003 fb78 	bl	8010b0e <netBufferAt>
 800d41e:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(message == NULL)
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d03c      	beq.n	800d4a0 <mldProcessListenerReport+0xac>
      return;

   //Debug message
   TRACE_INFO("MLD message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   mldDumpMessage(message);
 800d426:	6978      	ldr	r0, [r7, #20]
 800d428:	f000 f992 	bl	800d750 <mldDumpMessage>

   //Make sure the source address of the message is a valid link-local address
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2bfe      	cmp	r3, #254	; 0xfe
 800d432:	d137      	bne.n	800d4a4 <mldProcessListenerReport+0xb0>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	785b      	ldrb	r3, [r3, #1]
 800d438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d43c:	2b80      	cmp	r3, #128	; 0x80
 800d43e:	d131      	bne.n	800d4a4 <mldProcessListenerReport+0xb0>
      return;
   //Check the Hop Limit field
   if(hopLimit != MLD_HOP_LIMIT)
 800d440:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d444:	2b01      	cmp	r3, #1
 800d446:	d12f      	bne.n	800d4a8 <mldProcessListenerReport+0xb4>
      return;

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d448:	2300      	movs	r3, #0
 800d44a:	61fb      	str	r3, [r7, #28]
 800d44c:	e022      	b.n	800d494 <mldProcessListenerReport+0xa0>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	015b      	lsls	r3, r3, #5
 800d452:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	4413      	add	r3, r2
 800d45a:	3304      	adds	r3, #4
 800d45c:	613b      	str	r3, [r7, #16]

      //Valid entry?
      if(entry->refCount > 0)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d013      	beq.n	800d48e <mldProcessListenerReport+0x9a>
      {
         //Report messages are ignored for multicast addresses
         //in the Non-Listener or Idle Listener state
         if(entry->state == MLD_STATE_DELAYING_LISTENER)
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d10f      	bne.n	800d48e <mldProcessListenerReport+0x9a>
         {
            //The Multicast Listener Report message matches the current entry?
            if(ipv6CompAddr(&message->multicastAddr, &entry->addr))
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	3308      	adds	r3, #8
 800d472:	6939      	ldr	r1, [r7, #16]
 800d474:	2210      	movs	r2, #16
 800d476:	4618      	mov	r0, r3
 800d478:	f010 f9f4 	bl	801d864 <memcmp>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <mldProcessListenerReport+0x9a>
            {
               //Clear flag
               entry->flag = FALSE;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2200      	movs	r2, #0
 800d486:	619a      	str	r2, [r3, #24]
               //Switch to the Idle Listener state
               entry->state = MLD_STATE_IDLE_LISTENER;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2202      	movs	r2, #2
 800d48c:	615a      	str	r2, [r3, #20]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	3301      	adds	r3, #1
 800d492:	61fb      	str	r3, [r7, #28]
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	2b07      	cmp	r3, #7
 800d498:	d9d9      	bls.n	800d44e <mldProcessListenerReport+0x5a>
 800d49a:	e006      	b.n	800d4aa <mldProcessListenerReport+0xb6>
      return;
 800d49c:	bf00      	nop
 800d49e:	e004      	b.n	800d4aa <mldProcessListenerReport+0xb6>
      return;
 800d4a0:	bf00      	nop
 800d4a2:	e002      	b.n	800d4aa <mldProcessListenerReport+0xb6>
      return;
 800d4a4:	bf00      	nop
 800d4a6:	e000      	b.n	800d4aa <mldProcessListenerReport+0xb6>
      return;
 800d4a8:	bf00      	nop
            }
         }
      }
   }
}
 800d4aa:	3720      	adds	r7, #32
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <mldSendListenerReport>:
 * @param[in] ipAddr IPv6 address specifying the multicast address
 * @return Error code
 **/

error_t mldSendListenerReport(NetInterface *interface, Ipv6Addr *ipAddr)
{
 800d4b0:	b5b0      	push	{r4, r5, r7, lr}
 800d4b2:	b098      	sub	sp, #96	; 0x60
 800d4b4:	af02      	add	r7, sp, #8
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Make sure the specified address is a valid multicast address
   if(!ipv6IsMulticastAddr(ipAddr))
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2bff      	cmp	r3, #255	; 0xff
 800d4c0:	d001      	beq.n	800d4c6 <mldSendListenerReport+0x16>
      return ERROR_INVALID_ADDRESS;
 800d4c2:	23e4      	movs	r3, #228	; 0xe4
 800d4c4:	e089      	b.n	800d5da <mldSendListenerReport+0x12a>

   //The link-scope all-nodes address (FF02::1) is handled as a special
   //case. The host never sends a report for that address
   if(ipv6CompAddr(ipAddr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 800d4c6:	2210      	movs	r2, #16
 800d4c8:	4946      	ldr	r1, [pc, #280]	; (800d5e4 <mldSendListenerReport+0x134>)
 800d4ca:	6838      	ldr	r0, [r7, #0]
 800d4cc:	f010 f9ca 	bl	801d864 <memcmp>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <mldSendListenerReport+0x2a>
      return ERROR_INVALID_ADDRESS;
 800d4d6:	23e4      	movs	r3, #228	; 0xe4
 800d4d8:	e07f      	b.n	800d5da <mldSendListenerReport+0x12a>

   //Allocate a memory buffer to hold a MLD message
   buffer = ipAllocBuffer(sizeof(MldMessage), &offset);
 800d4da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d4de:	4619      	mov	r1, r3
 800d4e0:	2018      	movs	r0, #24
 800d4e2:	f7fb fac8 	bl	8008a76 <ipAllocBuffer>
 800d4e6:	6578      	str	r0, [r7, #84]	; 0x54
   //Failed to allocate memory?
   if(buffer == NULL)
 800d4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <mldSendListenerReport+0x42>
      return ERROR_OUT_OF_MEMORY;
 800d4ee:	2364      	movs	r3, #100	; 0x64
 800d4f0:	e073      	b.n	800d5da <mldSendListenerReport+0x12a>

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset);
 800d4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d4f8:	f003 fb09 	bl	8010b0e <netBufferAt>
 800d4fc:	6538      	str	r0, [r7, #80]	; 0x50

   //Format the Multicast Listener Report message
   message->type = ICMPV6_TYPE_MULTICAST_LISTENER_REPORT_V1;
 800d4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d500:	2283      	movs	r2, #131	; 0x83
 800d502:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 800d504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d506:	2200      	movs	r2, #0
 800d508:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 800d50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d50c:	2200      	movs	r2, #0
 800d50e:	709a      	strb	r2, [r3, #2]
 800d510:	2200      	movs	r2, #0
 800d512:	70da      	strb	r2, [r3, #3]
   message->maxRespDelay = 0;
 800d514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d516:	2200      	movs	r2, #0
 800d518:	711a      	strb	r2, [r3, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	715a      	strb	r2, [r3, #5]
   message->reserved = 0;
 800d51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d520:	2200      	movs	r2, #0
 800d522:	719a      	strb	r2, [r3, #6]
 800d524:	2200      	movs	r2, #0
 800d526:	71da      	strb	r2, [r3, #7]
   message->multicastAddr = *ipAddr;
 800d528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	3308      	adds	r3, #8
 800d52e:	6814      	ldr	r4, [r2, #0]
 800d530:	6850      	ldr	r0, [r2, #4]
 800d532:	6891      	ldr	r1, [r2, #8]
 800d534:	68d2      	ldr	r2, [r2, #12]
 800d536:	601c      	str	r4, [r3, #0]
 800d538:	6058      	str	r0, [r3, #4]
 800d53a:	6099      	str	r1, [r3, #8]
 800d53c:	60da      	str	r2, [r3, #12]

   //Format IPv6 pseudo header
   pseudoHeader.srcAddr = interface->ipv6Context.addrList[0].addr;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f107 0420 	add.w	r4, r7, #32
 800d544:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800d548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d54a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   pseudoHeader.destAddr = *ipAddr;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	6859      	ldr	r1, [r3, #4]
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   pseudoHeader.length = HTONS(sizeof(MldMessage));
 800d55e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d562:	643b      	str	r3, [r7, #64]	; 0x40
   pseudoHeader.reserved[0] = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   pseudoHeader.reserved[1] = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   pseudoHeader.reserved[2] = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800d576:	233a      	movs	r3, #58	; 0x3a
 800d578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

   //Message checksum calculation
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800d57c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d57e:	f107 0020 	add.w	r0, r7, #32
 800d582:	2218      	movs	r2, #24
 800d584:	9200      	str	r2, [sp, #0]
 800d586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d588:	2128      	movs	r1, #40	; 0x28
 800d58a:	f7fb fa4b 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 800d58e:	4603      	mov	r3, r0
 800d590:	461a      	mov	r2, r3
 800d592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d594:	805a      	strh	r2, [r3, #2]
      ICMPV6_TYPE_MULTICAST_LISTENER_REPORT_V1], 1);

   //Debug message
   TRACE_INFO("Sending MLD message (%" PRIuSIZE " bytes)...\r\n", sizeof(MldMessage));
   //Dump message contents for debugging purpose
   mldDumpMessage(message);
 800d596:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d598:	f000 f8da 	bl	800d750 <mldDumpMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800d59c:	4b12      	ldr	r3, [pc, #72]	; (800d5e8 <mldSendListenerReport+0x138>)
 800d59e:	f107 0408 	add.w	r4, r7, #8
 800d5a2:	461d      	mov	r5, r3
 800d5a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d5ac:	e884 0003 	stmia.w	r4, {r0, r1}

   //All MLD messages must be sent with an IPv6 Hop Limit of 1 (refer to
   //RFC 3810, section 5)
   ancillary.ttl = MLD_HOP_LIMIT;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	723b      	strb	r3, [r7, #8]

   //The Multicast Listener Report message is sent to the multicast address
   //being reported
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800d5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5b6:	f107 0120 	add.w	r1, r7, #32
 800d5ba:	f107 0308 	add.w	r3, r7, #8
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7fd fac8 	bl	800ab5a <ipv6SendDatagram>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800d5d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d5d2:	f003 f9c5 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800d5d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3758      	adds	r7, #88	; 0x58
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	08024c4c 	.word	0x08024c4c
 800d5e8:	08025288 	.word	0x08025288

0800d5ec <mldSendListenerDone>:
 * @param[in] ipAddr IPv6 address specifying the multicast address being left
 * @return Error code
 **/

error_t mldSendListenerDone(NetInterface *interface, Ipv6Addr *ipAddr)
{
 800d5ec:	b5b0      	push	{r4, r5, r7, lr}
 800d5ee:	b098      	sub	sp, #96	; 0x60
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Make sure the specified address is a valid multicast address
   if(!ipv6IsMulticastAddr(ipAddr))
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2bff      	cmp	r3, #255	; 0xff
 800d5fc:	d001      	beq.n	800d602 <mldSendListenerDone+0x16>
      return ERROR_INVALID_ADDRESS;
 800d5fe:	23e4      	movs	r3, #228	; 0xe4
 800d600:	e089      	b.n	800d716 <mldSendListenerDone+0x12a>

   //The link-scope all-nodes address (FF02::1) is handled as a special
   //case. The host never sends a report for that address
   if(ipv6CompAddr(ipAddr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 800d602:	2210      	movs	r2, #16
 800d604:	4946      	ldr	r1, [pc, #280]	; (800d720 <mldSendListenerDone+0x134>)
 800d606:	6838      	ldr	r0, [r7, #0]
 800d608:	f010 f92c 	bl	801d864 <memcmp>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <mldSendListenerDone+0x2a>
      return ERROR_INVALID_ADDRESS;
 800d612:	23e4      	movs	r3, #228	; 0xe4
 800d614:	e07f      	b.n	800d716 <mldSendListenerDone+0x12a>

   //Allocate a memory buffer to hold a MLD message
   buffer = ipAllocBuffer(sizeof(MldMessage), &offset);
 800d616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d61a:	4619      	mov	r1, r3
 800d61c:	2018      	movs	r0, #24
 800d61e:	f7fb fa2a 	bl	8008a76 <ipAllocBuffer>
 800d622:	6578      	str	r0, [r7, #84]	; 0x54
   //Failed to allocate memory?
   if(buffer == NULL)
 800d624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <mldSendListenerDone+0x42>
      return ERROR_OUT_OF_MEMORY;
 800d62a:	2364      	movs	r3, #100	; 0x64
 800d62c:	e073      	b.n	800d716 <mldSendListenerDone+0x12a>

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset);
 800d62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d630:	4619      	mov	r1, r3
 800d632:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d634:	f003 fa6b 	bl	8010b0e <netBufferAt>
 800d638:	6538      	str	r0, [r7, #80]	; 0x50

   //Format the Multicast Listener Done message
   message->type = ICMPV6_TYPE_MULTICAST_LISTENER_DONE_V1;
 800d63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d63c:	2284      	movs	r2, #132	; 0x84
 800d63e:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 800d640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d642:	2200      	movs	r2, #0
 800d644:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 800d646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d648:	2200      	movs	r2, #0
 800d64a:	709a      	strb	r2, [r3, #2]
 800d64c:	2200      	movs	r2, #0
 800d64e:	70da      	strb	r2, [r3, #3]
   message->maxRespDelay = 0;
 800d650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d652:	2200      	movs	r2, #0
 800d654:	711a      	strb	r2, [r3, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	715a      	strb	r2, [r3, #5]
   message->reserved = 0;
 800d65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d65c:	2200      	movs	r2, #0
 800d65e:	719a      	strb	r2, [r3, #6]
 800d660:	2200      	movs	r2, #0
 800d662:	71da      	strb	r2, [r3, #7]
   message->multicastAddr = *ipAddr;
 800d664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	3308      	adds	r3, #8
 800d66a:	6814      	ldr	r4, [r2, #0]
 800d66c:	6850      	ldr	r0, [r2, #4]
 800d66e:	6891      	ldr	r1, [r2, #8]
 800d670:	68d2      	ldr	r2, [r2, #12]
 800d672:	601c      	str	r4, [r3, #0]
 800d674:	6058      	str	r0, [r3, #4]
 800d676:	6099      	str	r1, [r3, #8]
 800d678:	60da      	str	r2, [r3, #12]

   //Format IPv6 pseudo header
   pseudoHeader.srcAddr = interface->ipv6Context.addrList[0].addr;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f107 0420 	add.w	r4, r7, #32
 800d680:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800d684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   pseudoHeader.destAddr = IPV6_LINK_LOCAL_ALL_ROUTERS_ADDR;
 800d68a:	4b26      	ldr	r3, [pc, #152]	; (800d724 <mldSendListenerDone+0x138>)
 800d68c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d690:	6818      	ldr	r0, [r3, #0]
 800d692:	6859      	ldr	r1, [r3, #4]
 800d694:	689a      	ldr	r2, [r3, #8]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   pseudoHeader.length = HTONS(sizeof(MldMessage));
 800d69a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d69e:	643b      	str	r3, [r7, #64]	; 0x40
   pseudoHeader.reserved[0] = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   pseudoHeader.reserved[1] = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   pseudoHeader.reserved[2] = 0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800d6b2:	233a      	movs	r3, #58	; 0x3a
 800d6b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

   //Message checksum calculation
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800d6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ba:	f107 0020 	add.w	r0, r7, #32
 800d6be:	2218      	movs	r2, #24
 800d6c0:	9200      	str	r2, [sp, #0]
 800d6c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6c4:	2128      	movs	r1, #40	; 0x28
 800d6c6:	f7fb f9ad 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d0:	805a      	strh	r2, [r3, #2]
      ICMPV6_TYPE_MULTICAST_LISTENER_DONE_V1], 1);

   //Debug message
   TRACE_INFO("Sending MLD message (%" PRIuSIZE " bytes)...\r\n", sizeof(MldMessage));
   //Dump message contents for debugging purpose
   mldDumpMessage(message);
 800d6d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6d4:	f000 f83c 	bl	800d750 <mldDumpMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800d6d8:	4b13      	ldr	r3, [pc, #76]	; (800d728 <mldSendListenerDone+0x13c>)
 800d6da:	f107 0408 	add.w	r4, r7, #8
 800d6de:	461d      	mov	r5, r3
 800d6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d6e8:	e884 0003 	stmia.w	r4, {r0, r1}

   //All MLD messages must be sent with an IPv6 Hop Limit of 1 (refer to
   //RFC 3810, section 5)
   ancillary.ttl = MLD_HOP_LIMIT;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	723b      	strb	r3, [r7, #8]

   //The Multicast Listener Done message is sent to the all-routers multicast
   //address
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800d6f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6f2:	f107 0120 	add.w	r1, r7, #32
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7fd fa2a 	bl	800ab5a <ipv6SendDatagram>
 800d706:	4603      	mov	r3, r0
 800d708:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800d70c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d70e:	f003 f927 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800d712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 800d716:	4618      	mov	r0, r3
 800d718:	3758      	adds	r7, #88	; 0x58
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bdb0      	pop	{r4, r5, r7, pc}
 800d71e:	bf00      	nop
 800d720:	08024c4c 	.word	0x08024c4c
 800d724:	08024c5c 	.word	0x08024c5c
 800d728:	08025288 	.word	0x08025288

0800d72c <mldRand>:
 * @param[in] max Upper bound
 * @return Random value in the specified range
 **/

uint32_t mldRand(uint32_t max)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
   //Return a random value in the given range
   return netGetRand() % (max + 1);
 800d734:	f004 f808 	bl	8011748 <netGetRand>
 800d738:	4602      	mov	r2, r0
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3301      	adds	r3, #1
 800d73e:	fbb2 f1f3 	udiv	r1, r2, r3
 800d742:	fb03 f301 	mul.w	r3, r3, r1
 800d746:	1ad3      	subs	r3, r2, r3
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <mldDumpMessage>:
 * @brief Dump MLD message for debugging purpose
 * @param[in] message Pointer to the MLD message
 **/

void mldDumpMessage(const MldMessage *message)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Max Resp Delay = %" PRIu16 "\r\n", message->maxRespDelay);
   TRACE_DEBUG("  Multicast Address = %s\r\n", ipv6AddrToString(&message->multicastAddr, NULL));
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <nbnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t nbnsSendQuery(DnsCacheEntry *entry)
{
 800d764:	b5b0      	push	{r4, r5, r7, lr}
 800d766:	b098      	sub	sp, #96	; 0x60
 800d768:	af04      	add	r7, sp, #16
 800d76a:	6078      	str	r0, [r7, #4]
   DnsQuestion *dnsQuestion;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //Allocate a memory buffer to hold the NBNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800d76c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d770:	4619      	mov	r1, r3
 800d772:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d776:	f00a fdab 	bl	80182d0 <udpAllocBuffer>
 800d77a:	64f8      	str	r0, [r7, #76]	; 0x4c
   //Failed to allocate buffer?
   if(buffer == NULL)
 800d77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <nbnsSendQuery+0x22>
      return ERROR_OUT_OF_MEMORY;
 800d782:	2364      	movs	r3, #100	; 0x64
 800d784:	e0a9      	b.n	800d8da <nbnsSendQuery+0x176>

   //Point to the NBNS header
   message = netBufferAt(buffer, offset);
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	4619      	mov	r1, r3
 800d78a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d78c:	f003 f9bf 	bl	8010b0e <netBufferAt>
 800d790:	64b8      	str	r0, [r7, #72]	; 0x48

   //Format NBNS query message
   message->id = htons(entry->id);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	89db      	ldrh	r3, [r3, #14]
 800d796:	4618      	mov	r0, r3
 800d798:	f7f3 fb9c 	bl	8000ed4 <swapInt16>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7a2:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 800d7a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7a6:	7893      	ldrb	r3, [r2, #2]
 800d7a8:	f36f 13c7 	bfc	r3, #7, #1
 800d7ac:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800d7ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7b0:	7893      	ldrb	r3, [r2, #2]
 800d7b2:	f36f 03c6 	bfc	r3, #3, #4
 800d7b6:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 800d7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7ba:	7893      	ldrb	r3, [r2, #2]
 800d7bc:	f36f 0382 	bfc	r3, #2, #1
 800d7c0:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800d7c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7c4:	7893      	ldrb	r3, [r2, #2]
 800d7c6:	f36f 0341 	bfc	r3, #1, #1
 800d7ca:	7093      	strb	r3, [r2, #2]
   message->rd = 0;
 800d7cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7ce:	7893      	ldrb	r3, [r2, #2]
 800d7d0:	f36f 0300 	bfc	r3, #0, #1
 800d7d4:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 800d7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7d8:	78d3      	ldrb	r3, [r2, #3]
 800d7da:	f36f 13c7 	bfc	r3, #7, #1
 800d7de:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 800d7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7e2:	78d3      	ldrb	r3, [r2, #3]
 800d7e4:	f36f 1346 	bfc	r3, #5, #2
 800d7e8:	70d3      	strb	r3, [r2, #3]
   message->b = 1;
 800d7ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7ec:	78d3      	ldrb	r3, [r2, #3]
 800d7ee:	f043 0310 	orr.w	r3, r3, #16
 800d7f2:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800d7f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7f6:	78d3      	ldrb	r3, [r2, #3]
 800d7f8:	f36f 0303 	bfc	r3, #0, #4
 800d7fc:	70d3      	strb	r3, [r2, #3]

   //The NBNS query contains one question
   message->qdcount = HTONS(1);
 800d7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d800:	2200      	movs	r2, #0
 800d802:	711a      	strb	r2, [r3, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f042 0201 	orr.w	r2, r2, #1
 800d80a:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 800d80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80e:	2200      	movs	r2, #0
 800d810:	719a      	strb	r2, [r3, #6]
 800d812:	2200      	movs	r2, #0
 800d814:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800d816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d818:	2200      	movs	r2, #0
 800d81a:	721a      	strb	r2, [r3, #8]
 800d81c:	2200      	movs	r2, #0
 800d81e:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800d820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d822:	2200      	movs	r2, #0
 800d824:	729a      	strb	r2, [r3, #10]
 800d826:	2200      	movs	r2, #0
 800d828:	72da      	strb	r2, [r3, #11]

   //Length of the NBNS query message
   length = sizeof(DnsHeader);
 800d82a:	230c      	movs	r3, #12
 800d82c:	647b      	str	r3, [r7, #68]	; 0x44

   //Encode the NetBIOS name
   length += nbnsEncodeName(entry->name, message->questions);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f103 0210 	add.w	r2, r3, #16
 800d834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d836:	330c      	adds	r3, #12
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f000 f98a 	bl	800db54 <nbnsEncodeName>
 800d840:	4602      	mov	r2, r0
 800d842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d844:	4413      	add	r3, r2
 800d846:	647b      	str	r3, [r7, #68]	; 0x44

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 800d848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d84c:	4413      	add	r3, r2
 800d84e:	643b      	str	r3, [r7, #64]	; 0x40
   //Fill in question structure
   dnsQuestion->qtype = HTONS(DNS_RR_TYPE_NB);
 800d850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d852:	2200      	movs	r2, #0
 800d854:	701a      	strb	r2, [r3, #0]
 800d856:	2200      	movs	r2, #0
 800d858:	f042 0220 	orr.w	r2, r2, #32
 800d85c:	705a      	strb	r2, [r3, #1]
   dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 800d85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d860:	2200      	movs	r2, #0
 800d862:	709a      	strb	r2, [r3, #2]
 800d864:	2200      	movs	r2, #0
 800d866:	f042 0201 	orr.w	r2, r2, #1
 800d86a:	70da      	strb	r2, [r3, #3]

   //Update the length of the NBNS query message
   length += sizeof(DnsQuestion);
 800d86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86e:	3304      	adds	r3, #4
 800d870:	647b      	str	r3, [r7, #68]	; 0x44

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800d872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d876:	4413      	add	r3, r2
 800d878:	4619      	mov	r1, r3
 800d87a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d87c:	f003 f8a1 	bl	80109c2 <netBufferSetLength>
   TRACE_INFO("Sending NBNS message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

   //The destination address is the broadcast address
   destIpAddr.length = sizeof(Ipv4Addr);
 800d880:	2304      	movs	r3, #4
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
   ipv4GetBroadcastAddr(entry->interface, &destIpAddr.ipv4Addr);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7fc fc21 	bl	800a0d8 <ipv4GetBroadcastAddr>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800d896:	4b13      	ldr	r3, [pc, #76]	; (800d8e4 <nbnsSendQuery+0x180>)
 800d898:	f107 040c 	add.w	r4, r7, #12
 800d89c:	461d      	mov	r5, r3
 800d89e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d8a6:	e884 0003 	stmia.w	r4, {r0, r1}

   //A request packet is always sent to the well known port 137
   error = udpSendBuffer(entry->interface, NULL, NBNS_PORT, &destIpAddr,
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6858      	ldr	r0, [r3, #4]
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d8b4:	f107 020c 	add.w	r2, r7, #12
 800d8b8:	9203      	str	r2, [sp, #12]
 800d8ba:	9302      	str	r3, [sp, #8]
 800d8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	2389      	movs	r3, #137	; 0x89
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	2289      	movs	r2, #137	; 0x89
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	f00a fb71 	bl	8017fb0 <udpSendBuffer>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      NBNS_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800d8d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d8d4:	f003 f844 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800d8d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3750      	adds	r7, #80	; 0x50
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08025288 	.word	0x08025288

0800d8e8 <nbnsProcessResponse>:
 * @param[in] length Length of the message
 **/

void nbnsProcessResponse(NetInterface *interface, const Ipv4PseudoHeader *pseudoHeader,
   const UdpHeader *udpHeader, const NbnsHeader *message, size_t length)
{
 800d8e8:	b590      	push	{r4, r7, lr}
 800d8ea:	b08b      	sub	sp, #44	; 0x2c
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
   DnsCacheEntry *entry;
   DnsResourceRecord *record;
   NbnsAddrEntry *addrEntry;

   //The NBNS response shall contain one answer
   if(ntohs(message->qdcount) != 0 && ntohs(message->ancount) != 1)
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	889b      	ldrh	r3, [r3, #4]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7f3 fae9 	bl	8000ed4 <swapInt16>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d009      	beq.n	800d91c <nbnsProcessResponse+0x34>
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	88db      	ldrh	r3, [r3, #6]
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f3 fae0 	bl	8000ed4 <swapInt16>
 800d914:	4603      	mov	r3, r0
 800d916:	2b01      	cmp	r3, #1
 800d918:	f040 8099 	bne.w	800da4e <nbnsProcessResponse+0x166>
      return;

   //Parse NetBIOS name
   pos = nbnsParseName(message, length, sizeof(DnsHeader), NULL);
 800d91c:	2300      	movs	r3, #0
 800d91e:	220c      	movs	r2, #12
 800d920:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d922:	6838      	ldr	r0, [r7, #0]
 800d924:	f000 f990 	bl	800dc48 <nbnsParseName>
 800d928:	6238      	str	r0, [r7, #32]
   //Invalid name?
   if(!pos)
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 8090 	beq.w	800da52 <nbnsProcessResponse+0x16a>
      return;

   //Point to the associated resource record
   record = DNS_GET_RESOURCE_RECORD(message, pos);
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	4413      	add	r3, r2
 800d938:	61fb      	str	r3, [r7, #28]
   //Point to the resource data
   pos += sizeof(DnsResourceRecord);
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	330a      	adds	r3, #10
 800d93e:	623b      	str	r3, [r7, #32]

   //Make sure the resource record is valid
   if(pos > length)
 800d940:	6a3a      	ldr	r2, [r7, #32]
 800d942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d944:	429a      	cmp	r2, r3
 800d946:	f200 8086 	bhi.w	800da56 <nbnsProcessResponse+0x16e>
      return;
   if((pos + ntohs(record->rdlength)) > length)
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	891b      	ldrh	r3, [r3, #8]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	4618      	mov	r0, r3
 800d952:	f7f3 fabf 	bl	8000ed4 <swapInt16>
 800d956:	4603      	mov	r3, r0
 800d958:	461a      	mov	r2, r3
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	4413      	add	r3, r2
 800d95e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d960:	429a      	cmp	r2, r3
 800d962:	d37a      	bcc.n	800da5a <nbnsProcessResponse+0x172>
      return;

   //Check the class and the type of the resource record
   if(ntohs(record->rclass) != DNS_RR_CLASS_IN)
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	885b      	ldrh	r3, [r3, #2]
 800d968:	b29b      	uxth	r3, r3
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f3 fab2 	bl	8000ed4 <swapInt16>
 800d970:	4603      	mov	r3, r0
 800d972:	2b01      	cmp	r3, #1
 800d974:	d173      	bne.n	800da5e <nbnsProcessResponse+0x176>
      return;
   if(ntohs(record->rtype) != DNS_RR_TYPE_NB)
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f3 faa9 	bl	8000ed4 <swapInt16>
 800d982:	4603      	mov	r3, r0
 800d984:	2b20      	cmp	r3, #32
 800d986:	d16c      	bne.n	800da62 <nbnsProcessResponse+0x17a>
      return;

   //Verify the length of the data field
   if(ntohs(record->rdlength) < sizeof(NbnsAddrEntry))
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	4618      	mov	r0, r3
 800d990:	f7f3 faa0 	bl	8000ed4 <swapInt16>
 800d994:	4603      	mov	r3, r0
 800d996:	2b05      	cmp	r3, #5
 800d998:	d965      	bls.n	800da66 <nbnsProcessResponse+0x17e>
      return;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800d99a:	2300      	movs	r3, #0
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
 800d99e:	e052      	b.n	800da46 <nbnsProcessResponse+0x15e>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	2274      	movs	r2, #116	; 0x74
 800d9a4:	fb02 f303 	mul.w	r3, r2, r3
 800d9a8:	4a31      	ldr	r2, [pc, #196]	; (800da70 <nbnsProcessResponse+0x188>)
 800d9aa:	4413      	add	r3, r2
 800d9ac:	61bb      	str	r3, [r7, #24]

      //NBNS name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d144      	bne.n	800da40 <nbnsProcessResponse+0x158>
         entry->protocol == HOST_NAME_RESOLVER_NBNS &&
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	789b      	ldrb	r3, [r3, #2]
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d140      	bne.n	800da40 <nbnsProcessResponse+0x158>
         entry->type == HOST_TYPE_IPV4)
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	785b      	ldrb	r3, [r3, #1]
         entry->protocol == HOST_NAME_RESOLVER_NBNS &&
 800d9c2:	2b10      	cmp	r3, #16
 800d9c4:	d13c      	bne.n	800da40 <nbnsProcessResponse+0x158>
      {
         //Compare identifiers
         if(entry->id == ntohs(message->id))
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	89dc      	ldrh	r4, [r3, #14]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7f3 fa7f 	bl	8000ed4 <swapInt16>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	429c      	cmp	r4, r3
 800d9da:	d131      	bne.n	800da40 <nbnsProcessResponse+0x158>
         {
            //Compare NetBIOS names
            if(nbnsCompareName(message, length, sizeof(DnsHeader), entry->name))
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	3310      	adds	r3, #16
 800d9e0:	220c      	movs	r2, #12
 800d9e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9e4:	6838      	ldr	r0, [r7, #0]
 800d9e6:	f000 f9d7 	bl	800dd98 <nbnsCompareName>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d027      	beq.n	800da40 <nbnsProcessResponse+0x158>
            {
               //Point to the address entry array
               addrEntry = (NbnsAddrEntry *) record->rdata;
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	330a      	adds	r3, #10
 800d9f4:	617b      	str	r3, [r7, #20]
               //Copy the IPv4 address
               entry->ipAddr.length = sizeof(Ipv4Addr);
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	2204      	movs	r2, #4
 800d9fa:	651a      	str	r2, [r3, #80]	; 0x50
               entry->ipAddr.ipv4Addr = addrEntry->addr;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	655a      	str	r2, [r3, #84]	; 0x54

               //Save current time
               entry->timestamp = osGetSystemTime();
 800da06:	f7f3 fc4b 	bl	80012a0 <osGetSystemTime>
 800da0a:	4602      	mov	r2, r0
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	665a      	str	r2, [r3, #100]	; 0x64
               //Save TTL value
               entry->timeout = ntohl(record->ttl) * 1000;
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4618      	mov	r0, r3
 800da16:	f7f3 fa6b 	bl	8000ef0 <swapInt32>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da20:	fb02 f203 	mul.w	r2, r2, r3
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	669a      	str	r2, [r3, #104]	; 0x68
               //Limit the lifetime of the NBNS cache entries
               entry->timeout = MIN(entry->timeout, NBNS_MAX_LIFETIME);
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800da30:	429a      	cmp	r2, r3
 800da32:	bf28      	it	cs
 800da34:	461a      	movcs	r2, r3
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	669a      	str	r2, [r3, #104]	; 0x68

               //Host name successfully resolved
               entry->state = DNS_STATE_RESOLVED;
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	2202      	movs	r2, #2
 800da3e:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	3301      	adds	r3, #1
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	2b07      	cmp	r3, #7
 800da4a:	d9a9      	bls.n	800d9a0 <nbnsProcessResponse+0xb8>
 800da4c:	e00c      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da4e:	bf00      	nop
 800da50:	e00a      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da52:	bf00      	nop
 800da54:	e008      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da56:	bf00      	nop
 800da58:	e006      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da5a:	bf00      	nop
 800da5c:	e004      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da5e:	bf00      	nop
 800da60:	e002      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da62:	bf00      	nop
 800da64:	e000      	b.n	800da68 <nbnsProcessResponse+0x180>
      return;
 800da66:	bf00      	nop
            }
         }
      }
   }
}
 800da68:	372c      	adds	r7, #44	; 0x2c
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd90      	pop	{r4, r7, pc}
 800da6e:	bf00      	nop
 800da70:	20004340 	.word	0x20004340

0800da74 <nbnsInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t nbnsInit(NetInterface *interface)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Callback function to be called when a NBNS message is received
   error = udpAttachRxCallback(interface, NBNS_PORT, nbnsProcessMessage, NULL);
 800da7c:	2300      	movs	r3, #0
 800da7e:	4a08      	ldr	r2, [pc, #32]	; (800daa0 <nbnsInit+0x2c>)
 800da80:	2189      	movs	r1, #137	; 0x89
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f00a fc86 	bl	8018394 <udpAttachRxCallback>
 800da88:	4603      	mov	r3, r0
 800da8a:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 800da8c:	89fb      	ldrh	r3, [r7, #14]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <nbnsInit+0x22>
      return error;
 800da92:	89fb      	ldrh	r3, [r7, #14]
 800da94:	e000      	b.n	800da98 <nbnsInit+0x24>

   //Successful initialization
   return NO_ERROR;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	0800daa5 	.word	0x0800daa5

0800daa4 <nbnsProcessMessage>:

void nbnsProcessMessage(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
   size_t length;
   NbnsHeader *message;

   //Make sure the NBNS message was received from an IPv4 peer
   if(pseudoHeader->length != sizeof(Ipv4PseudoHeader))
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b0c      	cmp	r3, #12
 800dab8:	d13e      	bne.n	800db38 <nbnsProcessMessage+0x94>
      return;

   //Retrieve the length of the NBNS message
   length = netBufferGetLength(buffer) - offset;
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	f002 ff5f 	bl	801097e <netBufferGetLength>
 800dac0:	4602      	mov	r2, r0
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	617b      	str	r3, [r7, #20]

   //Ensure the NBNS message is valid
   if(length < sizeof(NbnsHeader))
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	2b0b      	cmp	r3, #11
 800dacc:	d936      	bls.n	800db3c <nbnsProcessMessage+0x98>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dad4:	d834      	bhi.n	800db40 <nbnsProcessMessage+0x9c>
      return;

   //Point to the NBNS message header
   message = netBufferAt(buffer, offset);
 800dad6:	6a39      	ldr	r1, [r7, #32]
 800dad8:	6838      	ldr	r0, [r7, #0]
 800dada:	f003 f818 	bl	8010b0e <netBufferAt>
 800dade:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(message == NULL)
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d02e      	beq.n	800db44 <nbnsProcessMessage+0xa0>
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

   //NBNS messages received with an opcode other than zero must be silently
   //ignored
   if(message->opcode != DNS_OPCODE_QUERY)
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	789b      	ldrb	r3, [r3, #2]
 800daea:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d129      	bne.n	800db48 <nbnsProcessMessage+0xa4>
      return;

   //NBNS messages received with non-zero response codes must be silently
   //ignored
   if(message->rcode != DNS_RCODE_NO_ERROR)
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	78db      	ldrb	r3, [r3, #3]
 800daf8:	f003 030f 	and.w	r3, r3, #15
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d124      	bne.n	800db4c <nbnsProcessMessage+0xa8>
      return;

   //NBNS query received?
   if(!message->qr)
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	789b      	ldrb	r3, [r3, #2]
 800db06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d109      	bne.n	800db24 <nbnsProcessMessage+0x80>
   {
#if (NBNS_RESPONDER_SUPPORT == ENABLED)
      //Process incoming NBNS query message
      nbnsProcessQuery(interface, &pseudoHeader->ipv4Data,
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	1d19      	adds	r1, r3, #4
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 f9ff 	bl	800df20 <nbnsProcessQuery>
 800db22:	e014      	b.n	800db4e <nbnsProcessMessage+0xaa>
   //NBNS response received?
   else
   {
#if (NBNS_CLIENT_SUPPORT == ENABLED)
      //Process incoming NBNS response message
      nbnsProcessResponse(interface, &pseudoHeader->ipv4Data,
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	1d19      	adds	r1, r3, #4
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f7ff fed9 	bl	800d8e8 <nbnsProcessResponse>
 800db36:	e00a      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db38:	bf00      	nop
 800db3a:	e008      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db3c:	bf00      	nop
 800db3e:	e006      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db40:	bf00      	nop
 800db42:	e004      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db44:	bf00      	nop
 800db46:	e002      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db48:	bf00      	nop
 800db4a:	e000      	b.n	800db4e <nbnsProcessMessage+0xaa>
      return;
 800db4c:	bf00      	nop
         udpHeader, message, length);
#endif
   }
}
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <nbnsEncodeName>:
 * @param[out] dest Pointer to the encoded NetBIOS name
 * @return Length of the encoded NetBIOS name
 **/

size_t nbnsEncodeName(const char_t *src, uint8_t *dest)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
   size_t i;
   size_t j;
   char_t c;

   //Point to first byte of the output buffer
   j = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	613b      	str	r3, [r7, #16]

   //NetBIOS names are 32-byte long
   dest[j++] = 32;
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	613a      	str	r2, [r7, #16]
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	4413      	add	r3, r2
 800db6c:	2220      	movs	r2, #32
 800db6e:	701a      	strb	r2, [r3, #0]

   //Parse input name
   for(i = 0; i < 15 && src[i] != '\0'; i++)
 800db70:	2300      	movs	r3, #0
 800db72:	617b      	str	r3, [r7, #20]
 800db74:	e02c      	b.n	800dbd0 <nbnsEncodeName+0x7c>
   {
      //Convert current character to uppercase
      c = osToupper(src[i]);
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	4413      	add	r3, r2
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	73fb      	strb	r3, [r7, #15]
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	3301      	adds	r3, #1
 800db84:	4a2f      	ldr	r2, [pc, #188]	; (800dc44 <nbnsEncodeName+0xf0>)
 800db86:	4413      	add	r3, r2
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	f003 0303 	and.w	r3, r3, #3
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d102      	bne.n	800db98 <nbnsEncodeName+0x44>
 800db92:	7bfb      	ldrb	r3, [r7, #15]
 800db94:	3b20      	subs	r3, #32
 800db96:	e000      	b.n	800db9a <nbnsEncodeName+0x46>
 800db98:	7bfb      	ldrb	r3, [r7, #15]
 800db9a:	73bb      	strb	r3, [r7, #14]

      //Encode character
      dest[j++] = NBNS_ENCODE_H(c);
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	091b      	lsrs	r3, r3, #4
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	1c59      	adds	r1, r3, #1
 800dba6:	6139      	str	r1, [r7, #16]
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	440b      	add	r3, r1
 800dbac:	3241      	adds	r2, #65	; 0x41
 800dbae:	b2d2      	uxtb	r2, r2
 800dbb0:	701a      	strb	r2, [r3, #0]
      dest[j++] = NBNS_ENCODE_L(c);
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	f003 030f 	and.w	r3, r3, #15
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	1c59      	adds	r1, r3, #1
 800dbbe:	6139      	str	r1, [r7, #16]
 800dbc0:	6839      	ldr	r1, [r7, #0]
 800dbc2:	440b      	add	r3, r1
 800dbc4:	3241      	adds	r2, #65	; 0x41
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < 15 && src[i] != '\0'; i++)
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	617b      	str	r3, [r7, #20]
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b0e      	cmp	r3, #14
 800dbd4:	d817      	bhi.n	800dc06 <nbnsEncodeName+0xb2>
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	4413      	add	r3, r2
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1c9      	bne.n	800db76 <nbnsEncodeName+0x22>
   }

   //Pad NetBIOS name with space characters
   for(; i < 15; i++)
 800dbe2:	e010      	b.n	800dc06 <nbnsEncodeName+0xb2>
   {
      //Encoded space character
      dest[j++] = NBNS_ENCODE_H(' ');
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	613a      	str	r2, [r7, #16]
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	4413      	add	r3, r2
 800dbee:	2243      	movs	r2, #67	; 0x43
 800dbf0:	701a      	strb	r2, [r3, #0]
      dest[j++] = NBNS_ENCODE_L(' ');
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	613a      	str	r2, [r7, #16]
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	2241      	movs	r2, #65	; 0x41
 800dbfe:	701a      	strb	r2, [r3, #0]
   for(; i < 15; i++)
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	3301      	adds	r3, #1
 800dc04:	617b      	str	r3, [r7, #20]
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2b0e      	cmp	r3, #14
 800dc0a:	d9eb      	bls.n	800dbe4 <nbnsEncodeName+0x90>
   }

   //The 16th character is the NetBIOS suffix
   dest[j++] = NBNS_ENCODE_H(0);
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	1c5a      	adds	r2, r3, #1
 800dc10:	613a      	str	r2, [r7, #16]
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4413      	add	r3, r2
 800dc16:	2241      	movs	r2, #65	; 0x41
 800dc18:	701a      	strb	r2, [r3, #0]
   dest[j++] = NBNS_ENCODE_L(0);
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	613a      	str	r2, [r7, #16]
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	4413      	add	r3, r2
 800dc24:	2241      	movs	r2, #65	; 0x41
 800dc26:	701a      	strb	r2, [r3, #0]

   //Terminate the NetBIOS name with a zero length count
   dest[j++] = 0;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	613a      	str	r2, [r7, #16]
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	4413      	add	r3, r2
 800dc32:	2200      	movs	r2, #0
 800dc34:	701a      	strb	r2, [r3, #0]

   //Return the length of the encoded NetBIOS name
   return j;
 800dc36:	693b      	ldr	r3, [r7, #16]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	371c      	adds	r7, #28
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	0804048d 	.word	0x0804048d

0800dc48 <nbnsParseName>:
 * @return The position of the resource record that immediately follows the NetBIOS name
 **/

size_t nbnsParseName(const NbnsHeader *message,
   size_t length, size_t pos, char_t *dest)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b089      	sub	sp, #36	; 0x24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	603b      	str	r3, [r7, #0]
   size_t i;
   size_t n;
   char_t c;

   //Cast the input NBNS message to byte array
   uint8_t *src = (uint8_t *) message;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	61bb      	str	r3, [r7, #24]

   //Malformed NBNS message?
   if((pos + 34) >= length)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	3322      	adds	r3, #34	; 0x22
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d801      	bhi.n	800dc68 <nbnsParseName+0x20>
      return 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	e091      	b.n	800dd8c <nbnsParseName+0x144>

   //Retrieve the length of the first label
   n = src[pos++];
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	607a      	str	r2, [r7, #4]
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	4413      	add	r3, r2
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	617b      	str	r3, [r7, #20]

   //NetBIOS names must be 32-byte long
   if(n != 32)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b20      	cmp	r3, #32
 800dc7a:	d001      	beq.n	800dc80 <nbnsParseName+0x38>
      return 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e085      	b.n	800dd8c <nbnsParseName+0x144>

   //Parse the NetBIOS name
   for(i = 0; i < 15; i++)
 800dc80:	2300      	movs	r3, #0
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	e040      	b.n	800dd08 <nbnsParseName+0xc0>
   {
      //Make sure the characters of the sequence are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b40      	cmp	r3, #64	; 0x40
 800dc90:	d905      	bls.n	800dc9e <nbnsParseName+0x56>
 800dc92:	69ba      	ldr	r2, [r7, #24]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4413      	add	r3, r2
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b50      	cmp	r3, #80	; 0x50
 800dc9c:	d901      	bls.n	800dca2 <nbnsParseName+0x5a>
         return 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e074      	b.n	800dd8c <nbnsParseName+0x144>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3301      	adds	r3, #1
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	4413      	add	r3, r2
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b40      	cmp	r3, #64	; 0x40
 800dcae:	d906      	bls.n	800dcbe <nbnsParseName+0x76>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	69ba      	ldr	r2, [r7, #24]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	2b50      	cmp	r3, #80	; 0x50
 800dcbc:	d901      	bls.n	800dcc2 <nbnsParseName+0x7a>
         return 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e064      	b.n	800dd8c <nbnsParseName+0x144>

      //Combine nibbles to restore the original ASCII character
      c = ((src[pos] - 'A') << 4) | (src[pos + 1] - 'A');
 800dcc2:	69ba      	ldr	r2, [r7, #24]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	3b41      	subs	r3, #65	; 0x41
 800dccc:	011b      	lsls	r3, r3, #4
 800dcce:	b25a      	sxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	69b9      	ldr	r1, [r7, #24]
 800dcd6:	440b      	add	r3, r1
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	3b41      	subs	r3, #65	; 0x41
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	b25b      	sxtb	r3, r3
 800dce0:	4313      	orrs	r3, r2
 800dce2:	b25b      	sxtb	r3, r3
 800dce4:	74fb      	strb	r3, [r7, #19]

      //Padding character found?
      if(c == ' ')
 800dce6:	7cfb      	ldrb	r3, [r7, #19]
 800dce8:	2b20      	cmp	r3, #32
 800dcea:	d011      	beq.n	800dd10 <nbnsParseName+0xc8>
         break;

      //Save current ASCII character
      if(dest != NULL)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d004      	beq.n	800dcfc <nbnsParseName+0xb4>
         *(dest++) = c;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	603a      	str	r2, [r7, #0]
 800dcf8:	7cfa      	ldrb	r2, [r7, #19]
 800dcfa:	701a      	strb	r2, [r3, #0]

      //Advance data pointer
      pos += 2;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3302      	adds	r3, #2
 800dd00:	607b      	str	r3, [r7, #4]
   for(i = 0; i < 15; i++)
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	3301      	adds	r3, #1
 800dd06:	61fb      	str	r3, [r7, #28]
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b0e      	cmp	r3, #14
 800dd0c:	d9bb      	bls.n	800dc86 <nbnsParseName+0x3e>
 800dd0e:	e025      	b.n	800dd5c <nbnsParseName+0x114>
         break;
 800dd10:	bf00      	nop
   }

   //Skip padding characters
   for(; i < 16; i++)
 800dd12:	e023      	b.n	800dd5c <nbnsParseName+0x114>
   {
      //Make sure the nibbles are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 800dd14:	69ba      	ldr	r2, [r7, #24]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4413      	add	r3, r2
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	2b40      	cmp	r3, #64	; 0x40
 800dd1e:	d905      	bls.n	800dd2c <nbnsParseName+0xe4>
 800dd20:	69ba      	ldr	r2, [r7, #24]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4413      	add	r3, r2
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b50      	cmp	r3, #80	; 0x50
 800dd2a:	d901      	bls.n	800dd30 <nbnsParseName+0xe8>
         return 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	e02d      	b.n	800dd8c <nbnsParseName+0x144>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	3301      	adds	r3, #1
 800dd34:	69ba      	ldr	r2, [r7, #24]
 800dd36:	4413      	add	r3, r2
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b40      	cmp	r3, #64	; 0x40
 800dd3c:	d906      	bls.n	800dd4c <nbnsParseName+0x104>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	3301      	adds	r3, #1
 800dd42:	69ba      	ldr	r2, [r7, #24]
 800dd44:	4413      	add	r3, r2
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b50      	cmp	r3, #80	; 0x50
 800dd4a:	d901      	bls.n	800dd50 <nbnsParseName+0x108>
         return 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e01d      	b.n	800dd8c <nbnsParseName+0x144>

      //Advance data pointer
      pos += 2;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	3302      	adds	r3, #2
 800dd54:	607b      	str	r3, [r7, #4]
   for(; i < 16; i++)
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	61fb      	str	r3, [r7, #28]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	2b0f      	cmp	r3, #15
 800dd60:	d9d8      	bls.n	800dd14 <nbnsParseName+0xcc>
   }

   //Retrieve the length of the next label
   n = src[pos++];
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	617b      	str	r3, [r7, #20]

   //NetBIOS names are terminated with a zero length count
   if(n != 0)
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <nbnsParseName+0x132>
      return 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	e008      	b.n	800dd8c <nbnsParseName+0x144>

   //Properly terminate the string
   if(dest != NULL)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <nbnsParseName+0x142>
      *(dest++) = '\0';
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	603a      	str	r2, [r7, #0]
 800dd86:	2200      	movs	r2, #0
 800dd88:	701a      	strb	r2, [r3, #0]

   //Return the position of the resource record that
   //is immediately following the NetBIOS name
   return pos;
 800dd8a:	687b      	ldr	r3, [r7, #4]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3724      	adds	r7, #36	; 0x24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <nbnsCompareName>:
 * @return TRUE if the NetBIOS names match, else FALSE
 **/

bool_t nbnsCompareName(const NbnsHeader *message,
   size_t length, size_t pos, const char_t *name)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b089      	sub	sp, #36	; 0x24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	603b      	str	r3, [r7, #0]
   size_t i;
   size_t n;
   char_t c;

   //Cast the input NBNS message to byte array
   uint8_t *src = (uint8_t *) message;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	61bb      	str	r3, [r7, #24]

   //Malformed NBNS message?
   if((pos + 34) >= length)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	3322      	adds	r3, #34	; 0x22
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d801      	bhi.n	800ddb8 <nbnsCompareName+0x20>
      return FALSE;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e0aa      	b.n	800df0e <nbnsCompareName+0x176>

   //Retrieve the length of the first label
   n = src[pos++];
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	69ba      	ldr	r2, [r7, #24]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	617b      	str	r3, [r7, #20]

   //NetBIOS names must be 32-byte long
   if(n != 32)
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	2b20      	cmp	r3, #32
 800ddca:	d001      	beq.n	800ddd0 <nbnsCompareName+0x38>
      return FALSE;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	e09e      	b.n	800df0e <nbnsCompareName+0x176>

   //Parse the NetBIOS name
   for(i = 0; i < 15; i++)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	61fb      	str	r3, [r7, #28]
 800ddd4:	e063      	b.n	800de9e <nbnsCompareName+0x106>
   {
      //Make sure the characters of the sequence are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 800ddd6:	69ba      	ldr	r2, [r7, #24]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4413      	add	r3, r2
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b40      	cmp	r3, #64	; 0x40
 800dde0:	d905      	bls.n	800ddee <nbnsCompareName+0x56>
 800dde2:	69ba      	ldr	r2, [r7, #24]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4413      	add	r3, r2
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	2b50      	cmp	r3, #80	; 0x50
 800ddec:	d901      	bls.n	800ddf2 <nbnsCompareName+0x5a>
         return FALSE;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e08d      	b.n	800df0e <nbnsCompareName+0x176>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	69ba      	ldr	r2, [r7, #24]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b40      	cmp	r3, #64	; 0x40
 800ddfe:	d906      	bls.n	800de0e <nbnsCompareName+0x76>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3301      	adds	r3, #1
 800de04:	69ba      	ldr	r2, [r7, #24]
 800de06:	4413      	add	r3, r2
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b50      	cmp	r3, #80	; 0x50
 800de0c:	d901      	bls.n	800de12 <nbnsCompareName+0x7a>
         return FALSE;
 800de0e:	2300      	movs	r3, #0
 800de10:	e07d      	b.n	800df0e <nbnsCompareName+0x176>

      //Combine nibbles to restore the original ASCII character
      c = ((src[pos] - 'A') << 4) | (src[pos + 1] - 'A');
 800de12:	69ba      	ldr	r2, [r7, #24]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4413      	add	r3, r2
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	3b41      	subs	r3, #65	; 0x41
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	b25a      	sxtb	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3301      	adds	r3, #1
 800de24:	69b9      	ldr	r1, [r7, #24]
 800de26:	440b      	add	r3, r1
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	3b41      	subs	r3, #65	; 0x41
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	4313      	orrs	r3, r2
 800de32:	b25b      	sxtb	r3, r3
 800de34:	74fb      	strb	r3, [r7, #19]

      //Padding character found?
      if(c == ' ' && *name == '\0')
 800de36:	7cfb      	ldrb	r3, [r7, #19]
 800de38:	2b20      	cmp	r3, #32
 800de3a:	d103      	bne.n	800de44 <nbnsCompareName+0xac>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d030      	beq.n	800dea6 <nbnsCompareName+0x10e>
         break;

      //Perform case insensitive comparison
      if(osToupper(c) != osToupper(*name))
 800de44:	7cfb      	ldrb	r3, [r7, #19]
 800de46:	74bb      	strb	r3, [r7, #18]
 800de48:	7cbb      	ldrb	r3, [r7, #18]
 800de4a:	3301      	adds	r3, #1
 800de4c:	4a33      	ldr	r2, [pc, #204]	; (800df1c <nbnsCompareName+0x184>)
 800de4e:	4413      	add	r3, r2
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	f003 0303 	and.w	r3, r3, #3
 800de56:	2b02      	cmp	r3, #2
 800de58:	d103      	bne.n	800de62 <nbnsCompareName+0xca>
 800de5a:	7cbb      	ldrb	r3, [r7, #18]
 800de5c:	f1a3 0220 	sub.w	r2, r3, #32
 800de60:	e000      	b.n	800de64 <nbnsCompareName+0xcc>
 800de62:	7cba      	ldrb	r2, [r7, #18]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	747b      	strb	r3, [r7, #17]
 800de6a:	7c7b      	ldrb	r3, [r7, #17]
 800de6c:	3301      	adds	r3, #1
 800de6e:	492b      	ldr	r1, [pc, #172]	; (800df1c <nbnsCompareName+0x184>)
 800de70:	440b      	add	r3, r1
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	f003 0303 	and.w	r3, r3, #3
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d102      	bne.n	800de82 <nbnsCompareName+0xea>
 800de7c:	7c7b      	ldrb	r3, [r7, #17]
 800de7e:	3b20      	subs	r3, #32
 800de80:	e000      	b.n	800de84 <nbnsCompareName+0xec>
 800de82:	7c7b      	ldrb	r3, [r7, #17]
 800de84:	429a      	cmp	r2, r3
 800de86:	d001      	beq.n	800de8c <nbnsCompareName+0xf4>
         return FALSE;
 800de88:	2300      	movs	r3, #0
 800de8a:	e040      	b.n	800df0e <nbnsCompareName+0x176>

      //Advance data pointer
      pos += 2;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3302      	adds	r3, #2
 800de90:	607b      	str	r3, [r7, #4]
      name++;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	3301      	adds	r3, #1
 800de96:	603b      	str	r3, [r7, #0]
   for(i = 0; i < 15; i++)
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	3301      	adds	r3, #1
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	2b0e      	cmp	r3, #14
 800dea2:	d998      	bls.n	800ddd6 <nbnsCompareName+0x3e>
 800dea4:	e025      	b.n	800def2 <nbnsCompareName+0x15a>
         break;
 800dea6:	bf00      	nop
   }

   //Skip padding characters
   for(; i < 16; i++)
 800dea8:	e023      	b.n	800def2 <nbnsCompareName+0x15a>
   {
      //Make sure the nibbles are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 800deaa:	69ba      	ldr	r2, [r7, #24]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4413      	add	r3, r2
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b40      	cmp	r3, #64	; 0x40
 800deb4:	d905      	bls.n	800dec2 <nbnsCompareName+0x12a>
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4413      	add	r3, r2
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b50      	cmp	r3, #80	; 0x50
 800dec0:	d901      	bls.n	800dec6 <nbnsCompareName+0x12e>
         return FALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	e023      	b.n	800df0e <nbnsCompareName+0x176>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3301      	adds	r3, #1
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	4413      	add	r3, r2
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b40      	cmp	r3, #64	; 0x40
 800ded2:	d906      	bls.n	800dee2 <nbnsCompareName+0x14a>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3301      	adds	r3, #1
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	4413      	add	r3, r2
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b50      	cmp	r3, #80	; 0x50
 800dee0:	d901      	bls.n	800dee6 <nbnsCompareName+0x14e>
         return FALSE;
 800dee2:	2300      	movs	r3, #0
 800dee4:	e013      	b.n	800df0e <nbnsCompareName+0x176>

      //Advance data pointer
      pos += 2;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3302      	adds	r3, #2
 800deea:	607b      	str	r3, [r7, #4]
   for(; i < 16; i++)
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	3301      	adds	r3, #1
 800def0:	61fb      	str	r3, [r7, #28]
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	2b0f      	cmp	r3, #15
 800def6:	d9d8      	bls.n	800deaa <nbnsCompareName+0x112>
   }

   //Retrieve the length of the next label
   n = src[pos];
 800def8:	69ba      	ldr	r2, [r7, #24]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	617b      	str	r3, [r7, #20]

   //NetBIOS names are terminated with a zero length count
   if(n != 0)
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <nbnsCompareName+0x174>
      return FALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	e000      	b.n	800df0e <nbnsCompareName+0x176>

   //The NetBIOS names match
   return TRUE;
 800df0c:	2301      	movs	r3, #1
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3724      	adds	r7, #36	; 0x24
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	0804048d 	.word	0x0804048d

0800df20 <nbnsProcessQuery>:
 * @param[in] length Length of the message
 **/

void nbnsProcessQuery(NetInterface *interface, const Ipv4PseudoHeader *pseudoHeader,
   const UdpHeader *udpHeader, const NbnsHeader *message, size_t length)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08c      	sub	sp, #48	; 0x30
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
 800df2c:	603b      	str	r3, [r7, #0]
   size_t pos;
   DnsQuestion *question;

   //The NBNS query shall contain one question
   if(ntohs(message->qdcount) != 1)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	889b      	ldrh	r3, [r3, #4]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4618      	mov	r0, r3
 800df36:	f7f2 ffcd 	bl	8000ed4 <swapInt16>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d145      	bne.n	800dfcc <nbnsProcessQuery+0xac>
      return;

   //Parse NetBIOS name
   pos = nbnsParseName(message, length, sizeof(DnsHeader), NULL);
 800df40:	2300      	movs	r3, #0
 800df42:	220c      	movs	r2, #12
 800df44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df46:	6838      	ldr	r0, [r7, #0]
 800df48:	f7ff fe7e 	bl	800dc48 <nbnsParseName>
 800df4c:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Invalid name?
   if(!pos)
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	2b00      	cmp	r3, #0
 800df52:	d03d      	beq.n	800dfd0 <nbnsProcessQuery+0xb0>
      return;
   //Malformed NBNS query message?
   if((pos + sizeof(DnsQuestion)) > length)
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	3304      	adds	r3, #4
 800df58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d33a      	bcc.n	800dfd4 <nbnsProcessQuery+0xb4>
      return;

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, pos);
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	4413      	add	r3, r2
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28

   //Check the class and the type of the request
   if(ntohs(question->qclass) != DNS_RR_CLASS_IN)
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	885b      	ldrh	r3, [r3, #2]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f2 ffb1 	bl	8000ed4 <swapInt16>
 800df72:	4603      	mov	r3, r0
 800df74:	2b01      	cmp	r3, #1
 800df76:	d12f      	bne.n	800dfd8 <nbnsProcessQuery+0xb8>
      return;
   if(ntohs(question->qtype) != DNS_RR_TYPE_NB)
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f2 ffa8 	bl	8000ed4 <swapInt16>
 800df84:	4603      	mov	r3, r0
 800df86:	2b20      	cmp	r3, #32
 800df88:	d128      	bne.n	800dfdc <nbnsProcessQuery+0xbc>
      return;

   //Compare NetBIOS names
   if(nbnsCompareName(message, length, sizeof(DnsHeader), interface->hostname))
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3319      	adds	r3, #25
 800df8e:	220c      	movs	r2, #12
 800df90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df92:	6838      	ldr	r0, [r7, #0]
 800df94:	f7ff ff00 	bl	800dd98 <nbnsCompareName>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d01f      	beq.n	800dfde <nbnsProcessQuery+0xbe>
      uint16_t destPort;
      IpAddr destIpAddr;

      //A response packet is always sent to the source UDP port and
      //source IP address of the request packet
      destIpAddr.length = sizeof(Ipv4Addr);
 800df9e:	2304      	movs	r3, #4
 800dfa0:	613b      	str	r3, [r7, #16]
      destIpAddr.ipv4Addr = pseudoHeader->srcAddr;
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	617b      	str	r3, [r7, #20]

      //Convert the port number to host byte order
      destPort = ntohs(udpHeader->srcPort);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7f2 ff90 	bl	8000ed4 <swapInt16>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Send NBNS response
      nbnsSendResponse(interface, &destIpAddr, destPort, message->id);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dfc0:	f107 0110 	add.w	r1, r7, #16
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f80d 	bl	800dfe4 <nbnsSendResponse>
 800dfca:	e008      	b.n	800dfde <nbnsProcessQuery+0xbe>
      return;
 800dfcc:	bf00      	nop
 800dfce:	e006      	b.n	800dfde <nbnsProcessQuery+0xbe>
      return;
 800dfd0:	bf00      	nop
 800dfd2:	e004      	b.n	800dfde <nbnsProcessQuery+0xbe>
      return;
 800dfd4:	bf00      	nop
 800dfd6:	e002      	b.n	800dfde <nbnsProcessQuery+0xbe>
      return;
 800dfd8:	bf00      	nop
 800dfda:	e000      	b.n	800dfde <nbnsProcessQuery+0xbe>
      return;
 800dfdc:	bf00      	nop
   }
}
 800dfde:	3730      	adds	r7, #48	; 0x30
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <nbnsSendResponse>:
 * @param[in] id 16-bit identifier to be used when sending NBNS query
 **/

error_t nbnsSendResponse(NetInterface *interface,
   const IpAddr *destIpAddr, uint16_t destPort, uint16_t id)
{
 800dfe4:	b5b0      	push	{r4, r5, r7, lr}
 800dfe6:	b096      	sub	sp, #88	; 0x58
 800dfe8:	af04      	add	r7, sp, #16
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	4611      	mov	r1, r2
 800dff0:	461a      	mov	r2, r3
 800dff2:	460b      	mov	r3, r1
 800dff4:	80fb      	strh	r3, [r7, #6]
 800dff6:	4613      	mov	r3, r2
 800dff8:	80bb      	strh	r3, [r7, #4]
   NbnsAddrEntry *addrEntry;
   DnsResourceRecord *record;
   NetTxAncillary ancillary;

   //Allocate a memory buffer to hold the NBNS response message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800dffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dffe:	4619      	mov	r1, r3
 800e000:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e004:	f00a f964 	bl	80182d0 <udpAllocBuffer>
 800e008:	6478      	str	r0, [r7, #68]	; 0x44
   //Failed to allocate buffer?
   if(buffer == NULL)
 800e00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <nbnsSendResponse+0x30>
      return ERROR_OUT_OF_MEMORY;
 800e010:	2364      	movs	r3, #100	; 0x64
 800e012:	e0b7      	b.n	800e184 <nbnsSendResponse+0x1a0>

   //Point to the NBNS header
   message = netBufferAt(buffer, offset);
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	4619      	mov	r1, r3
 800e018:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e01a:	f002 fd78 	bl	8010b0e <netBufferAt>
 800e01e:	6438      	str	r0, [r7, #64]	; 0x40

   //Take the identifier from the query message
   message->id = id;
 800e020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e022:	88ba      	ldrh	r2, [r7, #4]
 800e024:	801a      	strh	r2, [r3, #0]

   //Format NBNS response header
   message->qr = 1;
 800e026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e028:	7893      	ldrb	r3, [r2, #2]
 800e02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02e:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800e030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e032:	7893      	ldrb	r3, [r2, #2]
 800e034:	f36f 03c6 	bfc	r3, #3, #4
 800e038:	7093      	strb	r3, [r2, #2]
   message->aa = 1;
 800e03a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e03c:	7893      	ldrb	r3, [r2, #2]
 800e03e:	f043 0304 	orr.w	r3, r3, #4
 800e042:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800e044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e046:	7893      	ldrb	r3, [r2, #2]
 800e048:	f36f 0341 	bfc	r3, #1, #1
 800e04c:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 800e04e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e050:	7893      	ldrb	r3, [r2, #2]
 800e052:	f043 0301 	orr.w	r3, r3, #1
 800e056:	7093      	strb	r3, [r2, #2]
   message->ra = 1;
 800e058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e05a:	78d3      	ldrb	r3, [r2, #3]
 800e05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e060:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 800e062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e064:	78d3      	ldrb	r3, [r2, #3]
 800e066:	f36f 1346 	bfc	r3, #5, #2
 800e06a:	70d3      	strb	r3, [r2, #3]
   message->b = 0;
 800e06c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e06e:	78d3      	ldrb	r3, [r2, #3]
 800e070:	f36f 1304 	bfc	r3, #4, #1
 800e074:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800e076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e078:	78d3      	ldrb	r3, [r2, #3]
 800e07a:	f36f 0303 	bfc	r3, #0, #4
 800e07e:	70d3      	strb	r3, [r2, #3]

   //The NBNS response contains 1 answer resource record
   message->qdcount = 0;
 800e080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e082:	2200      	movs	r2, #0
 800e084:	711a      	strb	r2, [r3, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	715a      	strb	r2, [r3, #5]
   message->ancount = HTONS(1);
 800e08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08c:	2200      	movs	r2, #0
 800e08e:	719a      	strb	r2, [r3, #6]
 800e090:	2200      	movs	r2, #0
 800e092:	f042 0201 	orr.w	r2, r2, #1
 800e096:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800e098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09a:	2200      	movs	r2, #0
 800e09c:	721a      	strb	r2, [r3, #8]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800e0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	729a      	strb	r2, [r3, #10]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	72da      	strb	r2, [r3, #11]

   //NBNS response message length
   length = sizeof(DnsHeader);
 800e0ac:	230c      	movs	r3, #12
 800e0ae:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Encode the host name using the NBNS name notation
   length += nbnsEncodeName(interface->hostname, (uint8_t *) message + length);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f103 0019 	add.w	r0, r3, #25
 800e0b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ba:	4413      	add	r3, r2
 800e0bc:	4619      	mov	r1, r3
 800e0be:	f7ff fd49 	bl	800db54 <nbnsEncodeName>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c6:	4413      	add	r3, r2
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Point to the corresponding resource record
   record = DNS_GET_RESOURCE_RECORD(message, length);
 800e0ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ce:	4413      	add	r3, r2
 800e0d0:	63bb      	str	r3, [r7, #56]	; 0x38

   //Fill in resource record
   record->rtype = HTONS(DNS_RR_TYPE_NB);
 800e0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	701a      	strb	r2, [r3, #0]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f042 0220 	orr.w	r2, r2, #32
 800e0de:	705a      	strb	r2, [r3, #1]
   record->rclass = HTONS(DNS_RR_CLASS_IN);
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	709a      	strb	r2, [r3, #2]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f042 0201 	orr.w	r2, r2, #1
 800e0ec:	70da      	strb	r2, [r3, #3]
   record->ttl = HTONL(NBNS_DEFAULT_RESOURCE_RECORD_TTL);
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	711a      	strb	r2, [r3, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	715a      	strb	r2, [r3, #5]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	719a      	strb	r2, [r3, #6]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 800e102:	71da      	strb	r2, [r3, #7]
   record->rdlength = HTONS(sizeof(NbnsAddrEntry));
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	2200      	movs	r2, #0
 800e108:	721a      	strb	r2, [r3, #8]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f042 0206 	orr.w	r2, r2, #6
 800e110:	725a      	strb	r2, [r3, #9]

   //Point to the address entry array
   addrEntry = (NbnsAddrEntry *) record->rdata;
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	330a      	adds	r3, #10
 800e116:	637b      	str	r3, [r7, #52]	; 0x34

   //Fill in address entry
   addrEntry->flags = HTONS(NBNS_G_UNIQUE | NBNS_ONT_BNODE);
 800e118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e11a:	2200      	movs	r2, #0
 800e11c:	701a      	strb	r2, [r3, #0]
 800e11e:	2200      	movs	r2, #0
 800e120:	705a      	strb	r2, [r3, #1]
   addrEntry->addr = interface->ipv4Context.addrList[0].addr;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800e128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12a:	f8c3 2002 	str.w	r2, [r3, #2]

   //Update the length of the NBNS response message
   length += sizeof(DnsResourceRecord) + sizeof(NbnsAddrEntry);
 800e12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e130:	3310      	adds	r3, #16
 800e132:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800e134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e138:	4413      	add	r3, r2
 800e13a:	4619      	mov	r1, r3
 800e13c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e13e:	f002 fc40 	bl	80109c2 <netBufferSetLength>
   TRACE_INFO("Sending NBNS message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800e142:	4b12      	ldr	r3, [pc, #72]	; (800e18c <nbnsSendResponse+0x1a8>)
 800e144:	f107 0414 	add.w	r4, r7, #20
 800e148:	461d      	mov	r5, r3
 800e14a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e14c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e14e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e152:	e884 0003 	stmia.w	r4, {r0, r1}

   //This flag tells the stack that the destination is on a locally attached
   //network and not to perform a lookup of the routing table
   ancillary.dontRoute = TRUE;
 800e156:	2301      	movs	r3, #1
 800e158:	61bb      	str	r3, [r7, #24]

   //A response packet is always sent to the source UDP port and source IP
   //address of the request packet
   error = udpSendBuffer(interface, NULL, NBNS_PORT, destIpAddr, destPort,
 800e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15c:	f107 0214 	add.w	r2, r7, #20
 800e160:	9203      	str	r2, [sp, #12]
 800e162:	9302      	str	r3, [sp, #8]
 800e164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	88fb      	ldrh	r3, [r7, #6]
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2289      	movs	r2, #137	; 0x89
 800e170:	2100      	movs	r1, #0
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f009 ff1c 	bl	8017fb0 <udpSendBuffer>
 800e178:	4603      	mov	r3, r0
 800e17a:	867b      	strh	r3, [r7, #50]	; 0x32
      buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800e17c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e17e:	f002 fbef 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 800e182:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 800e184:	4618      	mov	r0, r3
 800e186:	3748      	adds	r7, #72	; 0x48
 800e188:	46bd      	mov	sp, r7
 800e18a:	bdb0      	pop	{r4, r5, r7, pc}
 800e18c:	08025288 	.word	0x08025288

0800e190 <ndpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ndpInit(NetInterface *interface)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
   NdpContext *context;

   //Point to the NDP context
   context = &interface->ndpContext;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800e19e:	60fb      	str	r3, [r7, #12]

   //Clear the NDP context
   osMemset(context, 0, sizeof(NdpContext));
 800e1a0:	f240 520c 	movw	r2, #1292	; 0x50c
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f00f fb92 	bl	801d8d0 <memset>

   //Initialize interface specific variables
   context->reachableTime = NDP_REACHABLE_TIME;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f247 5230 	movw	r2, #30000	; 0x7530
 800e1b2:	601a      	str	r2, [r3, #0]
   context->retransTimer = NDP_RETRANS_TIMER;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1ba:	605a      	str	r2, [r3, #4]
   context->dupAddrDetectTransmits = NDP_DUP_ADDR_DETECT_TRANSMITS;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	609a      	str	r2, [r3, #8]
   context->minRtrSolicitationDelay = NDP_MIN_RTR_SOLICITATION_DELAY;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	60da      	str	r2, [r3, #12]
   context->maxRtrSolicitationDelay = NDP_MAX_RTR_SOLICITATION_DELAY;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1ce:	611a      	str	r2, [r3, #16]
   context->rtrSolicitationInterval = NDP_RTR_SOLICITATION_INTERVAL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e1d6:	615a      	str	r2, [r3, #20]
   context->maxRtrSolicitations = NDP_MAX_RTR_SOLICITATIONS;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2203      	movs	r2, #3
 800e1dc:	619a      	str	r2, [r3, #24]

   //Successful initialization
   return NO_ERROR;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <ndpResolve>:
 * @return Error code
 **/

error_t ndpResolve(NetInterface *interface, const Ipv6Addr *ipAddr,
   MacAddr *macAddr)
{
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
   error_t error;
   NdpNeighborCacheEntry *entry;

   //Search the ndpCacheMutex cache for the specified IPv6 address
   entry = ndpFindNeighborCacheEntry(interface, ipAddr);
 800e1f4:	68b9      	ldr	r1, [r7, #8]
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f001 fa53 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800e1fc:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry has been found
   if(entry != NULL)
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d02b      	beq.n	800e25c <ndpResolve+0x74>
   {
      //Check the state of the Neighbor cache entry
      if(entry->state == NDP_STATE_INCOMPLETE)
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d103      	bne.n	800e214 <ndpResolve+0x2c>
      {
         //The address resolution is already in progress
         error = ERROR_IN_PROGRESS;
 800e20c:	f240 2303 	movw	r3, #515	; 0x203
 800e210:	82fb      	strh	r3, [r7, #22]
 800e212:	e053      	b.n	800e2bc <ndpResolve+0xd4>
      }
      else if(entry->state == NDP_STATE_STALE)
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	2b03      	cmp	r3, #3
 800e21a:	d115      	bne.n	800e248 <ndpResolve+0x60>
      {
         //Copy the MAC address associated with the specified IPv6 address
         *macAddr = entry->macAddr;
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	3311      	adds	r3, #17
 800e222:	6819      	ldr	r1, [r3, #0]
 800e224:	6011      	str	r1, [r2, #0]
 800e226:	889b      	ldrh	r3, [r3, #4]
 800e228:	8093      	strh	r3, [r2, #4]

         //Start delay timer
         entry->timestamp = osGetSystemTime();
 800e22a:	f7f3 f839 	bl	80012a0 <osGetSystemTime>
 800e22e:	4602      	mov	r2, r0
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	61da      	str	r2, [r3, #28]
         //Delay before sending the first probe
         entry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23a:	621a      	str	r2, [r3, #32]
         //Switch to the DELAY state
         entry->state = NDP_STATE_DELAY;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	2204      	movs	r2, #4
 800e240:	701a      	strb	r2, [r3, #0]

         //Successful address resolution
         error = NO_ERROR;
 800e242:	2300      	movs	r3, #0
 800e244:	82fb      	strh	r3, [r7, #22]
 800e246:	e039      	b.n	800e2bc <ndpResolve+0xd4>
      }
      else
      {
         //Copy the MAC address associated with the specified IPv6 address
         *macAddr = entry->macAddr;
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	3311      	adds	r3, #17
 800e24e:	6819      	ldr	r1, [r3, #0]
 800e250:	6011      	str	r1, [r2, #0]
 800e252:	889b      	ldrh	r3, [r3, #4]
 800e254:	8093      	strh	r3, [r2, #4]

         //Successful address resolution
         error = NO_ERROR;
 800e256:	2300      	movs	r3, #0
 800e258:	82fb      	strh	r3, [r7, #22]
 800e25a:	e02f      	b.n	800e2bc <ndpResolve+0xd4>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = ndpCreateNeighborCacheEntry(interface);
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f001 f9dd 	bl	800f61c <ndpCreateNeighborCacheEntry>
 800e262:	6138      	str	r0, [r7, #16]

      //Neighbor Cache entry successfully created?
      if(entry != NULL)
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d026      	beq.n	800e2b8 <ndpResolve+0xd0>
      {
         //Record the IPv6 address whose MAC address is unknown
         entry->ipAddr = *ipAddr;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	3301      	adds	r3, #1
 800e270:	6814      	ldr	r4, [r2, #0]
 800e272:	6850      	ldr	r0, [r2, #4]
 800e274:	6891      	ldr	r1, [r2, #8]
 800e276:	68d2      	ldr	r2, [r2, #12]
 800e278:	601c      	str	r4, [r3, #0]
 800e27a:	6058      	str	r0, [r3, #4]
 800e27c:	6099      	str	r1, [r3, #8]
 800e27e:	60da      	str	r2, [r3, #12]

         //Reset retransmission counter
         entry->retransmitCount = 0;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	2200      	movs	r2, #0
 800e284:	625a      	str	r2, [r3, #36]	; 0x24
         //No packet are pending in the transmit queue
         entry->queueSize = 0;
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	2200      	movs	r2, #0
 800e28a:	671a      	str	r2, [r3, #112]	; 0x70

         //Send a multicast Neighbor Solicitation message
         ndpSendNeighborSol(interface, ipAddr, TRUE);
 800e28c:	2201      	movs	r2, #1
 800e28e:	68b9      	ldr	r1, [r7, #8]
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 ffa1 	bl	800f1d8 <ndpSendNeighborSol>

         //Save the time at which the message was sent
         entry->timestamp = osGetSystemTime();
 800e296:	f7f3 f803 	bl	80012a0 <osGetSystemTime>
 800e29a:	4602      	mov	r2, r0
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	61da      	str	r2, [r3, #28]
         //Set timeout value
         entry->timeout = interface->ndpContext.retransTimer;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 2a04 	ldr.w	r2, [r3, #2564]	; 0xa04
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	621a      	str	r2, [r3, #32]
         //Enter INCOMPLETE state
         entry->state = NDP_STATE_INCOMPLETE;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	701a      	strb	r2, [r3, #0]

         //The address resolution is in progress
         error = ERROR_IN_PROGRESS;
 800e2b0:	f240 2303 	movw	r3, #515	; 0x203
 800e2b4:	82fb      	strh	r3, [r7, #22]
 800e2b6:	e001      	b.n	800e2bc <ndpResolve+0xd4>
      }
      else
      {
         //Failed to create Neighbor Cache entry...
         error = ERROR_OUT_OF_RESOURCES;
 800e2b8:	2365      	movs	r3, #101	; 0x65
 800e2ba:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 800e2bc:	8afb      	ldrh	r3, [r7, #22]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	371c      	adds	r7, #28
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd90      	pop	{r4, r7, pc}

0800e2c6 <ndpEnqueuePacket>:
 **/

error_t ndpEnqueuePacket(NetInterface *srcInterface,
   NetInterface *destInterface, const Ipv6Addr *ipAddr, NetBuffer *buffer,
      size_t offset, NetTxAncillary *ancillary)
{
 800e2c6:	b5b0      	push	{r4, r5, r7, lr}
 800e2c8:	b08a      	sub	sp, #40	; 0x28
 800e2ca:	af02      	add	r7, sp, #8
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	607a      	str	r2, [r7, #4]
 800e2d2:	603b      	str	r3, [r7, #0]
   uint_t i;
   size_t length;
   NdpNeighborCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 800e2d4:	6838      	ldr	r0, [r7, #0]
 800e2d6:	f002 fb52 	bl	801097e <netBufferGetLength>
 800e2da:	6178      	str	r0, [r7, #20]

   //Search the Neighbor cache for the specified IPv6 address
   entry = ndpFindNeighborCacheEntry(destInterface, ipAddr);
 800e2dc:	6879      	ldr	r1, [r7, #4]
 800e2de:	68b8      	ldr	r0, [r7, #8]
 800e2e0:	f001 f9df 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800e2e4:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry exists
   if(entry != NULL)
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 8093 	beq.w	800e414 <ndpEnqueuePacket+0x14e>
   {
      //Check current state
      if(entry->state == NDP_STATE_INCOMPLETE)
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	f040 808b 	bne.w	800e40e <ndpEnqueuePacket+0x148>
      {
         //Check whether the packet queue is full
         if(entry->queueSize >= NDP_MAX_PENDING_PACKETS)
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d92c      	bls.n	800e35a <ndpEnqueuePacket+0x94>
         {
            //When the queue overflows, the new arrival should replace the oldest entry
            netBufferFree(entry->queue[0].buffer);
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	4618      	mov	r0, r3
 800e306:	f002 fb2b 	bl	8010960 <netBufferFree>

            //Make room for the new packet
            for(i = 1; i < NDP_MAX_PENDING_PACKETS; i++)
 800e30a:	2301      	movs	r3, #1
 800e30c:	61bb      	str	r3, [r7, #24]
 800e30e:	e01c      	b.n	800e34a <ndpEnqueuePacket+0x84>
            {
               entry->queue[i - 1] = entry->queue[i];
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	1e5a      	subs	r2, r3, #1
 800e314:	6939      	ldr	r1, [r7, #16]
 800e316:	4613      	mov	r3, r2
 800e318:	00db      	lsls	r3, r3, #3
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	440b      	add	r3, r1
 800e320:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e324:	6939      	ldr	r1, [r7, #16]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	4613      	mov	r3, r2
 800e32a:	00db      	lsls	r3, r3, #3
 800e32c:	4413      	add	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	440b      	add	r3, r1
 800e332:	3328      	adds	r3, #40	; 0x28
 800e334:	4604      	mov	r4, r0
 800e336:	461d      	mov	r5, r3
 800e338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e33a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e33c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e33e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	6023      	str	r3, [r4, #0]
            for(i = 1; i < NDP_MAX_PENDING_PACKETS; i++)
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	3301      	adds	r3, #1
 800e348:	61bb      	str	r3, [r7, #24]
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d9df      	bls.n	800e310 <ndpEnqueuePacket+0x4a>
            }

            //Adjust the number of pending packets
            entry->queueSize--;
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	671a      	str	r2, [r3, #112]	; 0x70
         }

         //Index of the entry to be filled in
         i = entry->queueSize;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e35e:	61bb      	str	r3, [r7, #24]
         //Allocate a memory buffer to store the packet
         entry->queue[i].buffer = netBufferAlloc(length);
 800e360:	6978      	ldr	r0, [r7, #20]
 800e362:	f002 faca 	bl	80108fa <netBufferAlloc>
 800e366:	6939      	ldr	r1, [r7, #16]
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	4613      	mov	r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	440b      	add	r3, r1
 800e374:	332c      	adds	r3, #44	; 0x2c
 800e376:	6018      	str	r0, [r3, #0]

         //Successful memory allocation?
         if(entry->queue[i].buffer != NULL)
 800e378:	6939      	ldr	r1, [r7, #16]
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	4613      	mov	r3, r2
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	4413      	add	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	440b      	add	r3, r1
 800e386:	332c      	adds	r3, #44	; 0x2c
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d03c      	beq.n	800e408 <ndpEnqueuePacket+0x142>
         {
            //If the IPv6 packet has been forwarded, record the network
            //interface from which the packet has been received
            entry->queue[i].srcInterface = srcInterface;
 800e38e:	6939      	ldr	r1, [r7, #16]
 800e390:	69ba      	ldr	r2, [r7, #24]
 800e392:	4613      	mov	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	4413      	add	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	440b      	add	r3, r1
 800e39c:	3328      	adds	r3, #40	; 0x28
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	601a      	str	r2, [r3, #0]

            //Copy the contents of the IPv6 packet
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 800e3a2:	6939      	ldr	r1, [r7, #16]
 800e3a4:	69ba      	ldr	r2, [r7, #24]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	00db      	lsls	r3, r3, #3
 800e3aa:	4413      	add	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	440b      	add	r3, r1
 800e3b0:	332c      	adds	r3, #44	; 0x2c
 800e3b2:	6818      	ldr	r0, [r3, #0]
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	2100      	movs	r1, #0
 800e3be:	f002 fc74 	bl	8010caa <netBufferCopy>
            //Offset to the first byte of the IPv6 header
            entry->queue[i].offset = offset;
 800e3c2:	6939      	ldr	r1, [r7, #16]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4413      	add	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	440b      	add	r3, r1
 800e3d0:	3330      	adds	r3, #48	; 0x30
 800e3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3d4:	601a      	str	r2, [r3, #0]
            //Additional options passed to the stack along with the packet
            entry->queue[i].ancillary = *ancillary;
 800e3d6:	6939      	ldr	r1, [r7, #16]
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	440b      	add	r3, r1
 800e3e4:	3330      	adds	r3, #48	; 0x30
 800e3e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3e8:	1d1c      	adds	r4, r3, #4
 800e3ea:	4615      	mov	r5, r2
 800e3ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e3f4:	e884 0003 	stmia.w	r4, {r0, r1}

            //Increment the number of queued packets
            entry->queueSize++;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	671a      	str	r2, [r3, #112]	; 0x70
            //The packet was successfully enqueued
            error = NO_ERROR;
 800e402:	2300      	movs	r3, #0
 800e404:	83fb      	strh	r3, [r7, #30]
 800e406:	e008      	b.n	800e41a <ndpEnqueuePacket+0x154>
         }
         else
         {
            //Failed to allocate memory
            error = ERROR_OUT_OF_MEMORY;
 800e408:	2364      	movs	r3, #100	; 0x64
 800e40a:	83fb      	strh	r3, [r7, #30]
 800e40c:	e005      	b.n	800e41a <ndpEnqueuePacket+0x154>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 800e40e:	23e0      	movs	r3, #224	; 0xe0
 800e410:	83fb      	strh	r3, [r7, #30]
 800e412:	e002      	b.n	800e41a <ndpEnqueuePacket+0x154>
      }
   }
   else
   {
      //No matching entry in Neighbor Cache
      error = ERROR_NOT_FOUND;
 800e414:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800e418:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 800e41a:	8bfb      	ldrh	r3, [r7, #30]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3720      	adds	r7, #32
 800e420:	46bd      	mov	sp, r7
 800e422:	bdb0      	pop	{r4, r5, r7, pc}

0800e424 <ndpTick>:
 * @brief NDP timer handler
 * @param[in] interface Underlying network interface
 **/

void ndpTick(NetInterface *interface)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
   systime_t time;
   NdpContext *context;

   //Point to the NDP context
   context = &interface->ndpContext;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800e432:	60fb      	str	r3, [r7, #12]

   //Get current time
   time = osGetSystemTime();
 800e434:	f7f2 ff34 	bl	80012a0 <osGetSystemTime>
 800e438:	60b8      	str	r0, [r7, #8]

   //When an interface becomes enabled, a host may send some Router
   //Solicitation messages to obtain Router Advertisements quickly
   if(interface->linkState && !interface->ipv6Context.isRouter)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d04b      	beq.n	800e4da <ndpTick+0xb6>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3648 	ldr.w	r3, [r3, #1608]	; 0x648
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d146      	bne.n	800e4da <ndpTick+0xb6>
   {
      //Make sure that a valid link-local address has been assigned to the interface
      if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3664 	ldrb.w	r3, [r3, #1636]	; 0x664
 800e452:	2b02      	cmp	r3, #2
 800e454:	d141      	bne.n	800e4da <ndpTick+0xb6>
      {
         //The host should transmit up to MAX_RTR_SOLICITATIONS Router
         //Solicitation messages
         if(context->rtrSolicitationCount == 0)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	69db      	ldr	r3, [r3, #28]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d11b      	bne.n	800e496 <ndpTick+0x72>
         {
            //Set time stamp
            context->timestamp = time;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	625a      	str	r2, [r3, #36]	; 0x24

            //Check whether the host has already performed Duplicate Address
            //Detection for the link-local address
            if(context->dupAddrDetectTransmits > 0)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d003      	beq.n	800e474 <ndpTick+0x50>
            {
               //If a host has already performed a random delay since the interface
               //became enabled, there is no need to delay again before sending the
               //first Router Solicitation message
               context->timeout = 0;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	629a      	str	r2, [r3, #40]	; 0x28
 800e472:	e00c      	b.n	800e48e <ndpTick+0x6a>
            else
            {
               //Before a host sends an initial solicitation, it should delay the
               //transmission for a random amount of time in order to alleviate
               //congestion when many hosts start up on a link at the same time
               context->timeout = netGetRandRange(context->minRtrSolicitationDelay,
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	461a      	mov	r2, r3
                  context->maxRtrSolicitationDelay);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	691b      	ldr	r3, [r3, #16]
               context->timeout = netGetRandRange(context->minRtrSolicitationDelay,
 800e47e:	4619      	mov	r1, r3
 800e480:	4610      	mov	r0, r2
 800e482:	f003 f985 	bl	8011790 <netGetRandRange>
 800e486:	4603      	mov	r3, r0
 800e488:	461a      	mov	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	629a      	str	r2, [r3, #40]	; 0x28
            }

            //Prepare to send the first Router Solicitation message
            context->rtrSolicitationCount = 1;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2201      	movs	r2, #1
 800e492:	61da      	str	r2, [r3, #28]
 800e494:	e021      	b.n	800e4da <ndpTick+0xb6>
         }
         else if(context->rtrSolicitationCount <= context->maxRtrSolicitations)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	69da      	ldr	r2, [r3, #28]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	699b      	ldr	r3, [r3, #24]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d81b      	bhi.n	800e4da <ndpTick+0xb6>
         {
            //Once the host sends a Router Solicitation, and receives a valid
            //Router Advertisement with a non-zero Router Lifetime, the host must
            //desist from sending additional solicitations on that interface
            if(!context->rtrAdvReceived)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d117      	bne.n	800e4da <ndpTick+0xb6>
            {
               //Check current time
               if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b2:	4413      	add	r3, r2
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	db0e      	blt.n	800e4da <ndpTick+0xb6>
               {
                  //Send Router Solicitation message
                  ndpSendRouterSol(interface);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fdc3 	bl	800f048 <ndpSendRouterSol>

                  //Save the time at which the message was sent
                  context->timestamp = time;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	625a      	str	r2, [r3, #36]	; 0x24
                  //Set timeout value
                  context->timeout = context->rtrSolicitationInterval;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	695a      	ldr	r2, [r3, #20]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	629a      	str	r2, [r3, #40]	; 0x28
                  //Increment retransmission counter
                  context->rtrSolicitationCount++;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	61da      	str	r2, [r3, #28]
         }
      }
   }

   //Periodically update the Neighbor Cache
   ndpUpdateNeighborCache(interface);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f001 f90e 	bl	800f6fc <ndpUpdateNeighborCache>

   //Manage the lifetime of IPv6 addresses
   ndpUpdateAddrList(interface);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f001 fb87 	bl	800fbf4 <ndpUpdateAddrList>

   //Periodically update the Prefix List
   ndpUpdatePrefixList(interface);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f001 fc5c 	bl	800fda4 <ndpUpdatePrefixList>

   //Periodically update the Default Router List
   ndpUpdateDefaultRouterList(interface);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f001 fc91 	bl	800fe14 <ndpUpdateDefaultRouterList>
}
 800e4f2:	bf00      	nop
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <ndpLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ndpLinkChangeEvent(NetInterface *interface)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
   NdpContext *context;

   //Point to the NDP context
   context = &interface->ndpContext;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800e508:	60fb      	str	r3, [r7, #12]

   //Restore default parameters
   context->reachableTime = NDP_REACHABLE_TIME;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f247 5230 	movw	r2, #30000	; 0x7530
 800e510:	601a      	str	r2, [r3, #0]
   context->retransTimer = NDP_RETRANS_TIMER;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e518:	605a      	str	r2, [r3, #4]
   context->dupAddrDetectTransmits = NDP_DUP_ADDR_DETECT_TRANSMITS;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	609a      	str	r2, [r3, #8]
   context->minRtrSolicitationDelay = NDP_MIN_RTR_SOLICITATION_DELAY;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	60da      	str	r2, [r3, #12]
   context->maxRtrSolicitationDelay = NDP_MAX_RTR_SOLICITATION_DELAY;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e52c:	611a      	str	r2, [r3, #16]
   context->rtrSolicitationInterval = NDP_RTR_SOLICITATION_INTERVAL;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e534:	615a      	str	r2, [r3, #20]
   context->maxRtrSolicitations = NDP_MAX_RTR_SOLICITATIONS;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2203      	movs	r2, #3
 800e53a:	619a      	str	r2, [r3, #24]

   //Reset retransmission counter for RS messages
   context->rtrSolicitationCount = 0;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	61da      	str	r2, [r3, #28]
   //Valid RA message not yet received
   context->rtrAdvReceived = FALSE;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	621a      	str	r2, [r3, #32]

   //Flush the Neighbor Cache
   ndpFlushNeighborCache(interface);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f001 f9a1 	bl	800f890 <ndpFlushNeighborCache>
   //Flush the Destination Cache
   ndpFlushDestCache(interface);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f001 facb 	bl	800faea <ndpFlushDestCache>
}
 800e554:	bf00      	nop
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <ndpProcessRouterAdv>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void ndpProcessRouterAdv(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b08f      	sub	sp, #60	; 0x3c
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	603b      	str	r3, [r7, #0]
   NdpLinkLayerAddrOption *linkLayerAddrOption;
   NdpNeighborCacheEntry *entry;
#endif

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f002 fa07 	bl	801097e <netBufferGetLength>
 800e570:	4602      	mov	r2, r0
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Check the length of the Router Advertisement message
   if(length < sizeof(NdpRouterAdvMessage))
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	2b0f      	cmp	r3, #15
 800e57c:	f240 816f 	bls.w	800e85e <ndpProcessRouterAdv+0x302>
      return;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f002 fac3 	bl	8010b0e <netBufferAt>
 800e588:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 8168 	beq.w	800e862 <ndpProcessRouterAdv+0x306>
      return;

   //Debug message
   TRACE_INFO("Router Advertisement message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpRouterAdvMessage(message);
 800e592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e594:	f001 f81a 	bl	800f5cc <ndpDumpRouterAdvMessage>

   //Routers must use their link-local address as the source for the
   //Router Advertisement so that hosts can uniquely identify routers
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2bfe      	cmp	r3, #254	; 0xfe
 800e59e:	f040 8162 	bne.w	800e866 <ndpProcessRouterAdv+0x30a>
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	785b      	ldrb	r3, [r3, #1]
 800e5a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e5aa:	2b80      	cmp	r3, #128	; 0x80
 800e5ac:	f040 815b 	bne.w	800e866 <ndpProcessRouterAdv+0x30a>
      return;

   //The IPv6 Hop Limit field must have a value of 255 to ensure
   //that the packet has not been forwarded by a router
   if(hopLimit != NDP_HOP_LIMIT)
 800e5b0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e5b4:	2bff      	cmp	r3, #255	; 0xff
 800e5b6:	f040 8158 	bne.w	800e86a <ndpProcessRouterAdv+0x30e>
      return;

   //ICMPv6 Code must be 0. An advertisement that passes the validity
   //checks is called a valid advertisement
   if(message->code)
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f040 8155 	bne.w	800e86e <ndpProcessRouterAdv+0x312>
      return;

   //Calculate the length of the Options field
   length -= sizeof(NdpRouterAdvMessage);
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	3b10      	subs	r3, #16
 800e5c8:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Parse Options field
   error = ndpCheckOptions(message->options, length);
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	3310      	adds	r3, #16
 800e5ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f001 fe3b 	bl	801024c <ndpCheckOptions>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	84fb      	strh	r3, [r7, #38]	; 0x26
   //All included options must have a length that is greater than zero
   if(error)
 800e5da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f040 8148 	bne.w	800e872 <ndpProcessRouterAdv+0x316>
      return;

   //Check the Router Lifetime value
   if(ntohs(message->routerLifetime) != 0)
 800e5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e4:	88db      	ldrh	r3, [r3, #6]
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f2 fc73 	bl	8000ed4 <swapInt16>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01b      	beq.n	800e62c <ndpProcessRouterAdv+0xd0>
   {
      //Add a new entry in the Default Router List
      ipv6AddDefaultRouter(interface, &pseudoHeader->srcAddr,
 800e5f4:	68bc      	ldr	r4, [r7, #8]
         ntohs(message->routerLifetime), message->prf);
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	88db      	ldrh	r3, [r3, #6]
 800e5fa:	b29b      	uxth	r3, r3
      ipv6AddDefaultRouter(interface, &pseudoHeader->srcAddr,
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f2 fc69 	bl	8000ed4 <swapInt16>
 800e602:	4603      	mov	r3, r0
 800e604:	461a      	mov	r2, r3
         ntohs(message->routerLifetime), message->prf);
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	795b      	ldrb	r3, [r3, #5]
 800e60a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e60e:	b2db      	uxtb	r3, r3
      ipv6AddDefaultRouter(interface, &pseudoHeader->srcAddr,
 800e610:	4621      	mov	r1, r4
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f7fd fb58 	bl	800bcc8 <ipv6AddDefaultRouter>

      //The host should send at least one solicitation in the case where
      //an advertisement is received prior to having sent a solicitation
      if(interface->ndpContext.rtrSolicitationCount > 1)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 3a1c 	ldr.w	r3, [r3, #2588]	; 0xa1c
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d909      	bls.n	800e636 <ndpProcessRouterAdv+0xda>
      {
         //Once the host sends a Router Solicitation, and receives a valid
         //Router Advertisement with a non-zero Router Lifetime, the host must
         //desist from sending additional solicitations on that interface
         interface->ndpContext.rtrAdvReceived = TRUE;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2201      	movs	r2, #1
 800e626:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
 800e62a:	e004      	b.n	800e636 <ndpProcessRouterAdv+0xda>
      }
   }
   else
   {
      //Immediately time-out the entry
      ipv6RemoveDefaultRouter(interface, &pseudoHeader->srcAddr);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	4619      	mov	r1, r3
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7fd fba9 	bl	800bd88 <ipv6RemoveDefaultRouter>
   }

   //6LoWPAN interface?
   if(interface->nicDriver != NULL &&
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d008      	beq.n	800e650 <ndpProcessRouterAdv+0xf4>
      interface->nicDriver->type == NIC_TYPE_6LOWPAN)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e642:	781b      	ldrb	r3, [r3, #0]
   if(interface->nicDriver != NULL &&
 800e644:	2b03      	cmp	r3, #3
 800e646:	d103      	bne.n	800e650 <ndpProcessRouterAdv+0xf4>
   {
      //In all cases, the Router Solicitation retransmissions are terminated
      //when a Router Advertisement is received (refer to RFC 6675 5.3)
      interface->ndpContext.rtrAdvReceived = TRUE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20

   //A Router Advertisement field (Cur Hop Limit, Reachable Time, and
   //Retrans Timer) may contain a value denoting that it is unspecified.
   //In such cases, the parameter should be ignored and the host should
   //continue using whatever value it is already using
   if(message->curHopLimit != 0)
 800e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e652:	791b      	ldrb	r3, [r3, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d004      	beq.n	800e662 <ndpProcessRouterAdv+0x106>
   {
      //Get the default value that should be placed in the Hop Count
      //field of the IP header for outgoing IP packets
      interface->ipv6Context.curHopLimit = message->curHopLimit;
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	791a      	ldrb	r2, [r3, #4]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
   }

   //A value of zero means unspecified...
   if(message->reachableTime != 0)
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <ndpProcessRouterAdv+0x120>
   {
      //The Reachable Time field holds the time, in milliseconds, that
      //a node assumes a neighbor is reachable after having received a
      //reachability confirmation
      interface->ndpContext.reachableTime = ntohl(message->reachableTime);
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7f2 fc3e 	bl	8000ef0 <swapInt32>
 800e674:	4602      	mov	r2, r0
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8c3 2a00 	str.w	r2, [r3, #2560]	; 0xa00
   }

   //A value of zero means unspecified...
   if(message->retransTimer != 0)
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d008      	beq.n	800e696 <ndpProcessRouterAdv+0x13a>
   {
      //The Retrans Timer field holds the time, in milliseconds,
      //between retransmitted Neighbor Solicitation messages
      interface->ndpContext.retransTimer = ntohl(message->retransTimer);
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7f2 fc31 	bl	8000ef0 <swapInt32>
 800e68e:	4602      	mov	r2, r0
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8c3 2a04 	str.w	r2, [r3, #2564]	; 0xa04
   }

#if (ETH_SUPPORT == ENABLED)
   //Search for the Source Link-Layer Address option
   linkLayerAddrOption = ndpGetOption(message->options,
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	3310      	adds	r3, #16
 800e69a:	2201      	movs	r2, #1
 800e69c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f001 fd98 	bl	80101d4 <ndpGetOption>
 800e6a4:	6338      	str	r0, [r7, #48]	; 0x30
      length, NDP_OPT_SOURCE_LINK_LAYER_ADDR);

   //Source Link-Layer Address option found?
   if(linkLayerAddrOption != NULL && linkLayerAddrOption->length == 1)
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d003      	beq.n	800e6b4 <ndpProcessRouterAdv+0x158>
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	785b      	ldrb	r3, [r3, #1]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d001      	beq.n	800e6b8 <ndpProcessRouterAdv+0x15c>
         macAddrToString(&linkLayerAddrOption->linkLayerAddr, NULL));
   }
   else
   {
      //No valid Source Link-Layer Address option...
      linkLayerAddrOption = NULL;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Search the Neighbor cache for the router
   entry = ndpFindNeighborCacheEntry(interface, &pseudoHeader->srcAddr);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f000 fff0 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800e6c2:	6238      	str	r0, [r7, #32]

   //No matching entry has been found?
   if(!entry)
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d128      	bne.n	800e71c <ndpProcessRouterAdv+0x1c0>
   {
      //If the advertisement contains a Source Link-Layer Address option,
      //the link-layer address should be recorded in the Neighbor cache
      if(linkLayerAddrOption)
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d06c      	beq.n	800e7aa <ndpProcessRouterAdv+0x24e>
      {
         //Create an entry for the router
         entry = ndpCreateNeighborCacheEntry(interface);
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 ffa3 	bl	800f61c <ndpCreateNeighborCacheEntry>
 800e6d6:	6238      	str	r0, [r7, #32]

         //Neighbor cache entry successfully created?
         if(entry)
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d065      	beq.n	800e7aa <ndpProcessRouterAdv+0x24e>
         {
            //Record the IPv6 address and the corresponding MAC address
            entry->ipAddr = pseudoHeader->srcAddr;
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	6814      	ldr	r4, [r2, #0]
 800e6e6:	6850      	ldr	r0, [r2, #4]
 800e6e8:	6891      	ldr	r1, [r2, #8]
 800e6ea:	68d2      	ldr	r2, [r2, #12]
 800e6ec:	601c      	str	r4, [r3, #0]
 800e6ee:	6058      	str	r0, [r3, #4]
 800e6f0:	6099      	str	r1, [r3, #8]
 800e6f2:	60da      	str	r2, [r3, #12]
            entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f8:	3311      	adds	r3, #17
 800e6fa:	3202      	adds	r2, #2
 800e6fc:	6811      	ldr	r1, [r2, #0]
 800e6fe:	6019      	str	r1, [r3, #0]
 800e700:	8892      	ldrh	r2, [r2, #4]
 800e702:	809a      	strh	r2, [r3, #4]
            //The IsRouter flag must be set to TRUE
            entry->isRouter = TRUE;
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	2201      	movs	r2, #1
 800e708:	619a      	str	r2, [r3, #24]
            //Save current time
            entry->timestamp = osGetSystemTime();
 800e70a:	f7f2 fdc9 	bl	80012a0 <osGetSystemTime>
 800e70e:	4602      	mov	r2, r0
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	61da      	str	r2, [r3, #28]
            //The reachability state must be set to STALE
            entry->state = NDP_STATE_STALE;
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	2203      	movs	r2, #3
 800e718:	701a      	strb	r2, [r3, #0]
 800e71a:	e046      	b.n	800e7aa <ndpProcessRouterAdv+0x24e>
      }
   }
   else
   {
      //The sender of a Router Advertisement is implicitly assumed to be a router
      entry->isRouter = TRUE;
 800e71c:	6a3b      	ldr	r3, [r7, #32]
 800e71e:	2201      	movs	r2, #1
 800e720:	619a      	str	r2, [r3, #24]

      //Check if the advertisement contains a Source Link-Layer Address option
      if(linkLayerAddrOption)
 800e722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e724:	2b00      	cmp	r3, #0
 800e726:	d040      	beq.n	800e7aa <ndpProcessRouterAdv+0x24e>
      {
         //INCOMPLETE state?
         if(entry->state == NDP_STATE_INCOMPLETE)
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d120      	bne.n	800e772 <ndpProcessRouterAdv+0x216>
         {
            //Record link-layer address
            entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e734:	3311      	adds	r3, #17
 800e736:	3202      	adds	r2, #2
 800e738:	6811      	ldr	r1, [r2, #0]
 800e73a:	6019      	str	r1, [r3, #0]
 800e73c:	8892      	ldrh	r2, [r2, #4]
 800e73e:	809a      	strh	r2, [r3, #4]
            //Send all the packets that are pending for transmission
            n = ndpSendQueuedPackets(interface, entry);
 800e740:	6a39      	ldr	r1, [r7, #32]
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f001 f8c7 	bl	800f8d6 <ndpSendQueuedPackets>
 800e748:	6378      	str	r0, [r7, #52]	; 0x34
            //Save current time
            entry->timestamp = osGetSystemTime();
 800e74a:	f7f2 fda9 	bl	80012a0 <osGetSystemTime>
 800e74e:	4602      	mov	r2, r0
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	61da      	str	r2, [r3, #28]

            //Check whether any packets have been sent
            if(n > 0)
 800e754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e756:	2b00      	cmp	r3, #0
 800e758:	d007      	beq.n	800e76a <ndpProcessRouterAdv+0x20e>
            {
               //Start delay timer
               entry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e760:	621a      	str	r2, [r3, #32]
               //Switch to the DELAY state
               entry->state = NDP_STATE_DELAY;
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	2204      	movs	r2, #4
 800e766:	701a      	strb	r2, [r3, #0]
 800e768:	e01f      	b.n	800e7aa <ndpProcessRouterAdv+0x24e>
            }
            else
            {
               //Enter the STALE state
               entry->state = NDP_STATE_STALE;
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	2203      	movs	r2, #3
 800e76e:	701a      	strb	r2, [r3, #0]
 800e770:	e01b      	b.n	800e7aa <ndpProcessRouterAdv+0x24e>
         }
         //REACHABLE, STALE, DELAY or PROBE state?
         else
         {
            //Different link-layer address than cached?
            if(!macCompAddr(&entry->macAddr, &linkLayerAddrOption->linkLayerAddr))
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	f103 0011 	add.w	r0, r3, #17
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	3302      	adds	r3, #2
 800e77c:	2206      	movs	r2, #6
 800e77e:	4619      	mov	r1, r3
 800e780:	f00f f870 	bl	801d864 <memcmp>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00f      	beq.n	800e7aa <ndpProcessRouterAdv+0x24e>
            {
               //Update link-layer address
               entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78e:	3311      	adds	r3, #17
 800e790:	3202      	adds	r2, #2
 800e792:	6811      	ldr	r1, [r2, #0]
 800e794:	6019      	str	r1, [r3, #0]
 800e796:	8892      	ldrh	r2, [r2, #4]
 800e798:	809a      	strh	r2, [r3, #4]
               //Save current time
               entry->timestamp = osGetSystemTime();
 800e79a:	f7f2 fd81 	bl	80012a0 <osGetSystemTime>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	61da      	str	r2, [r3, #28]
               //The reachability state must be set to STALE
               entry->state = NDP_STATE_STALE;
 800e7a4:	6a3b      	ldr	r3, [r7, #32]
 800e7a6:	2203      	movs	r2, #3
 800e7a8:	701a      	strb	r2, [r3, #0]
      }
   }
#endif

   //Search for the MTU option
   mtuOption = ndpGetOption(message->options, length, NDP_OPT_MTU);
 800e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ac:	3310      	adds	r3, #16
 800e7ae:	2205      	movs	r2, #5
 800e7b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f001 fd0e 	bl	80101d4 <ndpGetOption>
 800e7b8:	61f8      	str	r0, [r7, #28]

   //MTU option found?
   if(mtuOption != NULL && mtuOption->length == 1)
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d01b      	beq.n	800e7f8 <ndpProcessRouterAdv+0x29c>
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	785b      	ldrb	r3, [r3, #1]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d117      	bne.n	800e7f8 <ndpProcessRouterAdv+0x29c>
   {
      NetInterface *physicalInterface;

      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f003 f907 	bl	80119dc <nicGetPhysicalInterface>
 800e7ce:	61b8      	str	r0, [r7, #24]

      //This option specifies the recommended MTU for the link
      n = ntohl(mtuOption->mtu);
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f2 fb8b 	bl	8000ef0 <swapInt32>
 800e7da:	6378      	str	r0, [r7, #52]	; 0x34

      //The host should copy the option's value so long as the value is greater
      //than or equal to the minimum IPv6 MTU and does not exceed the maximum
      //MTU of the interface
      if(n >= IPV6_DEFAULT_MTU && n <= physicalInterface->nicDriver->mtu)
 800e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e7e2:	d309      	bcc.n	800e7f8 <ndpProcessRouterAdv+0x29c>
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d803      	bhi.n	800e7f8 <ndpProcessRouterAdv+0x29c>
      {
         //Save the MTU value
         interface->ipv6Context.linkMtu = n;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7f4:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
      }
   }

   //Point to the beginning of the Options field
   n = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	637b      	str	r3, [r7, #52]	; 0x34

   //Parse Options field
   while(1)
   {
      //Search the Options field for any Prefix Information options
      prefixInfoOption = ndpGetOption(message->options + n,
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	f103 0210 	add.w	r2, r3, #16
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	18d0      	adds	r0, r2, r3
         length - n, NDP_OPT_PREFIX_INFORMATION);
 800e806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	1ad3      	subs	r3, r2, r3
      prefixInfoOption = ndpGetOption(message->options + n,
 800e80c:	2203      	movs	r2, #3
 800e80e:	4619      	mov	r1, r3
 800e810:	f001 fce0 	bl	80101d4 <ndpGetOption>
 800e814:	6178      	str	r0, [r7, #20]

      //No more option of the specified type?
      if(prefixInfoOption == NULL)
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d010      	beq.n	800e83e <ndpProcessRouterAdv+0x2e2>
         break;

      //Hosts use the advertised on-link prefixes to build and maintain
      //a list that is used in deciding when a packet's destination is
      //on-link or beyond a router
      ndpParsePrefixInfoOption(interface, prefixInfoOption);
 800e81c:	6979      	ldr	r1, [r7, #20]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f001 f974 	bl	800fb0c <ndpParsePrefixInfoOption>

      //Retrieve the offset to the current position
      n = (uint8_t *) prefixInfoOption - message->options;
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	3310      	adds	r3, #16
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	637b      	str	r3, [r7, #52]	; 0x34
      //Jump to the next option
      n += prefixInfoOption->length * 8;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	785b      	ldrb	r3, [r3, #1]
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	461a      	mov	r2, r3
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	4413      	add	r3, r2
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34
      prefixInfoOption = ndpGetOption(message->options + n,
 800e83c:	e7de      	b.n	800e7fc <ndpProcessRouterAdv+0x2a0>
         break;
 800e83e:	bf00      	nop
   }

#if (SLAAC_SUPPORT == ENABLED)
   //Stateless Address Autoconfiguration is currently used?
   if(interface->slaacContext != NULL)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	; 0xf0c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d014      	beq.n	800e874 <ndpProcessRouterAdv+0x318>
   {
      //Process the valid advertisement
      slaacParseRouterAdv(interface->slaacContext, message,
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8d3 0f0c 	ldr.w	r0, [r3, #3852]	; 0xf0c
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	3310      	adds	r3, #16
 800e854:	461a      	mov	r2, r3
 800e856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e858:	f003 faea 	bl	8011e30 <slaacParseRouterAdv>
 800e85c:	e00a      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e85e:	bf00      	nop
 800e860:	e008      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e862:	bf00      	nop
 800e864:	e006      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e866:	bf00      	nop
 800e868:	e004      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e86a:	bf00      	nop
 800e86c:	e002      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e86e:	bf00      	nop
 800e870:	e000      	b.n	800e874 <ndpProcessRouterAdv+0x318>
      return;
 800e872:	bf00      	nop
         length + sizeof(NdpRouterAdvMessage));
   }
#endif
}
 800e874:	373c      	adds	r7, #60	; 0x3c
 800e876:	46bd      	mov	sp, r7
 800e878:	bd90      	pop	{r4, r7, pc}
	...

0800e87c <ndpProcessNeighborSol>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void ndpProcessNeighborSol(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800e87c:	b590      	push	{r4, r7, lr}
 800e87e:	b08f      	sub	sp, #60	; 0x3c
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
   NdpLinkLayerAddrOption *option;
   NdpNeighborCacheEntry *neighborCacheEntry;
   Ipv6AddrEntry *addrEntry;

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f002 f877 	bl	801097e <netBufferGetLength>
 800e890:	4602      	mov	r2, r0
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Check the length of the Neighbor Solicitation message
   if(length < sizeof(NdpNeighborSolMessage))
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	2b17      	cmp	r3, #23
 800e89c:	f240 8121 	bls.w	800eae2 <ndpProcessNeighborSol+0x266>
      return;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f002 f933 	bl	8010b0e <netBufferAt>
 800e8a8:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800e8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 811a 	beq.w	800eae6 <ndpProcessNeighborSol+0x26a>
      return;

   //Debug message
   TRACE_INFO("Neighbor Solicitation message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborSolMessage(message);
 800e8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8b4:	f000 fe94 	bl	800f5e0 <ndpDumpNeighborSolMessage>

   //The IPv6 Hop Limit field must have a value of 255 to ensure
   //that the packet has not been forwarded by a router
   if(hopLimit != NDP_HOP_LIMIT)
 800e8b8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e8bc:	2bff      	cmp	r3, #255	; 0xff
 800e8be:	f040 8114 	bne.w	800eaea <ndpProcessNeighborSol+0x26e>
      return;

   //ICMPv6 Code must be 0
   if(message->code)
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	785b      	ldrb	r3, [r3, #1]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f040 8111 	bne.w	800eaee <ndpProcessNeighborSol+0x272>
      return;

   //If the IP source address is the unspecified address, the IP
   //destination address must be a solicited-node multicast address
   if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	2210      	movs	r2, #16
 800e8d0:	498f      	ldr	r1, [pc, #572]	; (800eb10 <ndpProcessNeighborSol+0x294>)
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f00e ffc6 	bl	801d864 <memcmp>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <ndpProcessNeighborSol+0x78>
      !ipv6IsSolicitedNodeAddr(&pseudoHeader->destAddr))
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	3310      	adds	r3, #16
 800e8e2:	2268      	movs	r2, #104	; 0x68
 800e8e4:	498b      	ldr	r1, [pc, #556]	; (800eb14 <ndpProcessNeighborSol+0x298>)
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fd fdb4 	bl	800c454 <ipv6CompPrefix>
 800e8ec:	4603      	mov	r3, r0
   if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 80ff 	beq.w	800eaf2 <ndpProcessNeighborSol+0x276>
      //Exit immediately
      return;
   }

   //Calculate the length of the Options field
   length -= sizeof(NdpNeighborSolMessage);
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	3b18      	subs	r3, #24
 800e8f8:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Parse Options field
   error = ndpCheckOptions(message->options, length);
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	3318      	adds	r3, #24
 800e8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e900:	4618      	mov	r0, r3
 800e902:	f001 fca3 	bl	801024c <ndpCheckOptions>
 800e906:	4603      	mov	r3, r0
 800e908:	84fb      	strh	r3, [r7, #38]	; 0x26
   //All included options must have a length that is greater than zero
   if(error)
 800e90a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f040 80f2 	bne.w	800eaf6 <ndpProcessNeighborSol+0x27a>
      return;

   //Search for the Source Link-Layer Address option
   option = ndpGetOption(message->options,
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	3318      	adds	r3, #24
 800e916:	2201      	movs	r2, #1
 800e918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e91a:	4618      	mov	r0, r3
 800e91c:	f001 fc5a 	bl	80101d4 <ndpGetOption>
 800e920:	6238      	str	r0, [r7, #32]
      length, NDP_OPT_SOURCE_LINK_LAYER_ADDR);

   //The target address must a valid unicast or anycast address assigned to
   //the interface or a tentative address on which DAD is being performed
   validTarget = FALSE;
 800e922:	2300      	movs	r3, #0
 800e924:	633b      	str	r3, [r7, #48]	; 0x30

   //Loop through the IPv6 addresses assigned to the interface
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800e926:	2300      	movs	r3, #0
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
 800e92a:	e034      	b.n	800e996 <ndpProcessNeighborSol+0x11a>
   {
      //Point to the current entry
      addrEntry = &interface->ipv6Context.addrList[i];
 800e92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e92e:	4613      	mov	r3, r2
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	4413      	add	r3, r2
 800e934:	011b      	lsls	r3, r3, #4
 800e936:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	3304      	adds	r3, #4
 800e940:	61fb      	str	r3, [r7, #28]

      //Compare target address
      if(ipv6CompAddr(&addrEntry->addr, &message->targetAddr))
 800e942:	69f8      	ldr	r0, [r7, #28]
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	3308      	adds	r3, #8
 800e948:	2210      	movs	r2, #16
 800e94a:	4619      	mov	r1, r3
 800e94c:	f00e ff8a 	bl	801d864 <memcmp>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d11c      	bne.n	800e990 <ndpProcessNeighborSol+0x114>
      {
         //Check address state
         if(addrEntry->state == IPV6_ADDR_STATE_TENTATIVE)
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	7c1b      	ldrb	r3, [r3, #16]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d111      	bne.n	800e982 <ndpProcessNeighborSol+0x106>
         {
            //If the source address of the Neighbor Solicitation is the
            //unspecified address, the solicitation is from a node
            //performing Duplicate Address Detection
            if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2210      	movs	r2, #16
 800e962:	496b      	ldr	r1, [pc, #428]	; (800eb10 <ndpProcessNeighborSol+0x294>)
 800e964:	4618      	mov	r0, r3
 800e966:	f00e ff7d 	bl	801d864 <memcmp>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f040 80c4 	bne.w	800eafa <ndpProcessNeighborSol+0x27e>
            {
               //The source link-layer address must not be included when the
               //source IP address is the unspecified address...
               if(option == NULL)
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 80c0 	bne.w	800eafa <ndpProcessNeighborSol+0x27e>
                  //Debug message
                  TRACE_WARNING("The tentative address %s is a duplicate!\r\n",
                     ipv6AddrToString(&addrEntry->addr, NULL));

                  //The tentative address is a duplicate and should not be used
                  addrEntry->duplicate = TRUE;
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	2201      	movs	r2, #1
 800e97e:	615a      	str	r2, [r3, #20]
               }
            }

            //In all cases, a node must not respond to a Neighbor Solicitation
            //for a tentative address
            return;
 800e980:	e0bb      	b.n	800eafa <ndpProcessNeighborSol+0x27e>
         }
         else if(addrEntry->state != IPV6_ADDR_STATE_INVALID)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	7c1b      	ldrb	r3, [r3, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <ndpProcessNeighborSol+0x114>
         {
            //The target address is a valid address assigned to the interface
            validTarget = TRUE;
 800e98a:	2301      	movs	r3, #1
 800e98c:	633b      	str	r3, [r7, #48]	; 0x30
            //We are done
            break;
 800e98e:	e005      	b.n	800e99c <ndpProcessNeighborSol+0x120>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	3301      	adds	r3, #1
 800e994:	637b      	str	r3, [r7, #52]	; 0x34
 800e996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d9c7      	bls.n	800e92c <ndpProcessNeighborSol+0xb0>
         }
      }
   }

   //Invalid target address?
   if(!validTarget)
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d109      	bne.n	800e9b6 <ndpProcessNeighborSol+0x13a>
   {
      //The Neighbor Solicitation must be discarded if the target address
      //is not a valid anycast address assigned to the interface
      if(!ipv6IsAnycastAddr(interface, &message->targetAddr))
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7fd fc97 	bl	800c2dc <ipv6IsAnycastAddr>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f000 80a4 	beq.w	800eafe <ndpProcessNeighborSol+0x282>
         return;
      }
   }

   //Source Link-Layer Address option found?
   if(option != NULL && option->length == 1)
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d07b      	beq.n	800eab4 <ndpProcessNeighborSol+0x238>
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	785b      	ldrb	r3, [r3, #1]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d177      	bne.n	800eab4 <ndpProcessNeighborSol+0x238>
      TRACE_DEBUG("  Source Link-Layer Address = %s\r\n",
         macAddrToString(&option->linkLayerAddr, NULL));

      //The Source Link-Layer Address option must not be included when the
      //source IP address is the unspecified address
      if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2210      	movs	r2, #16
 800e9c8:	4951      	ldr	r1, [pc, #324]	; (800eb10 <ndpProcessNeighborSol+0x294>)
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f00e ff4a 	bl	801d864 <memcmp>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 8095 	beq.w	800eb02 <ndpProcessNeighborSol+0x286>
         return;

      //Search the Neighbor Cache for the source address of the solicitation
      neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &pseudoHeader->srcAddr);
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	4619      	mov	r1, r3
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 fe60 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800e9e2:	61b8      	str	r0, [r7, #24]

      //No matching entry has been found?
      if(!neighborCacheEntry)
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d122      	bne.n	800ea30 <ndpProcessNeighborSol+0x1b4>
      {
         //Create an entry
         neighborCacheEntry = ndpCreateNeighborCacheEntry(interface);
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f000 fe16 	bl	800f61c <ndpCreateNeighborCacheEntry>
 800e9f0:	61b8      	str	r0, [r7, #24]

         //Neighbor Cache entry successfully created?
         if(neighborCacheEntry)
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d06b      	beq.n	800ead0 <ndpProcessNeighborSol+0x254>
         {
            //Record the IPv6 and the corresponding MAC address
            neighborCacheEntry->ipAddr = pseudoHeader->srcAddr;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	6814      	ldr	r4, [r2, #0]
 800ea00:	6850      	ldr	r0, [r2, #4]
 800ea02:	6891      	ldr	r1, [r2, #8]
 800ea04:	68d2      	ldr	r2, [r2, #12]
 800ea06:	601c      	str	r4, [r3, #0]
 800ea08:	6058      	str	r0, [r3, #4]
 800ea0a:	6099      	str	r1, [r3, #8]
 800ea0c:	60da      	str	r2, [r3, #12]
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	6a3a      	ldr	r2, [r7, #32]
 800ea12:	3311      	adds	r3, #17
 800ea14:	3202      	adds	r2, #2
 800ea16:	6811      	ldr	r1, [r2, #0]
 800ea18:	6019      	str	r1, [r3, #0]
 800ea1a:	8892      	ldrh	r2, [r2, #4]
 800ea1c:	809a      	strh	r2, [r3, #4]
            //Save current time
            neighborCacheEntry->timestamp = osGetSystemTime();
 800ea1e:	f7f2 fc3f 	bl	80012a0 <osGetSystemTime>
 800ea22:	4602      	mov	r2, r0
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	61da      	str	r2, [r3, #28]
            //Enter the STALE state
            neighborCacheEntry->state = NDP_STATE_STALE;
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	2203      	movs	r2, #3
 800ea2c:	701a      	strb	r2, [r3, #0]
      if(!neighborCacheEntry)
 800ea2e:	e04f      	b.n	800ead0 <ndpProcessNeighborSol+0x254>
         }
      }
      else
      {
         //INCOMPLETE state?
         if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d120      	bne.n	800ea7a <ndpProcessNeighborSol+0x1fe>
         {
            //Record link-layer address
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	6a3a      	ldr	r2, [r7, #32]
 800ea3c:	3311      	adds	r3, #17
 800ea3e:	3202      	adds	r2, #2
 800ea40:	6811      	ldr	r1, [r2, #0]
 800ea42:	6019      	str	r1, [r3, #0]
 800ea44:	8892      	ldrh	r2, [r2, #4]
 800ea46:	809a      	strh	r2, [r3, #4]
            //Send all the packets that are pending for transmission
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800ea48:	69b9      	ldr	r1, [r7, #24]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f000 ff43 	bl	800f8d6 <ndpSendQueuedPackets>
 800ea50:	6178      	str	r0, [r7, #20]
            //Save current time
            neighborCacheEntry->timestamp = osGetSystemTime();
 800ea52:	f7f2 fc25 	bl	80012a0 <osGetSystemTime>
 800ea56:	4602      	mov	r2, r0
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	61da      	str	r2, [r3, #28]

            //Check whether any packets have been sent
            if(n > 0)
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d007      	beq.n	800ea72 <ndpProcessNeighborSol+0x1f6>
            {
               //Start delay timer
               neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea68:	621a      	str	r2, [r3, #32]
               //Switch to the DELAY state
               neighborCacheEntry->state = NDP_STATE_DELAY;
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	2204      	movs	r2, #4
 800ea6e:	701a      	strb	r2, [r3, #0]
      if(!neighborCacheEntry)
 800ea70:	e02e      	b.n	800ead0 <ndpProcessNeighborSol+0x254>
            }
            else
            {
               //Enter the STALE state
               neighborCacheEntry->state = NDP_STATE_STALE;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	2203      	movs	r2, #3
 800ea76:	701a      	strb	r2, [r3, #0]
      if(!neighborCacheEntry)
 800ea78:	e02a      	b.n	800ead0 <ndpProcessNeighborSol+0x254>
         }
         //REACHABLE, STALE, DELAY or PROBE state?
         else
         {
            //Different link-layer address than cached?
            if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	f103 0011 	add.w	r0, r3, #17
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	3302      	adds	r3, #2
 800ea84:	2206      	movs	r2, #6
 800ea86:	4619      	mov	r1, r3
 800ea88:	f00e feec 	bl	801d864 <memcmp>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d01e      	beq.n	800ead0 <ndpProcessNeighborSol+0x254>
            {
               //Update link-layer address
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	6a3a      	ldr	r2, [r7, #32]
 800ea96:	3311      	adds	r3, #17
 800ea98:	3202      	adds	r2, #2
 800ea9a:	6811      	ldr	r1, [r2, #0]
 800ea9c:	6019      	str	r1, [r3, #0]
 800ea9e:	8892      	ldrh	r2, [r2, #4]
 800eaa0:	809a      	strh	r2, [r3, #4]
               //Save current time
               neighborCacheEntry->timestamp = osGetSystemTime();
 800eaa2:	f7f2 fbfd 	bl	80012a0 <osGetSystemTime>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	61da      	str	r2, [r3, #28]
               //Enter the STALE state
               neighborCacheEntry->state = NDP_STATE_STALE;
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	2203      	movs	r2, #3
 800eab0:	701a      	strb	r2, [r3, #0]
      if(!neighborCacheEntry)
 800eab2:	e00d      	b.n	800ead0 <ndpProcessNeighborSol+0x254>
   else
   {
      //The Source Link-Layer Address option must not be included when the
      //source IP address is the unspecified address. Otherwise, this option
      //must be included in multicast solicitations
      if(!ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	2210      	movs	r2, #16
 800eab8:	4915      	ldr	r1, [pc, #84]	; (800eb10 <ndpProcessNeighborSol+0x294>)
 800eaba:	4618      	mov	r0, r3
 800eabc:	f00e fed2 	bl	801d864 <memcmp>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d005      	beq.n	800ead2 <ndpProcessNeighborSol+0x256>
         ipv6IsMulticastAddr(&pseudoHeader->destAddr))
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	7c1b      	ldrb	r3, [r3, #16]
      if(!ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800eaca:	2bff      	cmp	r3, #255	; 0xff
 800eacc:	d01b      	beq.n	800eb06 <ndpProcessNeighborSol+0x28a>
 800eace:	e000      	b.n	800ead2 <ndpProcessNeighborSol+0x256>
      if(!neighborCacheEntry)
 800ead0:	bf00      	nop
      }
   }

   //After any updates to the Neighbor cache, the node sends a Neighbor
   //Advertisement response as described in RFC 4861 7.2.4
   ndpSendNeighborAdv(interface, &message->targetAddr, &pseudoHeader->srcAddr);
 800ead2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead4:	3308      	adds	r3, #8
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	4619      	mov	r1, r3
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f000 fc58 	bl	800f390 <ndpSendNeighborAdv>
 800eae0:	e012      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eae2:	bf00      	nop
 800eae4:	e010      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eae6:	bf00      	nop
 800eae8:	e00e      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eaea:	bf00      	nop
 800eaec:	e00c      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eaee:	bf00      	nop
 800eaf0:	e00a      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eaf2:	bf00      	nop
 800eaf4:	e008      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
      return;
 800eaf6:	bf00      	nop
 800eaf8:	e006      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
            return;
 800eafa:	bf00      	nop
 800eafc:	e004      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
         return;
 800eafe:	bf00      	nop
 800eb00:	e002      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
         return;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <ndpProcessNeighborSol+0x28c>
         return;
 800eb06:	bf00      	nop
#endif
}
 800eb08:	373c      	adds	r7, #60	; 0x3c
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd90      	pop	{r4, r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	08024c2c 	.word	0x08024c2c
 800eb14:	08024c7c 	.word	0x08024c7c

0800eb18 <ndpProcessNeighborAdv>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void ndpProcessNeighborAdv(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08e      	sub	sp, #56	; 0x38
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
   NdpLinkLayerAddrOption *option;
   NdpNeighborCacheEntry *neighborCacheEntry;
   Ipv6AddrEntry *addrEntry;

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 ff29 	bl	801097e <netBufferGetLength>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Check the length of the Neighbor Advertisement message
   if(length < sizeof(NdpNeighborAdvMessage))
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	2b17      	cmp	r3, #23
 800eb38:	f240 8125 	bls.w	800ed86 <ndpProcessNeighborAdv+0x26e>
      return;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800eb3c:	6839      	ldr	r1, [r7, #0]
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 ffe5 	bl	8010b0e <netBufferAt>
 800eb44:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800eb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 811e 	beq.w	800ed8a <ndpProcessNeighborAdv+0x272>
      return;

   //Debug message
   TRACE_INFO("Neighbor Advertisement message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborAdvMessage(message);
 800eb4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb50:	f000 fd50 	bl	800f5f4 <ndpDumpNeighborAdvMessage>

   //The IPv6 Hop Limit field must have a value of 255 to ensure
   //that the packet has not been forwarded by a router
   if(hopLimit != NDP_HOP_LIMIT)
 800eb54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800eb58:	2bff      	cmp	r3, #255	; 0xff
 800eb5a:	f040 8118 	bne.w	800ed8e <ndpProcessNeighborAdv+0x276>
      return;

   //ICMPv6 Code must be 0
   if(message->code)
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f040 8115 	bne.w	800ed92 <ndpProcessNeighborAdv+0x27a>
      return;

   //The target address must not be a multicast address
   if(ipv6IsMulticastAddr(&message->targetAddr))
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	7a1b      	ldrb	r3, [r3, #8]
 800eb6c:	2bff      	cmp	r3, #255	; 0xff
 800eb6e:	f000 8112 	beq.w	800ed96 <ndpProcessNeighborAdv+0x27e>
      return;
   }

   //If the destination address is a multicast address
   //then the Solicited flag must be zero
   if(ipv6IsMulticastAddr(&pseudoHeader->destAddr) && message->s)
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	7c1b      	ldrb	r3, [r3, #16]
 800eb76:	2bff      	cmp	r3, #255	; 0xff
 800eb78:	d107      	bne.n	800eb8a <ndpProcessNeighborAdv+0x72>
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	791b      	ldrb	r3, [r3, #4]
 800eb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f040 8108 	bne.w	800ed9a <ndpProcessNeighborAdv+0x282>
      //Exit immediately
      return;
   }

   //Calculate the length of the Options field
   length -= sizeof(NdpNeighborAdvMessage);
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	3b18      	subs	r3, #24
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Parse Options field
   error = ndpCheckOptions(message->options, length);
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	3318      	adds	r3, #24
 800eb94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb96:	4618      	mov	r0, r3
 800eb98:	f001 fb58 	bl	801024c <ndpCheckOptions>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	84fb      	strh	r3, [r7, #38]	; 0x26
   //All included options must have a length that is greater than zero
   if(error)
 800eba0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 80fb 	bne.w	800ed9e <ndpProcessNeighborAdv+0x286>
      return;

   //Duplicate address detection
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	637b      	str	r3, [r7, #52]	; 0x34
 800ebac:	e01f      	b.n	800ebee <ndpProcessNeighborAdv+0xd6>
   {
      //Point to the current entry
      addrEntry = &interface->ipv6Context.addrList[i];
 800ebae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	4413      	add	r3, r2
 800ebb6:	011b      	lsls	r3, r3, #4
 800ebb8:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(addrEntry->state != IPV6_ADDR_STATE_INVALID)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	7c1b      	ldrb	r3, [r3, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00d      	beq.n	800ebe8 <ndpProcessNeighborAdv+0xd0>
      {
         //Check whether the target address is tentative or matches
         //a unicast address assigned to the interface
         if(ipv6CompAddr(&addrEntry->addr, &message->targetAddr))
 800ebcc:	6978      	ldr	r0, [r7, #20]
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	3308      	adds	r3, #8
 800ebd2:	2210      	movs	r2, #16
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	f00e fe45 	bl	801d864 <memcmp>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d103      	bne.n	800ebe8 <ndpProcessNeighborAdv+0xd0>
            //Debug message
            TRACE_WARNING("The address %s is a duplicate!\r\n",
               ipv6AddrToString(&addrEntry->addr, NULL));

            //The address is a duplicate and should not be used
            addrEntry->duplicate = TRUE;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	615a      	str	r2, [r3, #20]
            //Exit immediately
            return;
 800ebe6:	e0db      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800ebe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebea:	3301      	adds	r3, #1
 800ebec:	637b      	str	r3, [r7, #52]	; 0x34
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d9dc      	bls.n	800ebae <ndpProcessNeighborAdv+0x96>
         }
      }
   }

   //Search the Neighbor cache for the specified target address
   neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &message->targetAddr);
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 fd51 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800ec00:	6238      	str	r0, [r7, #32]

   //If no entry exists, the advertisement should be silently discarded
   if(neighborCacheEntry)
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 80cb 	beq.w	800eda0 <ndpProcessNeighborAdv+0x288>
   {
      //This flag tells whether the supplied link-layer
      //address differs from that in the cache
      differentLinkLayerAddr = FALSE;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	633b      	str	r3, [r7, #48]	; 0x30

      //Search for the Target Link-Layer Address option
      option = ndpGetOption(message->options,
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	3318      	adds	r3, #24
 800ec12:	2202      	movs	r2, #2
 800ec14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec16:	4618      	mov	r0, r3
 800ec18:	f001 fadc 	bl	80101d4 <ndpGetOption>
 800ec1c:	61f8      	str	r0, [r7, #28]
         length, NDP_OPT_TARGET_LINK_LAYER_ADDR);

      //Target Link-Layer Address option found?
      if(option != NULL && option->length == 1)
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d011      	beq.n	800ec48 <ndpProcessNeighborAdv+0x130>
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d10d      	bne.n	800ec48 <ndpProcessNeighborAdv+0x130>
         //Debug message
         TRACE_DEBUG("  Target Link-Layer Address = %s\r\n",
            macAddrToString(&option->linkLayerAddr, NULL));

         //Different link-layer address than cached?
         if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	f103 0011 	add.w	r0, r3, #17
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	3302      	adds	r3, #2
 800ec36:	2206      	movs	r2, #6
 800ec38:	4619      	mov	r1, r3
 800ec3a:	f00e fe13 	bl	801d864 <memcmp>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <ndpProcessNeighborAdv+0x130>
            differentLinkLayerAddr = TRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	633b      	str	r3, [r7, #48]	; 0x30
      }

      //INCOMPLETE state?
      if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800ec48:	6a3b      	ldr	r3, [r7, #32]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d137      	bne.n	800ecc0 <ndpProcessNeighborAdv+0x1a8>
      {
         //If no Target Link-Layer Address option is included, the receiving
         //node should silently discard the received advertisement
         if(option != NULL && option->length == 1)
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d07e      	beq.n	800ed54 <ndpProcessNeighborAdv+0x23c>
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	785b      	ldrb	r3, [r3, #1]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d17a      	bne.n	800ed54 <ndpProcessNeighborAdv+0x23c>
         {
            //Record the link-layer address
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	69fa      	ldr	r2, [r7, #28]
 800ec62:	3311      	adds	r3, #17
 800ec64:	3202      	adds	r2, #2
 800ec66:	6811      	ldr	r1, [r2, #0]
 800ec68:	6019      	str	r1, [r3, #0]
 800ec6a:	8892      	ldrh	r2, [r2, #4]
 800ec6c:	809a      	strh	r2, [r3, #4]
            //Send all the packets that are pending for transmission
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800ec6e:	6a39      	ldr	r1, [r7, #32]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 fe30 	bl	800f8d6 <ndpSendQueuedPackets>
 800ec76:	61b8      	str	r0, [r7, #24]
            //Save current time
            neighborCacheEntry->timestamp = osGetSystemTime();
 800ec78:	f7f2 fb12 	bl	80012a0 <osGetSystemTime>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	61da      	str	r2, [r3, #28]

            //Solicited flag is set?
            if(message->s)
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	791b      	ldrb	r3, [r3, #4]
 800ec86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d008      	beq.n	800eca2 <ndpProcessNeighborAdv+0x18a>
            {
               //Computing the random ReachableTime value
               neighborCacheEntry->timeout = interface->ndpContext.reachableTime;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8d3 2a00 	ldr.w	r2, [r3, #2560]	; 0xa00
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	621a      	str	r2, [r3, #32]
               //Switch to the REACHABLE state
               neighborCacheEntry->state = NDP_STATE_REACHABLE;
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	701a      	strb	r2, [r3, #0]
 800eca0:	e058      	b.n	800ed54 <ndpProcessNeighborAdv+0x23c>
            }
            else
            {
               //Check whether any packets have been sent
               if(n > 0)
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d007      	beq.n	800ecb8 <ndpProcessNeighborAdv+0x1a0>
               {
                  //Start delay timer
                  neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800eca8:	6a3b      	ldr	r3, [r7, #32]
 800ecaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecae:	621a      	str	r2, [r3, #32]
                  //Switch to the DELAY state
                  neighborCacheEntry->state = NDP_STATE_DELAY;
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	2204      	movs	r2, #4
 800ecb4:	701a      	strb	r2, [r3, #0]
 800ecb6:	e04d      	b.n	800ed54 <ndpProcessNeighborAdv+0x23c>
               }
               else
               {
                  //Enter the STALE state
                  neighborCacheEntry->state = NDP_STATE_STALE;
 800ecb8:	6a3b      	ldr	r3, [r7, #32]
 800ecba:	2203      	movs	r2, #3
 800ecbc:	701a      	strb	r2, [r3, #0]
 800ecbe:	e049      	b.n	800ed54 <ndpProcessNeighborAdv+0x23c>
      //REACHABLE, STALE, DELAY or PROBE state?
      else
      {
         //Check whether the Override flag is clear and the supplied
         //link-layer address differs from that in the cache
         if(!message->o && differentLinkLayerAddr)
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	791b      	ldrb	r3, [r3, #4]
 800ecc4:	f003 0320 	and.w	r3, r3, #32
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10f      	bne.n	800ecee <ndpProcessNeighborAdv+0x1d6>
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00c      	beq.n	800ecee <ndpProcessNeighborAdv+0x1d6>
         {
            //REACHABLE state?
            if(neighborCacheEntry->state == NDP_STATE_REACHABLE)
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d13b      	bne.n	800ed54 <ndpProcessNeighborAdv+0x23c>
            {
               //Save current time
               neighborCacheEntry->timestamp = osGetSystemTime();
 800ecdc:	f7f2 fae0 	bl	80012a0 <osGetSystemTime>
 800ece0:	4602      	mov	r2, r0
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	61da      	str	r2, [r3, #28]
               //Enter the STALE state
               neighborCacheEntry->state = NDP_STATE_STALE;
 800ece6:	6a3b      	ldr	r3, [r7, #32]
 800ece8:	2203      	movs	r2, #3
 800ecea:	701a      	strb	r2, [r3, #0]
            if(neighborCacheEntry->state == NDP_STATE_REACHABLE)
 800ecec:	e032      	b.n	800ed54 <ndpProcessNeighborAdv+0x23c>
            }
         }
         else
         {
            //Solicited flag is set?
            if(message->s)
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	791b      	ldrb	r3, [r3, #4]
 800ecf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d018      	beq.n	800ed2e <ndpProcessNeighborAdv+0x216>
            {
               //Different link-layer address than cached?
               if(differentLinkLayerAddr)
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d007      	beq.n	800ed12 <ndpProcessNeighborAdv+0x1fa>
               {
                  //The link-layer address must be inserted in the cache
                  neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	69fa      	ldr	r2, [r7, #28]
 800ed06:	3311      	adds	r3, #17
 800ed08:	3202      	adds	r2, #2
 800ed0a:	6811      	ldr	r1, [r2, #0]
 800ed0c:	6019      	str	r1, [r3, #0]
 800ed0e:	8892      	ldrh	r2, [r2, #4]
 800ed10:	809a      	strh	r2, [r3, #4]
               }

               //Save current time
               neighborCacheEntry->timestamp = osGetSystemTime();
 800ed12:	f7f2 fac5 	bl	80012a0 <osGetSystemTime>
 800ed16:	4602      	mov	r2, r0
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	61da      	str	r2, [r3, #28]
               //Computing the random ReachableTime value
               neighborCacheEntry->timeout = interface->ndpContext.reachableTime;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 2a00 	ldr.w	r2, [r3, #2560]	; 0xa00
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	621a      	str	r2, [r3, #32]
               //Switch to the REACHABLE state
               neighborCacheEntry->state = NDP_STATE_REACHABLE;
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	2202      	movs	r2, #2
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	e012      	b.n	800ed54 <ndpProcessNeighborAdv+0x23c>
            }
            else
            {
               //Different link-layer address than cached?
               if(differentLinkLayerAddr)
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00f      	beq.n	800ed54 <ndpProcessNeighborAdv+0x23c>
               {
                  //The link-layer address must be inserted in the cache
                  neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	69fa      	ldr	r2, [r7, #28]
 800ed38:	3311      	adds	r3, #17
 800ed3a:	3202      	adds	r2, #2
 800ed3c:	6811      	ldr	r1, [r2, #0]
 800ed3e:	6019      	str	r1, [r3, #0]
 800ed40:	8892      	ldrh	r2, [r2, #4]
 800ed42:	809a      	strh	r2, [r3, #4]
                  //Save current time
                  neighborCacheEntry->timestamp = osGetSystemTime();
 800ed44:	f7f2 faac 	bl	80012a0 <osGetSystemTime>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	61da      	str	r2, [r3, #28]
                  //The state must be set to STALE
                  neighborCacheEntry->state = NDP_STATE_STALE;
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	2203      	movs	r2, #3
 800ed52:	701a      	strb	r2, [r3, #0]
         }
      }

      //The IsRouter flag in the cache entry must be set based
      //on the Router flag in the received advertisement
      if(message->r)
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	791b      	ldrb	r3, [r3, #4]
 800ed58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d003      	beq.n	800ed6a <ndpProcessNeighborAdv+0x252>
      {
         //The neighbor is a router
         neighborCacheEntry->isRouter = TRUE;
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	2201      	movs	r2, #1
 800ed66:	619a      	str	r2, [r3, #24]
 800ed68:	e01a      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      }
      else
      {
         //Check whether the IsRouter flag changes from TRUE to FALSE
         //as a result of this update
         if(neighborCacheEntry->isRouter)
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	699b      	ldr	r3, [r3, #24]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d005      	beq.n	800ed7e <ndpProcessNeighborAdv+0x266>
         {
            //The node must remove that router from the Default Router list
            //and update the Destination cache entries for all destinations
            //using that neighbor as a router
            ipv6RemoveDefaultRouter(interface, &neighborCacheEntry->ipAddr);
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	3301      	adds	r3, #1
 800ed76:	4619      	mov	r1, r3
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f7fd f805 	bl	800bd88 <ipv6RemoveDefaultRouter>
         }

         //The neighbor is a host
         neighborCacheEntry->isRouter = FALSE;
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	2200      	movs	r2, #0
 800ed82:	619a      	str	r2, [r3, #24]
 800ed84:	e00c      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed86:	bf00      	nop
 800ed88:	e00a      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed8a:	bf00      	nop
 800ed8c:	e008      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed8e:	bf00      	nop
 800ed90:	e006      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed92:	bf00      	nop
 800ed94:	e004      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed96:	bf00      	nop
 800ed98:	e002      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed9a:	bf00      	nop
 800ed9c:	e000      	b.n	800eda0 <ndpProcessNeighborAdv+0x288>
      return;
 800ed9e:	bf00      	nop
      }
   }
#endif
}
 800eda0:	3738      	adds	r7, #56	; 0x38
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <ndpProcessRedirect>:
 * @param[in] hopLimit Hop Limit field from IPv6 header
 **/

void ndpProcessRedirect(NetInterface *interface, Ipv6PseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, uint8_t hopLimit)
{
 800eda6:	b590      	push	{r4, r7, lr}
 800eda8:	b08d      	sub	sp, #52	; 0x34
 800edaa:	af00      	add	r7, sp, #0
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	60b9      	str	r1, [r7, #8]
 800edb0:	607a      	str	r2, [r7, #4]
 800edb2:	603b      	str	r3, [r7, #0]
   NdpLinkLayerAddrOption *option;
   NdpNeighborCacheEntry *neighborCacheEntry;
   NdpDestCacheEntry *destCacheEntry;

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f001 fde2 	bl	801097e <netBufferGetLength>
 800edba:	4602      	mov	r2, r0
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Check the length of the Redirect message
   if(length < sizeof(NdpRedirectMessage))
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	2b27      	cmp	r3, #39	; 0x27
 800edc6:	f240 812a 	bls.w	800f01e <ndpProcessRedirect+0x278>
      return;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f001 fe9e 	bl	8010b0e <netBufferAt>
 800edd2:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f000 8123 	beq.w	800f022 <ndpProcessRedirect+0x27c>
      return;

   //Debug message
   TRACE_INFO("Redirect message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpRedirectMessage(message);
 800eddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edde:	f000 fc13 	bl	800f608 <ndpDumpRedirectMessage>

   //The IPv6 Hop Limit field must have a value of 255 to ensure
   //that the packet has not been forwarded by a router
   if(hopLimit != NDP_HOP_LIMIT)
 800ede2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ede6:	2bff      	cmp	r3, #255	; 0xff
 800ede8:	f040 811d 	bne.w	800f026 <ndpProcessRedirect+0x280>
      return;

   //ICMPv6 Code must be 0
   if(message->code)
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	785b      	ldrb	r3, [r3, #1]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f040 811a 	bne.w	800f02a <ndpProcessRedirect+0x284>
      return;

   //Routers must use their link-local address as the source for Redirect
   //messages so that hosts can uniquely identify routers
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2bfe      	cmp	r3, #254	; 0xfe
 800edfc:	f040 8117 	bne.w	800f02e <ndpProcessRedirect+0x288>
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	785b      	ldrb	r3, [r3, #1]
 800ee04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee08:	2b80      	cmp	r3, #128	; 0x80
 800ee0a:	f040 8110 	bne.w	800f02e <ndpProcessRedirect+0x288>
      return;

   //The IP source address of the Redirect must be the same as the current
   //first-hop router for the specified Destination address
   if(!ndpIsFirstHopRouter(interface, &message->destAddr, &pseudoHeader->srcAddr))
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	3318      	adds	r3, #24
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	4619      	mov	r1, r3
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f001 f8ce 	bl	800ffb8 <ndpIsFirstHopRouter>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f000 8107 	beq.w	800f032 <ndpProcessRedirect+0x28c>
      return;

   //The Destination Address field in the Redirect message must not
   //contain a multicast address
   if(ipv6IsMulticastAddr(&message->destAddr))
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	7e1b      	ldrb	r3, [r3, #24]
 800ee28:	2bff      	cmp	r3, #255	; 0xff
 800ee2a:	f000 8104 	beq.w	800f036 <ndpProcessRedirect+0x290>
      return;

   //The Target Address must be either a link-local address (when redirected
   //to a router) or the same as the Destination Address (when redirected to
   //the on-link destination)
   if(!ipv6IsLinkLocalUnicastAddr(&message->targetAddr) &&
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	7a1b      	ldrb	r3, [r3, #8]
 800ee32:	2bfe      	cmp	r3, #254	; 0xfe
 800ee34:	d105      	bne.n	800ee42 <ndpProcessRedirect+0x9c>
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	7a5b      	ldrb	r3, [r3, #9]
 800ee3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee3e:	2b80      	cmp	r3, #128	; 0x80
 800ee40:	d00c      	beq.n	800ee5c <ndpProcessRedirect+0xb6>
      !ipv6CompAddr(&message->targetAddr, &message->destAddr))
 800ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee44:	f103 0008 	add.w	r0, r3, #8
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	3318      	adds	r3, #24
 800ee4c:	2210      	movs	r2, #16
 800ee4e:	4619      	mov	r1, r3
 800ee50:	f00e fd08 	bl	801d864 <memcmp>
 800ee54:	4603      	mov	r3, r0
   if(!ipv6IsLinkLocalUnicastAddr(&message->targetAddr) &&
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f040 80ef 	bne.w	800f03a <ndpProcessRedirect+0x294>
      //Silently discard the received Redirect message
      return;
   }

   //Calculate the length of the Options field
   length -= sizeof(NdpNeighborAdvMessage);
 800ee5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5e:	3b18      	subs	r3, #24
 800ee60:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Parse Options field
   error = ndpCheckOptions(message->options, length);
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	3328      	adds	r3, #40	; 0x28
 800ee66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f001 f9ef 	bl	801024c <ndpCheckOptions>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	84fb      	strh	r3, [r7, #38]	; 0x26
   //All included options must have a length that is greater than zero
   if(error)
 800ee72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f040 80e2 	bne.w	800f03e <ndpProcessRedirect+0x298>
      return;

   //Search the Destination cache for the specified address
   destCacheEntry = ndpFindDestCacheEntry(interface, &message->destAddr);
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	3318      	adds	r3, #24
 800ee7e:	4619      	mov	r1, r3
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 fe09 	bl	800fa98 <ndpFindDestCacheEntry>
 800ee86:	6238      	str	r0, [r7, #32]

   //Check whether a corresponding Destination cache entry exists
   if(destCacheEntry)
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00f      	beq.n	800eeae <ndpProcessRedirect+0x108>
   {
      //The entry is updated with information learned from Redirect messages
      destCacheEntry->nextHop = message->targetAddr;
 800ee8e:	6a3a      	ldr	r2, [r7, #32]
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	f102 0410 	add.w	r4, r2, #16
 800ee96:	3308      	adds	r3, #8
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	6859      	ldr	r1, [r3, #4]
 800ee9c:	689a      	ldr	r2, [r3, #8]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      //Save current time
      destCacheEntry->timestamp = osGetSystemTime();
 800eea2:	f7f2 f9fd 	bl	80012a0 <osGetSystemTime>
 800eea6:	4602      	mov	r2, r0
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	625a      	str	r2, [r3, #36]	; 0x24
 800eeac:	e023      	b.n	800eef6 <ndpProcessRedirect+0x150>
   }
   else
   {
      //If no Destination Cache entry exists for the destination, an
      //implementation should create such an entry
      destCacheEntry = ndpCreateDestCacheEntry(interface);
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f000 fdaa 	bl	800fa08 <ndpCreateDestCacheEntry>
 800eeb4:	6238      	str	r0, [r7, #32]

      //Destination cache entry successfully created?
      if(destCacheEntry)
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d01c      	beq.n	800eef6 <ndpProcessRedirect+0x150>
      {
         //Destination address
         destCacheEntry->destAddr = message->destAddr;
 800eebc:	6a3a      	ldr	r2, [r7, #32]
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	4614      	mov	r4, r2
 800eec2:	3318      	adds	r3, #24
 800eec4:	6818      	ldr	r0, [r3, #0]
 800eec6:	6859      	ldr	r1, [r3, #4]
 800eec8:	689a      	ldr	r2, [r3, #8]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         //Address of the next hop
         destCacheEntry->nextHop = message->targetAddr;
 800eece:	6a3a      	ldr	r2, [r7, #32]
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	f102 0410 	add.w	r4, r2, #16
 800eed6:	3308      	adds	r3, #8
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	6859      	ldr	r1, [r3, #4]
 800eedc:	689a      	ldr	r2, [r3, #8]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}

         //Initially, the PMTU value for a path is assumed to be
         //the MTU of the first-hop link
         destCacheEntry->pathMtu = interface->ipv6Context.linkMtu;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	621a      	str	r2, [r3, #32]

         //Save current time
         destCacheEntry->timestamp = osGetSystemTime();
 800eeec:	f7f2 f9d8 	bl	80012a0 <osGetSystemTime>
 800eef0:	4602      	mov	r2, r0
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	625a      	str	r2, [r3, #36]	; 0x24
      }
   }

   //Search for the Target Link-Layer Address option
   option = ndpGetOption(message->options,
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	3328      	adds	r3, #40	; 0x28
 800eefa:	2202      	movs	r2, #2
 800eefc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 f968 	bl	80101d4 <ndpGetOption>
 800ef04:	61f8      	str	r0, [r7, #28]
      length, NDP_OPT_TARGET_LINK_LAYER_ADDR);

   //If the Redirect contains a Target Link-Layer Address option, the host
   //either creates or updates the Neighbor Cache entry for the target
   if(option != NULL && option->length == 1)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 8099 	beq.w	800f040 <ndpProcessRedirect+0x29a>
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	785b      	ldrb	r3, [r3, #1]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	f040 8094 	bne.w	800f040 <ndpProcessRedirect+0x29a>
      //Debug message
      TRACE_DEBUG("  Target Link-Layer Address = %s\r\n",
         macAddrToString(&option->linkLayerAddr, NULL));

      //Search the Neighbor cache for the specified target address
      neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &message->targetAddr);
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f000 fbbf 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800ef24:	61b8      	str	r0, [r7, #24]

      //No matching entry has been found?
      if(!neighborCacheEntry)
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d127      	bne.n	800ef7c <ndpProcessRedirect+0x1d6>
      {
         //Create an entry for the target
         neighborCacheEntry = ndpCreateNeighborCacheEntry(interface);
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f000 fb75 	bl	800f61c <ndpCreateNeighborCacheEntry>
 800ef32:	61b8      	str	r0, [r7, #24]

         //Neighbor cache entry successfully created?
         if(neighborCacheEntry)
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 8082 	beq.w	800f040 <ndpProcessRedirect+0x29a>
         {
            //Record the Target address
            neighborCacheEntry->ipAddr = message->targetAddr;
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef40:	3301      	adds	r3, #1
 800ef42:	3208      	adds	r2, #8
 800ef44:	6814      	ldr	r4, [r2, #0]
 800ef46:	6850      	ldr	r0, [r2, #4]
 800ef48:	6891      	ldr	r1, [r2, #8]
 800ef4a:	68d2      	ldr	r2, [r2, #12]
 800ef4c:	601c      	str	r4, [r3, #0]
 800ef4e:	6058      	str	r0, [r3, #4]
 800ef50:	6099      	str	r1, [r3, #8]
 800ef52:	60da      	str	r2, [r3, #12]
            //The cached link-layer address is copied from the option
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	69fa      	ldr	r2, [r7, #28]
 800ef58:	3311      	adds	r3, #17
 800ef5a:	3202      	adds	r2, #2
 800ef5c:	6811      	ldr	r1, [r2, #0]
 800ef5e:	6019      	str	r1, [r3, #0]
 800ef60:	8892      	ldrh	r2, [r2, #4]
 800ef62:	809a      	strh	r2, [r3, #4]
            //Newly created Neighbor Cache entries should set the IsRouter flag to FALSE
            neighborCacheEntry->isRouter = FALSE;
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	2200      	movs	r2, #0
 800ef68:	619a      	str	r2, [r3, #24]
            //Save current time
            neighborCacheEntry->timestamp = osGetSystemTime();
 800ef6a:	f7f2 f999 	bl	80012a0 <osGetSystemTime>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	61da      	str	r2, [r3, #28]
            //The reachability state must be set to STALE
            neighborCacheEntry->state = NDP_STATE_STALE;
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	2203      	movs	r2, #3
 800ef78:	701a      	strb	r2, [r3, #0]
 800ef7a:	e061      	b.n	800f040 <ndpProcessRedirect+0x29a>
      }
      else
      {
         //If the Target Address is not the same as the Destination Address,
         //the host must set IsRouter to TRUE for the target
         if(!ipv6CompAddr(&message->targetAddr, &message->destAddr))
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	f103 0008 	add.w	r0, r3, #8
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	3318      	adds	r3, #24
 800ef86:	2210      	movs	r2, #16
 800ef88:	4619      	mov	r1, r3
 800ef8a:	f00e fc6b 	bl	801d864 <memcmp>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <ndpProcessRedirect+0x1f4>
            neighborCacheEntry->isRouter = TRUE;
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	2201      	movs	r2, #1
 800ef98:	619a      	str	r2, [r3, #24]

         //INCOMPLETE state?
         if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d120      	bne.n	800efe4 <ndpProcessRedirect+0x23e>
         {
            //Record link-layer address
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	69fa      	ldr	r2, [r7, #28]
 800efa6:	3311      	adds	r3, #17
 800efa8:	3202      	adds	r2, #2
 800efaa:	6811      	ldr	r1, [r2, #0]
 800efac:	6019      	str	r1, [r3, #0]
 800efae:	8892      	ldrh	r2, [r2, #4]
 800efb0:	809a      	strh	r2, [r3, #4]
            //Send all the packets that are pending for transmission
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800efb2:	69b9      	ldr	r1, [r7, #24]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f000 fc8e 	bl	800f8d6 <ndpSendQueuedPackets>
 800efba:	6178      	str	r0, [r7, #20]
            //Save current time
            neighborCacheEntry->timestamp = osGetSystemTime();
 800efbc:	f7f2 f970 	bl	80012a0 <osGetSystemTime>
 800efc0:	4602      	mov	r2, r0
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	61da      	str	r2, [r3, #28]

            //Check whether any packets have been sent
            if(n > 0)
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <ndpProcessRedirect+0x236>
            {
               //Start delay timer
               neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	f241 3288 	movw	r2, #5000	; 0x1388
 800efd2:	621a      	str	r2, [r3, #32]
               //Switch to the DELAY state
               neighborCacheEntry->state = NDP_STATE_DELAY;
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	2204      	movs	r2, #4
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	e031      	b.n	800f040 <ndpProcessRedirect+0x29a>
            }
            else
            {
               //Enter the STALE state
               neighborCacheEntry->state = NDP_STATE_STALE;
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	2203      	movs	r2, #3
 800efe0:	701a      	strb	r2, [r3, #0]
 800efe2:	e02d      	b.n	800f040 <ndpProcessRedirect+0x29a>
         }
         //REACHABLE, STALE, DELAY or PROBE state?
         else
         {
            //Different link-layer address than cached?
            if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	f103 0011 	add.w	r0, r3, #17
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	3302      	adds	r3, #2
 800efee:	2206      	movs	r2, #6
 800eff0:	4619      	mov	r1, r3
 800eff2:	f00e fc37 	bl	801d864 <memcmp>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d021      	beq.n	800f040 <ndpProcessRedirect+0x29a>
            {
               //Update link-layer address
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	69fa      	ldr	r2, [r7, #28]
 800f000:	3311      	adds	r3, #17
 800f002:	3202      	adds	r2, #2
 800f004:	6811      	ldr	r1, [r2, #0]
 800f006:	6019      	str	r1, [r3, #0]
 800f008:	8892      	ldrh	r2, [r2, #4]
 800f00a:	809a      	strh	r2, [r3, #4]
               //Save current time
               neighborCacheEntry->timestamp = osGetSystemTime();
 800f00c:	f7f2 f948 	bl	80012a0 <osGetSystemTime>
 800f010:	4602      	mov	r2, r0
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	61da      	str	r2, [r3, #28]
               //The reachability state must be set to STALE
               neighborCacheEntry->state = NDP_STATE_STALE;
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	2203      	movs	r2, #3
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	e010      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f01e:	bf00      	nop
 800f020:	e00e      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f022:	bf00      	nop
 800f024:	e00c      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f026:	bf00      	nop
 800f028:	e00a      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f02a:	bf00      	nop
 800f02c:	e008      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f02e:	bf00      	nop
 800f030:	e006      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f032:	bf00      	nop
 800f034:	e004      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f036:	bf00      	nop
 800f038:	e002      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f03a:	bf00      	nop
 800f03c:	e000      	b.n	800f040 <ndpProcessRedirect+0x29a>
      return;
 800f03e:	bf00      	nop
            }
         }
      }
   }
#endif
}
 800f040:	3734      	adds	r7, #52	; 0x34
 800f042:	46bd      	mov	sp, r7
 800f044:	bd90      	pop	{r4, r7, pc}
	...

0800f048 <ndpSendRouterSol>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ndpSendRouterSol(NetInterface *interface)
{
 800f048:	b5b0      	push	{r4, r5, r7, lr}
 800f04a:	b09a      	sub	sp, #104	; 0x68
 800f04c:	af02      	add	r7, sp, #8
 800f04e:	6078      	str	r0, [r7, #4]
   NdpRouterSolMessage *message;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //The destination address is typically the all-routers multicast address
   pseudoHeader.destAddr = IPV6_LINK_LOCAL_ALL_ROUTERS_ADDR;
 800f050:	4b5d      	ldr	r3, [pc, #372]	; (800f1c8 <ndpSendRouterSol+0x180>)
 800f052:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f056:	6818      	ldr	r0, [r3, #0]
 800f058:	6859      	ldr	r1, [r3, #4]
 800f05a:	689a      	ldr	r2, [r3, #8]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

   //Select the most appropriate source address to be used when sending the
   //Router Solicitation message
   error = ipv6SelectSourceAddr(&interface, &pseudoHeader.destAddr,
 800f060:	f107 0220 	add.w	r2, r7, #32
 800f064:	f107 0320 	add.w	r3, r7, #32
 800f068:	f103 0110 	add.w	r1, r3, #16
 800f06c:	1d3b      	adds	r3, r7, #4
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd f810 	bl	800c094 <ipv6SelectSourceAddr>
 800f074:	4603      	mov	r3, r0
 800f076:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      &pseudoHeader.srcAddr);

   //No address assigned to the interface?
   if(error)
 800f07a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d007      	beq.n	800f092 <ndpSendRouterSol+0x4a>
   {
      //Use the unspecified address if no address is assigned
      //to the sending interface
      pseudoHeader.srcAddr = IPV6_UNSPECIFIED_ADDR;
 800f082:	4b52      	ldr	r3, [pc, #328]	; (800f1cc <ndpSendRouterSol+0x184>)
 800f084:	f107 0420 	add.w	r4, r7, #32
 800f088:	6818      	ldr	r0, [r3, #0]
 800f08a:	6859      	ldr	r1, [r3, #4]
 800f08c:	689a      	ldr	r2, [r3, #8]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //The only defined option that may appear in a Router Solicitation
   //message is the Source Link-Layer Address option
   length = sizeof(NdpRouterSolMessage) + sizeof(NdpLinkLayerAddrOption);
 800f092:	2310      	movs	r3, #16
 800f094:	64bb      	str	r3, [r7, #72]	; 0x48

   //Allocate a memory buffer to hold the Router Solicitation message
   buffer = ipAllocBuffer(length, &offset);
 800f096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f098:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f09c:	4611      	mov	r1, r2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7f9 fce9 	bl	8008a76 <ipAllocBuffer>
 800f0a4:	65b8      	str	r0, [r7, #88]	; 0x58
   //Failed to allocate memory?
   if(buffer == NULL)
 800f0a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <ndpSendRouterSol+0x68>
      return ERROR_OUT_OF_MEMORY;
 800f0ac:	2364      	movs	r3, #100	; 0x64
 800f0ae:	e087      	b.n	800f1c0 <ndpSendRouterSol+0x178>

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800f0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f0b6:	f001 fd2a 	bl	8010b0e <netBufferAt>
 800f0ba:	6578      	str	r0, [r7, #84]	; 0x54

   //Format Router Solicitation message
   message->type = ICMPV6_TYPE_ROUTER_SOL;
 800f0bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0be:	2285      	movs	r2, #133	; 0x85
 800f0c0:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 800f0c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 800f0c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	709a      	strb	r2, [r3, #2]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	70da      	strb	r2, [r3, #3]
   message->reserved = 0;
 800f0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	711a      	strb	r2, [r3, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	715a      	strb	r2, [r3, #5]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	719a      	strb	r2, [r3, #6]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	71da      	strb	r2, [r3, #7]

   //Length of the message, excluding any option
   length = sizeof(NdpRouterSolMessage);
 800f0e4:	2308      	movs	r3, #8
 800f0e6:	64bb      	str	r3, [r7, #72]	; 0x48

   //The Source Link-Layer Address option must not be included
   //when the source IPv6 address is the unspecified address
   if(!ipv6CompAddr(&pseudoHeader.srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800f0e8:	f107 0320 	add.w	r3, r7, #32
 800f0ec:	2210      	movs	r2, #16
 800f0ee:	4937      	ldr	r1, [pc, #220]	; (800f1cc <ndpSendRouterSol+0x184>)
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f00e fbb7 	bl	801d864 <memcmp>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d018      	beq.n	800f12e <ndpSendRouterSol+0xe6>
   {
#if (ETH_SUPPORT == ENABLED)
      NetInterface *logicalInterface;

      //Point to the logical interface
      logicalInterface = nicGetLogicalInterface(interface);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f002 fc61 	bl	80119c6 <nicGetLogicalInterface>
 800f104:	6538      	str	r0, [r7, #80]	; 0x50

      //Check whether a MAC address has been assigned to the interface
      if(!macCompAddr(&logicalInterface->macAddr, &MAC_UNSPECIFIED_ADDR))
 800f106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f108:	3384      	adds	r3, #132	; 0x84
 800f10a:	2206      	movs	r2, #6
 800f10c:	4930      	ldr	r1, [pc, #192]	; (800f1d0 <ndpSendRouterSol+0x188>)
 800f10e:	4618      	mov	r0, r3
 800f110:	f00e fba8 	bl	801d864 <memcmp>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d009      	beq.n	800f12e <ndpSendRouterSol+0xe6>
      {
         //Add Source Link-Layer Address option
         ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
            &logicalInterface->macAddr, sizeof(MacAddr));
 800f11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11c:	3384      	adds	r3, #132	; 0x84
         ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
 800f11e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800f122:	2206      	movs	r2, #6
 800f124:	9200      	str	r2, [sp, #0]
 800f126:	2201      	movs	r2, #1
 800f128:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f12a:	f001 f811 	bl	8010150 <ndpAddOption>
      }
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800f12e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f132:	4413      	add	r3, r2
 800f134:	4619      	mov	r1, r3
 800f136:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f138:	f001 fc43 	bl	80109c2 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800f13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f1 fed6 	bl	8000ef0 <swapInt32>
 800f144:	4603      	mov	r3, r0
 800f146:	643b      	str	r3, [r7, #64]	; 0x40
   pseudoHeader.reserved[0] = 0;
 800f148:	2300      	movs	r3, #0
 800f14a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   pseudoHeader.reserved[1] = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   pseudoHeader.reserved[2] = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800f15a:	233a      	movs	r3, #58	; 0x3a
 800f15c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800f160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f164:	f107 0020 	add.w	r0, r7, #32
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	4613      	mov	r3, r2
 800f16c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f16e:	2128      	movs	r1, #40	; 0x28
 800f170:	f7f9 fc58 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 800f174:	4603      	mov	r3, r0
 800f176:	461a      	mov	r2, r3
 800f178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f17a:	805a      	strh	r2, [r3, #2]
   IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsOutPkts[ICMPV6_TYPE_ROUTER_SOL], 1);

   //Debug message
   TRACE_INFO("Sending Router Solicitation message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpRouterSolMessage(message);
 800f17c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f17e:	f000 fa1b 	bl	800f5b8 <ndpDumpRouterSolMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800f182:	4b14      	ldr	r3, [pc, #80]	; (800f1d4 <ndpSendRouterSol+0x18c>)
 800f184:	f107 0408 	add.w	r4, r7, #8
 800f188:	461d      	mov	r5, r3
 800f18a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f18c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f18e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f192:	e884 0003 	stmia.w	r4, {r0, r1}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800f196:	23ff      	movs	r3, #255	; 0xff
 800f198:	723b      	strb	r3, [r7, #8]

   //Send Router Solicitation message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f19e:	f107 0120 	add.w	r1, r7, #32
 800f1a2:	f107 0308 	add.w	r3, r7, #8
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1ac:	f7fb fcd5 	bl	800ab5a <ipv6SendDatagram>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800f1b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f1b8:	f001 fbd2 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800f1bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3760      	adds	r7, #96	; 0x60
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800f1c8:	08024c5c 	.word	0x08024c5c
 800f1cc:	08024c2c 	.word	0x08024c2c
 800f1d0:	080243c4 	.word	0x080243c4
 800f1d4:	08025288 	.word	0x08025288

0800f1d8 <ndpSendNeighborSol>:
 * @return Error code
 **/

error_t ndpSendNeighborSol(NetInterface *interface,
   const Ipv6Addr *targetIpAddr, bool_t multicast)
{
 800f1d8:	b5b0      	push	{r4, r5, r7, lr}
 800f1da:	b09c      	sub	sp, #112	; 0x70
 800f1dc:	af02      	add	r7, sp, #8
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
   NdpNeighborSolMessage *message;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Multicast Neighbor Solicitation message?
   if(multicast)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d007      	beq.n	800f1fa <ndpSendNeighborSol+0x22>
   {
      //Compute the solicited-node multicast address that
      //corresponds to the target IPv6 address
      ipv6ComputeSolicitedNodeAddr(targetIpAddr, &pseudoHeader.destAddr);
 800f1ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1ee:	3310      	adds	r3, #16
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	68b8      	ldr	r0, [r7, #8]
 800f1f4:	f7fd fa0e 	bl	800c614 <ipv6ComputeSolicitedNodeAddr>
 800f1f8:	e007      	b.n	800f20a <ndpSendNeighborSol+0x32>
   }
   else
   {
      //Unicast Neighbor Solicitation message
      pseudoHeader.destAddr = *targetIpAddr;
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	6859      	ldr	r1, [r3, #4]
 800f204:	689a      	ldr	r2, [r3, #8]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //Check whether the target address is a tentative address
   if(ipv6IsTentativeAddr(interface, targetIpAddr))
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68b9      	ldr	r1, [r7, #8]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fd f898 	bl	800c344 <ipv6IsTentativeAddr>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d008      	beq.n	800f22c <ndpSendNeighborSol+0x54>
   {
      //The IPv6 source is set to the unspecified address
      pseudoHeader.srcAddr = IPV6_UNSPECIFIED_ADDR;
 800f21a:	4b5b      	ldr	r3, [pc, #364]	; (800f388 <ndpSendNeighborSol+0x1b0>)
 800f21c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f220:	6818      	ldr	r0, [r3, #0]
 800f222:	6859      	ldr	r1, [r3, #4]
 800f224:	689a      	ldr	r2, [r3, #8]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f22a:	e011      	b.n	800f250 <ndpSendNeighborSol+0x78>
   }
   else
   {
      //Select the most appropriate source address to be used when sending
      //the Neighbor Solicitation message
      error = ipv6SelectSourceAddr(&interface, targetIpAddr,
 800f22c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f230:	f107 030c 	add.w	r3, r7, #12
 800f234:	68b9      	ldr	r1, [r7, #8]
 800f236:	4618      	mov	r0, r3
 800f238:	f7fc ff2c 	bl	800c094 <ipv6SelectSourceAddr>
 800f23c:	4603      	mov	r3, r0
 800f23e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
         &pseudoHeader.srcAddr);

      //No address assigned to the interface?
      if(error)
 800f242:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f246:	2b00      	cmp	r3, #0
 800f248:	d002      	beq.n	800f250 <ndpSendNeighborSol+0x78>
         return error;
 800f24a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f24e:	e097      	b.n	800f380 <ndpSendNeighborSol+0x1a8>
   }

   //The only defined option that may appear in a Neighbor Solicitation
   //message is the Source Link-Layer Address option
   length = sizeof(NdpNeighborSolMessage) + sizeof(NdpLinkLayerAddrOption);
 800f250:	2320      	movs	r3, #32
 800f252:	653b      	str	r3, [r7, #80]	; 0x50

   //Allocate a memory buffer to hold the Neighbor Solicitation message
   buffer = ipAllocBuffer(length, &offset);
 800f254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f256:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f25a:	4611      	mov	r1, r2
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f9 fc0a 	bl	8008a76 <ipAllocBuffer>
 800f262:	6638      	str	r0, [r7, #96]	; 0x60
   //Failed to allocate memory?
   if(buffer == NULL)
 800f264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f266:	2b00      	cmp	r3, #0
 800f268:	d101      	bne.n	800f26e <ndpSendNeighborSol+0x96>
      return ERROR_OUT_OF_MEMORY;
 800f26a:	2364      	movs	r3, #100	; 0x64
 800f26c:	e088      	b.n	800f380 <ndpSendNeighborSol+0x1a8>

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800f26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f270:	4619      	mov	r1, r3
 800f272:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f274:	f001 fc4b 	bl	8010b0e <netBufferAt>
 800f278:	65f8      	str	r0, [r7, #92]	; 0x5c

   //Format Neighbor Solicitation message
   message->type = ICMPV6_TYPE_NEIGHBOR_SOL;
 800f27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f27c:	2287      	movs	r2, #135	; 0x87
 800f27e:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 800f280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f282:	2200      	movs	r2, #0
 800f284:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 800f286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f288:	2200      	movs	r2, #0
 800f28a:	709a      	strb	r2, [r3, #2]
 800f28c:	2200      	movs	r2, #0
 800f28e:	70da      	strb	r2, [r3, #3]
   message->reserved = 0;
 800f290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f292:	2200      	movs	r2, #0
 800f294:	711a      	strb	r2, [r3, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	715a      	strb	r2, [r3, #5]
 800f29a:	2200      	movs	r2, #0
 800f29c:	719a      	strb	r2, [r3, #6]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	71da      	strb	r2, [r3, #7]
   message->targetAddr = *targetIpAddr;
 800f2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	6814      	ldr	r4, [r2, #0]
 800f2aa:	6850      	ldr	r0, [r2, #4]
 800f2ac:	6891      	ldr	r1, [r2, #8]
 800f2ae:	68d2      	ldr	r2, [r2, #12]
 800f2b0:	601c      	str	r4, [r3, #0]
 800f2b2:	6058      	str	r0, [r3, #4]
 800f2b4:	6099      	str	r1, [r3, #8]
 800f2b6:	60da      	str	r2, [r3, #12]

   //Length of the message, excluding any option
   length = sizeof(NdpNeighborSolMessage);
 800f2b8:	2318      	movs	r3, #24
 800f2ba:	653b      	str	r3, [r7, #80]	; 0x50

   //The Source Link-Layer Address option must not be included
   //when the source IPv6 address is the unspecified address
   if(!ipv6CompAddr(&pseudoHeader.srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800f2bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2c0:	2210      	movs	r2, #16
 800f2c2:	4931      	ldr	r1, [pc, #196]	; (800f388 <ndpSendNeighborSol+0x1b0>)
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f00e facd 	bl	801d864 <memcmp>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00e      	beq.n	800f2ee <ndpSendNeighborSol+0x116>
   {
#if (ETH_SUPPORT == ENABLED)
      NetInterface *logicalInterface;

      //Point to the logical interface
      logicalInterface = nicGetLogicalInterface(interface);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f002 fb77 	bl	80119c6 <nicGetLogicalInterface>
 800f2d8:	65b8      	str	r0, [r7, #88]	; 0x58

      //Add Source Link-Layer Address option
      ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
         &logicalInterface->macAddr, sizeof(MacAddr));
 800f2da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2dc:	3384      	adds	r3, #132	; 0x84
      ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
 800f2de:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f2e2:	2206      	movs	r2, #6
 800f2e4:	9200      	str	r2, [sp, #0]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f2ea:	f000 ff31 	bl	8010150 <ndpAddOption>
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800f2ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f2:	4413      	add	r3, r2
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f2f8:	f001 fb63 	bl	80109c2 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800f2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f1 fdf6 	bl	8000ef0 <swapInt32>
 800f304:	4603      	mov	r3, r0
 800f306:	64bb      	str	r3, [r7, #72]	; 0x48
   pseudoHeader.reserved[0] = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   pseudoHeader.reserved[1] = 0;
 800f30e:	2300      	movs	r3, #0
 800f310:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
   pseudoHeader.reserved[2] = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800f31a:	233a      	movs	r3, #58	; 0x3a
 800f31c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800f320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f324:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	4613      	mov	r3, r2
 800f32c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f32e:	2128      	movs	r1, #40	; 0x28
 800f330:	f7f9 fb78 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f33a:	805a      	strh	r2, [r3, #2]
   IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsOutPkts[ICMPV6_TYPE_NEIGHBOR_SOL], 1);

   //Debug message
   TRACE_INFO("Sending Neighbor Solicitation message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborSolMessage(message);
 800f33c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f33e:	f000 f94f 	bl	800f5e0 <ndpDumpNeighborSolMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800f342:	4b12      	ldr	r3, [pc, #72]	; (800f38c <ndpSendNeighborSol+0x1b4>)
 800f344:	f107 0410 	add.w	r4, r7, #16
 800f348:	461d      	mov	r5, r3
 800f34a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f34e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f352:	e884 0003 	stmia.w	r4, {r0, r1}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800f356:	23ff      	movs	r3, #255	; 0xff
 800f358:	743b      	strb	r3, [r7, #16]

   //Send Neighbor Solicitation message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f35e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f362:	f107 0310 	add.w	r3, r7, #16
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	4613      	mov	r3, r2
 800f36a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f36c:	f7fb fbf5 	bl	800ab5a <ipv6SendDatagram>
 800f370:	4603      	mov	r3, r0
 800f372:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800f376:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f378:	f001 faf2 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800f37c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 800f380:	4618      	mov	r0, r3
 800f382:	3768      	adds	r7, #104	; 0x68
 800f384:	46bd      	mov	sp, r7
 800f386:	bdb0      	pop	{r4, r5, r7, pc}
 800f388:	08024c2c 	.word	0x08024c2c
 800f38c:	08025288 	.word	0x08025288

0800f390 <ndpSendNeighborAdv>:
 * @return Error code
 **/

error_t ndpSendNeighborAdv(NetInterface *interface,
   const Ipv6Addr *targetIpAddr, const Ipv6Addr *destIpAddr)
{
 800f390:	b5b0      	push	{r4, r5, r7, lr}
 800f392:	b09c      	sub	sp, #112	; 0x70
 800f394:	af02      	add	r7, sp, #8
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *logicalInterface;
#endif

   //Destination IP address is the unspecified address?
   if(ipv6CompAddr(destIpAddr, &IPV6_UNSPECIFIED_ADDR))
 800f39c:	2210      	movs	r2, #16
 800f39e:	4983      	ldr	r1, [pc, #524]	; (800f5ac <ndpSendNeighborAdv+0x21c>)
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f00e fa5f 	bl	801d864 <memcmp>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <ndpSendNeighborAdv+0x2e>
   {
      //If the destination is the unspecified address, the node must
      //multicast the advertisement to the all-nodes address
      pseudoHeader.destAddr = IPV6_LINK_LOCAL_ALL_NODES_ADDR;
 800f3ac:	4b80      	ldr	r3, [pc, #512]	; (800f5b0 <ndpSendNeighborAdv+0x220>)
 800f3ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	6859      	ldr	r1, [r3, #4]
 800f3b6:	689a      	ldr	r2, [r3, #8]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3bc:	e007      	b.n	800f3ce <ndpSendNeighborAdv+0x3e>
   }
   else
   {
      //Otherwise, the node must unicast the advertisement to the
      //destination IP address
      pseudoHeader.destAddr = *destIpAddr;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	6859      	ldr	r1, [r3, #4]
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //Check whether the target address is a valid anycast address assigned
   //to the interface
   if(ipv6IsAnycastAddr(interface, targetIpAddr))
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fc ff82 	bl	800c2dc <ipv6IsAnycastAddr>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d011      	beq.n	800f402 <ndpSendNeighborAdv+0x72>
   {
      //Select the most appropriate source address to be used when sending
      //the Neighbor Advertisement message
      error = ipv6SelectSourceAddr(&interface, targetIpAddr,
 800f3de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3e2:	f107 030c 	add.w	r3, r7, #12
 800f3e6:	68b9      	ldr	r1, [r7, #8]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fc fe53 	bl	800c094 <ipv6SelectSourceAddr>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
         &pseudoHeader.srcAddr);

      //No address assigned to the interface?
      if(error)
 800f3f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d00a      	beq.n	800f412 <ndpSendNeighborAdv+0x82>
         return error;
 800f3fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f400:	e0d0      	b.n	800f5a4 <ndpSendNeighborAdv+0x214>
   }
   else
   {
      //Set the source IP address
      pseudoHeader.srcAddr = *targetIpAddr;
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f408:	6818      	ldr	r0, [r3, #0]
 800f40a:	6859      	ldr	r1, [r3, #4]
 800f40c:	689a      	ldr	r2, [r3, #8]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //The only defined option that may appear in a Neighbor Advertisement
   //message is the Target Link-Layer Address option
   length = sizeof(NdpNeighborAdvMessage) + sizeof(NdpLinkLayerAddrOption);
 800f412:	2320      	movs	r3, #32
 800f414:	653b      	str	r3, [r7, #80]	; 0x50

   //Allocate a memory buffer to hold the Neighbor Advertisement message
   buffer = ipAllocBuffer(length, &offset);
 800f416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f418:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f41c:	4611      	mov	r1, r2
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f9 fb29 	bl	8008a76 <ipAllocBuffer>
 800f424:	6638      	str	r0, [r7, #96]	; 0x60
   //Failed to allocate memory?
   if(buffer == NULL)
 800f426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d101      	bne.n	800f430 <ndpSendNeighborAdv+0xa0>
      return ERROR_OUT_OF_MEMORY;
 800f42c:	2364      	movs	r3, #100	; 0x64
 800f42e:	e0b9      	b.n	800f5a4 <ndpSendNeighborAdv+0x214>

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset);
 800f430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f432:	4619      	mov	r1, r3
 800f434:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f436:	f001 fb6a 	bl	8010b0e <netBufferAt>
 800f43a:	65f8      	str	r0, [r7, #92]	; 0x5c

   //Format Neighbor Advertisement message
   message->type = ICMPV6_TYPE_NEIGHBOR_ADV;
 800f43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f43e:	2288      	movs	r2, #136	; 0x88
 800f440:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 800f442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f444:	2200      	movs	r2, #0
 800f446:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 800f448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f44a:	2200      	movs	r2, #0
 800f44c:	709a      	strb	r2, [r3, #2]
 800f44e:	2200      	movs	r2, #0
 800f450:	70da      	strb	r2, [r3, #3]
   message->reserved1 = 0;
 800f452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f454:	7913      	ldrb	r3, [r2, #4]
 800f456:	f36f 0304 	bfc	r3, #0, #5
 800f45a:	7113      	strb	r3, [r2, #4]
   message->reserved2[0] = 0;
 800f45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f45e:	2200      	movs	r2, #0
 800f460:	715a      	strb	r2, [r3, #5]
   message->reserved2[1] = 0;
 800f462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f464:	2200      	movs	r2, #0
 800f466:	719a      	strb	r2, [r3, #6]
   message->reserved2[2] = 0;
 800f468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f46a:	2200      	movs	r2, #0
 800f46c:	71da      	strb	r2, [r3, #7]
   message->targetAddr = *targetIpAddr;
 800f46e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f470:	68ba      	ldr	r2, [r7, #8]
 800f472:	3308      	adds	r3, #8
 800f474:	6814      	ldr	r4, [r2, #0]
 800f476:	6850      	ldr	r0, [r2, #4]
 800f478:	6891      	ldr	r1, [r2, #8]
 800f47a:	68d2      	ldr	r2, [r2, #12]
 800f47c:	601c      	str	r4, [r3, #0]
 800f47e:	6058      	str	r0, [r3, #4]
 800f480:	6099      	str	r1, [r3, #8]
 800f482:	60da      	str	r2, [r3, #12]

   //The Router flag indicates that the sender is a router
   if(interface->ipv6Context.isRouter)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f8d3 3648 	ldr.w	r3, [r3, #1608]	; 0x648
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <ndpSendNeighborAdv+0x10a>
      message->r = TRUE;
 800f48e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f490:	7913      	ldrb	r3, [r2, #4]
 800f492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f496:	7113      	strb	r3, [r2, #4]
 800f498:	e004      	b.n	800f4a4 <ndpSendNeighborAdv+0x114>
   else
      message->r = FALSE;
 800f49a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f49c:	7913      	ldrb	r3, [r2, #4]
 800f49e:	f36f 13c7 	bfc	r3, #7, #1
 800f4a2:	7113      	strb	r3, [r2, #4]

   //If the destination is the unspecified address, the node must set
   //the Solicited flag to zero
   if(ipv6CompAddr(destIpAddr, &IPV6_UNSPECIFIED_ADDR))
 800f4a4:	2210      	movs	r2, #16
 800f4a6:	4941      	ldr	r1, [pc, #260]	; (800f5ac <ndpSendNeighborAdv+0x21c>)
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f00e f9db 	bl	801d864 <memcmp>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d105      	bne.n	800f4c0 <ndpSendNeighborAdv+0x130>
      message->s = FALSE;
 800f4b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4b6:	7913      	ldrb	r3, [r2, #4]
 800f4b8:	f36f 1386 	bfc	r3, #6, #1
 800f4bc:	7113      	strb	r3, [r2, #4]
 800f4be:	e004      	b.n	800f4ca <ndpSendNeighborAdv+0x13a>
   else
      message->s = TRUE;
 800f4c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4c2:	7913      	ldrb	r3, [r2, #4]
 800f4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c8:	7113      	strb	r3, [r2, #4]

   //The Override flag should not be set in solicited advertisements
   //for anycast addresses
   if(ipv6IsAnycastAddr(interface, targetIpAddr))
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fc ff04 	bl	800c2dc <ipv6IsAnycastAddr>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d005      	beq.n	800f4e6 <ndpSendNeighborAdv+0x156>
      message->o = FALSE;
 800f4da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4dc:	7913      	ldrb	r3, [r2, #4]
 800f4de:	f36f 1345 	bfc	r3, #5, #1
 800f4e2:	7113      	strb	r3, [r2, #4]
 800f4e4:	e004      	b.n	800f4f0 <ndpSendNeighborAdv+0x160>
   else
      message->o = TRUE;
 800f4e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4e8:	7913      	ldrb	r3, [r2, #4]
 800f4ea:	f043 0320 	orr.w	r3, r3, #32
 800f4ee:	7113      	strb	r3, [r2, #4]

   //Length of the message, excluding any option
   length = sizeof(NdpNeighborAdvMessage);
 800f4f0:	2318      	movs	r3, #24
 800f4f2:	653b      	str	r3, [r7, #80]	; 0x50

#if (ETH_SUPPORT == ENABLED)
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f002 fa65 	bl	80119c6 <nicGetLogicalInterface>
 800f4fc:	65b8      	str	r0, [r7, #88]	; 0x58

   //Add Target Link-Layer Address option
   ndpAddOption(message, &length, NDP_OPT_TARGET_LINK_LAYER_ADDR,
      &logicalInterface->macAddr, sizeof(MacAddr));
 800f4fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f500:	3384      	adds	r3, #132	; 0x84
   ndpAddOption(message, &length, NDP_OPT_TARGET_LINK_LAYER_ADDR,
 800f502:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f506:	2206      	movs	r2, #6
 800f508:	9200      	str	r2, [sp, #0]
 800f50a:	2202      	movs	r2, #2
 800f50c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f50e:	f000 fe1f 	bl	8010150 <ndpAddOption>
#endif

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800f512:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f516:	4413      	add	r3, r2
 800f518:	4619      	mov	r1, r3
 800f51a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f51c:	f001 fa51 	bl	80109c2 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800f520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f522:	4618      	mov	r0, r3
 800f524:	f7f1 fce4 	bl	8000ef0 <swapInt32>
 800f528:	4603      	mov	r3, r0
 800f52a:	64bb      	str	r3, [r7, #72]	; 0x48
   pseudoHeader.reserved[0] = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   pseudoHeader.reserved[1] = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
   pseudoHeader.reserved[2] = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800f53e:	233a      	movs	r3, #58	; 0x3a
 800f540:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800f544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f548:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	4613      	mov	r3, r2
 800f550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f552:	2128      	movs	r1, #40	; 0x28
 800f554:	f7f9 fa66 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f55e:	805a      	strh	r2, [r3, #2]
   IP_MIB_INC_COUNTER32(icmpv6MsgStatsTable.icmpMsgStatsOutPkts[ICMPV6_TYPE_NEIGHBOR_ADV], 1);

   //Debug message
   TRACE_INFO("Sending Neighbor Advertisement message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborAdvMessage(message);
 800f560:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f562:	f000 f847 	bl	800f5f4 <ndpDumpNeighborAdvMessage>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800f566:	4b13      	ldr	r3, [pc, #76]	; (800f5b4 <ndpSendNeighborAdv+0x224>)
 800f568:	f107 0410 	add.w	r4, r7, #16
 800f56c:	461d      	mov	r5, r3
 800f56e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f572:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f576:	e884 0003 	stmia.w	r4, {r0, r1}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800f57a:	23ff      	movs	r3, #255	; 0xff
 800f57c:	743b      	strb	r3, [r7, #16]

   //Send Neighbor Advertisement message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f582:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f586:	f107 0310 	add.w	r3, r7, #16
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	4613      	mov	r3, r2
 800f58e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f590:	f7fb fae3 	bl	800ab5a <ipv6SendDatagram>
 800f594:	4603      	mov	r3, r0
 800f596:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800f59a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f59c:	f001 f9e0 	bl	8010960 <netBufferFree>
   //Return status code
   return error;
 800f5a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3768      	adds	r7, #104	; 0x68
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f5ac:	08024c2c 	.word	0x08024c2c
 800f5b0:	08024c4c 	.word	0x08024c4c
 800f5b4:	08025288 	.word	0x08025288

0800f5b8 <ndpDumpRouterSolMessage>:
 * @brief Dump Router Solicitation message for debugging purpose
 * @param[in] message Router Solicitation message
 **/

void ndpDumpRouterSolMessage(const NdpRouterSolMessage *message)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
   //Dump Router Solicitation message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <ndpDumpRouterAdvMessage>:
 * @brief Dump Router Advertisement message for debugging purpose
 * @param[in] message Router Advertisement message
 **/

void ndpDumpRouterAdvMessage(const NdpRouterAdvMessage *message)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  M = %" PRIu8 "\r\n", message->m);
   TRACE_DEBUG("  O = %" PRIu8 "\r\n", message->o);
   TRACE_DEBUG("  Router Lifetime = %" PRIu16 "\r\n", ntohs(message->routerLifetime));
   TRACE_DEBUG("  Reachable Time = %" PRIu32 "\r\n", ntohl(message->reachableTime));
   TRACE_DEBUG("  Retrans Timer = %" PRIu32 "\r\n", ntohl(message->retransTimer));
}
 800f5d4:	bf00      	nop
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <ndpDumpNeighborSolMessage>:
 * @brief Dump Neighbor Solicitation message for debugging purpose
 * @param[in] message Neighbor Solicitation message
 **/

void ndpDumpNeighborSolMessage(const NdpNeighborSolMessage *message)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
   //Dump Neighbor Solicitation message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Target Address = %s\r\n", ipv6AddrToString(&message->targetAddr, NULL));
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <ndpDumpNeighborAdvMessage>:
 * @brief Dump Neighbor Advertisement message for debugging purpose
 * @param[in] message Neighbor Advertisement message
 **/

void ndpDumpNeighborAdvMessage(const NdpNeighborAdvMessage *message)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  R = %" PRIu8 "\r\n", message->r);
   TRACE_DEBUG("  S = %" PRIu8 "\r\n", message->s);
   TRACE_DEBUG("  O = %" PRIu8 "\r\n", message->o);
   TRACE_DEBUG("  Target Address = %s\r\n", ipv6AddrToString(&message->targetAddr, NULL));
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <ndpDumpRedirectMessage>:
 * @brief Dump Redirect message for debugging purpose
 * @param[in] message Redirect message
 **/

void ndpDumpRedirectMessage(const NdpRedirectMessage *message)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Target Address = %s\r\n", ipv6AddrToString(&message->targetAddr, NULL));
   TRACE_DEBUG("  Destination Address = %s\r\n", ipv6AddrToString(&message->destAddr, NULL));
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <ndpCreateNeighborCacheEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

NdpNeighborCacheEntry *ndpCreateNeighborCacheEntry(NetInterface *interface)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
   systime_t time;
   NdpNeighborCacheEntry *entry;
   NdpNeighborCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 800f624:	f7f1 fe3c 	bl	80012a0 <osGetSystemTime>
 800f628:	60f8      	str	r0, [r7, #12]

   //Keep track of the oldest entry
   oldestEntry = &interface->ndpContext.neighborCache[0];
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 800f630:	613b      	str	r3, [r7, #16]

   //Loop through Neighbor cache entries
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f632:	2300      	movs	r3, #0
 800f634:	617b      	str	r3, [r7, #20]
 800f636:	e023      	b.n	800f680 <ndpCreateNeighborCacheEntry+0x64>
   {
      //Point to the current entry
      entry = &interface->ndpContext.neighborCache[i];
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2274      	movs	r2, #116	; 0x74
 800f63c:	fb02 f303 	mul.w	r3, r2, r3
 800f640:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	4413      	add	r3, r2
 800f648:	3304      	adds	r3, #4
 800f64a:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use or not
      if(entry->state == NDP_STATE_NONE)
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <ndpCreateNeighborCacheEntry+0x46>
      {
         //Erase contents
         osMemset(entry, 0, sizeof(NdpNeighborCacheEntry));
 800f654:	2274      	movs	r2, #116	; 0x74
 800f656:	2100      	movs	r1, #0
 800f658:	68b8      	ldr	r0, [r7, #8]
 800f65a:	f00e f939 	bl	801d8d0 <memset>
         //Return a pointer to the Neighbor cache entry
         return entry;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	e01b      	b.n	800f69a <ndpCreateNeighborCacheEntry+0x7e>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	69db      	ldr	r3, [r3, #28]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	1ad2      	subs	r2, r2, r3
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	69db      	ldr	r3, [r3, #28]
 800f66e:	68f9      	ldr	r1, [r7, #12]
 800f670:	1acb      	subs	r3, r1, r3
 800f672:	429a      	cmp	r2, r3
 800f674:	d901      	bls.n	800f67a <ndpCreateNeighborCacheEntry+0x5e>
      {
         oldestEntry = entry;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	613b      	str	r3, [r7, #16]
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	3301      	adds	r3, #1
 800f67e:	617b      	str	r3, [r7, #20]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b07      	cmp	r3, #7
 800f684:	d9d8      	bls.n	800f638 <ndpCreateNeighborCacheEntry+0x1c>
      }
   }

   //Drop any pending packets
   ndpFlushQueuedPackets(interface, oldestEntry);
 800f686:	6939      	ldr	r1, [r7, #16]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f97f 	bl	800f98c <ndpFlushQueuedPackets>
   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(NdpNeighborCacheEntry));
 800f68e:	2274      	movs	r2, #116	; 0x74
 800f690:	2100      	movs	r1, #0
 800f692:	6938      	ldr	r0, [r7, #16]
 800f694:	f00e f91c 	bl	801d8d0 <memset>

   //Return a pointer to the Neighbor cache entry
   return oldestEntry;
 800f698:	693b      	ldr	r3, [r7, #16]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <ndpFindNeighborCacheEntry>:
 * @return A pointer to the matching entry is returned. NULL is returned if
 *   the specified IPv6 address could not be found in the Neighbor cache
 **/

NdpNeighborCacheEntry *ndpFindNeighborCacheEntry(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	6039      	str	r1, [r7, #0]
   uint_t i;
   NdpNeighborCacheEntry *entry;

   //Loop through Neighbor cache entries
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	e01c      	b.n	800f6ec <ndpFindNeighborCacheEntry+0x4a>
   {
      //Point to the current entry
      entry = &interface->ndpContext.neighborCache[i];
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2274      	movs	r2, #116	; 0x74
 800f6b6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ba:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != NDP_STATE_NONE)
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00b      	beq.n	800f6e6 <ndpFindNeighborCacheEntry+0x44>
      {
         //Current entry matches the specified address?
         if(ipv6CompAddr(&entry->ipAddr, ipAddr))
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	2210      	movs	r2, #16
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f00e f8c4 	bl	801d864 <memcmp>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <ndpFindNeighborCacheEntry+0x44>
            return entry;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	e006      	b.n	800f6f4 <ndpFindNeighborCacheEntry+0x52>
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b07      	cmp	r3, #7
 800f6f0:	d9df      	bls.n	800f6b2 <ndpFindNeighborCacheEntry+0x10>
      }
   }

   //No matching entry in Neighbor cache...
   return NULL;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <ndpUpdateNeighborCache>:
 * @brief Periodically update Neighbor cache
 * @param[in] interface Underlying network interface
 **/

void ndpUpdateNeighborCache(NetInterface *interface)
{
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b08f      	sub	sp, #60	; 0x3c
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   NdpNeighborCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800f704:	f7f1 fdcc 	bl	80012a0 <osGetSystemTime>
 800f708:	6338      	str	r0, [r7, #48]	; 0x30

   //Go through Neighbor cache
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f70a:	2300      	movs	r3, #0
 800f70c:	637b      	str	r3, [r7, #52]	; 0x34
 800f70e:	e0b6      	b.n	800f87e <ndpUpdateNeighborCache+0x182>
   {
      //Point to the current entry
      entry = &interface->ndpContext.neighborCache[i];
 800f710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f712:	2274      	movs	r2, #116	; 0x74
 800f714:	fb02 f303 	mul.w	r3, r2, r3
 800f718:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	4413      	add	r3, r2
 800f720:	3304      	adds	r3, #4
 800f722:	62fb      	str	r3, [r7, #44]	; 0x2c

      //INCOMPLETE state?
      if(entry->state == NDP_STATE_INCOMPLETE)
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d12a      	bne.n	800f782 <ndpUpdateNeighborCache+0x86>
      {
         //The Neighbor Solicitation timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	69da      	ldr	r2, [r3, #28]
 800f730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	4413      	add	r3, r2
 800f736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f2c0 809c 	blt.w	800f878 <ndpUpdateNeighborCache+0x17c>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 800f740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f748:	625a      	str	r2, [r3, #36]	; 0x24

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < NDP_MAX_MULTICAST_SOLICIT)
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74e:	2b02      	cmp	r3, #2
 800f750:	d80f      	bhi.n	800f772 <ndpUpdateNeighborCache+0x76>
            {
               //Retransmit the multicast Neighbor Solicitation message
               ndpSendNeighborSol(interface, &entry->ipAddr, TRUE);
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	3301      	adds	r3, #1
 800f756:	2201      	movs	r2, #1
 800f758:	4619      	mov	r1, r3
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7ff fd3c 	bl	800f1d8 <ndpSendNeighborSol>

               //Save the time at which the message was sent
               entry->timestamp = time;
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f764:	61da      	str	r2, [r3, #28]
               //Set timeout value
               entry->timeout = interface->ndpContext.retransTimer;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 2a04 	ldr.w	r2, [r3, #2564]	; 0xa04
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	621a      	str	r2, [r3, #32]
 800f770:	e082      	b.n	800f878 <ndpUpdateNeighborCache+0x17c>
            }
            else
            {
               //Drop packets that are waiting for address resolution
               ndpFlushQueuedPackets(interface, entry);
 800f772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f909 	bl	800f98c <ndpFlushQueuedPackets>
               //The entry should be deleted since address resolution has failed
               entry->state = NDP_STATE_NONE;
 800f77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77c:	2200      	movs	r2, #0
 800f77e:	701a      	strb	r2, [r3, #0]
 800f780:	e07a      	b.n	800f878 <ndpUpdateNeighborCache+0x17c>
            }
         }
      }
      //REACHABLE state?
      else if(entry->state == NDP_STATE_REACHABLE)
 800f782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d111      	bne.n	800f7ae <ndpUpdateNeighborCache+0xb2>
      {
         //Periodically time out Neighbor cache entries
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800f78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78c:	69da      	ldr	r2, [r3, #28]
 800f78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f790:	6a1b      	ldr	r3, [r3, #32]
 800f792:	4413      	add	r3, r2
 800f794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	db6d      	blt.n	800f878 <ndpUpdateNeighborCache+0x17c>
         {
            //Save current time
            entry->timestamp = osGetSystemTime();
 800f79c:	f7f1 fd80 	bl	80012a0 <osGetSystemTime>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a4:	61da      	str	r2, [r3, #28]
            //Enter STALE state
            entry->state = NDP_STATE_STALE;
 800f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a8:	2203      	movs	r2, #3
 800f7aa:	701a      	strb	r2, [r3, #0]
 800f7ac:	e064      	b.n	800f878 <ndpUpdateNeighborCache+0x17c>
         }
      }
      //STALE state?
      else if(entry->state == NDP_STATE_STALE)
 800f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d060      	beq.n	800f878 <ndpUpdateNeighborCache+0x17c>
         //The neighbor is no longer known to be reachable but until traffic
         //is sent to the neighbor, no attempt should be made to verify its
         //reachability
      }
      //DELAY state?
      else if(entry->state == NDP_STATE_DELAY)
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	2b04      	cmp	r3, #4
 800f7bc:	d124      	bne.n	800f808 <ndpUpdateNeighborCache+0x10c>
      {
         //Wait for the specified delay before sending the first probe
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800f7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c0:	69da      	ldr	r2, [r3, #28]
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	6a1b      	ldr	r3, [r3, #32]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	db53      	blt.n	800f878 <ndpUpdateNeighborCache+0x17c>
         {
            Ipv6Addr ipAddr;

            //Save the time at which the message was sent
            entry->timestamp = time;
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7d4:	61da      	str	r2, [r3, #28]
            //Set timeout value
            entry->timeout = interface->ndpContext.retransTimer;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 2a04 	ldr.w	r2, [r3, #2564]	; 0xa04
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	621a      	str	r2, [r3, #32]
            //Switch to the PROBE state
            entry->state = NDP_STATE_PROBE;
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	2205      	movs	r2, #5
 800f7e4:	701a      	strb	r2, [r3, #0]

            //Target address
            ipAddr = entry->ipAddr;
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	f107 041c 	add.w	r4, r7, #28
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	6818      	ldr	r0, [r3, #0]
 800f7f0:	6859      	ldr	r1, [r3, #4]
 800f7f2:	689a      	ldr	r2, [r3, #8]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            //Send a unicast Neighbor Solicitation message
            ndpSendNeighborSol(interface, &ipAddr, FALSE);
 800f7f8:	f107 031c 	add.w	r3, r7, #28
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	4619      	mov	r1, r3
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7ff fce9 	bl	800f1d8 <ndpSendNeighborSol>
 800f806:	e037      	b.n	800f878 <ndpUpdateNeighborCache+0x17c>
         }
      }
      //PROBE state?
      else if(entry->state == NDP_STATE_PROBE)
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b05      	cmp	r3, #5
 800f80e:	d133      	bne.n	800f878 <ndpUpdateNeighborCache+0x17c>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	69da      	ldr	r2, [r3, #28]
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	4413      	add	r3, r2
 800f81a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	db2a      	blt.n	800f878 <ndpUpdateNeighborCache+0x17c>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f826:	1c5a      	adds	r2, r3, #1
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	625a      	str	r2, [r3, #36]	; 0x24

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < NDP_MAX_UNICAST_SOLICIT)
 800f82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f830:	2b02      	cmp	r3, #2
 800f832:	d818      	bhi.n	800f866 <ndpUpdateNeighborCache+0x16a>
            {
               Ipv6Addr ipAddr;

               //Save the time at which the packet was sent
               entry->timestamp = time;
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f838:	61da      	str	r2, [r3, #28]
               //Set timeout value
               entry->timeout = interface->ndpContext.retransTimer;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 2a04 	ldr.w	r2, [r3, #2564]	; 0xa04
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	621a      	str	r2, [r3, #32]

               //Target address
               ipAddr = entry->ipAddr;
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	f107 040c 	add.w	r4, r7, #12
 800f84a:	3301      	adds	r3, #1
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	6859      	ldr	r1, [r3, #4]
 800f850:	689a      	ldr	r2, [r3, #8]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	c40f      	stmia	r4!, {r0, r1, r2, r3}

               //Send a unicast Neighbor Solicitation message
               ndpSendNeighborSol(interface, &ipAddr, FALSE);
 800f856:	f107 030c 	add.w	r3, r7, #12
 800f85a:	2200      	movs	r2, #0
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7ff fcba 	bl	800f1d8 <ndpSendNeighborSol>
 800f864:	e008      	b.n	800f878 <ndpUpdateNeighborCache+0x17c>
            }
            else
            {
               //The entry should be deleted since the host is not reachable anymore
               entry->state = NDP_STATE_NONE;
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	2200      	movs	r2, #0
 800f86a:	701a      	strb	r2, [r3, #0]

               //If at some point communication ceases to proceed, as determined
               //by the Neighbor Unreachability Detection algorithm, next-hop
               //determination may need to be performed again...
               ndpUpdateNextHop(interface, &entry->ipAddr);
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	3301      	adds	r3, #1
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fc28 	bl	80100c8 <ndpUpdateNextHop>
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87a:	3301      	adds	r3, #1
 800f87c:	637b      	str	r3, [r7, #52]	; 0x34
 800f87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f880:	2b07      	cmp	r3, #7
 800f882:	f67f af45 	bls.w	800f710 <ndpUpdateNeighborCache+0x14>
            }
         }
      }
   }
}
 800f886:	bf00      	nop
 800f888:	bf00      	nop
 800f88a:	373c      	adds	r7, #60	; 0x3c
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd90      	pop	{r4, r7, pc}

0800f890 <ndpFlushNeighborCache>:
 * @brief Flush Neighbor cache
 * @param[in] interface Underlying network interface
 **/

void ndpFlushNeighborCache(NetInterface *interface)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
   uint_t i;
   NdpNeighborCacheEntry *entry;

   //Loop through Neighbor cache entries
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	e013      	b.n	800f8c6 <ndpFlushNeighborCache+0x36>
   {
      //Point to the current entry
      entry = &interface->ndpContext.neighborCache[i];
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2274      	movs	r2, #116	; 0x74
 800f8a2:	fb02 f303 	mul.w	r3, r2, r3
 800f8a6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	3304      	adds	r3, #4
 800f8b0:	60bb      	str	r3, [r7, #8]

      //Drop packets that are waiting for address resolution
      ndpFlushQueuedPackets(interface, entry);
 800f8b2:	68b9      	ldr	r1, [r7, #8]
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 f869 	bl	800f98c <ndpFlushQueuedPackets>
      //Release Neighbor cache entry
      entry->state = NDP_STATE_NONE;
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b07      	cmp	r3, #7
 800f8ca:	d9e8      	bls.n	800f89e <ndpFlushNeighborCache+0xe>
   }
}
 800f8cc:	bf00      	nop
 800f8ce:	bf00      	nop
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <ndpSendQueuedPackets>:
 * @param[in] entry Pointer to a Neighbor cache entry
 * @return The number of packets that have been sent
 **/

uint_t ndpSendQueuedPackets(NetInterface *interface, NdpNeighborCacheEntry *entry)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b088      	sub	sp, #32
 800f8da:	af02      	add	r7, sp, #8
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	6039      	str	r1, [r7, #0]
   NdpQueueItem *item;
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f002 f87b 	bl	80119dc <nicGetPhysicalInterface>
 800f8e6:	6138      	str	r0, [r7, #16]
#endif

   //Reset packet counter
   i = 0;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	617b      	str	r3, [r7, #20]

   //Check current state
   if(entry->state == NDP_STATE_INCOMPLETE)
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d143      	bne.n	800f97c <ndpSendQueuedPackets+0xa6>
   {
      //Loop through the queued packets
      for(i = 0; i < entry->queueSize; i++)
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	617b      	str	r3, [r7, #20]
 800f8f8:	e03b      	b.n	800f972 <ndpSendQueuedPackets+0x9c>
      {
         //Point to the current queue item
         item = &entry->queue[i];
 800f8fa:	697a      	ldr	r2, [r7, #20]
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	4413      	add	r3, r2
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	3328      	adds	r3, #40	; 0x28
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	4413      	add	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]

#if (ETH_SUPPORT == ENABLED)
         //Ethernet interface?
         if(physicalInterface->nicDriver != NULL &&
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f910:	2b00      	cmp	r3, #0
 800f912:	d026      	beq.n	800f962 <ndpSendQueuedPackets+0x8c>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f918:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d121      	bne.n	800f962 <ndpSendQueuedPackets+0x8c>
         {
            size_t length;

            //Retrieve the length of the IPv6 packet
            length = netBufferGetLength(item->buffer) - item->offset;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	4618      	mov	r0, r3
 800f924:	f001 f82b 	bl	801097e <netBufferGetLength>
 800f928:	4602      	mov	r2, r0
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	60bb      	str	r3, [r7, #8]
            //Update IP statistics
            ipv6UpdateOutStats(interface, &entry->ipAddr, length);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	3301      	adds	r3, #1
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7fc ff04 	bl	800c748 <ipv6UpdateOutStats>

            //Send the IPv6 packet
            ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV6,
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	f103 0111 	add.w	r1, r3, #17
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6858      	ldr	r0, [r3, #4]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	320c      	adds	r2, #12
 800f952:	9201      	str	r2, [sp, #4]
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	4603      	mov	r3, r0
 800f958:	f248 62dd 	movw	r2, #34525	; 0x86dd
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7f5 ff95 	bl	800588c <ethSendFrame>
               item->buffer, item->offset, &item->ancillary);
         }
#endif
         //Release memory buffer
         netBufferFree(item->buffer);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	f000 fffa 	bl	8010960 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	3301      	adds	r3, #1
 800f970:	617b      	str	r3, [r7, #20]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d3be      	bcc.n	800f8fa <ndpSendQueuedPackets+0x24>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2200      	movs	r2, #0
 800f980:	671a      	str	r2, [r3, #112]	; 0x70

   //Return the number of packets that have been sent
   return i;
 800f982:	697b      	ldr	r3, [r7, #20]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <ndpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a Neighbor cache entry
 **/

void ndpFlushQueuedPackets(NetInterface *interface, NdpNeighborCacheEntry *entry)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af02      	add	r7, sp, #8
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
   uint_t i;
   NdpQueueItem *item;

   //Check current state
   if(entry->state == NDP_STATE_INCOMPLETE)
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d12d      	bne.n	800f9fa <ndpFlushQueuedPackets+0x6e>
   {
      //Loop through the queued packets
      for(i = 0; i < entry->queueSize; i++)
 800f99e:	2300      	movs	r3, #0
 800f9a0:	60fb      	str	r3, [r7, #12]
 800f9a2:	e025      	b.n	800f9f0 <ndpFlushQueuedPackets+0x64>
      {
         //Point to the current queue item
         item = &entry->queue[i];
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	3328      	adds	r3, #40	; 0x28
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	60bb      	str	r3, [r7, #8]

         //Check whether the address resolution has failed
         if(entry->retransmitCount >= NDP_MAX_MULTICAST_SOLICIT)
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d910      	bls.n	800f9e0 <ndpFlushQueuedPackets+0x54>
         {
            //Check whether the packet has been forwarded
            if(item->srcInterface != NULL)
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d00c      	beq.n	800f9e0 <ndpFlushQueuedPackets+0x54>
            {
               //A Destination Unreachable message should be generated by a
               //router in response to a packet that cannot be delivered
               icmpv6SendErrorMessage(item->srcInterface, ICMPV6_TYPE_DEST_UNREACHABLE,
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	6818      	ldr	r0, [r3, #0]
                  ICMPV6_CODE_ADDR_UNREACHABLE, 0, item->buffer, item->offset);
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	685b      	ldr	r3, [r3, #4]
               icmpv6SendErrorMessage(item->srcInterface, ICMPV6_TYPE_DEST_UNREACHABLE,
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	6892      	ldr	r2, [r2, #8]
 800f9d2:	9201      	str	r2, [sp, #4]
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	2203      	movs	r2, #3
 800f9da:	2101      	movs	r1, #1
 800f9dc:	f7f8 fafc 	bl	8007fd8 <icmpv6SendErrorMessage>
            }
         }

         //Release memory buffer
         netBufferFree(item->buffer);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 ffbb 	bl	8010960 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d3d4      	bcc.n	800f9a4 <ndpFlushQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fa00:	bf00      	nop
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <ndpCreateDestCacheEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

NdpDestCacheEntry *ndpCreateDestCacheEntry(NetInterface *interface)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
   systime_t time;
   NdpDestCacheEntry *entry;
   NdpDestCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 800fa10:	f7f1 fc46 	bl	80012a0 <osGetSystemTime>
 800fa14:	60f8      	str	r0, [r7, #12]

   //Keep track of the oldest entry
   oldestEntry = &interface->ndpContext.destCache[0];
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 800fa1c:	613b      	str	r3, [r7, #16]

   //Loop through Destination cache entries
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800fa1e:	2300      	movs	r3, #0
 800fa20:	617b      	str	r3, [r7, #20]
 800fa22:	e029      	b.n	800fa78 <ndpCreateDestCacheEntry+0x70>
   {
      //Point to the current entry
      entry = &interface->ndpContext.destCache[i];
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	4413      	add	r3, r2
 800fa36:	3304      	adds	r3, #4
 800fa38:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use or not
      if(ipv6CompAddr(&entry->destAddr, &IPV6_UNSPECIFIED_ADDR))
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2210      	movs	r2, #16
 800fa3e:	4915      	ldr	r1, [pc, #84]	; (800fa94 <ndpCreateDestCacheEntry+0x8c>)
 800fa40:	4618      	mov	r0, r3
 800fa42:	f00d ff0f 	bl	801d864 <memcmp>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d106      	bne.n	800fa5a <ndpCreateDestCacheEntry+0x52>
      {
         //Erase contents
         osMemset(entry, 0, sizeof(NdpDestCacheEntry));
 800fa4c:	2228      	movs	r2, #40	; 0x28
 800fa4e:	2100      	movs	r1, #0
 800fa50:	68b8      	ldr	r0, [r7, #8]
 800fa52:	f00d ff3d 	bl	801d8d0 <memset>
         //Return a pointer to the Destination cache entry
         return entry;
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	e017      	b.n	800fa8a <ndpCreateDestCacheEntry+0x82>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	1ad2      	subs	r2, r2, r3
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa66:	68f9      	ldr	r1, [r7, #12]
 800fa68:	1acb      	subs	r3, r1, r3
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d901      	bls.n	800fa72 <ndpCreateDestCacheEntry+0x6a>
      {
         oldestEntry = entry;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	613b      	str	r3, [r7, #16]
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	3301      	adds	r3, #1
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2b07      	cmp	r3, #7
 800fa7c:	d9d2      	bls.n	800fa24 <ndpCreateDestCacheEntry+0x1c>
      }
   }

   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(NdpDestCacheEntry));
 800fa7e:	2228      	movs	r2, #40	; 0x28
 800fa80:	2100      	movs	r1, #0
 800fa82:	6938      	ldr	r0, [r7, #16]
 800fa84:	f00d ff24 	bl	801d8d0 <memset>

   //Return a pointer to the Destination cache entry
   return oldestEntry;
 800fa88:	693b      	ldr	r3, [r7, #16]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	08024c2c 	.word	0x08024c2c

0800fa98 <ndpFindDestCacheEntry>:
 * @return A pointer to the matching entry is returned. NULL is returned if
 *   the specified address could not be found in the Destination cache
 **/

NdpDestCacheEntry *ndpFindDestCacheEntry(NetInterface *interface, const Ipv6Addr *destAddr)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
   uint_t i;
   NdpDestCacheEntry *entry;

   //Loop through Destination Cache entries
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800faa2:	2300      	movs	r3, #0
 800faa4:	60fb      	str	r3, [r7, #12]
 800faa6:	e018      	b.n	800fada <ndpFindDestCacheEntry+0x42>
   {
      //Point to the current entry
      entry = &interface->ndpContext.destCache[i];
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	4613      	mov	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	4413      	add	r3, r2
 800faba:	3304      	adds	r3, #4
 800fabc:	60bb      	str	r3, [r7, #8]

      //Current entry matches the specified destination address?
      if(ipv6CompAddr(&entry->destAddr, destAddr))
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	2210      	movs	r2, #16
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f00d fecd 	bl	801d864 <memcmp>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <ndpFindDestCacheEntry+0x3c>
         return entry;
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	e006      	b.n	800fae2 <ndpFindDestCacheEntry+0x4a>
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	3301      	adds	r3, #1
 800fad8:	60fb      	str	r3, [r7, #12]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b07      	cmp	r3, #7
 800fade:	d9e3      	bls.n	800faa8 <ndpFindDestCacheEntry+0x10>
   }

   //No matching entry in Destination Cache...
   return NULL;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <ndpFlushDestCache>:
 * @brief Flush Destination Cache
 * @param[in] interface Underlying network interface
 **/

void ndpFlushDestCache(NetInterface *interface)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
   //Clear the Destination Cache
   osMemset(interface->ndpContext.destCache, 0,
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 800faf8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fafc:	2100      	movs	r1, #0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f00d fee6 	bl	801d8d0 <memset>
      sizeof(interface->ndpContext.destCache));
}
 800fb04:	bf00      	nop
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <ndpParsePrefixInfoOption>:
 * @param[in] interface Underlying network interface
 * @param[in] option Pointer to the Prefix Information option
 **/

void ndpParsePrefixInfoOption(NetInterface *interface, NdpPrefixInfoOption *option)
{
 800fb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb10:	b087      	sub	sp, #28
 800fb12:	af04      	add	r7, sp, #16
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	6039      	str	r1, [r7, #0]
   //Make sure the Prefix Information option is valid
   if(option == NULL || option->length != 4)
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d05c      	beq.n	800fbd8 <ndpParsePrefixInfoOption+0xcc>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	785b      	ldrb	r3, [r3, #1]
 800fb22:	2b04      	cmp	r3, #4
 800fb24:	d158      	bne.n	800fbd8 <ndpParsePrefixInfoOption+0xcc>
      return;

   //A prefix Information option that have the on-link flag set indicates a
   //prefix identifying a range of addresses that should be considered on-link
   if(!option->l)
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	78db      	ldrb	r3, [r3, #3]
 800fb2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d053      	beq.n	800fbdc <ndpParsePrefixInfoOption+0xd0>
      return;

   //If the prefix is the link-local prefix, silently ignore the
   //Prefix Information option
   if(ipv6CompPrefix(&option->prefix, &IPV6_LINK_LOCAL_ADDR_PREFIX, 10))
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	3310      	adds	r3, #16
 800fb38:	220a      	movs	r2, #10
 800fb3a:	492d      	ldr	r1, [pc, #180]	; (800fbf0 <ndpParsePrefixInfoOption+0xe4>)
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fc fc89 	bl	800c454 <ipv6CompPrefix>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d14b      	bne.n	800fbe0 <ndpParsePrefixInfoOption+0xd4>
      return;

   //If the preferred lifetime is greater than the valid lifetime,
   //silently ignore the Prefix Information option
   if(ntohl(option->preferredLifetime) > ntohl(option->validLifetime))
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7f1 f9cf 	bl	8000ef0 <swapInt32>
 800fb52:	4604      	mov	r4, r0
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7f1 f9c9 	bl	8000ef0 <swapInt32>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	429c      	cmp	r4, r3
 800fb62:	d83f      	bhi.n	800fbe4 <ndpParsePrefixInfoOption+0xd8>
      return;

   //Check whether the Valid Lifetime field is non-zero
   if(ntohl(option->validLifetime) != 0)
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7f1 f9c1 	bl	8000ef0 <swapInt32>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d027      	beq.n	800fbc4 <ndpParsePrefixInfoOption+0xb8>
   {
      //If the prefix is not already present in the Prefix List, create a new
      //entry for the prefix. If the prefix is already present in the list,
      //reset its invalidation timer
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	f103 0410 	add.w	r4, r3, #16
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	789b      	ldrb	r3, [r3, #2]
 800fb7e:	4698      	mov	r8, r3
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	78db      	ldrb	r3, [r3, #3]
 800fb84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	4699      	mov	r9, r3
         option->a, ntohl(option->validLifetime), ntohl(option->preferredLifetime));
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	78db      	ldrb	r3, [r3, #3]
 800fb90:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fb94:	b2db      	uxtb	r3, r3
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800fb96:	461e      	mov	r6, r3
         option->a, ntohl(option->validLifetime), ntohl(option->preferredLifetime));
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	685b      	ldr	r3, [r3, #4]
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7f1 f9a7 	bl	8000ef0 <swapInt32>
 800fba2:	4605      	mov	r5, r0
         option->a, ntohl(option->validLifetime), ntohl(option->preferredLifetime));
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	689b      	ldr	r3, [r3, #8]
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f1 f9a1 	bl	8000ef0 <swapInt32>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	9302      	str	r3, [sp, #8]
 800fbb2:	9501      	str	r5, [sp, #4]
 800fbb4:	9600      	str	r6, [sp, #0]
 800fbb6:	464b      	mov	r3, r9
 800fbb8:	4642      	mov	r2, r8
 800fbba:	4621      	mov	r1, r4
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7fb ffa7 	bl	800bb10 <ipv6AddPrefix>
 800fbc2:	e010      	b.n	800fbe6 <ndpParsePrefixInfoOption+0xda>
   }
   else
   {
      //If the new Lifetime value is zero, time-out the prefix immediately
      ipv6RemovePrefix(interface, &option->prefix, option->prefixLength);
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	f103 0110 	add.w	r1, r3, #16
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	789b      	ldrb	r3, [r3, #2]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7fc f833 	bl	800bc3c <ipv6RemovePrefix>
 800fbd6:	e006      	b.n	800fbe6 <ndpParsePrefixInfoOption+0xda>
      return;
 800fbd8:	bf00      	nop
 800fbda:	e004      	b.n	800fbe6 <ndpParsePrefixInfoOption+0xda>
      return;
 800fbdc:	bf00      	nop
 800fbde:	e002      	b.n	800fbe6 <ndpParsePrefixInfoOption+0xda>
      return;
 800fbe0:	bf00      	nop
 800fbe2:	e000      	b.n	800fbe6 <ndpParsePrefixInfoOption+0xda>
      return;
 800fbe4:	bf00      	nop
   }
}
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbee:	bf00      	nop
 800fbf0:	08024c6c 	.word	0x08024c6c

0800fbf4 <ndpUpdateAddrList>:
 * @brief Manage the lifetime of IPv6 addresses
 * @param[in] interface Underlying network interface
 **/

void ndpUpdateAddrList(NetInterface *interface)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08a      	sub	sp, #40	; 0x28
 800fbf8:	af04      	add	r7, sp, #16
 800fbfa:	6078      	str	r0, [r7, #4]
   systime_t time;
   Ipv6AddrEntry *entry;
   NdpContext *context;

   //Point to the NDP context
   context = &interface->ndpContext;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800fc02:	613b      	str	r3, [r7, #16]

   //Get current time
   time = osGetSystemTime();
 800fc04:	f7f1 fb4c 	bl	80012a0 <osGetSystemTime>
 800fc08:	60f8      	str	r0, [r7, #12]

   //Go through the list of IPv6 addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	617b      	str	r3, [r7, #20]
 800fc0e:	e0be      	b.n	800fd8e <ndpUpdateAddrList+0x19a>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];
 800fc10:	697a      	ldr	r2, [r7, #20]
 800fc12:	4613      	mov	r3, r2
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	4413      	add	r3, r2
 800fc18:	011b      	lsls	r3, r3, #4
 800fc1a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	4413      	add	r3, r2
 800fc22:	3304      	adds	r3, #4
 800fc24:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	7c1b      	ldrb	r3, [r3, #16]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d178      	bne.n	800fd20 <ndpUpdateAddrList+0x12c>
      {
         //Check whether the link is up
         if(interface->linkState)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 80a8 	beq.w	800fd88 <ndpUpdateAddrList+0x194>
         {
            //To check an address, a node should send Neighbor Solicitation messages
            if(entry->dadRetransmitCount == 0)
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d127      	bne.n	800fc90 <ndpUpdateAddrList+0x9c>
            {
               //Set time stamp
               entry->timestamp = time;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	625a      	str	r2, [r3, #36]	; 0x24

               //Check whether Duplicate Address Detection should be performed
               if(context->dupAddrDetectTransmits > 0)
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d01c      	beq.n	800fc88 <ndpUpdateAddrList+0x94>
               {
                  //Link-local address?
                  if(i == 0)
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10c      	bne.n	800fc6e <ndpUpdateAddrList+0x7a>
                  {
                     //Delay before transmitting the first solicitation
                     entry->dadTimeout = netGetRandRange(0, NDP_MAX_RTR_SOLICITATION_DELAY);
 800fc54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fc58:	2000      	movs	r0, #0
 800fc5a:	f001 fd99 	bl	8011790 <netGetRandRange>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	461a      	mov	r2, r3
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	629a      	str	r2, [r3, #40]	; 0x28
                     //Prepare to send the first Neighbor Solicitation message
                     entry->dadRetransmitCount = 1;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc6c:	e08c      	b.n	800fd88 <ndpUpdateAddrList+0x194>
                  }
                  else
                  {
                     //Valid link-local address?
                     if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 3664 	ldrb.w	r3, [r3, #1636]	; 0x664
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	f040 8087 	bne.w	800fd88 <ndpUpdateAddrList+0x194>
                     {
                        //Prepare to send the first Neighbor Solicitation message
                        entry->dadTimeout = 0;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	629a      	str	r2, [r3, #40]	; 0x28
                        entry->dadRetransmitCount = 1;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	2201      	movs	r2, #1
 800fc84:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc86:	e07f      	b.n	800fd88 <ndpUpdateAddrList+0x194>
                  }
               }
               else
               {
                  //Do not perform Duplicate Address Detection
                  entry->state = IPV6_ADDR_STATE_PREFERRED;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	741a      	strb	r2, [r3, #16]
 800fc8e:	e07b      	b.n	800fd88 <ndpUpdateAddrList+0x194>
               }
            }
            else
            {
               //Check current time
               if(timeCompare(time, entry->timestamp + entry->dadTimeout) >= 0)
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc98:	4413      	add	r3, r2
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	db72      	blt.n	800fd88 <ndpUpdateAddrList+0x194>
               {
                  //Duplicate Address Detection failed?
                  if(entry->duplicate)
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d01d      	beq.n	800fce6 <ndpUpdateAddrList+0xf2>
                  {
                     //A tentative address that is determined to be a duplicate
                     //must not be assigned to an interface
                     if(entry->permanent)
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00c      	beq.n	800fccc <ndpUpdateAddrList+0xd8>
                     {
                        //The IPv6 address should be preserved if it has been
                        //manually assigned
                        ipv6SetAddr(interface, i, &entry->addr,
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	9302      	str	r3, [sp, #8]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	6979      	ldr	r1, [r7, #20]
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7fb fe75 	bl	800b9b4 <ipv6SetAddr>
 800fcca:	e05d      	b.n	800fd88 <ndpUpdateAddrList+0x194>
                     }
                     else
                     {
                        //The IPv6 address is no more valid and should be
                        //removed from the list
                        ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 800fccc:	2300      	movs	r3, #0
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4a31      	ldr	r2, [pc, #196]	; (800fda0 <ndpUpdateAddrList+0x1ac>)
 800fcdc:	6979      	ldr	r1, [r7, #20]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7fb fe68 	bl	800b9b4 <ipv6SetAddr>
 800fce4:	e050      	b.n	800fd88 <ndpUpdateAddrList+0x194>
                           IPV6_ADDR_STATE_INVALID, 0, 0, FALSE);
                     }
                  }
                  //Duplicate Address Detection is on-going?
                  else if(entry->dadRetransmitCount <= context->dupAddrDetectTransmits)
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d812      	bhi.n	800fd18 <ndpUpdateAddrList+0x124>
                  {
                     //Send a multicast Neighbor Solicitation message
                     ndpSendNeighborSol(interface, &entry->addr, TRUE);
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fa6d 	bl	800f1d8 <ndpSendNeighborSol>

                     //Set timeout value
                     entry->dadTimeout += context->retransTimer;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	441a      	add	r2, r3
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	629a      	str	r2, [r3, #40]	; 0x28
                     //Increment retransmission counter
                     entry->dadRetransmitCount++;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd10:	1c5a      	adds	r2, r3, #1
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	62da      	str	r2, [r3, #44]	; 0x2c
 800fd16:	e037      	b.n	800fd88 <ndpUpdateAddrList+0x194>
                  }
                  //Duplicate Address Detection is complete?
                  else
                  {
                     //The use of the IPv6 address is now unrestricted
                     entry->state = IPV6_ADDR_STATE_PREFERRED;
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	2202      	movs	r2, #2
 800fd1c:	741a      	strb	r2, [r3, #16]
 800fd1e:	e033      	b.n	800fd88 <ndpUpdateAddrList+0x194>
               }
            }
         }
      }
      //Preferred address?
      else if(entry->state == IPV6_ADDR_STATE_PREFERRED)
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	7c1b      	ldrb	r3, [r3, #16]
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	d111      	bne.n	800fd4c <ndpUpdateAddrList+0x158>
      {
         //An IPv6 address with an infinite preferred lifetime is never timed out
         if(entry->preferredLifetime != NDP_INFINITE_LIFETIME)
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	69db      	ldr	r3, [r3, #28]
 800fd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd30:	d02a      	beq.n	800fd88 <ndpUpdateAddrList+0x194>
         {
            //When the preferred lifetime expires, the address becomes deprecated
            if(timeCompare(time, entry->timestamp + entry->preferredLifetime) >= 0)
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	db21      	blt.n	800fd88 <ndpUpdateAddrList+0x194>
            {
               //A deprecated address should continue to be used as a source
               //address in existing communications, but should not be used
               //to initiate new communications
               entry->state = IPV6_ADDR_STATE_DEPRECATED;
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2203      	movs	r2, #3
 800fd48:	741a      	strb	r2, [r3, #16]
 800fd4a:	e01d      	b.n	800fd88 <ndpUpdateAddrList+0x194>
            }
         }
      }
      //Deprecated address?
      else if(entry->state == IPV6_ADDR_STATE_DEPRECATED)
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	7c1b      	ldrb	r3, [r3, #16]
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d119      	bne.n	800fd88 <ndpUpdateAddrList+0x194>
      {
         //An IPv6 address with an infinite valid lifetime is never timed out
         if(entry->validLifetime != NDP_INFINITE_LIFETIME)
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	699b      	ldr	r3, [r3, #24]
 800fd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5c:	d014      	beq.n	800fd88 <ndpUpdateAddrList+0x194>
         {
            //When the valid lifetime expires, the address becomes invalid
            if(timeCompare(time, entry->timestamp + entry->validLifetime) >= 0)
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	4413      	add	r3, r2
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	db0b      	blt.n	800fd88 <ndpUpdateAddrList+0x194>
            {
               //The IPv6 address is no more valid and should be removed from the list
               ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 800fd70:	2300      	movs	r3, #0
 800fd72:	9302      	str	r3, [sp, #8]
 800fd74:	2300      	movs	r3, #0
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4a08      	ldr	r2, [pc, #32]	; (800fda0 <ndpUpdateAddrList+0x1ac>)
 800fd80:	6979      	ldr	r1, [r7, #20]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7fb fe16 	bl	800b9b4 <ipv6SetAddr>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	617b      	str	r3, [r7, #20]
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	f67f af3d 	bls.w	800fc10 <ndpUpdateAddrList+0x1c>
                  IPV6_ADDR_STATE_INVALID, 0, 0, FALSE);
            }
         }
      }
   }
}
 800fd96:	bf00      	nop
 800fd98:	bf00      	nop
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	08024c2c 	.word	0x08024c2c

0800fda4 <ndpUpdatePrefixList>:
 * @brief Periodically update Prefix List
 * @param[in] interface Underlying network interface
 **/

void ndpUpdatePrefixList(NetInterface *interface)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv6PrefixEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800fdac:	f7f1 fa78 	bl	80012a0 <osGetSystemTime>
 800fdb0:	6138      	str	r0, [r7, #16]

   //Go through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	617b      	str	r3, [r7, #20]
 800fdb6:	e025      	b.n	800fe04 <ndpUpdatePrefixList+0x60>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	222c      	movs	r2, #44	; 0x2c
 800fdbc:	fb02 f303 	mul.w	r3, r2, r3
 800fdc0:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	3304      	adds	r3, #4
 800fdca:	60fb      	str	r3, [r7, #12]

      //Check the lifetime value
      if(entry->validLifetime > 0 && entry->validLifetime < INFINITE_DELAY)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	69db      	ldr	r3, [r3, #28]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d014      	beq.n	800fdfe <ndpUpdatePrefixList+0x5a>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	69db      	ldr	r3, [r3, #28]
 800fdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fddc:	d00f      	beq.n	800fdfe <ndpUpdatePrefixList+0x5a>
      {
         //A node should retain entries in the Prefix List until their
         //lifetimes expire
         if(timeCompare(time, entry->timestamp + entry->validLifetime) >= 0)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	69db      	ldr	r3, [r3, #28]
 800fde6:	4413      	add	r3, r2
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	db06      	blt.n	800fdfe <ndpUpdatePrefixList+0x5a>
         {
            //When removing an entry from the Prefix List, there is no need
            //to purge any entries from the Destination or Neighbor Caches
            ipv6RemovePrefix(interface, &entry->prefix, entry->prefixLen);
 800fdf0:	68f9      	ldr	r1, [r7, #12]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	7c1b      	ldrb	r3, [r3, #16]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7fb ff1f 	bl	800bc3c <ipv6RemovePrefix>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	3301      	adds	r3, #1
 800fe02:	617b      	str	r3, [r7, #20]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d9d6      	bls.n	800fdb8 <ndpUpdatePrefixList+0x14>
         }
      }
   }
}
 800fe0a:	bf00      	nop
 800fe0c:	bf00      	nop
 800fe0e:	3718      	adds	r7, #24
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <ndpUpdateDefaultRouterList>:
 * @brief Periodically update Default Router List
 * @param[in] interface Underlying network interface
 **/

void ndpUpdateDefaultRouterList(NetInterface *interface)
{
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b087      	sub	sp, #28
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
   systime_t time;
   Ipv6RouterEntry *entry;

   //This flag will be set if any entry has been removed from
   //the Default Router List
   flag = FALSE;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	613b      	str	r3, [r7, #16]

   //Get current time
   time = osGetSystemTime();
 800fe20:	f7f1 fa3e 	bl	80012a0 <osGetSystemTime>
 800fe24:	60f8      	str	r0, [r7, #12]

   //Go through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]
 800fe2a:	e02a      	b.n	800fe82 <ndpUpdateDefaultRouterList+0x6e>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	015b      	lsls	r3, r3, #5
 800fe30:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	4413      	add	r3, r2
 800fe38:	3304      	adds	r3, #4
 800fe3a:	60bb      	str	r3, [r7, #8]

      //Check the lifetime value
      if(entry->lifetime > 0 && entry->lifetime < INFINITE_DELAY)
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d01b      	beq.n	800fe7c <ndpUpdateDefaultRouterList+0x68>
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4c:	d016      	beq.n	800fe7c <ndpUpdateDefaultRouterList+0x68>
      {
         //A node should retain entries in the Default Router List until
         //their lifetimes expire
         if(timeCompare(time, entry->timestamp + entry->lifetime) >= 0)
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	69da      	ldr	r2, [r3, #28]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	4413      	add	r3, r2
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	db0d      	blt.n	800fe7c <ndpUpdateDefaultRouterList+0x68>
         {
            //Immediately time-out the entry
            entry->addr = IPV6_UNSPECIFIED_ADDR;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	4a0e      	ldr	r2, [pc, #56]	; (800fe9c <ndpUpdateDefaultRouterList+0x88>)
 800fe64:	461c      	mov	r4, r3
 800fe66:	4613      	mov	r3, r2
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	6859      	ldr	r1, [r3, #4]
 800fe6c:	689a      	ldr	r2, [r3, #8]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            entry->lifetime = 0;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2200      	movs	r2, #0
 800fe76:	611a      	str	r2, [r3, #16]

            //Set flag
            flag = TRUE;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	613b      	str	r3, [r7, #16]
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	617b      	str	r3, [r7, #20]
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d9d1      	bls.n	800fe2c <ndpUpdateDefaultRouterList+0x18>
         }
      }
   }

   //Check whether an entry has been removed from the list
   if(flag)
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d002      	beq.n	800fe94 <ndpUpdateDefaultRouterList+0x80>
   {
      //When removing an entry from the Default Router List, any entries
      //in the Destination Cache that go through that router must perform
      //next-hop determination again to select a new default router
      ndpFlushDestCache(interface);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fe2b 	bl	800faea <ndpFlushDestCache>
   }
}
 800fe94:	bf00      	nop
 800fe96:	371c      	adds	r7, #28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd90      	pop	{r4, r7, pc}
 800fe9c:	08024c2c 	.word	0x08024c2c

0800fea0 <ndpSelectDefaultRouter>:
 * @return Error code
 **/

error_t ndpSelectDefaultRouter(NetInterface *interface,
   const Ipv6Addr *unreachableAddr, Ipv6Addr *addr)
{
 800fea0:	b5b0      	push	{r4, r5, r7, lr}
 800fea2:	b08a      	sub	sp, #40	; 0x28
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
   uint_t k;
   Ipv6RouterEntry *routerEntry;
   NdpNeighborCacheEntry *neighborCacheEntry;

   //Initialize index
   i = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	627b      	str	r3, [r7, #36]	; 0x24

   //This parameter is optional...
   if(unreachableAddr != NULL)
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d021      	beq.n	800fefa <ndpSelectDefaultRouter+0x5a>
   {
      //Search the Default Router List for the router whose reachability is suspect
      for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800feb6:	2300      	movs	r3, #0
 800feb8:	623b      	str	r3, [r7, #32]
 800feba:	e01b      	b.n	800fef4 <ndpSelectDefaultRouter+0x54>
      {
         //Point to the current entry
         routerEntry = &interface->ipv6Context.routerList[j];
 800febc:	6a3b      	ldr	r3, [r7, #32]
 800febe:	015b      	lsls	r3, r3, #5
 800fec0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	4413      	add	r3, r2
 800fec8:	3304      	adds	r3, #4
 800feca:	61fb      	str	r3, [r7, #28]

         //Check the lifetime associated with the default router
         if(routerEntry->lifetime)
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	691b      	ldr	r3, [r3, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00c      	beq.n	800feee <ndpSelectDefaultRouter+0x4e>
         {
            //Check the router address against the address whose reachability is suspect
            if(ipv6CompAddr(&routerEntry->addr, unreachableAddr))
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	2210      	movs	r2, #16
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	4618      	mov	r0, r3
 800fedc:	f00d fcc2 	bl	801d864 <memcmp>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d103      	bne.n	800feee <ndpSelectDefaultRouter+0x4e>
            {
               //Routers should be selected in a round-robin fashion
               i = j + 1;
 800fee6:	6a3b      	ldr	r3, [r7, #32]
 800fee8:	3301      	adds	r3, #1
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
               //We are done
               break;
 800feec:	e005      	b.n	800fefa <ndpSelectDefaultRouter+0x5a>
      for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	3301      	adds	r3, #1
 800fef2:	623b      	str	r3, [r7, #32]
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d9e0      	bls.n	800febc <ndpSelectDefaultRouter+0x1c>
      }
   }

   //Routers that are reachable or probably reachable should be preferred
   //over routers whose reachability is unknown or suspect
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800fefa:	2300      	movs	r3, #0
 800fefc:	623b      	str	r3, [r7, #32]
 800fefe:	e02c      	b.n	800ff5a <ndpSelectDefaultRouter+0xba>
   {
      //Get current index
      k = (i + j) % IPV6_ROUTER_LIST_SIZE;
 800ff00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff02:	6a3b      	ldr	r3, [r7, #32]
 800ff04:	4413      	add	r3, r2
 800ff06:	f003 0301 	and.w	r3, r3, #1
 800ff0a:	61bb      	str	r3, [r7, #24]

      //Point to the corresponding entry
      routerEntry = &interface->ipv6Context.routerList[k];
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	015b      	lsls	r3, r3, #5
 800ff10:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	4413      	add	r3, r2
 800ff18:	3304      	adds	r3, #4
 800ff1a:	61fb      	str	r3, [r7, #28]

      //Check the lifetime associated with the default router
      if(routerEntry->lifetime)
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	691b      	ldr	r3, [r3, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d017      	beq.n	800ff54 <ndpSelectDefaultRouter+0xb4>
      {
         //Search the Neighbor Cache for the router address
         neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &routerEntry->addr);
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	4619      	mov	r1, r3
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f7ff fbba 	bl	800f6a2 <ndpFindNeighborCacheEntry>
 800ff2e:	6178      	str	r0, [r7, #20]

         //Check whether the router is reachable or probably reachable
         if(neighborCacheEntry != NULL)
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00e      	beq.n	800ff54 <ndpSelectDefaultRouter+0xb4>
         {
            //Any state other than INCOMPLETE?
            if(neighborCacheEntry->state != NDP_STATE_INCOMPLETE)
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d00a      	beq.n	800ff54 <ndpSelectDefaultRouter+0xb4>
            {
               //Return the IPv6 address of the default router
               *addr = routerEntry->addr;
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	4614      	mov	r4, r2
 800ff44:	461d      	mov	r5, r3
 800ff46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff48:	6020      	str	r0, [r4, #0]
 800ff4a:	6061      	str	r1, [r4, #4]
 800ff4c:	60a2      	str	r2, [r4, #8]
 800ff4e:	60e3      	str	r3, [r4, #12]
               //Successful default router selection
               return NO_ERROR;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e02d      	b.n	800ffb0 <ndpSelectDefaultRouter+0x110>
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	3301      	adds	r3, #1
 800ff58:	623b      	str	r3, [r7, #32]
 800ff5a:	6a3b      	ldr	r3, [r7, #32]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d9cf      	bls.n	800ff00 <ndpSelectDefaultRouter+0x60>

   //When no routers on the list are known to be reachable or probably
   //reachable, routers should be selected in a round-robin fashion, so
   //that subsequent requests for a default router do not return the
   //same router until all other routers have been selected
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800ff60:	2300      	movs	r3, #0
 800ff62:	623b      	str	r3, [r7, #32]
 800ff64:	e01f      	b.n	800ffa6 <ndpSelectDefaultRouter+0x106>
   {
      //Get current index
      k = (i + j) % IPV6_ROUTER_LIST_SIZE;
 800ff66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	f003 0301 	and.w	r3, r3, #1
 800ff70:	61bb      	str	r3, [r7, #24]

      //Point to the corresponding entry
      routerEntry = &interface->ipv6Context.routerList[k];
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	015b      	lsls	r3, r3, #5
 800ff76:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800ff7a:	68fa      	ldr	r2, [r7, #12]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	3304      	adds	r3, #4
 800ff80:	61fb      	str	r3, [r7, #28]

      //Check the lifetime associated with the default router
      if(routerEntry->lifetime)
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <ndpSelectDefaultRouter+0x100>
      {
         //Return the IPv6 address of the default router
         *addr = routerEntry->addr;
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	4614      	mov	r4, r2
 800ff90:	461d      	mov	r5, r3
 800ff92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff94:	6020      	str	r0, [r4, #0]
 800ff96:	6061      	str	r1, [r4, #4]
 800ff98:	60a2      	str	r2, [r4, #8]
 800ff9a:	60e3      	str	r3, [r4, #12]
         //Successful default router selection
         return NO_ERROR;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	e007      	b.n	800ffb0 <ndpSelectDefaultRouter+0x110>
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	623b      	str	r3, [r7, #32]
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d9dc      	bls.n	800ff66 <ndpSelectDefaultRouter+0xc6>
      }
   }

   //No default router found
   return ERROR_NO_ROUTE;
 800ffac:	f44f 7302 	mov.w	r3, #520	; 0x208
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3728      	adds	r7, #40	; 0x28
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bdb0      	pop	{r4, r5, r7, pc}

0800ffb8 <ndpIsFirstHopRouter>:
 * @return TRUE if the address is the first-hop router, else FALSE
 **/

bool_t ndpIsFirstHopRouter(NetInterface *interface,
   const Ipv6Addr *destAddr, const Ipv6Addr *nextHop)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b088      	sub	sp, #32
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	607a      	str	r2, [r7, #4]
   bool_t isFirstHopRouter;
   Ipv6RouterEntry *routerEntry;
   NdpDestCacheEntry *destCacheEntry;

   //Clear flag
   isFirstHopRouter = FALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	61bb      	str	r3, [r7, #24]

   //Search the cache for the specified destination address
   destCacheEntry = ndpFindDestCacheEntry(interface, destAddr);
 800ffc8:	68b9      	ldr	r1, [r7, #8]
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	f7ff fd64 	bl	800fa98 <ndpFindDestCacheEntry>
 800ffd0:	6178      	str	r0, [r7, #20]

   //Any matching entry?
   if(destCacheEntry != NULL)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00c      	beq.n	800fff2 <ndpIsFirstHopRouter+0x3a>
   {
      //Check if the address is the same as the current first-hop
      //router for the specified destination
      if(ipv6CompAddr(&destCacheEntry->nextHop, nextHop))
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	3310      	adds	r3, #16
 800ffdc:	2210      	movs	r2, #16
 800ffde:	6879      	ldr	r1, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f00d fc3f 	bl	801d864 <memcmp>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d123      	bne.n	8010034 <ndpIsFirstHopRouter+0x7c>
         isFirstHopRouter = TRUE;
 800ffec:	2301      	movs	r3, #1
 800ffee:	61bb      	str	r3, [r7, #24]
 800fff0:	e020      	b.n	8010034 <ndpIsFirstHopRouter+0x7c>
   }
   else
   {
      //Loop through the Default Router List
      for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800fff2:	2300      	movs	r3, #0
 800fff4:	61fb      	str	r3, [r7, #28]
 800fff6:	e01a      	b.n	801002e <ndpIsFirstHopRouter+0x76>
      {
         //Point to the current entry
         routerEntry = &interface->ipv6Context.routerList[i];
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	015b      	lsls	r3, r3, #5
 800fffc:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	4413      	add	r3, r2
 8010004:	3304      	adds	r3, #4
 8010006:	613b      	str	r3, [r7, #16]

         //Check the lifetime associated with the default router
         if(routerEntry->lifetime)
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d00b      	beq.n	8010028 <ndpIsFirstHopRouter+0x70>
         {
            //Check whether the current entry matches the specified address
            if(ipv6CompAddr(&routerEntry->addr, nextHop))
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	2210      	movs	r2, #16
 8010014:	6879      	ldr	r1, [r7, #4]
 8010016:	4618      	mov	r0, r3
 8010018:	f00d fc24 	bl	801d864 <memcmp>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d102      	bne.n	8010028 <ndpIsFirstHopRouter+0x70>
            {
               //The specified address is a valid first-hop router
               isFirstHopRouter = TRUE;
 8010022:	2301      	movs	r3, #1
 8010024:	61bb      	str	r3, [r7, #24]
               //We are done
               break;
 8010026:	e005      	b.n	8010034 <ndpIsFirstHopRouter+0x7c>
      for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	3301      	adds	r3, #1
 801002c:	61fb      	str	r3, [r7, #28]
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d9e1      	bls.n	800fff8 <ndpIsFirstHopRouter+0x40>
      }
   }

   //Return TRUE if the address is the same as the current first-hop
   //router for the specified destination
   return isFirstHopRouter;
 8010034:	69bb      	ldr	r3, [r7, #24]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3720      	adds	r7, #32
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <ndpSelectNextHop>:
 * @return Error code
 **/

error_t ndpSelectNextHop(NetInterface *interface, const Ipv6Addr *destAddr,
   const Ipv6Addr *unreachableNextHop, Ipv6Addr *nextHop, bool_t dontRoute)
{
 801003e:	b590      	push	{r4, r7, lr}
 8010040:	b087      	sub	sp, #28
 8010042:	af00      	add	r7, sp, #0
 8010044:	60f8      	str	r0, [r7, #12]
 8010046:	60b9      	str	r1, [r7, #8]
 8010048:	607a      	str	r2, [r7, #4]
 801004a:	603b      	str	r3, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 801004c:	2300      	movs	r3, #0
 801004e:	82fb      	strh	r3, [r7, #22]

   //Destination IPv6 address is a multicast address?
   if(ipv6IsMulticastAddr(destAddr))
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	2bff      	cmp	r3, #255	; 0xff
 8010056:	d10a      	bne.n	801006e <ndpSelectNextHop+0x30>
   {
      //For multicast packets, the next-hop is always the multicast destination
      //address and is considered to be on-link
      *nextHop = *destAddr;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	6814      	ldr	r4, [r2, #0]
 801005e:	6850      	ldr	r0, [r2, #4]
 8010060:	6891      	ldr	r1, [r2, #8]
 8010062:	68d2      	ldr	r2, [r2, #12]
 8010064:	601c      	str	r4, [r3, #0]
 8010066:	6058      	str	r0, [r3, #4]
 8010068:	6099      	str	r1, [r3, #8]
 801006a:	60da      	str	r2, [r3, #12]
 801006c:	e026      	b.n	80100bc <ndpSelectNextHop+0x7e>
   }
   else
   {
      //The sender performs a longest prefix match against the Prefix List to
      //determine whether the packet's destination is on-link or off-link
      if(ipv6IsOnLink(interface, destAddr))
 801006e:	68b9      	ldr	r1, [r7, #8]
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f7fc f8f9 	bl	800c268 <ipv6IsOnLink>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00a      	beq.n	8010092 <ndpSelectNextHop+0x54>
      {
         //If the destination is on-link, the next-hop address is the same as
         //the packet's destination address
         *nextHop = *destAddr;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	6814      	ldr	r4, [r2, #0]
 8010082:	6850      	ldr	r0, [r2, #4]
 8010084:	6891      	ldr	r1, [r2, #8]
 8010086:	68d2      	ldr	r2, [r2, #12]
 8010088:	601c      	str	r4, [r3, #0]
 801008a:	6058      	str	r0, [r3, #4]
 801008c:	6099      	str	r1, [r3, #8]
 801008e:	60da      	str	r2, [r3, #12]
 8010090:	e014      	b.n	80100bc <ndpSelectNextHop+0x7e>
      }
      else if(dontRoute)
 8010092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00a      	beq.n	80100ae <ndpSelectNextHop+0x70>
      {
         //Do not send the packet via a router
         *nextHop = *destAddr;
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	6814      	ldr	r4, [r2, #0]
 801009e:	6850      	ldr	r0, [r2, #4]
 80100a0:	6891      	ldr	r1, [r2, #8]
 80100a2:	68d2      	ldr	r2, [r2, #12]
 80100a4:	601c      	str	r4, [r3, #0]
 80100a6:	6058      	str	r0, [r3, #4]
 80100a8:	6099      	str	r1, [r3, #8]
 80100aa:	60da      	str	r2, [r3, #12]
 80100ac:	e006      	b.n	80100bc <ndpSelectNextHop+0x7e>
      }
      else
      {
         //If the destination is off-link, the sender selects a router from
         //the Default Router List
         error = ndpSelectDefaultRouter(interface, unreachableNextHop, nextHop);
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f7ff fef4 	bl	800fea0 <ndpSelectDefaultRouter>
 80100b8:	4603      	mov	r3, r0
 80100ba:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 80100bc:	8afb      	ldrh	r3, [r7, #22]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	371c      	adds	r7, #28
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd90      	pop	{r4, r7, pc}
	...

080100c8 <ndpUpdateNextHop>:
 * @param[in] interface Underlying network interface
 * @param[in] unreachableNextHop Address of the unreachable next-hop
 **/

void ndpUpdateNextHop(NetInterface *interface, const Ipv6Addr *unreachableNextHop)
{
 80100c8:	b590      	push	{r4, r7, lr}
 80100ca:	b089      	sub	sp, #36	; 0x24
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   NdpDestCacheEntry *entry;

   //Go through Destination Cache
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 80100d2:	2300      	movs	r3, #0
 80100d4:	617b      	str	r3, [r7, #20]
 80100d6:	e030      	b.n	801013a <ndpUpdateNextHop+0x72>
   {
      //Point to the current entry
      entry = &interface->ndpContext.destCache[i];
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	4613      	mov	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	4413      	add	r3, r2
 80100e0:	00db      	lsls	r3, r3, #3
 80100e2:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	4413      	add	r3, r2
 80100ea:	3304      	adds	r3, #4
 80100ec:	613b      	str	r3, [r7, #16]

      //Check whether the unreachable IPv6 address is used a first-hop router
      if(ipv6CompAddr(&entry->nextHop, unreachableNextHop))
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	3310      	adds	r3, #16
 80100f2:	2210      	movs	r2, #16
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f00d fbb4 	bl	801d864 <memcmp>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d118      	bne.n	8010134 <ndpUpdateNextHop+0x6c>
      {
         //Perform next-hop determination
         error = ndpSelectNextHop(interface, &entry->destAddr, &entry->nextHop,
 8010102:	6939      	ldr	r1, [r7, #16]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	f103 0210 	add.w	r2, r3, #16
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	3310      	adds	r3, #16
 801010e:	2000      	movs	r0, #0
 8010110:	9000      	str	r0, [sp, #0]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff ff93 	bl	801003e <ndpSelectNextHop>
 8010118:	4603      	mov	r3, r0
 801011a:	81fb      	strh	r3, [r7, #14]
            &entry->nextHop, FALSE);

         //Next-hop determination failed?
         if(error)
 801011c:	89fb      	ldrh	r3, [r7, #14]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d008      	beq.n	8010134 <ndpUpdateNextHop+0x6c>
         {
            //Remove the current entry from the Destination Cache
            entry->destAddr = IPV6_UNSPECIFIED_ADDR;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	4a09      	ldr	r2, [pc, #36]	; (801014c <ndpUpdateNextHop+0x84>)
 8010126:	461c      	mov	r4, r3
 8010128:	4613      	mov	r3, r2
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	6859      	ldr	r1, [r3, #4]
 801012e:	689a      	ldr	r2, [r3, #8]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	3301      	adds	r3, #1
 8010138:	617b      	str	r3, [r7, #20]
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	2b07      	cmp	r3, #7
 801013e:	d9cb      	bls.n	80100d8 <ndpUpdateNextHop+0x10>
         }
      }
   }
}
 8010140:	bf00      	nop
 8010142:	bf00      	nop
 8010144:	371c      	adds	r7, #28
 8010146:	46bd      	mov	sp, r7
 8010148:	bd90      	pop	{r4, r7, pc}
 801014a:	bf00      	nop
 801014c:	08024c2c 	.word	0x08024c2c

08010150 <ndpAddOption>:
 * @param[in] length Length of the option value
 **/

void ndpAddOption(void *message, size_t *messageLen, uint8_t type,
   const void *value, size_t length)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	603b      	str	r3, [r7, #0]
 801015c:	4613      	mov	r3, r2
 801015e:	71fb      	strb	r3, [r7, #7]
   size_t optionLen;
   size_t paddingLen;
   NdpOption *option;

   //Length of the option in units of 8 bytes including the type and length fields
   optionLen = (length + sizeof(NdpOption) + 7) / 8;
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	3309      	adds	r3, #9
 8010164:	08db      	lsrs	r3, r3, #3
 8010166:	61fb      	str	r3, [r7, #28]

   //Sanity check
   if(optionLen <= UINT8_MAX)
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	2bff      	cmp	r3, #255	; 0xff
 801016c:	d82e      	bhi.n	80101cc <ndpAddOption+0x7c>
   {
      //Point to the buffer where the option is to be written
      option = (NdpOption *) ((uint8_t *) message + *messageLen);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	4413      	add	r3, r2
 8010176:	61bb      	str	r3, [r7, #24]

      //Option type
      option->type = type;
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	79fa      	ldrb	r2, [r7, #7]
 801017c:	701a      	strb	r2, [r3, #0]
      //Option length
      option->length = (uint8_t) optionLen;
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	b2da      	uxtb	r2, r3
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	705a      	strb	r2, [r3, #1]
      //Option value
      osMemcpy(option->value, value, length);
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	3302      	adds	r3, #2
 801018a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801018c:	6839      	ldr	r1, [r7, #0]
 801018e:	4618      	mov	r0, r3
 8010190:	f00d fb76 	bl	801d880 <memcpy>

      //Options should be padded when necessary to ensure that they end on
      //their natural 64-bit boundaries
      if((length + sizeof(NdpOption)) < (optionLen * 8))
 8010194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010196:	1c9a      	adds	r2, r3, #2
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	429a      	cmp	r2, r3
 801019e:	d20e      	bcs.n	80101be <ndpAddOption+0x6e>
      {
         //Determine the amount of padding data to append
         paddingLen = (optionLen * 8) - length - sizeof(NdpOption);
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	00da      	lsls	r2, r3, #3
 80101a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	3b02      	subs	r3, #2
 80101aa:	617b      	str	r3, [r7, #20]
         //Write padding data
         osMemset(option->value + length, 0, paddingLen);
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	1c9a      	adds	r2, r3, #2
 80101b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b2:	4413      	add	r3, r2
 80101b4:	697a      	ldr	r2, [r7, #20]
 80101b6:	2100      	movs	r1, #0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f00d fb89 	bl	801d8d0 <memset>
      }

      //Adjust the length of the NDP message
      *messageLen += optionLen * 8;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	441a      	add	r2, r3
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	601a      	str	r2, [r3, #0]
   }
}
 80101cc:	bf00      	nop
 80101ce:	3720      	adds	r7, #32
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <ndpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

void *ndpGetOption(uint8_t *options, size_t length, uint8_t type)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b087      	sub	sp, #28
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4613      	mov	r3, r2
 80101e0:	71fb      	strb	r3, [r7, #7]
   size_t i;
   NdpOption *option;

   //Point to the very first option of the NDP message
   i = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	617b      	str	r3, [r7, #20]

   //Parse options
   while((i + sizeof(NdpOption)) <= length)
 80101e6:	e021      	b.n	801022c <ndpGetOption+0x58>
   {
      //Point to the current option
      option = (NdpOption *) (options + i);
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	4413      	add	r3, r2
 80101ee:	613b      	str	r3, [r7, #16]

      //Nodes must silently discard an NDP message that contains
      //an option with length zero
      if(option->length == 0)
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	785b      	ldrb	r3, [r3, #1]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d01f      	beq.n	8010238 <ndpGetOption+0x64>
         break;
      //Check option length
      if((i + option->length * 8) > length)
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	785b      	ldrb	r3, [r3, #1]
 80101fc:	00db      	lsls	r3, r3, #3
 80101fe:	461a      	mov	r2, r3
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	4413      	add	r3, r2
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	429a      	cmp	r2, r3
 8010208:	d318      	bcc.n	801023c <ndpGetOption+0x68>
         break;

      //Current option type matches the specified one?
      if(option->type == type || type == NDP_OPT_ANY)
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	429a      	cmp	r2, r3
 8010212:	d002      	beq.n	801021a <ndpGetOption+0x46>
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	2bff      	cmp	r3, #255	; 0xff
 8010218:	d101      	bne.n	801021e <ndpGetOption+0x4a>
         return option;
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	e010      	b.n	8010240 <ndpGetOption+0x6c>

      //Jump to the next option
      i += option->length * 8;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	785b      	ldrb	r3, [r3, #1]
 8010222:	00db      	lsls	r3, r3, #3
 8010224:	461a      	mov	r2, r3
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	4413      	add	r3, r2
 801022a:	617b      	str	r3, [r7, #20]
   while((i + sizeof(NdpOption)) <= length)
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	3302      	adds	r3, #2
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	429a      	cmp	r2, r3
 8010234:	d2d8      	bcs.n	80101e8 <ndpGetOption+0x14>
 8010236:	e002      	b.n	801023e <ndpGetOption+0x6a>
         break;
 8010238:	bf00      	nop
 801023a:	e000      	b.n	801023e <ndpGetOption+0x6a>
         break;
 801023c:	bf00      	nop
   }

   //Specified option type not found
   return NULL;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	371c      	adds	r7, #28
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <ndpCheckOptions>:
 * @param[in] length Length of the Options field
 * @return Error code
 **/

error_t ndpCheckOptions(const uint8_t *options, size_t length)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
   size_t i;
   NdpOption *option;

   //Point to the very first option of the NDP message
   i = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	60fb      	str	r3, [r7, #12]

   //Parse options
   while((i + sizeof(NdpOption)) <= length)
 801025a:	e010      	b.n	801027e <ndpCheckOptions+0x32>
   {
      //Point to the current option
      option = (NdpOption *) (options + i);
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	4413      	add	r3, r2
 8010262:	60bb      	str	r3, [r7, #8]

      //Nodes must silently discard an NDP message that contains
      //an option with length zero
      if(option->length == 0)
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	785b      	ldrb	r3, [r3, #1]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d101      	bne.n	8010270 <ndpCheckOptions+0x24>
         return ERROR_INVALID_OPTION;
 801026c:	23df      	movs	r3, #223	; 0xdf
 801026e:	e00c      	b.n	801028a <ndpCheckOptions+0x3e>

      //Jump to the next option
      i += option->length * 8;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	785b      	ldrb	r3, [r3, #1]
 8010274:	00db      	lsls	r3, r3, #3
 8010276:	461a      	mov	r2, r3
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	4413      	add	r3, r2
 801027c:	60fb      	str	r3, [r7, #12]
   while((i + sizeof(NdpOption)) <= length)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3302      	adds	r3, #2
 8010282:	683a      	ldr	r2, [r7, #0]
 8010284:	429a      	cmp	r2, r3
 8010286:	d2e9      	bcs.n	801025c <ndpCheckOptions+0x10>
   }

   //The Options field is valid
   return NO_ERROR;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3714      	adds	r7, #20
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr
	...

08010298 <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b086      	sub	sp, #24
 801029c:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //Clear TCP/IP stack context
   osMemset(&netContext, 0, sizeof(NetContext));
 801029e:	f241 0208 	movw	r2, #4104	; 0x1008
 80102a2:	2100      	movs	r1, #0
 80102a4:	4852      	ldr	r0, [pc, #328]	; (80103f0 <netInit+0x158>)
 80102a6:	f00d fb13 	bl	801d8d0 <memset>

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 80102aa:	4b51      	ldr	r3, [pc, #324]	; (80103f0 <netInit+0x158>)
 80102ac:	2200      	movs	r2, #0
 80102ae:	609a      	str	r2, [r3, #8]
   //Get current time
   netTimestamp = osGetSystemTime();
 80102b0:	f7f0 fff6 	bl	80012a0 <osGetSystemTime>
 80102b4:	4603      	mov	r3, r0
 80102b6:	4a4e      	ldr	r2, [pc, #312]	; (80103f0 <netInit+0x158>)
 80102b8:	6153      	str	r3, [r2, #20]

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 80102ba:	484d      	ldr	r0, [pc, #308]	; (80103f0 <netInit+0x158>)
 80102bc:	f7f0 ffbd 	bl	800123a <osCreateMutex>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <netInit+0x32>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80102c6:	2365      	movs	r3, #101	; 0x65
 80102c8:	e08e      	b.n	80103e8 <netInit+0x150>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 80102ca:	484a      	ldr	r0, [pc, #296]	; (80103f4 <netInit+0x15c>)
 80102cc:	f7f0 fefb 	bl	80010c6 <osCreateEvent>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d101      	bne.n	80102da <netInit+0x42>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80102d6:	2365      	movs	r3, #101	; 0x65
 80102d8:	e086      	b.n	80103e8 <netInit+0x150>
   }

   //Memory pool initialization
   error = memPoolInit();
 80102da:	f000 fad9 	bl	8010890 <memPoolInit>
 80102de:	4603      	mov	r3, r0
 80102e0:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80102e2:	897b      	ldrh	r3, [r7, #10]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <netInit+0x54>
      return error;
 80102e8:	897b      	ldrh	r3, [r7, #10]
 80102ea:	e07d      	b.n	80103e8 <netInit+0x150>

   //Clear configuration data for each interface
   osMemset(netInterface, 0, sizeof(netInterface));
 80102ec:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80102f0:	2100      	movs	r1, #0
 80102f2:	4841      	ldr	r0, [pc, #260]	; (80103f8 <netInit+0x160>)
 80102f4:	f00d faec 	bl	801d8d0 <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80102f8:	2300      	movs	r3, #0
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	e01c      	b.n	8010338 <netInit+0xa0>
   {
      //Point to the current interface
      interface = &netInterface[i];
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8010304:	fb02 f303 	mul.w	r3, r2, r3
 8010308:	3350      	adds	r3, #80	; 0x50
 801030a:	4a39      	ldr	r2, [pc, #228]	; (80103f0 <netInit+0x158>)
 801030c:	4413      	add	r3, r2
 801030e:	607b      	str	r3, [r7, #4]

      //Default interface name
      osSprintf(interface->name, "eth%u", i);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	3310      	adds	r3, #16
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4939      	ldr	r1, [pc, #228]	; (80103fc <netInit+0x164>)
 8010318:	4618      	mov	r0, r3
 801031a:	f00d fca3 	bl	801dc64 <sprintf>

      //Zero-based index
      interface->index = i;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	605a      	str	r2, [r3, #4]

#if (ETH_SUPPORT == ENABLED)
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	22ff      	movs	r2, #255	; 0xff
 801032e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	3301      	adds	r3, #1
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d0df      	beq.n	80102fe <netInit+0x66>
#endif
   }

   //Socket related initialization
   error = socketInit();
 801033e:	f002 f8a7 	bl	8012490 <socketInit>
 8010342:	4603      	mov	r3, r0
 8010344:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8010346:	897b      	ldrh	r3, [r7, #10]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <netInit+0xb8>
      return error;
 801034c:	897b      	ldrh	r3, [r7, #10]
 801034e:	e04b      	b.n	80103e8 <netInit+0x150>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 8010350:	f007 fbb8 	bl	8017ac4 <udpInit>
 8010354:	4603      	mov	r3, r0
 8010356:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8010358:	897b      	ldrh	r3, [r7, #10]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <netInit+0xca>
      return error;
 801035e:	897b      	ldrh	r3, [r7, #10]
 8010360:	e042      	b.n	80103e8 <netInit+0x150>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 8010362:	f003 fed5 	bl	8014110 <tcpInit>
 8010366:	4603      	mov	r3, r0
 8010368:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 801036a:	897b      	ldrh	r3, [r7, #10]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d001      	beq.n	8010374 <netInit+0xdc>
      return error;
 8010370:	897b      	ldrh	r3, [r7, #10]
 8010372:	e039      	b.n	80103e8 <netInit+0x150>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 8010374:	f7f4 fe12 	bl	8004f9c <dnsInit>
 8010378:	4603      	mov	r3, r0
 801037a:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 801037c:	897b      	ldrh	r3, [r7, #10]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <netInit+0xee>
      return error;
 8010382:	897b      	ldrh	r3, [r7, #10]
 8010384:	e030      	b.n	80103e8 <netInit+0x150>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 8010386:	4b1e      	ldr	r3, [pc, #120]	; (8010400 <netInit+0x168>)
 8010388:	2200      	movs	r2, #0
 801038a:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
 801038c:	4b1d      	ldr	r3, [pc, #116]	; (8010404 <netInit+0x16c>)
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 8010392:	4b1d      	ldr	r3, [pc, #116]	; (8010408 <netInit+0x170>)
 8010394:	2200      	movs	r2, #0
 8010396:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && IGMP_SUPPORT == ENABLED)
   igmpTickCounter = 0;
 8010398:	4b1c      	ldr	r3, [pc, #112]	; (801040c <netInit+0x174>)
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && AUTO_IP_SUPPORT == ENABLED)
   autoIpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   dhcpClientTickCounter = 0;
 801039e:	4b1c      	ldr	r3, [pc, #112]	; (8010410 <netInit+0x178>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && DHCP_SERVER_SUPPORT == ENABLED)
   dhcpServerTickCounter = 0;
#endif
#if (IPV6_SUPPORT == ENABLED && IPV6_FRAG_SUPPORT == ENABLED)
   ipv6FragTickCounter = 0;
 80103a4:	4b1b      	ldr	r3, [pc, #108]	; (8010414 <netInit+0x17c>)
 80103a6:	2200      	movs	r2, #0
 80103a8:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && MLD_SUPPORT == ENABLED)
   mldTickCounter = 0;
 80103aa:	4b1b      	ldr	r3, [pc, #108]	; (8010418 <netInit+0x180>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && NDP_SUPPORT == ENABLED)
   ndpTickCounter = 0;
 80103b0:	4b1a      	ldr	r3, [pc, #104]	; (801041c <netInit+0x184>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 80103b6:	4b1a      	ldr	r3, [pc, #104]	; (8010420 <netInit+0x188>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 80103bc:	4b19      	ldr	r3, [pc, #100]	; (8010424 <netInit+0x18c>)
 80103be:	2200      	movs	r2, #0
 80103c0:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 80103c2:	2302      	movs	r3, #2
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	f240 238a 	movw	r3, #650	; 0x28a
 80103ca:	2200      	movs	r2, #0
 80103cc:	4916      	ldr	r1, [pc, #88]	; (8010428 <netInit+0x190>)
 80103ce:	4817      	ldr	r0, [pc, #92]	; (801042c <netInit+0x194>)
 80103d0:	f7f0 fe37 	bl	8001042 <osCreateTask>
 80103d4:	4603      	mov	r3, r0
 80103d6:	4a06      	ldr	r2, [pc, #24]	; (80103f0 <netInit+0x158>)
 80103d8:	60d3      	str	r3, [r2, #12]
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 80103da:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <netInit+0x158>)
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <netInit+0x14e>
      return ERROR_OUT_OF_RESOURCES;
 80103e2:	2365      	movs	r3, #101	; 0x65
 80103e4:	e000      	b.n	80103e8 <netInit+0x150>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	200046f4 	.word	0x200046f4
 80103f4:	200046f8 	.word	0x200046f8
 80103f8:	20004744 	.word	0x20004744
 80103fc:	08025254 	.word	0x08025254
 8010400:	200056fc 	.word	0x200056fc
 8010404:	20004334 	.word	0x20004334
 8010408:	200046e4 	.word	0x200046e4
 801040c:	200046e0 	.word	0x200046e0
 8010410:	20004338 	.word	0x20004338
 8010414:	200046e8 	.word	0x200046e8
 8010418:	200046ec 	.word	0x200046ec
 801041c:	200046f0 	.word	0x200046f0
 8010420:	20006df8 	.word	0x20006df8
 8010424:	2000433c 	.word	0x2000433c
 8010428:	08010721 	.word	0x08010721
 801042c:	0802525c 	.word	0x0802525c

08010430 <netGetDefaultInterface>:
 * @brief Get default network interface
 * @return Pointer to the default network interface to be used
 **/

NetInterface *netGetDefaultInterface(void)
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0
   //Default network interface
   return &netInterface[0];
 8010434:	4b02      	ldr	r3, [pc, #8]	; (8010440 <netGetDefaultInterface+0x10>)
}
 8010436:	4618      	mov	r0, r3
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr
 8010440:	20004744 	.word	0x20004744

08010444 <netSetMacAddr>:
 * @param[in] macAddr MAC address
 * @return Error code
 **/

error_t netSetMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
#if (ETH_SUPPORT == ENABLED)
   //Check parameters
   if(interface == NULL || macAddr == NULL)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d002      	beq.n	801045a <netSetMacAddr+0x16>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <netSetMacAddr+0x1a>
      return ERROR_INVALID_PARAMETER;
 801045a:	2302      	movs	r3, #2
 801045c:	e013      	b.n	8010486 <netSetMacAddr+0x42>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 801045e:	480c      	ldr	r0, [pc, #48]	; (8010490 <netSetMacAddr+0x4c>)
 8010460:	f7f0 ff00 	bl	8001264 <osAcquireMutex>

   //Set MAC address
   interface->macAddr = *macAddr;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	3384      	adds	r3, #132	; 0x84
 801046a:	6810      	ldr	r0, [r2, #0]
 801046c:	6018      	str	r0, [r3, #0]
 801046e:	8892      	ldrh	r2, [r2, #4]
 8010470:	809a      	strh	r2, [r3, #4]

   //Generate the 64-bit interface identifier
   macAddrToEui64(macAddr, &interface->eui64);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3308      	adds	r3, #8
 8010476:	4619      	mov	r1, r3
 8010478:	6838      	ldr	r0, [r7, #0]
 801047a:	f7f5 fbe1 	bl	8005c40 <macAddrToEui64>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 801047e:	4804      	ldr	r0, [pc, #16]	; (8010490 <netSetMacAddr+0x4c>)
 8010480:	f7f0 feff 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8010484:	2300      	movs	r3, #0
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8010486:	4618      	mov	r0, r3
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	200046f4 	.word	0x200046f4

08010494 <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d002      	beq.n	80104aa <netSetInterfaceName+0x16>
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 80104aa:	2302      	movs	r3, #2
 80104ac:	e00d      	b.n	80104ca <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80104ae:	4809      	ldr	r0, [pc, #36]	; (80104d4 <netSetInterfaceName+0x40>)
 80104b0:	f7f0 fed8 	bl	8001264 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	3310      	adds	r3, #16
 80104b8:	2208      	movs	r2, #8
 80104ba:	6839      	ldr	r1, [r7, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f1 facf 	bl	8001a60 <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80104c2:	4804      	ldr	r0, [pc, #16]	; (80104d4 <netSetInterfaceName+0x40>)
 80104c4:	f7f0 fedd 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	200046f4 	.word	0x200046f4

080104d8 <netSetHostname>:
 * @param[in] name NULL-terminated string that contains the host name
 * @return Error code
 **/

error_t netSetHostname(NetInterface *interface, const char_t *name)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <netSetHostname+0x16>
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d101      	bne.n	80104f2 <netSetHostname+0x1a>
      return ERROR_INVALID_PARAMETER;
 80104ee:	2302      	movs	r3, #2
 80104f0:	e00d      	b.n	801050e <netSetHostname+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80104f2:	4809      	ldr	r0, [pc, #36]	; (8010518 <netSetHostname+0x40>)
 80104f4:	f7f0 feb6 	bl	8001264 <osAcquireMutex>

   //Set host name
   strSafeCopy(interface->hostname, name, NET_MAX_HOSTNAME_LEN);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	3319      	adds	r3, #25
 80104fc:	2218      	movs	r2, #24
 80104fe:	6839      	ldr	r1, [r7, #0]
 8010500:	4618      	mov	r0, r3
 8010502:	f7f1 faad 	bl	8001a60 <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8010506:	4804      	ldr	r0, [pc, #16]	; (8010518 <netSetHostname+0x40>)
 8010508:	f7f0 febb 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	200046f4 	.word	0x200046f4

0801051c <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d002      	beq.n	8010532 <netSetDriver+0x16>
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d101      	bne.n	8010536 <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8010532:	2302      	movs	r3, #2
 8010534:	e009      	b.n	801054a <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8010536:	4807      	ldr	r0, [pc, #28]	; (8010554 <netSetDriver+0x38>)
 8010538:	f7f0 fe94 	bl	8001264 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	635a      	str	r2, [r3, #52]	; 0x34
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8010542:	4804      	ldr	r0, [pc, #16]	; (8010554 <netSetDriver+0x38>)
 8010544:	f7f0 fe9d 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	200046f4 	.word	0x200046f4

08010558 <netSetPhyDriver>:
 * @param[in] driver Ethernet PHY driver (can be NULL for MAC + PHY controller)
 * @return Error code
 **/

error_t netSetPhyDriver(NetInterface *interface, const PhyDriver *driver)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
#if (ETH_SUPPORT == ENABLED)
   //Check parameters
   if(interface == NULL || driver == NULL)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <netSetPhyDriver+0x16>
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d101      	bne.n	8010572 <netSetPhyDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 801056e:	2302      	movs	r3, #2
 8010570:	e009      	b.n	8010586 <netSetPhyDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8010572:	4807      	ldr	r0, [pc, #28]	; (8010590 <netSetPhyDriver+0x38>)
 8010574:	f7f0 fe76 	bl	8001264 <osAcquireMutex>
   //Set Ethernet PHY driver
   interface->phyDriver = driver;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	671a      	str	r2, [r3, #112]	; 0x70
   //Release exclusive access
   osReleaseMutex(&netMutex);
 801057e:	4804      	ldr	r0, [pc, #16]	; (8010590 <netSetPhyDriver+0x38>)
 8010580:	f7f0 fe7f 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8010584:	2300      	movs	r3, #0
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8010586:	4618      	mov	r0, r3
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	200046f4 	.word	0x200046f4

08010594 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d101      	bne.n	80105a6 <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 80105a2:	2302      	movs	r3, #2
 80105a4:	e0b2      	b.n	801070c <netConfigInterface+0x178>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80105a6:	485b      	ldr	r0, [pc, #364]	; (8010714 <netConfigInterface+0x180>)
 80105a8:	f7f0 fe5c 	bl	8001264 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d004      	beq.n	80105be <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	3354      	adds	r3, #84	; 0x54
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7f0 fd7f 	bl	80010c6 <osCreateEvent>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d102      	bne.n	80105d4 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 80105ce:	2365      	movs	r3, #101	; 0x65
 80105d0:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 80105d2:	e07c      	b.n	80106ce <netConfigInterface+0x13a>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d009      	beq.n	80105f0 <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	4798      	blx	r3
 80105e6:	4603      	mov	r3, r0
 80105e8:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 80105ea:	89fb      	ldrh	r3, [r7, #14]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d159      	bne.n	80106a4 <netConfigInterface+0x110>
#endif
      }

#if (ETH_SUPPORT == ENABLED)
      //Ethernet related initialization
      error = ethInit(interface);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7f5 f87a 	bl	80056ea <ethInit>
 80105f6:	4603      	mov	r3, r0
 80105f8:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 80105fa:	89fb      	ldrh	r3, [r7, #14]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d153      	bne.n	80106a8 <netConfigInterface+0x114>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7f8 fa81 	bl	8008b08 <ipv4Init>
 8010606:	4603      	mov	r3, r0
 8010608:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801060a:	89fb      	ldrh	r3, [r7, #14]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d14d      	bne.n	80106ac <netConfigInterface+0x118>
         break;

#if (ETH_SUPPORT == ENABLED)
      //ARP cache initialization
      error = arpInit(interface);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7f2 fa5d 	bl	8002ad0 <arpInit>
 8010616:	4603      	mov	r3, r0
 8010618:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801061a:	89fb      	ldrh	r3, [r7, #14]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d147      	bne.n	80106b0 <netConfigInterface+0x11c>
         break;
#endif

#if (IGMP_SUPPORT == ENABLED)
      //IGMP related initialization
      error = igmpInit(interface);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7f7 fe0b 	bl	800823c <igmpInit>
 8010626:	4603      	mov	r3, r0
 8010628:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801062a:	89fb      	ldrh	r3, [r7, #14]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d141      	bne.n	80106b4 <netConfigInterface+0x120>
         break;

      //Join the all-systems group
      error = ipv4JoinMulticastGroup(interface, IGMP_ALL_SYSTEMS_ADDR);
 8010630:	4939      	ldr	r1, [pc, #228]	; (8010718 <netConfigInterface+0x184>)
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7f8 fe00 	bl	8009238 <ipv4JoinMulticastGroup>
 8010638:	4603      	mov	r3, r0
 801063a:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801063c:	89fb      	ldrh	r3, [r7, #14]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d13a      	bne.n	80106b8 <netConfigInterface+0x124>
         break;
#endif

#if (NBNS_CLIENT_SUPPORT == ENABLED || NBNS_RESPONDER_SUPPORT == ENABLED)
      //NetBIOS Name Service related initialization
      error = nbnsInit(interface);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7fd fa16 	bl	800da74 <nbnsInit>
 8010648:	4603      	mov	r3, r0
 801064a:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801064c:	89fb      	ldrh	r3, [r7, #14]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d134      	bne.n	80106bc <netConfigInterface+0x128>
#endif
#endif

#if (IPV6_SUPPORT == ENABLED)
      //IPv6 initialization
      error = ipv6Init(interface);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7f9 fdfe 	bl	800a254 <ipv6Init>
 8010658:	4603      	mov	r3, r0
 801065a:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801065c:	89fb      	ldrh	r3, [r7, #14]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d12e      	bne.n	80106c0 <netConfigInterface+0x12c>
         break;

#if (NDP_SUPPORT == ENABLED)
      //NDP related initialization
      error = ndpInit(interface);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7fd fd94 	bl	800e190 <ndpInit>
 8010668:	4603      	mov	r3, r0
 801066a:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801066c:	89fb      	ldrh	r3, [r7, #14]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d128      	bne.n	80106c4 <netConfigInterface+0x130>
         break;
#endif

#if (MLD_SUPPORT == ENABLED)
      //MLD related initialization
      error = mldInit(interface);
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7fc fd2a 	bl	800d0cc <mldInit>
 8010678:	4603      	mov	r3, r0
 801067a:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801067c:	89fb      	ldrh	r3, [r7, #14]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d122      	bne.n	80106c8 <netConfigInterface+0x134>
         break;
#endif

      //Join the All-Nodes multicast address
      error = ipv6JoinMulticastGroup(interface, &IPV6_LINK_LOCAL_ALL_NODES_ADDR);
 8010682:	4926      	ldr	r1, [pc, #152]	; (801071c <netConfigInterface+0x188>)
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7fa fc59 	bl	800af3c <ipv6JoinMulticastGroup>
 801068a:	4603      	mov	r3, r0
 801068c:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801068e:	89fb      	ldrh	r3, [r7, #14]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d11b      	bne.n	80106cc <netConfigInterface+0x138>
         break;
#endif

#if (LLMNR_RESPONDER_SUPPORT == ENABLED)
      //LLMNR responder initialization
      error = llmnrResponderInit(interface);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7fc fa51 	bl	800cb3c <llmnrResponderInit>
 801069a:	4603      	mov	r3, r0
 801069c:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 801069e:	89fb      	ldrh	r3, [r7, #14]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	e014      	b.n	80106ce <netConfigInterface+0x13a>
            break;
 80106a4:	bf00      	nop
 80106a6:	e012      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106a8:	bf00      	nop
 80106aa:	e010      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106ac:	bf00      	nop
 80106ae:	e00e      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106b0:	bf00      	nop
 80106b2:	e00c      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106b4:	bf00      	nop
 80106b6:	e00a      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106b8:	bf00      	nop
 80106ba:	e008      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106bc:	bf00      	nop
 80106be:	e006      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106c0:	bf00      	nop
 80106c2:	e004      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106c4:	bf00      	nop
 80106c6:	e002      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106c8:	bf00      	nop
 80106ca:	e000      	b.n	80106ce <netConfigInterface+0x13a>
         break;
 80106cc:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 80106ce:	89fb      	ldrh	r3, [r7, #14]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d112      	bne.n	80106fa <netConfigInterface+0x166>
   {
      //Initialize pseudo-random generator
      netInitRand();
 80106d4:	f000 ff9c 	bl	8011610 <netInitRand>

      //The network interface is now fully configured
      interface->configured = TRUE;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2201      	movs	r2, #1
 80106dc:	66da      	str	r2, [r3, #108]	; 0x6c

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 80106de:	4b0d      	ldr	r3, [pc, #52]	; (8010714 <netConfigInterface+0x180>)
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00e      	beq.n	8010704 <netConfigInterface+0x170>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00a      	beq.n	8010704 <netConfigInterface+0x170>
            interface->nicDriver->enableIrq(interface);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	4798      	blx	r3
 80106f8:	e004      	b.n	8010704 <netConfigInterface+0x170>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	3354      	adds	r3, #84	; 0x54
 80106fe:	4618      	mov	r0, r3
 8010700:	f7f0 fcf8 	bl	80010f4 <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8010704:	4803      	ldr	r0, [pc, #12]	; (8010714 <netConfigInterface+0x180>)
 8010706:	f7f0 fdbc 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 801070a:	89fb      	ldrh	r3, [r7, #14]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3710      	adds	r7, #16
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	200046f4 	.word	0x200046f4
 8010718:	010000e0 	.word	0x010000e0
 801071c:	08024c4c 	.word	0x08024c4c

08010720 <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b086      	sub	sp, #24
 8010724:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8010726:	4858      	ldr	r0, [pc, #352]	; (8010888 <netTask+0x168>)
 8010728:	f7f0 fd9c 	bl	8001264 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 801072c:	4b56      	ldr	r3, [pc, #344]	; (8010888 <netTask+0x168>)
 801072e:	2201      	movs	r2, #1
 8010730:	609a      	str	r2, [r3, #8]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8010732:	2300      	movs	r3, #0
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	e018      	b.n	801076a <netTask+0x4a>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 801073e:	fb02 f303 	mul.w	r3, r2, r3
 8010742:	3350      	adds	r3, #80	; 0x50
 8010744:	4a50      	ldr	r2, [pc, #320]	; (8010888 <netTask+0x168>)
 8010746:	4413      	add	r3, r2
 8010748:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801074e:	2b00      	cmp	r3, #0
 8010750:	d008      	beq.n	8010764 <netTask+0x44>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010756:	2b00      	cmp	r3, #0
 8010758:	d004      	beq.n	8010764 <netTask+0x44>
         {
            interface->nicDriver->enableIrq(interface);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	3301      	adds	r3, #1
 8010768:	617b      	str	r3, [r7, #20]
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d0e3      	beq.n	8010738 <netTask+0x18>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8010770:	4845      	ldr	r0, [pc, #276]	; (8010888 <netTask+0x168>)
 8010772:	f7f0 fd86 	bl	8001282 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 8010776:	f7f0 fd93 	bl	80012a0 <osGetSystemTime>
 801077a:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 801077c:	4b42      	ldr	r3, [pc, #264]	; (8010888 <netTask+0x168>)
 801077e:	695b      	ldr	r3, [r3, #20]
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	da05      	bge.n	8010794 <netTask+0x74>
         timeout = netTimestamp - time;
 8010788:	4b3f      	ldr	r3, [pc, #252]	; (8010888 <netTask+0x168>)
 801078a:	695a      	ldr	r2, [r3, #20]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	613b      	str	r3, [r7, #16]
 8010792:	e001      	b.n	8010798 <netTask+0x78>
      else
         timeout = 0;
 8010794:	2300      	movs	r3, #0
 8010796:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 8010798:	6939      	ldr	r1, [r7, #16]
 801079a:	483c      	ldr	r0, [pc, #240]	; (801088c <netTask+0x16c>)
 801079c:	f7f0 fcd8 	bl	8001150 <osWaitForEvent>
 80107a0:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d059      	beq.n	801085c <netTask+0x13c>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 80107a8:	4837      	ldr	r0, [pc, #220]	; (8010888 <netTask+0x168>)
 80107aa:	f7f0 fd5b 	bl	8001264 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80107ae:	2300      	movs	r3, #0
 80107b0:	617b      	str	r3, [r7, #20]
 80107b2:	e04d      	b.n	8010850 <netTask+0x130>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80107ba:	fb02 f303 	mul.w	r3, r2, r3
 80107be:	3350      	adds	r3, #80	; 0x50
 80107c0:	4a31      	ldr	r2, [pc, #196]	; (8010888 <netTask+0x168>)
 80107c2:	4413      	add	r3, r2
 80107c4:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d015      	beq.n	80107fa <netTask+0xda>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	659a      	str	r2, [r3, #88]	; 0x58

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00e      	beq.n	80107fa <netTask+0xda>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e0:	695b      	ldr	r3, [r3, #20]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ea:	699b      	ldr	r3, [r3, #24]
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	4798      	blx	r3
               }
            }

#if (ETH_SUPPORT == ENABLED)
            //Check whether a PHY event is pending
            if(interface->phyEvent)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d023      	beq.n	801084a <netTask+0x12a>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	679a      	str	r2, [r3, #120]	; 0x78

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080c:	2b00      	cmp	r3, #0
 801080e:	d01c      	beq.n	801084a <netTask+0x12a>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010814:	695b      	ldr	r3, [r3, #20]
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	4798      	blx	r3

                  //Valid Ethernet PHY or switch driver?
                  if(interface->phyDriver != NULL)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801081e:	2b00      	cmp	r3, #0
 8010820:	d005      	beq.n	801082e <netTask+0x10e>
                  {
                     //Handle events
                     interface->phyDriver->eventHandler(interface);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	4798      	blx	r3
 801082c:	e008      	b.n	8010840 <netTask+0x120>
                  }
                  else if(interface->switchDriver != NULL)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d004      	beq.n	8010840 <netTask+0x120>
                  {
                     //Handle events
                     interface->switchDriver->eventHandler(interface);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801083a:	691b      	ldr	r3, [r3, #16]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	4798      	blx	r3
                  {
                     //The interface is not properly configured
                  }

                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	3301      	adds	r3, #1
 801084e:	617b      	str	r3, [r7, #20]
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d0ae      	beq.n	80107b4 <netTask+0x94>
            }
#endif
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8010856:	480c      	ldr	r0, [pc, #48]	; (8010888 <netTask+0x168>)
 8010858:	f7f0 fd13 	bl	8001282 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 801085c:	f7f0 fd20 	bl	80012a0 <osGetSystemTime>
 8010860:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 8010862:	4b09      	ldr	r3, [pc, #36]	; (8010888 <netTask+0x168>)
 8010864:	695b      	ldr	r3, [r3, #20]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	db83      	blt.n	8010776 <netTask+0x56>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 801086e:	4806      	ldr	r0, [pc, #24]	; (8010888 <netTask+0x168>)
 8010870:	f7f0 fcf8 	bl	8001264 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 8010874:	f000 fcc6 	bl	8011204 <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 8010878:	4803      	ldr	r0, [pc, #12]	; (8010888 <netTask+0x168>)
 801087a:	f7f0 fd02 	bl	8001282 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3364      	adds	r3, #100	; 0x64
 8010882:	4a01      	ldr	r2, [pc, #4]	; (8010888 <netTask+0x168>)
 8010884:	6153      	str	r3, [r2, #20]
      time = osGetSystemTime();
 8010886:	e776      	b.n	8010776 <netTask+0x56>
 8010888:	200046f4 	.word	0x200046f4
 801088c:	200046f8 	.word	0x200046f8

08010890 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 8010890:	b480      	push	{r7}
 8010892:	af00      	add	r7, sp, #0
   memPoolCurrentUsage = 0;
   memPoolMaxUsage = 0;
#endif

   //Successful initialization
   return NO_ERROR;
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	60fb      	str	r3, [r7, #12]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Allocate a memory block
   p = osAllocMem(size);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7f0 fd02 	bl	80012b6 <osAllocMem>
 80108b2:	60f8      	str	r0, [r7, #12]
#endif

   //Failed to allocate memory?
   if(!p)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10b      	bne.n	80108d2 <memPoolAlloc+0x32>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 80108ba:	f7f0 fbee 	bl	800109a <osSuspendAllTasks>
 80108be:	4b07      	ldr	r3, [pc, #28]	; (80108dc <memPoolAlloc+0x3c>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	221b      	movs	r2, #27
 80108c6:	2101      	movs	r1, #1
 80108c8:	4805      	ldr	r0, [pc, #20]	; (80108e0 <memPoolAlloc+0x40>)
 80108ca:	f00c fd43 	bl	801d354 <fwrite>
 80108ce:	f7f0 fbef 	bl	80010b0 <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 80108d2:	68fb      	ldr	r3, [r7, #12]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	20000044 	.word	0x20000044
 80108e0:	0802526c 	.word	0x0802526c

080108e4 <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Release memory block
   osFreeMem(p);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7f0 fcef 	bl	80012d0 <osFreeMem>
#endif
}
 80108f2:	bf00      	nop
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b084      	sub	sp, #16
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8010902:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010906:	f7ff ffcb 	bl	80108a0 <memPoolAlloc>
 801090a:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <netBufferAlloc+0x1c>
      return NULL;
 8010912:	2300      	movs	r3, #0
 8010914:	e020      	b.n	8010958 <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2201      	movs	r2, #1
 801091a:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2209      	movs	r2, #9
 8010920:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8010932:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2200      	movs	r2, #0
 8010938:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 801093a:	6879      	ldr	r1, [r7, #4]
 801093c:	68f8      	ldr	r0, [r7, #12]
 801093e:	f000 f840 	bl	80109c2 <netBufferSetLength>
 8010942:	4603      	mov	r3, r0
 8010944:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8010946:	897b      	ldrh	r3, [r7, #10]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d004      	beq.n	8010956 <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	f000 f807 	bl	8010960 <netBufferFree>
      //Report an failure
      return NULL;
 8010952:	2300      	movs	r3, #0
 8010954:	e000      	b.n	8010958 <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 8010956:	68fb      	ldr	r3, [r7, #12]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/

void netBufferFree(NetBuffer *buffer)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 8010968:	2100      	movs	r1, #0
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f829 	bl	80109c2 <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff ffb7 	bl	80108e4 <memPoolFree>
}
 8010976:	bf00      	nop
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 801097e:	b480      	push	{r7}
 8010980:	b085      	sub	sp, #20
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 801098a:	2300      	movs	r3, #0
 801098c:	60fb      	str	r3, [r7, #12]
 801098e:	e00c      	b.n	80109aa <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3301      	adds	r3, #1
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	4413      	add	r3, r2
 801099a:	889b      	ldrh	r3, [r3, #4]
 801099c:	461a      	mov	r2, r3
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	4413      	add	r3, r2
 80109a2:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3301      	adds	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d3ed      	bcc.n	8010990 <netBufferGetLength+0x12>

   //Return total length
   return length;
 80109b4:	68bb      	ldr	r3, [r7, #8]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b086      	sub	sp, #24
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 80109d2:	2300      	movs	r3, #0
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	e02c      	b.n	8010a32 <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	3301      	adds	r3, #1
 80109dc:	00db      	lsls	r3, r3, #3
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	4413      	add	r3, r2
 80109e2:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	889b      	ldrh	r3, [r3, #4]
 80109e8:	461a      	mov	r2, r3
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d804      	bhi.n	80109fa <netBufferSetLength+0x38>
      {
         chunk->length = length;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	809a      	strh	r2, [r3, #4]
 80109f8:	e012      	b.n	8010a20 <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	88db      	ldrh	r3, [r3, #6]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d00e      	beq.n	8010a20 <netBufferSetLength+0x5e>
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	3b01      	subs	r3, #1
 8010a06:	697a      	ldr	r2, [r7, #20]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d109      	bne.n	8010a20 <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	88db      	ldrh	r3, [r3, #6]
 8010a10:	461a      	mov	r2, r3
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	4293      	cmp	r3, r2
 8010a16:	bf28      	it	cs
 8010a18:	4613      	movcs	r3, r2
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	889b      	ldrh	r3, [r3, #4]
 8010a24:	461a      	mov	r2, r3
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	1a9b      	subs	r3, r3, r2
 8010a2a:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	617b      	str	r3, [r7, #20]
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d202      	bcs.n	8010a40 <netBufferSetLength+0x7e>
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1cb      	bne.n	80109d8 <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d151      	bne.n	8010aea <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 8010a4c:	e01a      	b.n	8010a84 <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	3301      	adds	r3, #1
 8010a52:	00db      	lsls	r3, r3, #3
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	4413      	add	r3, r2
 8010a58:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	88db      	ldrh	r3, [r3, #6]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d004      	beq.n	8010a6c <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7ff ff3c 	bl	80108e4 <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2200      	movs	r2, #0
 8010a76:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	3301      	adds	r3, #1
 8010a82:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 8010a84:	697a      	ldr	r2, [r7, #20]
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d3e0      	bcc.n	8010a4e <netBufferSetLength+0x8c>
 8010a8c:	e035      	b.n	8010afa <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	3301      	adds	r3, #1
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	4413      	add	r3, r2
 8010a98:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8010a9a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010a9e:	f7ff feff 	bl	80108a0 <memPoolAlloc>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d101      	bne.n	8010ab4 <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 8010ab0:	2364      	movs	r3, #100	; 0x64
 8010ab2:	e028      	b.n	8010b06 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010aba:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010ac2:	bf28      	it	cs
 8010ac4:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	889b      	ldrh	r3, [r3, #4]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	1c5a      	adds	r2, r3, #1
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	601a      	str	r2, [r3, #0]
         i++;
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d202      	bcs.n	8010afa <netBufferSetLength+0x138>
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1c9      	bne.n	8010a8e <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d001      	beq.n	8010b04 <netBufferSetLength+0x142>
 8010b00:	2365      	movs	r3, #101	; 0x65
 8010b02:	e000      	b.n	8010b06 <netBufferSetLength+0x144>
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 8010b0e:	b480      	push	{r7}
 8010b10:	b085      	sub	sp, #20
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8010b18:	2300      	movs	r3, #0
 8010b1a:	60fb      	str	r3, [r7, #12]
 8010b1c:	e01e      	b.n	8010b5c <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	3301      	adds	r3, #1
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	4413      	add	r3, r2
 8010b28:	889b      	ldrh	r3, [r3, #4]
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d207      	bcs.n	8010b42 <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	3201      	adds	r2, #1
 8010b38:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	4413      	add	r3, r2
 8010b40:	e012      	b.n	8010b68 <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	3301      	adds	r3, #1
 8010b48:	00db      	lsls	r3, r3, #3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	889b      	ldrh	r3, [r3, #4]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	1a9b      	subs	r3, r3, r2
 8010b54:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	60fb      	str	r3, [r7, #12]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d3db      	bcc.n	8010b1e <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b087      	sub	sp, #28
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8010b82:	2300      	movs	r3, #0
 8010b84:	613b      	str	r3, [r7, #16]
 8010b86:	e016      	b.n	8010bb6 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	4413      	add	r3, r2
 8010b92:	889b      	ldrh	r3, [r3, #4]
 8010b94:	461a      	mov	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d312      	bcc.n	8010bc2 <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	4413      	add	r3, r2
 8010ba6:	889b      	ldrh	r3, [r3, #4]
 8010ba8:	461a      	mov	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	613b      	str	r3, [r7, #16]
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	693a      	ldr	r2, [r7, #16]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d3e3      	bcc.n	8010b88 <netBufferConcat+0x14>
 8010bc0:	e000      	b.n	8010bc4 <netBufferConcat+0x50>
         break;
 8010bc2:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	693a      	ldr	r2, [r7, #16]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d301      	bcc.n	8010bd2 <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	e065      	b.n	8010c9e <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8010bd8:	e04d      	b.n	8010c76 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	3201      	adds	r2, #1
 8010be0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	18d1      	adds	r1, r2, r3
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	3201      	adds	r2, #1
 8010bee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	00db      	lsls	r3, r3, #3
 8010bfa:	4413      	add	r3, r2
 8010bfc:	889a      	ldrh	r2, [r3, #4]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	b299      	uxth	r1, r3
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	4413      	add	r3, r2
 8010c10:	460a      	mov	r2, r1
 8010c12:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	00db      	lsls	r3, r3, #3
 8010c1c:	4413      	add	r3, r2
 8010c1e:	2200      	movs	r2, #0
 8010c20:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 8010c22:	68fa      	ldr	r2, [r7, #12]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	3301      	adds	r3, #1
 8010c28:	00db      	lsls	r3, r3, #3
 8010c2a:	4413      	add	r3, r2
 8010c2c:	889b      	ldrh	r3, [r3, #4]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d208      	bcs.n	8010c48 <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	b299      	uxth	r1, r3
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	00db      	lsls	r3, r3, #3
 8010c42:	4413      	add	r3, r2
 8010c44:	460a      	mov	r2, r1
 8010c46:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	00db      	lsls	r3, r3, #3
 8010c50:	4413      	add	r3, r2
 8010c52:	889b      	ldrh	r3, [r3, #4]
 8010c54:	461a      	mov	r2, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	607b      	str	r3, [r7, #4]
      i++;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	617b      	str	r3, [r7, #20]
      j++;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	3301      	adds	r3, #1
 8010c74:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d009      	beq.n	8010c90 <netBufferConcat+0x11c>
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d204      	bcs.n	8010c90 <netBufferConcat+0x11c>
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d3a4      	bcc.n	8010bda <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	b29b      	uxth	r3, r3
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b08a      	sub	sp, #40	; 0x28
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
 8010cb6:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	627b      	str	r3, [r7, #36]	; 0x24
 8010cbc:	e016      	b.n	8010cec <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	00db      	lsls	r3, r3, #3
 8010cc6:	4413      	add	r3, r2
 8010cc8:	889b      	ldrh	r3, [r3, #4]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d312      	bcc.n	8010cf8 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	4413      	add	r3, r2
 8010cdc:	889b      	ldrh	r3, [r3, #4]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	1a9b      	subs	r3, r3, r2
 8010ce4:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce8:	3301      	adds	r3, #1
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d3e3      	bcc.n	8010cbe <netBufferCopy+0x14>
 8010cf6:	e000      	b.n	8010cfa <netBufferCopy+0x50>
         break;
 8010cf8:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d301      	bcc.n	8010d08 <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 8010d04:	2302      	movs	r3, #2
 8010d06:	e096      	b.n	8010e36 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8010d08:	2300      	movs	r3, #0
 8010d0a:	623b      	str	r3, [r7, #32]
 8010d0c:	e016      	b.n	8010d3c <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	3301      	adds	r3, #1
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	4413      	add	r3, r2
 8010d18:	889b      	ldrh	r3, [r3, #4]
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d312      	bcc.n	8010d48 <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	6a3b      	ldr	r3, [r7, #32]
 8010d26:	3301      	adds	r3, #1
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	4413      	add	r3, r2
 8010d2c:	889b      	ldrh	r3, [r3, #4]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	1a9b      	subs	r3, r3, r2
 8010d34:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 8010d36:	6a3b      	ldr	r3, [r7, #32]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	623b      	str	r3, [r7, #32]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	6a3a      	ldr	r2, [r7, #32]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d3e3      	bcc.n	8010d0e <netBufferCopy+0x64>
 8010d46:	e000      	b.n	8010d4a <netBufferCopy+0xa0>
         break;
 8010d48:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	6a3a      	ldr	r2, [r7, #32]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d35c      	bcc.n	8010e0e <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 8010d54:	2302      	movs	r3, #2
 8010d56:	e06e      	b.n	8010e36 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d5c:	3201      	adds	r2, #1
 8010d5e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	4413      	add	r3, r2
 8010d66:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a3a      	ldr	r2, [r7, #32]
 8010d6c:	3201      	adds	r2, #1
 8010d6e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	4413      	add	r3, r2
 8010d76:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	00db      	lsls	r3, r3, #3
 8010d80:	4413      	add	r3, r2
 8010d82:	889b      	ldrh	r3, [r3, #4]
 8010d84:	461a      	mov	r2, r3
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	bf28      	it	cs
 8010d90:	4613      	movcs	r3, r2
 8010d92:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	4413      	add	r3, r2
 8010d9e:	889b      	ldrh	r3, [r3, #4]
 8010da0:	461a      	mov	r2, r3
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	1ad3      	subs	r3, r2, r3
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	4293      	cmp	r3, r2
 8010daa:	bf28      	it	cs
 8010dac:	4613      	movcs	r3, r2
 8010dae:	617b      	str	r3, [r7, #20]

      //Copy data
      osMemcpy(p, q, n);
 8010db0:	697a      	ldr	r2, [r7, #20]
 8010db2:	69b9      	ldr	r1, [r7, #24]
 8010db4:	69f8      	ldr	r0, [r7, #28]
 8010db6:	f00c fd63 	bl	801d880 <memcpy>

      destOffset += n;
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 8010dc2:	683a      	ldr	r2, [r7, #0]
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	603b      	str	r3, [r7, #0]
      length -= n;
 8010dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	00db      	lsls	r3, r3, #3
 8010dda:	4413      	add	r3, r2
 8010ddc:	889b      	ldrh	r3, [r3, #4]
 8010dde:	461a      	mov	r2, r3
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d304      	bcc.n	8010df0 <netBufferCopy+0x146>
      {
         destOffset = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	60bb      	str	r3, [r7, #8]
         i++;
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	3301      	adds	r3, #1
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	6a3b      	ldr	r3, [r7, #32]
 8010df4:	3301      	adds	r3, #1
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	4413      	add	r3, r2
 8010dfa:	889b      	ldrh	r3, [r3, #4]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d304      	bcc.n	8010e0e <netBufferCopy+0x164>
      {
         srcOffset = 0;
 8010e04:	2300      	movs	r3, #0
 8010e06:	603b      	str	r3, [r7, #0]
         j++;
 8010e08:	6a3b      	ldr	r3, [r7, #32]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d009      	beq.n	8010e28 <netBufferCopy+0x17e>
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d204      	bcs.n	8010e28 <netBufferCopy+0x17e>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	6a3a      	ldr	r2, [r7, #32]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d397      	bcc.n	8010d58 <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8010e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	bf14      	ite	ne
 8010e2e:	2301      	movne	r3, #1
 8010e30:	2300      	moveq	r3, #0
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	b29b      	uxth	r3, r3
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3728      	adds	r7, #40	; 0x28
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 8010e3e:	b480      	push	{r7}
 8010e40:	b087      	sub	sp, #28
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	60f8      	str	r0, [r7, #12]
 8010e46:	60b9      	str	r1, [r7, #8]
 8010e48:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d301      	bcc.n	8010e5a <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 8010e56:	2301      	movs	r3, #1
 8010e58:	e01e      	b.n	8010e98 <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	3201      	adds	r2, #1
 8010e66:	68b9      	ldr	r1, [r7, #8]
 8010e68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	b299      	uxth	r1, r3
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	3301      	adds	r3, #1
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	4413      	add	r3, r2
 8010e7a:	460a      	mov	r2, r1
 8010e7c:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 8010e7e:	68fa      	ldr	r2, [r7, #12]
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	3301      	adds	r3, #1
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	4413      	add	r3, r2
 8010e88:	2200      	movs	r2, #0
 8010e8a:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	371c      	adds	r7, #28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b088      	sub	sp, #32
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	607a      	str	r2, [r7, #4]
 8010eb0:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	61fb      	str	r3, [r7, #28]
 8010eba:	e03e      	b.n	8010f3a <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 8010ebc:	68fa      	ldr	r2, [r7, #12]
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	00db      	lsls	r3, r3, #3
 8010ec4:	4413      	add	r3, r2
 8010ec6:	889b      	ldrh	r3, [r3, #4]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d227      	bcs.n	8010f20 <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	69fa      	ldr	r2, [r7, #28]
 8010ed4:	3201      	adds	r2, #1
 8010ed6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	4413      	add	r3, r2
 8010ede:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	4413      	add	r3, r2
 8010eea:	889b      	ldrh	r3, [r3, #4]
 8010eec:	461a      	mov	r2, r3
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	1ad2      	subs	r2, r2, r3
 8010ef2:	6839      	ldr	r1, [r7, #0]
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	1acb      	subs	r3, r1, r3
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	bf28      	it	cs
 8010efc:	4613      	movcs	r3, r2
 8010efe:	613b      	str	r3, [r7, #16]

         //Copy data
         osMemcpy(p, src, n);
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	6879      	ldr	r1, [r7, #4]
 8010f04:	6978      	ldr	r0, [r7, #20]
 8010f06:	f00c fcbb 	bl	801d880 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	4413      	add	r3, r2
 8010f10:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 8010f12:	69ba      	ldr	r2, [r7, #24]
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	4413      	add	r3, r2
 8010f18:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	60bb      	str	r3, [r7, #8]
 8010f1e:	e009      	b.n	8010f34 <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 8010f20:	68fa      	ldr	r2, [r7, #12]
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	3301      	adds	r3, #1
 8010f26:	00db      	lsls	r3, r3, #3
 8010f28:	4413      	add	r3, r2
 8010f2a:	889b      	ldrh	r3, [r3, #4]
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	1a9b      	subs	r3, r3, r2
 8010f32:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	3301      	adds	r3, #1
 8010f38:	61fb      	str	r3, [r7, #28]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d203      	bcs.n	8010f4c <netBufferWrite+0xa8>
 8010f44:	69ba      	ldr	r2, [r7, #24]
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d3b7      	bcc.n	8010ebc <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 8010f4c:	69bb      	ldr	r3, [r7, #24]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3720      	adds	r7, #32
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <netBufferRead>:
 * @return Actual number of bytes copied
 **/

size_t netBufferRead(void *dest, const NetBuffer *src,
   size_t srcOffset, size_t length)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b088      	sub	sp, #32
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	60f8      	str	r0, [r7, #12]
 8010f5e:	60b9      	str	r1, [r7, #8]
 8010f60:	607a      	str	r2, [r7, #4]
 8010f62:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes copied
   totalLength = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 8010f68:	2300      	movs	r3, #0
 8010f6a:	61fb      	str	r3, [r7, #28]
 8010f6c:	e03e      	b.n	8010fec <netBufferRead+0x96>
   {
      //Is there any data to copy from the current chunk?
      if(srcOffset < src->chunk[i].length)
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	3301      	adds	r3, #1
 8010f74:	00db      	lsls	r3, r3, #3
 8010f76:	4413      	add	r3, r2
 8010f78:	889b      	ldrh	r3, [r3, #4]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d227      	bcs.n	8010fd2 <netBufferRead+0x7c>
      {
         //Point to the first byte to be read
         p = (uint8_t *) src->chunk[i].address + srcOffset;
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	69fa      	ldr	r2, [r7, #28]
 8010f86:	3201      	adds	r2, #1
 8010f88:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4413      	add	r3, r2
 8010f90:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, src->chunk[i].length - srcOffset);
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	3301      	adds	r3, #1
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	4413      	add	r3, r2
 8010f9c:	889b      	ldrh	r3, [r3, #4]
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	1ad2      	subs	r2, r2, r3
 8010fa4:	6839      	ldr	r1, [r7, #0]
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	1acb      	subs	r3, r1, r3
 8010faa:	4293      	cmp	r3, r2
 8010fac:	bf28      	it	cs
 8010fae:	4613      	movcs	r3, r2
 8010fb0:	613b      	str	r3, [r7, #16]

         //Copy data
         osMemcpy(dest, p, n);
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	6979      	ldr	r1, [r7, #20]
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	f00c fc62 	bl	801d880 <memcpy>

         //Advance write pointer
         dest = (uint8_t *) dest + n;
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	60fb      	str	r3, [r7, #12]
         //Total number of bytes copied
         totalLength += n;
 8010fc4:	69ba      	ldr	r2, [r7, #24]
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	4413      	add	r3, r2
 8010fca:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         srcOffset = 0;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	607b      	str	r3, [r7, #4]
 8010fd0:	e009      	b.n	8010fe6 <netBufferRead+0x90>
      }
      else
      {
         //Skip the current chunk
         srcOffset -= src->chunk[i].length;
 8010fd2:	68ba      	ldr	r2, [r7, #8]
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	4413      	add	r3, r2
 8010fdc:	889b      	ldrh	r3, [r3, #4]
 8010fde:	461a      	mov	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	1a9b      	subs	r3, r3, r2
 8010fe4:	607b      	str	r3, [r7, #4]
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	61fb      	str	r3, [r7, #28]
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	69fa      	ldr	r2, [r7, #28]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d203      	bcs.n	8010ffe <netBufferRead+0xa8>
 8010ff6:	69ba      	ldr	r2, [r7, #24]
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d3b7      	bcc.n	8010f6e <netBufferRead+0x18>
      }
   }

   //Return the actual number of bytes copied
   return totalLength;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3720      	adds	r7, #32
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011014:	2b00      	cmp	r3, #0
 8011016:	d077      	beq.n	8011108 <netProcessLinkChange+0x100>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 8011018:	f7f0 f83f 	bl	800109a <osSuspendAllTasks>
 801101c:	4b6b      	ldr	r3, [pc, #428]	; (80111cc <netProcessLinkChange+0x1c4>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68d8      	ldr	r0, [r3, #12]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	3310      	adds	r3, #16
 8011026:	461a      	mov	r2, r3
 8011028:	4969      	ldr	r1, [pc, #420]	; (80111d0 <netProcessLinkChange+0x1c8>)
 801102a:	f00b ffab 	bl	801cf84 <fprintf>
 801102e:	f7f0 f83f 	bl	80010b0 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011036:	4a67      	ldr	r2, [pc, #412]	; (80111d4 <netProcessLinkChange+0x1cc>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d10c      	bne.n	8011056 <netProcessLinkChange+0x4e>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 801103c:	f7f0 f82d 	bl	800109a <osSuspendAllTasks>
 8011040:	4b62      	ldr	r3, [pc, #392]	; (80111cc <netProcessLinkChange+0x1c4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	221a      	movs	r2, #26
 8011048:	2101      	movs	r1, #1
 801104a:	4863      	ldr	r0, [pc, #396]	; (80111d8 <netProcessLinkChange+0x1d0>)
 801104c:	f00c f982 	bl	801d354 <fwrite>
 8011050:	f7f0 f82e 	bl	80010b0 <osResumeAllTasks>
 8011054:	e034      	b.n	80110c0 <netProcessLinkChange+0xb8>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801105a:	4a60      	ldr	r2, [pc, #384]	; (80111dc <netProcessLinkChange+0x1d4>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d10c      	bne.n	801107a <netProcessLinkChange+0x72>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8011060:	f7f0 f81b 	bl	800109a <osSuspendAllTasks>
 8011064:	4b59      	ldr	r3, [pc, #356]	; (80111cc <netProcessLinkChange+0x1c4>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	2219      	movs	r2, #25
 801106c:	2101      	movs	r1, #1
 801106e:	485c      	ldr	r0, [pc, #368]	; (80111e0 <netProcessLinkChange+0x1d8>)
 8011070:	f00c f970 	bl	801d354 <fwrite>
 8011074:	f7f0 f81c 	bl	80010b0 <osResumeAllTasks>
 8011078:	e022      	b.n	80110c0 <netProcessLinkChange+0xb8>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801107e:	4a59      	ldr	r2, [pc, #356]	; (80111e4 <netProcessLinkChange+0x1dc>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d10c      	bne.n	801109e <netProcessLinkChange+0x96>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 8011084:	f7f0 f809 	bl	800109a <osSuspendAllTasks>
 8011088:	4b50      	ldr	r3, [pc, #320]	; (80111cc <netProcessLinkChange+0x1c4>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	2218      	movs	r2, #24
 8011090:	2101      	movs	r1, #1
 8011092:	4855      	ldr	r0, [pc, #340]	; (80111e8 <netProcessLinkChange+0x1e0>)
 8011094:	f00c f95e 	bl	801d354 <fwrite>
 8011098:	f7f0 f80a 	bl	80010b0 <osResumeAllTasks>
 801109c:	e010      	b.n	80110c0 <netProcessLinkChange+0xb8>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00c      	beq.n	80110c0 <netProcessLinkChange+0xb8>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 80110a6:	f7ef fff8 	bl	800109a <osSuspendAllTasks>
 80110aa:	4b48      	ldr	r3, [pc, #288]	; (80111cc <netProcessLinkChange+0x1c4>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68d8      	ldr	r0, [r3, #12]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110b4:	461a      	mov	r2, r3
 80110b6:	494d      	ldr	r1, [pc, #308]	; (80111ec <netProcessLinkChange+0x1e4>)
 80110b8:	f00b ff64 	bl	801cf84 <fprintf>
 80110bc:	f7ef fff8 	bl	80010b0 <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80110c6:	2b02      	cmp	r3, #2
 80110c8:	d10c      	bne.n	80110e4 <netProcessLinkChange+0xdc>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 80110ca:	f7ef ffe6 	bl	800109a <osSuspendAllTasks>
 80110ce:	4b3f      	ldr	r3, [pc, #252]	; (80111cc <netProcessLinkChange+0x1c4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	221d      	movs	r2, #29
 80110d6:	2101      	movs	r1, #1
 80110d8:	4845      	ldr	r0, [pc, #276]	; (80111f0 <netProcessLinkChange+0x1e8>)
 80110da:	f00c f93b 	bl	801d354 <fwrite>
 80110de:	f7ef ffe7 	bl	80010b0 <osResumeAllTasks>
 80110e2:	e01e      	b.n	8011122 <netProcessLinkChange+0x11a>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d119      	bne.n	8011122 <netProcessLinkChange+0x11a>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 80110ee:	f7ef ffd4 	bl	800109a <osSuspendAllTasks>
 80110f2:	4b36      	ldr	r3, [pc, #216]	; (80111cc <netProcessLinkChange+0x1c4>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	221d      	movs	r2, #29
 80110fa:	2101      	movs	r1, #1
 80110fc:	483d      	ldr	r0, [pc, #244]	; (80111f4 <netProcessLinkChange+0x1ec>)
 80110fe:	f00c f929 	bl	801d354 <fwrite>
 8011102:	f7ef ffd5 	bl	80010b0 <osResumeAllTasks>
 8011106:	e00c      	b.n	8011122 <netProcessLinkChange+0x11a>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8011108:	f7ef ffc7 	bl	800109a <osSuspendAllTasks>
 801110c:	4b2f      	ldr	r3, [pc, #188]	; (80111cc <netProcessLinkChange+0x1c4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68d8      	ldr	r0, [r3, #12]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	3310      	adds	r3, #16
 8011116:	461a      	mov	r2, r3
 8011118:	4937      	ldr	r1, [pc, #220]	; (80111f8 <netProcessLinkChange+0x1f0>)
 801111a:	f00b ff33 	bl	801cf84 <fprintf>
 801111e:	f7ef ffc7 	bl	80010b0 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f7f7 fd2b 	bl	8008b7e <ipv4LinkChangeEvent>
#endif

#if (IPV6_SUPPORT == ENABLED)
   //Notify IPv6 of link state changes
   ipv6LinkChangeEvent(interface);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7f9 f8ec 	bl	800a306 <ipv6LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7f3 ff42 	bl	8004fb8 <dnsFlushCache>
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif

   //Loop through the link change callback table
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 8011134:	2300      	movs	r3, #0
 8011136:	617b      	str	r3, [r7, #20]
 8011138:	e021      	b.n	801117e <netProcessLinkChange+0x176>
   {
      NetLinkChangeCallbackEntry *entry;

      //Point to the current entry
      entry = &netContext.linkChangeCallbacks[i];
 801113a:	697a      	ldr	r2, [r7, #20]
 801113c:	4613      	mov	r3, r2
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	4413      	add	r3, r2
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	f503 6376 	add.w	r3, r3, #3936	; 0xf60
 8011148:	4a2c      	ldr	r2, [pc, #176]	; (80111fc <netProcessLinkChange+0x1f4>)
 801114a:	4413      	add	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]

      //Any registered callback?
      if(entry->callback != NULL)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d010      	beq.n	8011178 <netProcessLinkChange+0x170>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d004      	beq.n	8011168 <netProcessLinkChange+0x160>
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	429a      	cmp	r2, r3
 8011166:	d107      	bne.n	8011178 <netProcessLinkChange+0x170>
         {
            //Invoke user callback function
            entry->callback(interface, interface->linkState, entry->param);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	6892      	ldr	r2, [r2, #8]
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	4798      	blx	r3
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	3301      	adds	r3, #1
 801117c:	617b      	str	r3, [r7, #20]
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	2b05      	cmp	r3, #5
 8011182:	d9da      	bls.n	801113a <netProcessLinkChange+0x132>
         }
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8011184:	2300      	movs	r3, #0
 8011186:	617b      	str	r3, [r7, #20]
 8011188:	e018      	b.n	80111bc <netProcessLinkChange+0x1b4>
   {
      //Point to the current socket
      socket = socketTable + i;
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8011190:	fb02 f303 	mul.w	r3, r2, r3
 8011194:	4a1a      	ldr	r2, [pc, #104]	; (8011200 <netProcessLinkChange+0x1f8>)
 8011196:	4413      	add	r3, r2
 8011198:	613b      	str	r3, [r7, #16]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d102      	bne.n	80111a8 <netProcessLinkChange+0x1a0>
      {
         tcpUpdateEvents(socket);
 80111a2:	6938      	ldr	r0, [r7, #16]
 80111a4:	f005 fff6 	bl	8017194 <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d102      	bne.n	80111b6 <netProcessLinkChange+0x1ae>
      {
         udpUpdateEvents(socket);
 80111b0:	6938      	ldr	r0, [r7, #16]
 80111b2:	f007 f8a9 	bl	8018308 <udpUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	3301      	adds	r3, #1
 80111ba:	617b      	str	r3, [r7, #20]
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2b09      	cmp	r3, #9
 80111c0:	d9e3      	bls.n	801118a <netProcessLinkChange+0x182>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 80111c2:	bf00      	nop
 80111c4:	bf00      	nop
 80111c6:	3718      	adds	r7, #24
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	20000044 	.word	0x20000044
 80111d0:	080252b0 	.word	0x080252b0
 80111d4:	3b9aca00 	.word	0x3b9aca00
 80111d8:	080252c8 	.word	0x080252c8
 80111dc:	05f5e100 	.word	0x05f5e100
 80111e0:	080252e4 	.word	0x080252e4
 80111e4:	00989680 	.word	0x00989680
 80111e8:	08025300 	.word	0x08025300
 80111ec:	0802531c 	.word	0x0802531c
 80111f0:	08025338 	.word	0x08025338
 80111f4:	08025358 	.word	0x08025358
 80111f8:	08025378 	.word	0x08025378
 80111fc:	200046f4 	.word	0x200046f4
 8011200:	20005700 	.word	0x20005700

08011204 <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
   uint_t i;
   NetTimerCallbackEntry *entry;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 801120a:	4b9a      	ldr	r3, [pc, #616]	; (8011474 <netTick+0x270>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3364      	adds	r3, #100	; 0x64
 8011210:	4a98      	ldr	r2, [pc, #608]	; (8011474 <netTick+0x270>)
 8011212:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 8011214:	4b97      	ldr	r3, [pc, #604]	; (8011474 <netTick+0x270>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801121c:	d321      	bcc.n	8011262 <netTick+0x5e>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801121e:	2300      	movs	r3, #0
 8011220:	607b      	str	r3, [r7, #4]
 8011222:	e018      	b.n	8011256 <netTick+0x52>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8011224:	4a94      	ldr	r2, [pc, #592]	; (8011478 <netTick+0x274>)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 801122c:	fb01 f303 	mul.w	r3, r1, r3
 8011230:	4413      	add	r3, r2
 8011232:	33bc      	adds	r3, #188	; 0xbc
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00a      	beq.n	8011250 <netTick+0x4c>
            nicTick(&netInterface[i]);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8011240:	fb02 f303 	mul.w	r3, r2, r3
 8011244:	3350      	adds	r3, #80	; 0x50
 8011246:	4a8c      	ldr	r2, [pc, #560]	; (8011478 <netTick+0x274>)
 8011248:	4413      	add	r3, r2
 801124a:	4618      	mov	r0, r3
 801124c:	f000 fbee 	bl	8011a2c <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3301      	adds	r3, #1
 8011254:	607b      	str	r3, [r7, #4]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d0e3      	beq.n	8011224 <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 801125c:	4b85      	ldr	r3, [pc, #532]	; (8011474 <netTick+0x270>)
 801125e:	2200      	movs	r2, #0
 8011260:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   //Increment tick counter
   arpTickCounter += NET_TICK_INTERVAL;
 8011262:	4b86      	ldr	r3, [pc, #536]	; (801147c <netTick+0x278>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3364      	adds	r3, #100	; 0x64
 8011268:	4a84      	ldr	r2, [pc, #528]	; (801147c <netTick+0x278>)
 801126a:	6013      	str	r3, [r2, #0]

   //Manage ARP cache
   if(arpTickCounter >= ARP_TICK_INTERVAL)
 801126c:	4b83      	ldr	r3, [pc, #524]	; (801147c <netTick+0x278>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2bc7      	cmp	r3, #199	; 0xc7
 8011272:	d921      	bls.n	80112b8 <netTick+0xb4>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011274:	2300      	movs	r3, #0
 8011276:	607b      	str	r3, [r7, #4]
 8011278:	e018      	b.n	80112ac <netTick+0xa8>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 801127a:	4a7f      	ldr	r2, [pc, #508]	; (8011478 <netTick+0x274>)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8011282:	fb01 f303 	mul.w	r3, r1, r3
 8011286:	4413      	add	r3, r2
 8011288:	33bc      	adds	r3, #188	; 0xbc
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00a      	beq.n	80112a6 <netTick+0xa2>
            arpTick(&netInterface[i]);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8011296:	fb02 f303 	mul.w	r3, r2, r3
 801129a:	3350      	adds	r3, #80	; 0x50
 801129c:	4a76      	ldr	r2, [pc, #472]	; (8011478 <netTick+0x274>)
 801129e:	4413      	add	r3, r2
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7f1 fe1f 	bl	8002ee4 <arpTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	3301      	adds	r3, #1
 80112aa:	607b      	str	r3, [r7, #4]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d0e3      	beq.n	801127a <netTick+0x76>
      }

      //Reset tick counter
      arpTickCounter = 0;
 80112b2:	4b72      	ldr	r3, [pc, #456]	; (801147c <netTick+0x278>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 80112b8:	4b71      	ldr	r3, [pc, #452]	; (8011480 <netTick+0x27c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3364      	adds	r3, #100	; 0x64
 80112be:	4a70      	ldr	r2, [pc, #448]	; (8011480 <netTick+0x27c>)
 80112c0:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 80112c2:	4b6f      	ldr	r3, [pc, #444]	; (8011480 <netTick+0x27c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80112ca:	d321      	bcc.n	8011310 <netTick+0x10c>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80112cc:	2300      	movs	r3, #0
 80112ce:	607b      	str	r3, [r7, #4]
 80112d0:	e018      	b.n	8011304 <netTick+0x100>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 80112d2:	4a69      	ldr	r2, [pc, #420]	; (8011478 <netTick+0x274>)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 80112da:	fb01 f303 	mul.w	r3, r1, r3
 80112de:	4413      	add	r3, r2
 80112e0:	33bc      	adds	r3, #188	; 0xbc
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00a      	beq.n	80112fe <netTick+0xfa>
            ipv4FragTick(&netInterface[i]);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80112ee:	fb02 f303 	mul.w	r3, r2, r3
 80112f2:	3350      	adds	r3, #80	; 0x50
 80112f4:	4a60      	ldr	r2, [pc, #384]	; (8011478 <netTick+0x274>)
 80112f6:	4413      	add	r3, r2
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7f8 fa72 	bl	80097e2 <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	3301      	adds	r3, #1
 8011302:	607b      	str	r3, [r7, #4]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d0e3      	beq.n	80112d2 <netTick+0xce>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 801130a:	4b5d      	ldr	r3, [pc, #372]	; (8011480 <netTick+0x27c>)
 801130c:	2200      	movs	r2, #0
 801130e:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IGMP_SUPPORT == ENABLED)
   //Increment tick counter
   igmpTickCounter += NET_TICK_INTERVAL;
 8011310:	4b5c      	ldr	r3, [pc, #368]	; (8011484 <netTick+0x280>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	3364      	adds	r3, #100	; 0x64
 8011316:	4a5b      	ldr	r2, [pc, #364]	; (8011484 <netTick+0x280>)
 8011318:	6013      	str	r3, [r2, #0]

   //Handle IGMP related timers
   if(igmpTickCounter >= IGMP_TICK_INTERVAL)
 801131a:	4b5a      	ldr	r3, [pc, #360]	; (8011484 <netTick+0x280>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011322:	d321      	bcc.n	8011368 <netTick+0x164>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011324:	2300      	movs	r3, #0
 8011326:	607b      	str	r3, [r7, #4]
 8011328:	e018      	b.n	801135c <netTick+0x158>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 801132a:	4a53      	ldr	r2, [pc, #332]	; (8011478 <netTick+0x274>)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8011332:	fb01 f303 	mul.w	r3, r1, r3
 8011336:	4413      	add	r3, r2
 8011338:	33bc      	adds	r3, #188	; 0xbc
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00a      	beq.n	8011356 <netTick+0x152>
            igmpTick(&netInterface[i]);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8011346:	fb02 f303 	mul.w	r3, r2, r3
 801134a:	3350      	adds	r3, #80	; 0x50
 801134c:	4a4a      	ldr	r2, [pc, #296]	; (8011478 <netTick+0x274>)
 801134e:	4413      	add	r3, r2
 8011350:	4618      	mov	r0, r3
 8011352:	f7f6 ffc3 	bl	80082dc <igmpTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	3301      	adds	r3, #1
 801135a:	607b      	str	r3, [r7, #4]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d0e3      	beq.n	801132a <netTick+0x126>
      }

      //Reset tick counter
      igmpTickCounter = 0;
 8011362:	4b48      	ldr	r3, [pc, #288]	; (8011484 <netTick+0x280>)
 8011364:	2200      	movs	r2, #0
 8011366:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dhcpClientTickCounter += NET_TICK_INTERVAL;
 8011368:	4b47      	ldr	r3, [pc, #284]	; (8011488 <netTick+0x284>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	3364      	adds	r3, #100	; 0x64
 801136e:	4a46      	ldr	r2, [pc, #280]	; (8011488 <netTick+0x284>)
 8011370:	6013      	str	r3, [r2, #0]

   //Handle DHCP client related timers
   if(dhcpClientTickCounter >= DHCP_CLIENT_TICK_INTERVAL)
 8011372:	4b45      	ldr	r3, [pc, #276]	; (8011488 <netTick+0x284>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2bc7      	cmp	r3, #199	; 0xc7
 8011378:	d918      	bls.n	80113ac <netTick+0x1a8>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801137a:	2300      	movs	r3, #0
 801137c:	607b      	str	r3, [r7, #4]
 801137e:	e00f      	b.n	80113a0 <netTick+0x19c>
         dhcpClientTick(netInterface[i].dhcpClientContext);
 8011380:	4a3d      	ldr	r2, [pc, #244]	; (8011478 <netTick+0x274>)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8011388:	fb01 f303 	mul.w	r3, r1, r3
 801138c:	4413      	add	r3, r2
 801138e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4618      	mov	r0, r3
 8011396:	f7f2 fa61 	bl	800385c <dhcpClientTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3301      	adds	r3, #1
 801139e:	607b      	str	r3, [r7, #4]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d0ec      	beq.n	8011380 <netTick+0x17c>

      //Reset tick counter
      dhcpClientTickCounter = 0;
 80113a6:	4b38      	ldr	r3, [pc, #224]	; (8011488 <netTick+0x284>)
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV6_SUPPORT == ENABLED && IPV6_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv6FragTickCounter += NET_TICK_INTERVAL;
 80113ac:	4b37      	ldr	r3, [pc, #220]	; (801148c <netTick+0x288>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3364      	adds	r3, #100	; 0x64
 80113b2:	4a36      	ldr	r2, [pc, #216]	; (801148c <netTick+0x288>)
 80113b4:	6013      	str	r3, [r2, #0]

   //Handle IPv6 fragment reassembly timeout
   if(ipv6FragTickCounter >= IPV6_FRAG_TICK_INTERVAL)
 80113b6:	4b35      	ldr	r3, [pc, #212]	; (801148c <netTick+0x288>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80113be:	d321      	bcc.n	8011404 <netTick+0x200>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80113c0:	2300      	movs	r3, #0
 80113c2:	607b      	str	r3, [r7, #4]
 80113c4:	e018      	b.n	80113f8 <netTick+0x1f4>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 80113c6:	4a2c      	ldr	r2, [pc, #176]	; (8011478 <netTick+0x274>)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 80113ce:	fb01 f303 	mul.w	r3, r1, r3
 80113d2:	4413      	add	r3, r2
 80113d4:	33bc      	adds	r3, #188	; 0xbc
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00a      	beq.n	80113f2 <netTick+0x1ee>
            ipv6FragTick(&netInterface[i]);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80113e2:	fb02 f303 	mul.w	r3, r2, r3
 80113e6:	3350      	adds	r3, #80	; 0x50
 80113e8:	4a23      	ldr	r2, [pc, #140]	; (8011478 <netTick+0x274>)
 80113ea:	4413      	add	r3, r2
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7fa f987 	bl	800b700 <ipv6FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3301      	adds	r3, #1
 80113f6:	607b      	str	r3, [r7, #4]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d0e3      	beq.n	80113c6 <netTick+0x1c2>
      }

      //Reset tick counter
      ipv6FragTickCounter = 0;
 80113fe:	4b23      	ldr	r3, [pc, #140]	; (801148c <netTick+0x288>)
 8011400:	2200      	movs	r2, #0
 8011402:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV6_SUPPORT == ENABLED && MLD_SUPPORT == ENABLED)
   //Increment tick counter
   mldTickCounter += NET_TICK_INTERVAL;
 8011404:	4b22      	ldr	r3, [pc, #136]	; (8011490 <netTick+0x28c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3364      	adds	r3, #100	; 0x64
 801140a:	4a21      	ldr	r2, [pc, #132]	; (8011490 <netTick+0x28c>)
 801140c:	6013      	str	r3, [r2, #0]

   //Handle MLD related timers
   if(mldTickCounter >= MLD_TICK_INTERVAL)
 801140e:	4b20      	ldr	r3, [pc, #128]	; (8011490 <netTick+0x28c>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011416:	d321      	bcc.n	801145c <netTick+0x258>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011418:	2300      	movs	r3, #0
 801141a:	607b      	str	r3, [r7, #4]
 801141c:	e018      	b.n	8011450 <netTick+0x24c>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 801141e:	4a16      	ldr	r2, [pc, #88]	; (8011478 <netTick+0x274>)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8011426:	fb01 f303 	mul.w	r3, r1, r3
 801142a:	4413      	add	r3, r2
 801142c:	33bc      	adds	r3, #188	; 0xbc
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00a      	beq.n	801144a <netTick+0x246>
            mldTick(&netInterface[i]);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 801143a:	fb02 f303 	mul.w	r3, r2, r3
 801143e:	3350      	adds	r3, #80	; 0x50
 8011440:	4a0d      	ldr	r2, [pc, #52]	; (8011478 <netTick+0x274>)
 8011442:	4413      	add	r3, r2
 8011444:	4618      	mov	r0, r3
 8011446:	f7fb fea1 	bl	800d18c <mldTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	3301      	adds	r3, #1
 801144e:	607b      	str	r3, [r7, #4]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0e3      	beq.n	801141e <netTick+0x21a>
      }

      //Reset tick counter
      mldTickCounter = 0;
 8011456:	4b0e      	ldr	r3, [pc, #56]	; (8011490 <netTick+0x28c>)
 8011458:	2200      	movs	r2, #0
 801145a:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV6_SUPPORT == ENABLED && NDP_SUPPORT == ENABLED)
   //Increment tick counter
   ndpTickCounter += NET_TICK_INTERVAL;
 801145c:	4b0d      	ldr	r3, [pc, #52]	; (8011494 <netTick+0x290>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	3364      	adds	r3, #100	; 0x64
 8011462:	4a0c      	ldr	r2, [pc, #48]	; (8011494 <netTick+0x290>)
 8011464:	6013      	str	r3, [r2, #0]

   //Handle NDP related timers
   if(ndpTickCounter >= NDP_TICK_INTERVAL)
 8011466:	4b0b      	ldr	r3, [pc, #44]	; (8011494 <netTick+0x290>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2bc7      	cmp	r3, #199	; 0xc7
 801146c:	d933      	bls.n	80114d6 <netTick+0x2d2>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 801146e:	2300      	movs	r3, #0
 8011470:	607b      	str	r3, [r7, #4]
 8011472:	e02a      	b.n	80114ca <netTick+0x2c6>
 8011474:	200056fc 	.word	0x200056fc
 8011478:	200046f4 	.word	0x200046f4
 801147c:	20004334 	.word	0x20004334
 8011480:	200046e4 	.word	0x200046e4
 8011484:	200046e0 	.word	0x200046e0
 8011488:	20004338 	.word	0x20004338
 801148c:	200046e8 	.word	0x200046e8
 8011490:	200046ec 	.word	0x200046ec
 8011494:	200046f0 	.word	0x200046f0
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8011498:	4a34      	ldr	r2, [pc, #208]	; (801156c <netTick+0x368>)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 80114a0:	fb01 f303 	mul.w	r3, r1, r3
 80114a4:	4413      	add	r3, r2
 80114a6:	33bc      	adds	r3, #188	; 0xbc
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00a      	beq.n	80114c4 <netTick+0x2c0>
            ndpTick(&netInterface[i]);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 80114b4:	fb02 f303 	mul.w	r3, r2, r3
 80114b8:	3350      	adds	r3, #80	; 0x50
 80114ba:	4a2c      	ldr	r2, [pc, #176]	; (801156c <netTick+0x368>)
 80114bc:	4413      	add	r3, r2
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fc ffb0 	bl	800e424 <ndpTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	3301      	adds	r3, #1
 80114c8:	607b      	str	r3, [r7, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d0e3      	beq.n	8011498 <netTick+0x294>
      }

      //Reset tick counter
      ndpTickCounter = 0;
 80114d0:	4b27      	ldr	r3, [pc, #156]	; (8011570 <netTick+0x36c>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 80114d6:	4b27      	ldr	r3, [pc, #156]	; (8011574 <netTick+0x370>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	3364      	adds	r3, #100	; 0x64
 80114dc:	4a25      	ldr	r2, [pc, #148]	; (8011574 <netTick+0x370>)
 80114de:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 80114e0:	4b24      	ldr	r3, [pc, #144]	; (8011574 <netTick+0x370>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	2b63      	cmp	r3, #99	; 0x63
 80114e6:	d904      	bls.n	80114f2 <netTick+0x2ee>
   {
      //TCP timer handler
      tcpTick();
 80114e8:	f006 f8fc 	bl	80176e4 <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 80114ec:	4b21      	ldr	r3, [pc, #132]	; (8011574 <netTick+0x370>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 80114f2:	4b21      	ldr	r3, [pc, #132]	; (8011578 <netTick+0x374>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3364      	adds	r3, #100	; 0x64
 80114f8:	4a1f      	ldr	r2, [pc, #124]	; (8011578 <netTick+0x374>)
 80114fa:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 80114fc:	4b1e      	ldr	r3, [pc, #120]	; (8011578 <netTick+0x374>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2bc7      	cmp	r3, #199	; 0xc7
 8011502:	d904      	bls.n	801150e <netTick+0x30a>
   {
      //DNS timer handler
      dnsTick();
 8011504:	f7f3 fd9e 	bl	8005044 <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 8011508:	4b1b      	ldr	r3, [pc, #108]	; (8011578 <netTick+0x374>)
 801150a:	2200      	movs	r2, #0
 801150c:	601a      	str	r2, [r3, #0]
      dnsSdTickCounter = 0;
   }
#endif

   //Loop through the timer callback table
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 801150e:	2300      	movs	r3, #0
 8011510:	607b      	str	r3, [r7, #4]
 8011512:	e022      	b.n	801155a <netTick+0x356>
   {
      //Point to the current entry
      entry = &netContext.timerCallbacks[i];
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 801151c:	4a13      	ldr	r2, [pc, #76]	; (801156c <netTick+0x368>)
 801151e:	4413      	add	r3, r2
 8011520:	603b      	str	r3, [r7, #0]

      //Any registered callback?
      if(entry->callback != NULL)
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d014      	beq.n	8011554 <netTick+0x350>
      {
         //Increment timer value
         entry->timerValue += NET_TICK_INTERVAL;
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	601a      	str	r2, [r3, #0]

         //Timer period elapsed?
         if(entry->timerValue >= entry->timerPeriod)
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	429a      	cmp	r2, r3
 8011540:	d308      	bcc.n	8011554 <netTick+0x350>
         {
            //Invoke user callback function
            entry->callback(entry->param);
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	68d2      	ldr	r2, [r2, #12]
 801154a:	4610      	mov	r0, r2
 801154c:	4798      	blx	r3
            //Reload timer
            entry->timerValue = 0;
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	2200      	movs	r2, #0
 8011552:	601a      	str	r2, [r3, #0]
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3301      	adds	r3, #1
 8011558:	607b      	str	r3, [r7, #4]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b05      	cmp	r3, #5
 801155e:	d9d9      	bls.n	8011514 <netTick+0x310>
         }
      }
   }
}
 8011560:	bf00      	nop
 8011562:	bf00      	nop
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	200046f4 	.word	0x200046f4
 8011570:	200046f0 	.word	0x200046f0
 8011574:	20006df8 	.word	0x20006df8
 8011578:	2000433c 	.word	0x2000433c

0801157c <netStartTimer>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] interval Time interval
 **/

void netStartTimer(NetTimer *timer, systime_t interval)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 8011586:	f7ef fe8b 	bl	80012a0 <osGetSystemTime>
 801158a:	4602      	mov	r2, r0
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	605a      	str	r2, [r3, #4]
   timer->interval = interval;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	609a      	str	r2, [r3, #8]
   timer->running = TRUE;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	601a      	str	r2, [r3, #0]
}
 801159c:	bf00      	nop
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <netStopTimer>:
 * @brief Stop timer
 * @param[in] timer Pointer to the timer structure
 **/

void netStopTimer(NetTimer *timer)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b083      	sub	sp, #12
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
}
 80115b2:	bf00      	nop
 80115b4:	370c      	adds	r7, #12
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <netTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer is running, else FALSE
 **/

bool_t netTimerRunning(NetTimer *timer)
{
 80115be:	b480      	push	{r7}
 80115c0:	b083      	sub	sp, #12
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
   //Return TRUE if the timer is running
   return timer->running;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <netTimerExpired>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer has expired, else FALSE
 **/

bool_t netTimerExpired(NetTimer *timer)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
   bool_t expired;
   systime_t time;

   //Initialize flag
   expired = FALSE;
 80115de:	2300      	movs	r3, #0
 80115e0:	60fb      	str	r3, [r7, #12]
   //Get current time
   time = osGetSystemTime();
 80115e2:	f7ef fe5d 	bl	80012a0 <osGetSystemTime>
 80115e6:	60b8      	str	r0, [r7, #8]

   //Check whether the timer is running
   if(timer->running)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00a      	beq.n	8011606 <netTimerExpired+0x30>
   {
      //Check whether the specified time interval has elapsed
      if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	4413      	add	r3, r2
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	db01      	blt.n	8011606 <netTimerExpired+0x30>
      {
         expired = TRUE;
 8011602:	2301      	movs	r3, #1
 8011604:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return TRUE if the timer has expired
   return expired;
 8011606:	68fb      	ldr	r3, [r7, #12]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <netInitRand>:
/**
 * @brief PRNG initialization
 **/

void netInitRand(void)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
   uint_t i;
   NetRandState *state;
   uint8_t iv[10];

   //Point to the PRNG state
   state = &netContext.randState;
 8011616:	4b4a      	ldr	r3, [pc, #296]	; (8011740 <netInitRand+0x130>)
 8011618:	613b      	str	r3, [r7, #16]

   //Increment invocation counter
   state->counter++;
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	881b      	ldrh	r3, [r3, #0]
 801161e:	3301      	adds	r3, #1
 8011620:	b29a      	uxth	r2, r3
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	801a      	strh	r2, [r3, #0]

   //Copy the EUI-64 identifier of the default interface
   eui64CopyAddr(iv, &netInterface[0].eui64);
 8011626:	4a47      	ldr	r2, [pc, #284]	; (8011744 <netInitRand+0x134>)
 8011628:	1d3b      	adds	r3, r7, #4
 801162a:	3258      	adds	r2, #88	; 0x58
 801162c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011630:	e883 0003 	stmia.w	r3, {r0, r1}
   //Append the invocation counter
   STORE16BE(state->counter, iv + sizeof(Eui64));
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	0a1b      	lsrs	r3, r3, #8
 801163a:	b29b      	uxth	r3, r3
 801163c:	b2db      	uxtb	r3, r3
 801163e:	733b      	strb	r3, [r7, #12]
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	881b      	ldrh	r3, [r3, #0]
 8011644:	b2db      	uxtb	r3, r3
 8011646:	737b      	strb	r3, [r7, #13]

   //Clear the 288-bit internal state
   osMemset(state->s, 0, 36);
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	3302      	adds	r3, #2
 801164c:	2224      	movs	r2, #36	; 0x24
 801164e:	2100      	movs	r1, #0
 8011650:	4618      	mov	r0, r3
 8011652:	f00c f93d 	bl	801d8d0 <memset>

   //Let (s1, s2, ..., s93) = (K1, ..., K80, 0, ..., 0)
   for(i = 0; i < 10; i++)
 8011656:	2300      	movs	r3, #0
 8011658:	617b      	str	r3, [r7, #20]
 801165a:	e00d      	b.n	8011678 <netInitRand+0x68>
   {
      state->s[i] = netContext.randSeed[i];
 801165c:	4a39      	ldr	r2, [pc, #228]	; (8011744 <netInitRand+0x134>)
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	4413      	add	r3, r2
 8011662:	3318      	adds	r3, #24
 8011664:	7819      	ldrb	r1, [r3, #0]
 8011666:	693a      	ldr	r2, [r7, #16]
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	4413      	add	r3, r2
 801166c:	3302      	adds	r3, #2
 801166e:	460a      	mov	r2, r1
 8011670:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < 10; i++)
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	3301      	adds	r3, #1
 8011676:	617b      	str	r3, [r7, #20]
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	2b09      	cmp	r3, #9
 801167c:	d9ee      	bls.n	801165c <netInitRand+0x4c>
   }

   //Load the 80-bit initialization vector
   for(i = 0; i < 10; i++)
 801167e:	2300      	movs	r3, #0
 8011680:	617b      	str	r3, [r7, #20]
 8011682:	e00c      	b.n	801169e <netInitRand+0x8e>
   {
      state->s[12 + i] = iv[i];
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	330c      	adds	r3, #12
 8011688:	1d39      	adds	r1, r7, #4
 801168a:	697a      	ldr	r2, [r7, #20]
 801168c:	440a      	add	r2, r1
 801168e:	7811      	ldrb	r1, [r2, #0]
 8011690:	693a      	ldr	r2, [r7, #16]
 8011692:	4413      	add	r3, r2
 8011694:	460a      	mov	r2, r1
 8011696:	709a      	strb	r2, [r3, #2]
   for(i = 0; i < 10; i++)
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	3301      	adds	r3, #1
 801169c:	617b      	str	r3, [r7, #20]
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	2b09      	cmp	r3, #9
 80116a2:	d9ef      	bls.n	8011684 <netInitRand+0x74>
   }

   //Let (s94, s95, ..., s177) = (IV1, ..., IV80, 0, ..., 0)
   for(i = 11; i < 22; i++)
 80116a4:	230b      	movs	r3, #11
 80116a6:	617b      	str	r3, [r7, #20]
 80116a8:	e01a      	b.n	80116e0 <netInitRand+0xd0>
   {
      state->s[i] = (state->s[i + 1] << 5) | (state->s[i] >> 3);
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	3301      	adds	r3, #1
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	4413      	add	r3, r2
 80116b2:	789b      	ldrb	r3, [r3, #2]
 80116b4:	015b      	lsls	r3, r3, #5
 80116b6:	b25a      	sxtb	r2, r3
 80116b8:	6939      	ldr	r1, [r7, #16]
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	440b      	add	r3, r1
 80116be:	3302      	adds	r3, #2
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	08db      	lsrs	r3, r3, #3
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	b25b      	sxtb	r3, r3
 80116c8:	4313      	orrs	r3, r2
 80116ca:	b25b      	sxtb	r3, r3
 80116cc:	b2d9      	uxtb	r1, r3
 80116ce:	693a      	ldr	r2, [r7, #16]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	4413      	add	r3, r2
 80116d4:	3302      	adds	r3, #2
 80116d6:	460a      	mov	r2, r1
 80116d8:	701a      	strb	r2, [r3, #0]
   for(i = 11; i < 22; i++)
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	3301      	adds	r3, #1
 80116de:	617b      	str	r3, [r7, #20]
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	2b15      	cmp	r3, #21
 80116e4:	d9e1      	bls.n	80116aa <netInitRand+0x9a>
   }

   //Let (s178, s279, ..., s288) = (0, ..., 0, 1, 1, 1)
   NET_RAND_STATE_SET_BIT(state->s, 286, 1);
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80116ec:	f043 0320 	orr.w	r3, r3, #32
 80116f0:	b2da      	uxtb	r2, r3
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 287, 1);
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011702:	b2da      	uxtb	r2, r3
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 288, 1);
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011714:	b2da      	uxtb	r2, r3
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

   //The state is rotated over 4 full cycles, without generating key stream bit
   for(i = 0; i < (4 * 288); i++)
 801171c:	2300      	movs	r3, #0
 801171e:	617b      	str	r3, [r7, #20]
 8011720:	e005      	b.n	801172e <netInitRand+0x11e>
   {
      netGetRandBit(state);
 8011722:	6938      	ldr	r0, [r7, #16]
 8011724:	f000 f854 	bl	80117d0 <netGetRandBit>
   for(i = 0; i < (4 * 288); i++)
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	3301      	adds	r3, #1
 801172c:	617b      	str	r3, [r7, #20]
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011734:	d3f5      	bcc.n	8011722 <netInitRand+0x112>
   }
}
 8011736:	bf00      	nop
 8011738:	bf00      	nop
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	2000471c 	.word	0x2000471c
 8011744:	200046f4 	.word	0x200046f4

08011748 <netGetRand>:
 * @brief Generate a random 32-bit value
 * @return Random value
 **/

uint32_t netGetRand(void)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
   uint_t i;
   uint32_t value;

   //Initialize value
   value = 0;
 801174e:	2300      	movs	r3, #0
 8011750:	603b      	str	r3, [r7, #0]

   //Generate a random 32-bit value
   for(i = 0; i < 32; i++)
 8011752:	2300      	movs	r3, #0
 8011754:	607b      	str	r3, [r7, #4]
 8011756:	e00c      	b.n	8011772 <netGetRand+0x2a>
   {
      value |= netGetRandBit(&netContext.randState) << i;
 8011758:	480b      	ldr	r0, [pc, #44]	; (8011788 <netGetRand+0x40>)
 801175a:	f000 f839 	bl	80117d0 <netGetRandBit>
 801175e:	4602      	mov	r2, r0
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	fa02 f303 	lsl.w	r3, r2, r3
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	4313      	orrs	r3, r2
 801176a:	603b      	str	r3, [r7, #0]
   for(i = 0; i < 32; i++)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3301      	adds	r3, #1
 8011770:	607b      	str	r3, [r7, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b1f      	cmp	r3, #31
 8011776:	d9ef      	bls.n	8011758 <netGetRand+0x10>
   }

   //Return the value
   return value + netContext.entropy;
 8011778:	4b04      	ldr	r3, [pc, #16]	; (801178c <netGetRand+0x44>)
 801177a:	691a      	ldr	r2, [r3, #16]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	4413      	add	r3, r2
}
 8011780:	4618      	mov	r0, r3
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	2000471c 	.word	0x2000471c
 801178c:	200046f4 	.word	0x200046f4

08011790 <netGetRandRange>:
 * @param[in] max Upper bound
 * @return Random value in the specified range
 **/

int32_t netGetRandRange(int32_t min, int32_t max)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
   int32_t value;

   //Valid parameters?
   if(max > min)
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	429a      	cmp	r2, r3
 80117a0:	dd0f      	ble.n	80117c2 <netGetRandRange+0x32>
   {
      //Pick up a random value in the given range
      value = min + (netGetRand() % (max - min + 1));
 80117a2:	f7ff ffd1 	bl	8011748 <netGetRand>
 80117a6:	4603      	mov	r3, r0
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	1a8a      	subs	r2, r1, r2
 80117ae:	3201      	adds	r2, #1
 80117b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80117b4:	fb02 f201 	mul.w	r2, r2, r1
 80117b8:	1a9a      	subs	r2, r3, r2
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4413      	add	r3, r2
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e001      	b.n	80117c6 <netGetRandRange+0x36>
   }
   else
   {
      //Use default value
      value = min;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	60fb      	str	r3, [r7, #12]
   }

   //Return the random value
   return value;
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <netGetRandBit>:
 * @param[in] state Pointer to the PRNG state
 * @return Key stream bit
 **/

uint32_t netGetRandBit(NetRandState *state)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
   uint8_t t2;
   uint8_t t3;
   uint8_t z;

   //Let t1 = s66 + s93
   t1 = NET_RAND_GET_BIT(state->s, 66);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	7a9b      	ldrb	r3, [r3, #10]
 80117dc:	085b      	lsrs	r3, r3, #1
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 93);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	7b5b      	ldrb	r3, [r3, #13]
 80117ea:	091b      	lsrs	r3, r3, #4
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	b25b      	sxtb	r3, r3
 80117f0:	f003 0301 	and.w	r3, r3, #1
 80117f4:	b25a      	sxtb	r2, r3
 80117f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80117fa:	4053      	eors	r3, r2
 80117fc:	b25b      	sxtb	r3, r3
 80117fe:	72fb      	strb	r3, [r7, #11]

   //Let t2 = s162 + s177
   t2 = NET_RAND_GET_BIT(state->s, 162);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	7d9b      	ldrb	r3, [r3, #22]
 8011804:	085b      	lsrs	r3, r3, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f003 0301 	and.w	r3, r3, #1
 801180c:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 177);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	7e1b      	ldrb	r3, [r3, #24]
 8011812:	b25b      	sxtb	r3, r3
 8011814:	f003 0301 	and.w	r3, r3, #1
 8011818:	b25a      	sxtb	r2, r3
 801181a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801181e:	4053      	eors	r3, r2
 8011820:	b25b      	sxtb	r3, r3
 8011822:	72bb      	strb	r3, [r7, #10]

   //Let t3 = s243 + s288
   t3 = NET_RAND_GET_BIT(state->s, 243);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 3020 	ldrb.w	r3, [r3, #32]
 801182a:	089b      	lsrs	r3, r3, #2
 801182c:	b2db      	uxtb	r3, r3
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 288);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801183a:	09db      	lsrs	r3, r3, #7
 801183c:	b2db      	uxtb	r3, r3
 801183e:	b25a      	sxtb	r2, r3
 8011840:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8011844:	4053      	eors	r3, r2
 8011846:	b25b      	sxtb	r3, r3
 8011848:	727b      	strb	r3, [r7, #9]

   //Generate a key stream bit z
   z = t1 ^ t2 ^ t3;
 801184a:	7afa      	ldrb	r2, [r7, #11]
 801184c:	7abb      	ldrb	r3, [r7, #10]
 801184e:	4053      	eors	r3, r2
 8011850:	b2da      	uxtb	r2, r3
 8011852:	7a7b      	ldrb	r3, [r7, #9]
 8011854:	4053      	eors	r3, r2
 8011856:	723b      	strb	r3, [r7, #8]

   //Let t1 = t1 + s91.s92 + s171
   t1 ^= NET_RAND_GET_BIT(state->s, 91) & NET_RAND_GET_BIT(state->s, 92);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	7b5b      	ldrb	r3, [r3, #13]
 801185c:	089b      	lsrs	r3, r3, #2
 801185e:	b2da      	uxtb	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	7b5b      	ldrb	r3, [r3, #13]
 8011864:	08db      	lsrs	r3, r3, #3
 8011866:	b2db      	uxtb	r3, r3
 8011868:	4013      	ands	r3, r2
 801186a:	b2db      	uxtb	r3, r3
 801186c:	b25b      	sxtb	r3, r3
 801186e:	f003 0301 	and.w	r3, r3, #1
 8011872:	b25a      	sxtb	r2, r3
 8011874:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011878:	4053      	eors	r3, r2
 801187a:	b25b      	sxtb	r3, r3
 801187c:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 171);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	7ddb      	ldrb	r3, [r3, #23]
 8011882:	089b      	lsrs	r3, r3, #2
 8011884:	b2db      	uxtb	r3, r3
 8011886:	b25b      	sxtb	r3, r3
 8011888:	f003 0301 	and.w	r3, r3, #1
 801188c:	b25a      	sxtb	r2, r3
 801188e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011892:	4053      	eors	r3, r2
 8011894:	b25b      	sxtb	r3, r3
 8011896:	72fb      	strb	r3, [r7, #11]

   //Let t2 = t2 + s175.s176 + s264
   t2 ^= NET_RAND_GET_BIT(state->s, 175) & NET_RAND_GET_BIT(state->s, 176);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	7ddb      	ldrb	r3, [r3, #23]
 801189c:	099b      	lsrs	r3, r3, #6
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	7ddb      	ldrb	r3, [r3, #23]
 80118a4:	09db      	lsrs	r3, r3, #7
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	4013      	ands	r3, r2
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	b25b      	sxtb	r3, r3
 80118ae:	f003 0301 	and.w	r3, r3, #1
 80118b2:	b25a      	sxtb	r2, r3
 80118b4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80118b8:	4053      	eors	r3, r2
 80118ba:	b25b      	sxtb	r3, r3
 80118bc:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 264);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80118c4:	09db      	lsrs	r3, r3, #7
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	b25a      	sxtb	r2, r3
 80118ca:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80118ce:	4053      	eors	r3, r2
 80118d0:	b25b      	sxtb	r3, r3
 80118d2:	72bb      	strb	r3, [r7, #10]

   //Let t3 = t3 + s286.s287 + s69
   t3 ^= NET_RAND_GET_BIT(state->s, 286) & NET_RAND_GET_BIT(state->s, 287);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80118da:	095b      	lsrs	r3, r3, #5
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80118e4:	099b      	lsrs	r3, r3, #6
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	4013      	ands	r3, r2
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	b25b      	sxtb	r3, r3
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	b25a      	sxtb	r2, r3
 80118f4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80118f8:	4053      	eors	r3, r2
 80118fa:	b25b      	sxtb	r3, r3
 80118fc:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 69);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	7a9b      	ldrb	r3, [r3, #10]
 8011902:	091b      	lsrs	r3, r3, #4
 8011904:	b2db      	uxtb	r3, r3
 8011906:	b25b      	sxtb	r3, r3
 8011908:	f003 0301 	and.w	r3, r3, #1
 801190c:	b25a      	sxtb	r2, r3
 801190e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8011912:	4053      	eors	r3, r2
 8011914:	b25b      	sxtb	r3, r3
 8011916:	727b      	strb	r3, [r7, #9]

   //Rotate the internal state
   for(i = 35; i > 0; i--)
 8011918:	2323      	movs	r3, #35	; 0x23
 801191a:	60fb      	str	r3, [r7, #12]
 801191c:	e01a      	b.n	8011954 <netGetRandBit+0x184>
   {
      state->s[i] = (state->s[i] << 1) | (state->s[i - 1] >> 7);
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	4413      	add	r3, r2
 8011924:	3302      	adds	r3, #2
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	b25a      	sxtb	r2, r3
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	3b01      	subs	r3, #1
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	440b      	add	r3, r1
 8011934:	789b      	ldrb	r3, [r3, #2]
 8011936:	09db      	lsrs	r3, r3, #7
 8011938:	b2db      	uxtb	r3, r3
 801193a:	b25b      	sxtb	r3, r3
 801193c:	4313      	orrs	r3, r2
 801193e:	b25b      	sxtb	r3, r3
 8011940:	b2d9      	uxtb	r1, r3
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	4413      	add	r3, r2
 8011948:	3302      	adds	r3, #2
 801194a:	460a      	mov	r2, r1
 801194c:	701a      	strb	r2, [r3, #0]
   for(i = 35; i > 0; i--)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	3b01      	subs	r3, #1
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1e1      	bne.n	801191e <netGetRandBit+0x14e>
   }

   state->s[0] = state->s[0] << 1;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	789b      	ldrb	r3, [r3, #2]
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	b2da      	uxtb	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	709a      	strb	r2, [r3, #2]

   //Let s1 = t3
   NET_RAND_STATE_SET_BIT(state->s, 1, t3);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	789b      	ldrb	r3, [r3, #2]
 801196a:	b25b      	sxtb	r3, r3
 801196c:	f023 0301 	bic.w	r3, r3, #1
 8011970:	b25a      	sxtb	r2, r3
 8011972:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8011976:	4313      	orrs	r3, r2
 8011978:	b25b      	sxtb	r3, r3
 801197a:	b2da      	uxtb	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	709a      	strb	r2, [r3, #2]
   //Let s94 = t1
   NET_RAND_STATE_SET_BIT(state->s, 94, t1);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7b5b      	ldrb	r3, [r3, #13]
 8011984:	b25b      	sxtb	r3, r3
 8011986:	f023 0320 	bic.w	r3, r3, #32
 801198a:	b25a      	sxtb	r2, r3
 801198c:	7afb      	ldrb	r3, [r7, #11]
 801198e:	015b      	lsls	r3, r3, #5
 8011990:	b25b      	sxtb	r3, r3
 8011992:	4313      	orrs	r3, r2
 8011994:	b25b      	sxtb	r3, r3
 8011996:	b2da      	uxtb	r2, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	735a      	strb	r2, [r3, #13]
   //Let s178 = t2
   NET_RAND_STATE_SET_BIT(state->s, 178, t2);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	7e1b      	ldrb	r3, [r3, #24]
 80119a0:	b25b      	sxtb	r3, r3
 80119a2:	f023 0302 	bic.w	r3, r3, #2
 80119a6:	b25a      	sxtb	r2, r3
 80119a8:	7abb      	ldrb	r3, [r7, #10]
 80119aa:	005b      	lsls	r3, r3, #1
 80119ac:	b25b      	sxtb	r3, r3
 80119ae:	4313      	orrs	r3, r2
 80119b0:	b25b      	sxtb	r3, r3
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	761a      	strb	r2, [r3, #24]

   //Return one bit of key stream
   return z;
 80119b8:	7a3b      	ldrb	r3, [r7, #8]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <nicGetLogicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetLogicalInterface(NetInterface *interface)
{
 80119c6:	b480      	push	{r7}
 80119c8:	b083      	sub	sp, #12
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the logical interface
   return interface;
 80119ce:	687b      	ldr	r3, [r7, #4]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr

080119dc <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 80119e4:	687b      	ldr	r3, [r7, #4]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	370c      	adds	r7, #12
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr

080119f2 <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 80119f2:	b480      	push	{r7}
 80119f4:	b083      	sub	sp, #12
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 80119fa:	2300      	movs	r3, #0
#endif
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	bf0c      	ite	eq
 8011a1a:	2301      	moveq	r3, #1
 8011a1c:	2300      	movne	r3, #0
 8011a1e:	b2db      	uxtb	r3, r3
#endif
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d012      	beq.n	8011a62 <nicTick+0x36>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a40:	695b      	ldr	r3, [r3, #20]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d004      	beq.n	8011a62 <nicTick+0x36>
      {
         interface->nicDriver->enableIrq(interface);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	4798      	blx	r3
      }
   }
}
 8011a62:	bf00      	nop
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset, NetTxAncillary *ancillary)
{
 8011a6c:	b590      	push	{r4, r7, lr}
 8011a6e:	b087      	sub	sp, #28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	603b      	str	r3, [r7, #0]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8011a7a:	f7ef fc11 	bl	80012a0 <osGetSystemTime>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	4b22      	ldr	r3, [pc, #136]	; (8011b0c <nicSendPacket+0xa0>)
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	4413      	add	r3, r2
 8011a86:	4a21      	ldr	r2, [pc, #132]	; (8011b0c <nicSendPacket+0xa0>)
 8011a88:	6113      	str	r3, [r2, #16]

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d032      	beq.n	8011af8 <nicSendPacket+0x8c>
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d02e      	beq.n	8011af8 <nicSendPacket+0x8c>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	2b04      	cmp	r3, #4
 8011aa2:	d102      	bne.n	8011aaa <nicSendPacket+0x3e>
      {
         //The loopback interface is always available
         status = TRUE;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	613b      	str	r3, [r7, #16]
 8011aa8:	e007      	b.n	8011aba <nicSendPacket+0x4e>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	3354      	adds	r3, #84	; 0x54
 8011aae:	f04f 31ff 	mov.w	r1, #4294967295
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7ef fb4c 	bl	8001150 <osWaitForEvent>
 8011ab8:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d018      	beq.n	8011af2 <nicSendPacket+0x86>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ac4:	695b      	ldr	r3, [r3, #20]
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	4798      	blx	r3

         //Send the packet
         error = interface->nicDriver->sendPacket(interface, buffer, offset,
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ace:	69dc      	ldr	r4, [r3, #28]
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	68b9      	ldr	r1, [r7, #8]
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	47a0      	blx	r4
 8011ada:	4603      	mov	r3, r0
 8011adc:	82fb      	strh	r3, [r7, #22]
            ancillary);

         //Re-enable interrupts if necessary
         if(interface->configured)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00b      	beq.n	8011afe <nicSendPacket+0x92>
         {
            interface->nicDriver->enableIrq(interface);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	4798      	blx	r3
      if(status)
 8011af0:	e005      	b.n	8011afe <nicSendPacket+0x92>
         }
      }
      else
      {
         //If the transmitter is busy, then drop the packet
         error = NO_ERROR;
 8011af2:	2300      	movs	r3, #0
 8011af4:	82fb      	strh	r3, [r7, #22]
      if(status)
 8011af6:	e002      	b.n	8011afe <nicSendPacket+0x92>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8011af8:	2307      	movs	r3, #7
 8011afa:	82fb      	strh	r3, [r7, #22]
 8011afc:	e000      	b.n	8011b00 <nicSendPacket+0x94>
      if(status)
 8011afe:	bf00      	nop
   }

   //Return status code
   return error;
 8011b00:	8afb      	ldrh	r3, [r7, #22]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	371c      	adds	r7, #28
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd90      	pop	{r4, r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	200046f4 	.word	0x200046f4

08011b10 <nicUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t nicUpdateMacAddrFilter(NetInterface *interface)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
   error_t error;

   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d015      	beq.n	8011b4c <nicUpdateMacAddrFilter+0x3c>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b24:	695b      	ldr	r3, [r3, #20]
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	4798      	blx	r3

      //Update MAC filter table
      error = interface->nicDriver->updateMacAddrFilter(interface);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b2e:	6a1b      	ldr	r3, [r3, #32]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	4798      	blx	r3
 8011b34:	4603      	mov	r3, r0
 8011b36:	81fb      	strh	r3, [r7, #14]

      //Re-enable interrupts if necessary
      if(interface->configured)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d007      	beq.n	8011b50 <nicUpdateMacAddrFilter+0x40>
      {
         interface->nicDriver->enableIrq(interface);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b44:	691b      	ldr	r3, [r3, #16]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	4798      	blx	r3
 8011b4a:	e001      	b.n	8011b50 <nicUpdateMacAddrFilter+0x40>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8011b4c:	2307      	movs	r3, #7
 8011b4e:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8011b50:	89fb      	ldrh	r3, [r7, #14]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
	...

08011b5c <nicProcessPacket>:
 *   the packet
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length,
   NetRxAncillary *ancillary)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08a      	sub	sp, #40	; 0x28
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
 8011b68:	603b      	str	r3, [r7, #0]
   NicType type;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8011b6a:	f7ef fb99 	bl	80012a0 <osGetSystemTime>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	4b1e      	ldr	r3, [pc, #120]	; (8011bec <nicProcessPacket+0x90>)
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	4413      	add	r3, r2
 8011b76:	4a1d      	ldr	r2, [pc, #116]	; (8011bec <nicProcessPacket+0x90>)
 8011b78:	6113      	str	r3, [r2, #16]

   //Check whether the interface is enabled for operation
   if(interface->configured)
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d02f      	beq.n	8011be2 <nicProcessPacket+0x86>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if (ETH_SUPPORT == ENABLED)
      //Ethernet interface?
      if(type == NIC_TYPE_ETHERNET)
 8011b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d106      	bne.n	8011bac <nicProcessPacket+0x50>
      {
         //Process incoming Ethernet frame
         ethProcessFrame(interface, packet, length, ancillary);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	68b9      	ldr	r1, [r7, #8]
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7f3 fdb1 	bl	800570c <ethProcessFrame>
 8011baa:	e015      	b.n	8011bd8 <nicProcessPacket+0x7c>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //6LoWPAN interface?
      if(type == NIC_TYPE_6LOWPAN)
 8011bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bb0:	2b03      	cmp	r3, #3
 8011bb2:	d111      	bne.n	8011bd8 <nicProcessPacket+0x7c>
      {
         NetBuffer1 buffer;

         //The incoming packet fits in a single chunk
         buffer.chunkCount = 1;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	843b      	strh	r3, [r7, #32]
         buffer.chunk[0].size = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	847b      	strh	r3, [r7, #34]	; 0x22

         //Process incoming IPv6 packet
         ipv6ProcessPacket(interface, (NetBuffer *) &buffer, 0, ancillary);
 8011bca:	f107 0114 	add.w	r1, r7, #20
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f7f8 fc00 	bl	800a3d8 <ipv6ProcessPacket>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bdc:	695b      	ldr	r3, [r3, #20]
 8011bde:	68f8      	ldr	r0, [r7, #12]
 8011be0:	4798      	blx	r3
   }
}
 8011be2:	bf00      	nop
 8011be4:	3728      	adds	r7, #40	; 0x28
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	200046f4 	.word	0x200046f4

08011bf0 <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 8011bf0:	b590      	push	{r4, r7, lr}
 8011bf2:	b087      	sub	sp, #28
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8011bf8:	f7ef fb52 	bl	80012a0 <osGetSystemTime>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	4b28      	ldr	r3, [pc, #160]	; (8011ca0 <nicNotifyLinkChange+0xb0>)
 8011c00:	691b      	ldr	r3, [r3, #16]
 8011c02:	4413      	add	r3, r2
 8011c04:	4a26      	ldr	r2, [pc, #152]	; (8011ca0 <nicNotifyLinkChange+0xb0>)
 8011c06:	6113      	str	r3, [r2, #16]

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fee7 	bl	80119dc <nicGetPhysicalInterface>
 8011c0e:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d004      	beq.n	8011c22 <nicNotifyLinkChange+0x32>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	6938      	ldr	r0, [r7, #16]
 8011c20:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011c22:	2300      	movs	r3, #0
 8011c24:	617b      	str	r3, [r7, #20]
 8011c26:	e02e      	b.n	8011c86 <nicNotifyLinkChange+0x96>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	f44f 6271 	mov.w	r2, #3856	; 0xf10
 8011c2e:	fb02 f303 	mul.w	r3, r2, r3
 8011c32:	3350      	adds	r3, #80	; 0x50
 8011c34:	4a1a      	ldr	r2, [pc, #104]	; (8011ca0 <nicNotifyLinkChange+0xb0>)
 8011c36:	4413      	add	r3, r2
 8011c38:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f7ff fee3 	bl	8011a08 <nicIsParentInterface>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d01b      	beq.n	8011c80 <nicNotifyLinkChange+0x90>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f7ff fed2 	bl	80119f2 <nicGetSwitchPort>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461c      	mov	r4, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7ff fecd 	bl	80119f2 <nicGetSwitchPort>
 8011c58:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 8011c5a:	429c      	cmp	r4, r3
 8011c5c:	d110      	bne.n	8011c80 <nicNotifyLinkChange+0x90>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	665a      	str	r2, [r3, #100]	; 0x64
         virtualInterface->duplexMode = interface->duplexMode;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

         //Update link state
         virtualInterface->linkState = interface->linkState;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	661a      	str	r2, [r3, #96]	; 0x60

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	f7ff f9c4 	bl	8011008 <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	3301      	adds	r3, #1
 8011c84:	617b      	str	r3, [r7, #20]
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d0cd      	beq.n	8011c28 <nicNotifyLinkChange+0x38>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c90:	695b      	ldr	r3, [r3, #20]
 8011c92:	6938      	ldr	r0, [r7, #16]
 8011c94:	4798      	blx	r3
}
 8011c96:	bf00      	nop
 8011c98:	371c      	adds	r7, #28
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd90      	pop	{r4, r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	200046f4 	.word	0x200046f4

08011ca4 <slaacGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains SLAAC settings
 **/

void slaacGetDefaultSettings(SlaacSettings *settings)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
   //Use default interface
   settings->interface = netGetDefaultInterface();
 8011cac:	f7fe fbc0 	bl	8010430 <netGetDefaultInterface>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	601a      	str	r2, [r3, #0]

   //Use the DNS servers specified by the RDNSS option
   settings->manualDnsConfig = FALSE;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	605a      	str	r2, [r3, #4]
   //Link state change event
   settings->linkChangeEvent = NULL;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	609a      	str	r2, [r3, #8]
   //Router Advertisement parsing callback
   settings->parseRouterAdvCallback = NULL;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	60da      	str	r2, [r3, #12]
}
 8011cc8:	bf00      	nop
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <slaacInit>:
 * @param[in] settings SLAAC specific settings
 * @return Error code
 **/

error_t slaacInit(SlaacContext *context, const SlaacSettings *settings)
{
 8011cd0:	b590      	push	{r4, r7, lr}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("Initializing SLAAC...\r\n");
 8011cda:	f7ef f9de 	bl	800109a <osSuspendAllTasks>
 8011cde:	4b19      	ldr	r3, [pc, #100]	; (8011d44 <slaacInit+0x74>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	2217      	movs	r2, #23
 8011ce6:	2101      	movs	r1, #1
 8011ce8:	4817      	ldr	r0, [pc, #92]	; (8011d48 <slaacInit+0x78>)
 8011cea:	f00b fb33 	bl	801d354 <fwrite>
 8011cee:	f7ef f9df 	bl	80010b0 <osResumeAllTasks>

   //Ensure the parameters are valid
   if(context == NULL || settings == NULL)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d002      	beq.n	8011cfe <slaacInit+0x2e>
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <slaacInit+0x32>
      return ERROR_INVALID_PARAMETER;
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e01b      	b.n	8011d3a <slaacInit+0x6a>

   //The SLAAC service must be bound to a valid interface
   if(settings->interface == NULL)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d101      	bne.n	8011d0e <slaacInit+0x3e>
      return ERROR_INVALID_PARAMETER;
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e015      	b.n	8011d3a <slaacInit+0x6a>

   //Point to the underlying network interface
   interface = settings->interface;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	60fb      	str	r3, [r7, #12]

   //Clear the SLAAC context
   osMemset(context, 0, sizeof(SlaacContext));
 8011d14:	2218      	movs	r2, #24
 8011d16:	2100      	movs	r1, #0
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f00b fdd9 	bl	801d8d0 <memset>
   //Save user settings
   context->settings = *settings;
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	4614      	mov	r4, r2
 8011d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //SLAAC operation is currently suspended
   context->running = FALSE;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	611a      	str	r2, [r3, #16]

   //Attach the SLAAC context to the network interface
   interface->slaacContext = context;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	f8c3 2f0c 	str.w	r2, [r3, #3852]	; 0xf0c

   //Successful initialization
   return NO_ERROR;
 8011d38:	2300      	movs	r3, #0
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3714      	adds	r7, #20
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd90      	pop	{r4, r7, pc}
 8011d42:	bf00      	nop
 8011d44:	20000044 	.word	0x20000044
 8011d48:	08025390 	.word	0x08025390

08011d4c <slaacStart>:
 * @param[in] context Pointer to the SLAAC context
 * @return Error code
 **/

error_t slaacStart(SlaacContext *context)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Make sure the SLAAC context is valid
   if(context == NULL)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <slaacStart+0x12>
      return ERROR_INVALID_PARAMETER;
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	e029      	b.n	8011db2 <slaacStart+0x66>

   //Debug message
   TRACE_INFO("Starting SLAAC...\r\n");
 8011d5e:	f7ef f99c 	bl	800109a <osSuspendAllTasks>
 8011d62:	4b16      	ldr	r3, [pc, #88]	; (8011dbc <slaacStart+0x70>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	2213      	movs	r2, #19
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	4814      	ldr	r0, [pc, #80]	; (8011dc0 <slaacStart+0x74>)
 8011d6e:	f00b faf1 	bl	801d354 <fwrite>
 8011d72:	f7ef f99d 	bl	80010b0 <osResumeAllTasks>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8011d76:	4813      	ldr	r0, [pc, #76]	; (8011dc4 <slaacStart+0x78>)
 8011d78:	f7ef fa74 	bl	8001264 <osAcquireMutex>

   //Point to the underlying network interface
   interface = context->settings.interface;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	60fb      	str	r3, [r7, #12]

   //Clear the list of IPv6 addresses
   ipv6FlushAddrList(interface);
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f7fa f844 	bl	800be10 <ipv6FlushAddrList>

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d102      	bne.n	8011d96 <slaacStart+0x4a>
   {
      //Clear the list of DNS servers
      ipv6FlushDnsServerList(interface);
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f7fa f8d9 	bl	800bf48 <ipv6FlushDnsServerList>
   }

   //Check if the link is up?
   if(interface->linkState)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d002      	beq.n	8011da4 <slaacStart+0x58>
   {
      //A link-local address is formed by combining the well-known
      //link-local prefix fe80::/10 with the interface identifier
      slaacGenerateLinkLocalAddr(context);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fa30 	bl	8012204 <slaacGenerateLinkLocalAddr>
   }

   //Start SLAAC operation
   context->running = TRUE;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	611a      	str	r2, [r3, #16]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8011daa:	4806      	ldr	r0, [pc, #24]	; (8011dc4 <slaacStart+0x78>)
 8011dac:	f7ef fa69 	bl	8001282 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20000044 	.word	0x20000044
 8011dc0:	080253a8 	.word	0x080253a8
 8011dc4:	200046f4 	.word	0x200046f4

08011dc8 <slaacLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] context Pointer to the SLAAC context
 **/

void slaacLinkChangeEvent(SlaacContext *context)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Make sure the SLAAC service has been properly instantiated
   if(context == NULL)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d026      	beq.n	8011e24 <slaacLinkChangeEvent+0x5c>
      return;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	60fb      	str	r3, [r7, #12]

   //Check whether SLAAC is enabled
   if(context->running)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	691b      	ldr	r3, [r3, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00d      	beq.n	8011e00 <slaacLinkChangeEvent+0x38>
   {
      //Automatic DNS server configuration?
      if(!context->settings.manualDnsConfig)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d102      	bne.n	8011df2 <slaacLinkChangeEvent+0x2a>
      {
         //Clear the list of DNS servers
         ipv6FlushDnsServerList(interface);
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f7fa f8ab 	bl	800bf48 <ipv6FlushDnsServerList>
      }

      //Link-up event?
      if(interface->linkState)
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d002      	beq.n	8011e00 <slaacLinkChangeEvent+0x38>
      {
         //A link-local address is formed by combining the well-known
         //link-local prefix fe80::/10 with the interface identifier
         slaacGenerateLinkLocalAddr(context);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 fa02 	bl	8012204 <slaacGenerateLinkLocalAddr>
      }
   }

   //Any registered callback?
   if(context->settings.linkChangeEvent != NULL)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00e      	beq.n	8011e26 <slaacLinkChangeEvent+0x5e>
   {
      //Release exclusive access
      osReleaseMutex(&netMutex);
 8011e08:	4808      	ldr	r0, [pc, #32]	; (8011e2c <slaacLinkChangeEvent+0x64>)
 8011e0a:	f7ef fa3a 	bl	8001282 <osReleaseMutex>
      //Invoke user callback function
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011e16:	68f9      	ldr	r1, [r7, #12]
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8011e1c:	4803      	ldr	r0, [pc, #12]	; (8011e2c <slaacLinkChangeEvent+0x64>)
 8011e1e:	f7ef fa21 	bl	8001264 <osAcquireMutex>
 8011e22:	e000      	b.n	8011e26 <slaacLinkChangeEvent+0x5e>
      return;
 8011e24:	bf00      	nop
   }
}
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	200046f4 	.word	0x200046f4

08011e30 <slaacParseRouterAdv>:
 * @param[in] length Length of the message, in bytes
 **/

void slaacParseRouterAdv(SlaacContext *context,
   NdpRouterAdvMessage *message, size_t length)
{
 8011e30:	b590      	push	{r4, r7, lr}
 8011e32:	b08b      	sub	sp, #44	; 0x2c
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
   NetInterface *interface;
   NdpPrefixInfoOption *prefixInfoOption;
   NdpRdnssOption *rdnssOption;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	61fb      	str	r3, [r7, #28]

   //Check whether SLAAC is enabled
   if(!context->running)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d079      	beq.n	8011f3e <slaacParseRouterAdv+0x10e>
      return;

   //Make sure that a valid link-local address has been assigned to the interface
   if(ipv6GetLinkLocalAddrState(interface) != IPV6_ADDR_STATE_PREFERRED)
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	f893 3664 	ldrb.w	r3, [r3, #1636]	; 0x664
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d176      	bne.n	8011f42 <slaacParseRouterAdv+0x112>
      return;

   //Calculate the length of the Options field
   length -= sizeof(NdpRouterAdvMessage);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	3b10      	subs	r3, #16
 8011e58:	607b      	str	r3, [r7, #4]

   //This flag tracks changes in IPv6 configuration
   context->configUpdated = FALSE;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	615a      	str	r2, [r3, #20]

   //Point to the beginning of the Options field
   n = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	623b      	str	r3, [r7, #32]

   //Parse Options field
   while(1)
   {
      //Search the Options field for any Prefix Information options
      prefixInfoOption = ndpGetOption(message->options + n,
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	f103 0210 	add.w	r2, r3, #16
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	18d0      	adds	r0, r2, r3
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	6a3b      	ldr	r3, [r7, #32]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	2203      	movs	r2, #3
 8011e76:	4619      	mov	r1, r3
 8011e78:	f7fe f9ac 	bl	80101d4 <ndpGetOption>
 8011e7c:	61b8      	str	r0, [r7, #24]
         length - n, NDP_OPT_PREFIX_INFORMATION);

      //No more option of the specified type?
      if(prefixInfoOption == NULL)
 8011e7e:	69bb      	ldr	r3, [r7, #24]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d010      	beq.n	8011ea6 <slaacParseRouterAdv+0x76>
         break;

      //Parse the Prefix Information Option
      slaacParsePrefixInfoOption(context, prefixInfoOption);
 8011e84:	69b9      	ldr	r1, [r7, #24]
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f000 f860 	bl	8011f4c <slaacParsePrefixInfoOption>

      //Retrieve the offset to the current position
      n = (uint8_t *) prefixInfoOption - message->options;
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	3310      	adds	r3, #16
 8011e90:	69ba      	ldr	r2, [r7, #24]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	623b      	str	r3, [r7, #32]
      //Jump to the next option
      n += prefixInfoOption->length * 8;
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	785b      	ldrb	r3, [r3, #1]
 8011e9a:	00db      	lsls	r3, r3, #3
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	623b      	str	r3, [r7, #32]
      prefixInfoOption = ndpGetOption(message->options + n,
 8011ea4:	e7de      	b.n	8011e64 <slaacParseRouterAdv+0x34>
         break;
 8011ea6:	bf00      	nop
   }

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d134      	bne.n	8011f1a <slaacParseRouterAdv+0xea>
   {
      //Search for the Recursive DNS Server (RDNSS) option
      rdnssOption = ndpGetOption(message->options, length,
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	3310      	adds	r3, #16
 8011eb4:	2219      	movs	r2, #25
 8011eb6:	6879      	ldr	r1, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fe f98b 	bl	80101d4 <ndpGetOption>
 8011ebe:	6178      	str	r0, [r7, #20]
         NDP_OPT_RECURSIVE_DNS_SERVER);

      //RDNSS option found?
      if(rdnssOption != NULL && rdnssOption->length >= 1)
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d029      	beq.n	8011f1a <slaacParseRouterAdv+0xea>
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	785b      	ldrb	r3, [r3, #1]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d025      	beq.n	8011f1a <slaacParseRouterAdv+0xea>
      {
         //Retrieve the number of addresses
         n = (rdnssOption->length - 1) / 2;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	785b      	ldrb	r3, [r3, #1]
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	0fda      	lsrs	r2, r3, #31
 8011ed6:	4413      	add	r3, r2
 8011ed8:	105b      	asrs	r3, r3, #1
 8011eda:	623b      	str	r3, [r7, #32]

         //Loop through the list of DNS servers
         for(i = 0; i < n && i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 8011edc:	2300      	movs	r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
 8011ee0:	e014      	b.n	8011f0c <slaacParseRouterAdv+0xdc>
         {
            //Record DNS server address
            interface->ipv6Context.dnsServerList[i] = rdnssOption->address[i];
 8011ee2:	69fa      	ldr	r2, [r7, #28]
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	011b      	lsls	r3, r3, #4
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8011eee:	6979      	ldr	r1, [r7, #20]
 8011ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef2:	0112      	lsls	r2, r2, #4
 8011ef4:	440a      	add	r2, r1
 8011ef6:	3208      	adds	r2, #8
 8011ef8:	1d1c      	adds	r4, r3, #4
 8011efa:	4613      	mov	r3, r2
 8011efc:	6818      	ldr	r0, [r3, #0]
 8011efe:	6859      	ldr	r1, [r3, #4]
 8011f00:	689a      	ldr	r2, [r3, #8]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         for(i = 0; i < n && i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 8011f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f08:	3301      	adds	r3, #1
 8011f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f0e:	6a3b      	ldr	r3, [r7, #32]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d202      	bcs.n	8011f1a <slaacParseRouterAdv+0xea>
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d9e3      	bls.n	8011ee2 <slaacParseRouterAdv+0xb2>
         }
      }
   }

   //Any registered callback?
   if(context->settings.parseRouterAdvCallback != NULL)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d005      	beq.n	8011f2e <slaacParseRouterAdv+0xfe>
   {
      //Invoke user callback function
      context->settings.parseRouterAdvCallback(context, message, length);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	68b9      	ldr	r1, [r7, #8]
 8011f2a:	68f8      	ldr	r0, [r7, #12]
 8011f2c:	4798      	blx	r3
   }

   //Check whether a new IPv6 address has been assigned to the interface
   if(context->configUpdated)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	695b      	ldr	r3, [r3, #20]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d006      	beq.n	8011f44 <slaacParseRouterAdv+0x114>
   {
      //Dump current IPv6 configuration for debugging purpose
      slaacDumpConfig(context);
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 f9b2 	bl	80122a0 <slaacDumpConfig>
 8011f3c:	e002      	b.n	8011f44 <slaacParseRouterAdv+0x114>
      return;
 8011f3e:	bf00      	nop
 8011f40:	e000      	b.n	8011f44 <slaacParseRouterAdv+0x114>
      return;
 8011f42:	bf00      	nop
   }
}
 8011f44:	372c      	adds	r7, #44	; 0x2c
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd90      	pop	{r4, r7, pc}
	...

08011f4c <slaacParsePrefixInfoOption>:
 * @param[in] option Pointer to the Prefix Information option
 **/

void slaacParsePrefixInfoOption(SlaacContext *context,
   NdpPrefixInfoOption *option)
{
 8011f4c:	b590      	push	{r4, r7, lr}
 8011f4e:	b095      	sub	sp, #84	; 0x54
 8011f50:	af04      	add	r7, sp, #16
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
   NetInterface *logicalInterface;
   Ipv6AddrEntry *entry;
   Ipv6Addr addr;

   //Make sure the Prefix Information option is valid
   if(option == NULL || option->length != 4)
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 813e 	beq.w	80121da <slaacParsePrefixInfoOption+0x28e>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	785b      	ldrb	r3, [r3, #1]
 8011f62:	2b04      	cmp	r3, #4
 8011f64:	f040 8139 	bne.w	80121da <slaacParsePrefixInfoOption+0x28e>
      return;

   //If the Autonomous flag is not set, silently ignore the Prefix
   //Information option
   if(!option->a)
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	78db      	ldrb	r3, [r3, #3]
 8011f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f000 8133 	beq.w	80121de <slaacParsePrefixInfoOption+0x292>
      return;

   //If the prefix is the link-local prefix, silently ignore the
   //Prefix Information option
   if(ipv6CompPrefix(&option->prefix, &IPV6_LINK_LOCAL_ADDR_PREFIX, 10))
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	3310      	adds	r3, #16
 8011f7c:	220a      	movs	r2, #10
 8011f7e:	499e      	ldr	r1, [pc, #632]	; (80121f8 <slaacParsePrefixInfoOption+0x2ac>)
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fa fa67 	bl	800c454 <ipv6CompPrefix>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	f040 812a 	bne.w	80121e2 <slaacParsePrefixInfoOption+0x296>
      return;

   //Check whether the valid lifetime is zero
   if(ntohl(option->validLifetime) == 0)
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ee ffac 	bl	8000ef0 <swapInt32>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f000 8123 	beq.w	80121e6 <slaacParsePrefixInfoOption+0x29a>
      return;

   //If the preferred lifetime is greater than the valid lifetime,
   //silently ignore the Prefix Information option
   if(ntohl(option->preferredLifetime) > ntohl(option->validLifetime))
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ee ffa3 	bl	8000ef0 <swapInt32>
 8011faa:	4604      	mov	r4, r0
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7ee ff9d 	bl	8000ef0 <swapInt32>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	429c      	cmp	r4, r3
 8011fba:	f200 8116 	bhi.w	80121ea <slaacParsePrefixInfoOption+0x29e>
      return;

   //If the sum of the prefix length and interface identifier length does
   //not equal 128 bits, the Prefix Information option must be ignored
   if(option->prefixLength != 64)
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	789b      	ldrb	r3, [r3, #2]
 8011fc2:	2b40      	cmp	r3, #64	; 0x40
 8011fc4:	f040 8113 	bne.w	80121ee <slaacParsePrefixInfoOption+0x2a2>
      return;

   //Get current time
   time = osGetSystemTime();
 8011fc8:	f7ef f96a 	bl	80012a0 <osGetSystemTime>
 8011fcc:	62b8      	str	r0, [r7, #40]	; 0x28

   //Point to the underlying network interface
   interface = context->settings.interface;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	627b      	str	r3, [r7, #36]	; 0x24

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8011fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fd6:	f7ff fcf6 	bl	80119c6 <nicGetLogicalInterface>
 8011fda:	6238      	str	r0, [r7, #32]

   //Form an address by combining the advertised prefix with the interface
   //identifier
   addr.w[0] = option->prefix.w[0];
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	8a1b      	ldrh	r3, [r3, #16]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	81bb      	strh	r3, [r7, #12]
   addr.w[1] = option->prefix.w[1];
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	8a5b      	ldrh	r3, [r3, #18]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	81fb      	strh	r3, [r7, #14]
   addr.w[2] = option->prefix.w[2];
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	8a9b      	ldrh	r3, [r3, #20]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	823b      	strh	r3, [r7, #16]
   addr.w[3] = option->prefix.w[3];
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	8adb      	ldrh	r3, [r3, #22]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	827b      	strh	r3, [r7, #18]
   addr.w[4] = logicalInterface->eui64.w[0];
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	891b      	ldrh	r3, [r3, #8]
 8012000:	82bb      	strh	r3, [r7, #20]
   addr.w[5] = logicalInterface->eui64.w[1];
 8012002:	6a3b      	ldr	r3, [r7, #32]
 8012004:	895b      	ldrh	r3, [r3, #10]
 8012006:	82fb      	strh	r3, [r7, #22]
   addr.w[6] = logicalInterface->eui64.w[2];
 8012008:	6a3b      	ldr	r3, [r7, #32]
 801200a:	899b      	ldrh	r3, [r3, #12]
 801200c:	833b      	strh	r3, [r7, #24]
   addr.w[7] = logicalInterface->eui64.w[3];
 801200e:	6a3b      	ldr	r3, [r7, #32]
 8012010:	89db      	ldrh	r3, [r3, #14]
 8012012:	837b      	strh	r3, [r7, #26]

   //Convert Valid Lifetime to host byte order
   validLifetime = ntohl(option->validLifetime);
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	4618      	mov	r0, r3
 801201a:	f7ee ff69 	bl	8000ef0 <swapInt32>
 801201e:	6378      	str	r0, [r7, #52]	; 0x34

   //Check the valid lifetime
   if(validLifetime != NDP_INFINITE_LIFETIME)
 8012020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012026:	d00e      	beq.n	8012046 <slaacParsePrefixInfoOption+0xfa>
   {
      //The length of time in seconds that the prefix is valid for the
      //purpose of on-link determination
      if(validLifetime < (MAX_DELAY / 1000))
 8012028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202a:	4a74      	ldr	r2, [pc, #464]	; (80121fc <slaacParsePrefixInfoOption+0x2b0>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d806      	bhi.n	801203e <slaacParsePrefixInfoOption+0xf2>
         validLifetime *= 1000;
 8012030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012036:	fb02 f303 	mul.w	r3, r2, r3
 801203a:	637b      	str	r3, [r7, #52]	; 0x34
 801203c:	e006      	b.n	801204c <slaacParsePrefixInfoOption+0x100>
      else
         validLifetime = MAX_DELAY;
 801203e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012042:	637b      	str	r3, [r7, #52]	; 0x34
 8012044:	e002      	b.n	801204c <slaacParsePrefixInfoOption+0x100>
   }
   else
   {
      //A value of all one bits (0xffffffff) represents infinity
      validLifetime = INFINITE_DELAY;
 8012046:	f04f 33ff 	mov.w	r3, #4294967295
 801204a:	637b      	str	r3, [r7, #52]	; 0x34
   }

   //Convert Preferred Lifetime to host byte order
   preferredLifetime = ntohl(option->preferredLifetime);
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	4618      	mov	r0, r3
 8012052:	f7ee ff4d 	bl	8000ef0 <swapInt32>
 8012056:	6338      	str	r0, [r7, #48]	; 0x30

   //Check the preferred lifetime
   if(preferredLifetime != NDP_INFINITE_LIFETIME)
 8012058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801205e:	d00e      	beq.n	801207e <slaacParsePrefixInfoOption+0x132>
   {
      //The length of time in seconds that addresses generated from the
      //prefix via stateless address autoconfiguration remain preferred
      if(preferredLifetime < (MAX_DELAY / 1000))
 8012060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012062:	4a66      	ldr	r2, [pc, #408]	; (80121fc <slaacParsePrefixInfoOption+0x2b0>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d806      	bhi.n	8012076 <slaacParsePrefixInfoOption+0x12a>
         preferredLifetime *= 1000;
 8012068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801206e:	fb02 f303 	mul.w	r3, r2, r3
 8012072:	633b      	str	r3, [r7, #48]	; 0x30
 8012074:	e006      	b.n	8012084 <slaacParsePrefixInfoOption+0x138>
      else
         preferredLifetime = MAX_DELAY;
 8012076:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801207a:	633b      	str	r3, [r7, #48]	; 0x30
 801207c:	e002      	b.n	8012084 <slaacParsePrefixInfoOption+0x138>
   }
   else
   {
      //A value of all one bits (0xffffffff) represents infinity
      preferredLifetime = INFINITE_DELAY;
 801207e:	f04f 33ff 	mov.w	r3, #4294967295
 8012082:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //This flag will be set if the advertised prefix matches an address
   //assigned to the interface
   found = FALSE;
 8012084:	2300      	movs	r3, #0
 8012086:	63bb      	str	r3, [r7, #56]	; 0x38

   //Loop through the list of IPv6 addresses
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 8012088:	2301      	movs	r3, #1
 801208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801208c:	e062      	b.n	8012154 <slaacParsePrefixInfoOption+0x208>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];
 801208e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012090:	4613      	mov	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	4413      	add	r3, r2
 8012096:	011b      	lsls	r3, r3, #4
 8012098:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 801209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801209e:	4413      	add	r3, r2
 80120a0:	3304      	adds	r3, #4
 80120a2:	61fb      	str	r3, [r7, #28]

      //Check whether the advertised prefix is equal to the prefix of an
      //address configured by stateless autoconfiguration in the list
      if(ipv6CompPrefix(&entry->addr, &option->prefix, option->prefixLength))
 80120a4:	69f8      	ldr	r0, [r7, #28]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	f103 0110 	add.w	r1, r3, #16
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	789b      	ldrb	r3, [r3, #2]
 80120b0:	461a      	mov	r2, r3
 80120b2:	f7fa f9cf 	bl	800c454 <ipv6CompPrefix>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d048      	beq.n	801214e <slaacParsePrefixInfoOption+0x202>
      {
         //Valid address?
         if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	7c1b      	ldrb	r3, [r3, #16]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d003      	beq.n	80120cc <slaacParsePrefixInfoOption+0x180>
            entry->state == IPV6_ADDR_STATE_DEPRECATED)
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	7c1b      	ldrb	r3, [r3, #16]
         if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 80120c8:	2b03      	cmp	r3, #3
 80120ca:	d138      	bne.n	801213e <slaacParsePrefixInfoOption+0x1f2>
         {
            //Set flag
            found = TRUE;
 80120cc:	2301      	movs	r3, #1
 80120ce:	63bb      	str	r3, [r7, #56]	; 0x38

            //The preferred lifetime of the address is reset to the Preferred
            //Lifetime in the received advertisement
            entry->preferredLifetime = preferredLifetime;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120d4:	61da      	str	r2, [r3, #28]

            //Compute the remaining time to the valid lifetime expiration
            //of the previously autoconfigured address
            if(timeCompare(time, entry->timestamp + entry->validLifetime) < 0)
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	699b      	ldr	r3, [r3, #24]
 80120de:	4413      	add	r3, r2
 80120e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120e2:	1ad3      	subs	r3, r2, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	da08      	bge.n	80120fa <slaacParsePrefixInfoOption+0x1ae>
               remainingLifetime = entry->timestamp + entry->validLifetime - time;
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	441a      	add	r2, r3
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120f8:	e001      	b.n	80120fe <slaacParsePrefixInfoOption+0x1b2>
            else
               remainingLifetime = 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	62fb      	str	r3, [r7, #44]	; 0x2c

            //The specific action to perform for the valid lifetime of the
            //address depends on the Valid Lifetime in the received Router
            //Advertisement and the remaining time
            if(validLifetime > SLAAC_LIFETIME_2_HOURS ||
 80120fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012100:	4a3f      	ldr	r2, [pc, #252]	; (8012200 <slaacParsePrefixInfoOption+0x2b4>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d803      	bhi.n	801210e <slaacParsePrefixInfoOption+0x1c2>
 8012106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210a:	429a      	cmp	r2, r3
 801210c:	d909      	bls.n	8012122 <slaacParsePrefixInfoOption+0x1d6>
               validLifetime > remainingLifetime)
            {
               //If the received Valid Lifetime is greater than 2 hours or
               //greater than remaining lifetime, set the valid lifetime of
               //the corresponding address to the advertised Valid Lifetime
               entry->validLifetime = validLifetime;
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012112:	619a      	str	r2, [r3, #24]

               //Save current time
               entry->timestamp = time;
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012118:	625a      	str	r2, [r3, #36]	; 0x24
               //Update the state of the IPv6 address
               entry->state = IPV6_ADDR_STATE_PREFERRED;
 801211a:	69fb      	ldr	r3, [r7, #28]
 801211c:	2202      	movs	r2, #2
 801211e:	741a      	strb	r2, [r3, #16]
            if(validLifetime > SLAAC_LIFETIME_2_HOURS ||
 8012120:	e014      	b.n	801214c <slaacParsePrefixInfoOption+0x200>
            }
            else if(remainingLifetime <= SLAAC_LIFETIME_2_HOURS)
 8012122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012124:	4a36      	ldr	r2, [pc, #216]	; (8012200 <slaacParsePrefixInfoOption+0x2b4>)
 8012126:	4293      	cmp	r3, r2
 8012128:	d910      	bls.n	801214c <slaacParsePrefixInfoOption+0x200>
            }
            else
            {
               //Otherwise, reset the valid lifetime of the corresponding
               //address to 2 hours
               entry->validLifetime = SLAAC_LIFETIME_2_HOURS;
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	4a34      	ldr	r2, [pc, #208]	; (8012200 <slaacParsePrefixInfoOption+0x2b4>)
 801212e:	619a      	str	r2, [r3, #24]

               //Save current time
               entry->timestamp = time;
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012134:	625a      	str	r2, [r3, #36]	; 0x24
               //Update the state of the IPv6 address
               entry->state = IPV6_ADDR_STATE_PREFERRED;
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	2202      	movs	r2, #2
 801213a:	741a      	strb	r2, [r3, #16]
            if(validLifetime > SLAAC_LIFETIME_2_HOURS ||
 801213c:	e006      	b.n	801214c <slaacParsePrefixInfoOption+0x200>
            }
         }
         //Tentative address?
         else if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	7c1b      	ldrb	r3, [r3, #16]
 8012142:	2b01      	cmp	r3, #1
 8012144:	d103      	bne.n	801214e <slaacParsePrefixInfoOption+0x202>
         {
            //Do not update the preferred and valid lifetimes of the address
            //when Duplicate Address Detection is being performed
            found = TRUE;
 8012146:	2301      	movs	r3, #1
 8012148:	63bb      	str	r3, [r7, #56]	; 0x38
 801214a:	e000      	b.n	801214e <slaacParsePrefixInfoOption+0x202>
            if(validLifetime > SLAAC_LIFETIME_2_HOURS ||
 801214c:	bf00      	nop
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 801214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012150:	3301      	adds	r3, #1
 8012152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012156:	2b02      	cmp	r3, #2
 8012158:	d999      	bls.n	801208e <slaacParsePrefixInfoOption+0x142>
         }
      }
   }

   //The IPv6 address is not yet in the list?
   if(!found)
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	2b00      	cmp	r3, #0
 801215e:	d147      	bne.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
   {
      //Loop through the list of IPv6 addresses
      for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 8012160:	2301      	movs	r3, #1
 8012162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012164:	e035      	b.n	80121d2 <slaacParsePrefixInfoOption+0x286>
      {
         //Point to the current entry
         entry = &interface->ipv6Context.addrList[i];
 8012166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012168:	4613      	mov	r3, r2
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	4413      	add	r3, r2
 801216e:	011b      	lsls	r3, r3, #4
 8012170:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8012174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012176:	4413      	add	r3, r2
 8012178:	3304      	adds	r3, #4
 801217a:	61fb      	str	r3, [r7, #28]

         //Check the state of the IPv6 address
         if(entry->state == IPV6_ADDR_STATE_INVALID)
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	7c1b      	ldrb	r3, [r3, #16]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d123      	bne.n	80121cc <slaacParsePrefixInfoOption+0x280>
         {
            //If an address is formed successfully and the address is not yet
            //in the list, the host adds it to the list of addresses assigned
            //to the interface, initializing its preferred and valid lifetime
            //values from the Prefix Information option
            if(interface->ndpContext.dupAddrDetectTransmits > 0)
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00d      	beq.n	80121aa <slaacParsePrefixInfoOption+0x25e>
            {
               //Use the IPv6 address as a tentative address
               ipv6SetAddr(interface, i, &addr, IPV6_ADDR_STATE_TENTATIVE,
 801218e:	f107 020c 	add.w	r2, r7, #12
 8012192:	2300      	movs	r3, #0
 8012194:	9302      	str	r3, [sp, #8]
 8012196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	2301      	movs	r3, #1
 80121a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121a4:	f7f9 fc06 	bl	800b9b4 <ipv6SetAddr>
 80121a8:	e00c      	b.n	80121c4 <slaacParsePrefixInfoOption+0x278>
                  validLifetime, preferredLifetime, FALSE);
            }
            else
            {
               //The use of the IPv6 address is now unrestricted
               ipv6SetAddr(interface, i, &addr, IPV6_ADDR_STATE_PREFERRED,
 80121aa:	f107 020c 	add.w	r2, r7, #12
 80121ae:	2300      	movs	r3, #0
 80121b0:	9302      	str	r3, [sp, #8]
 80121b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b4:	9301      	str	r3, [sp, #4]
 80121b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	2302      	movs	r3, #2
 80121bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121c0:	f7f9 fbf8 	bl	800b9b4 <ipv6SetAddr>
                  validLifetime, preferredLifetime, FALSE);
            }

            //A new IPv6 address has just been assigned to the interface
            context->configUpdated = TRUE;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2201      	movs	r2, #1
 80121c8:	615a      	str	r2, [r3, #20]
            //We are done
            break;
 80121ca:	e011      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 80121cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ce:	3301      	adds	r3, #1
 80121d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d9c6      	bls.n	8012166 <slaacParsePrefixInfoOption+0x21a>
 80121d8:	e00a      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121da:	bf00      	nop
 80121dc:	e008      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121de:	bf00      	nop
 80121e0:	e006      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121e2:	bf00      	nop
 80121e4:	e004      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121e6:	bf00      	nop
 80121e8:	e002      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121ea:	bf00      	nop
 80121ec:	e000      	b.n	80121f0 <slaacParsePrefixInfoOption+0x2a4>
      return;
 80121ee:	bf00      	nop
         }
      }
   }
}
 80121f0:	3744      	adds	r7, #68	; 0x44
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd90      	pop	{r4, r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08024c6c 	.word	0x08024c6c
 80121fc:	0020c49a 	.word	0x0020c49a
 8012200:	006ddd00 	.word	0x006ddd00

08012204 <slaacGenerateLinkLocalAddr>:
 * @param[in] context Pointer to the SLAAC context
 * @return Error code
 **/

error_t slaacGenerateLinkLocalAddr(SlaacContext *context)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b08e      	sub	sp, #56	; 0x38
 8012208:	af04      	add	r7, sp, #16
 801220a:	6078      	str	r0, [r7, #4]
   NetInterface *interface;
   NetInterface *logicalInterface;
   Ipv6Addr addr;

   //Point to the underlying network interface
   interface = context->settings.interface;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	623b      	str	r3, [r7, #32]

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8012212:	6a38      	ldr	r0, [r7, #32]
 8012214:	f7ff fbd7 	bl	80119c6 <nicGetLogicalInterface>
 8012218:	61f8      	str	r0, [r7, #28]

   //Check whether a link-local address has been manually assigned
   if(interface->ipv6Context.addrList[0].state != IPV6_ADDR_STATE_INVALID &&
 801221a:	6a3b      	ldr	r3, [r7, #32]
 801221c:	f893 3664 	ldrb.w	r3, [r3, #1636]	; 0x664
 8012220:	2b00      	cmp	r3, #0
 8012222:	d007      	beq.n	8012234 <slaacGenerateLinkLocalAddr+0x30>
      interface->ipv6Context.addrList[0].permanent)
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
   if(interface->ipv6Context.addrList[0].state != IPV6_ADDR_STATE_INVALID &&
 801222a:	2b00      	cmp	r3, #0
 801222c:	d002      	beq.n	8012234 <slaacGenerateLinkLocalAddr+0x30>
   {
      //Keep using the current link-local address
      error = NO_ERROR;
 801222e:	2300      	movs	r3, #0
 8012230:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012232:	e02f      	b.n	8012294 <slaacGenerateLinkLocalAddr+0x90>
   }
   else
   {
      //A link-local address is formed by combining the well-known
      //link-local prefix fe80::/10 with the interface identifier
      ipv6GenerateLinkLocalAddr(&logicalInterface->eui64, &addr);
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	3308      	adds	r3, #8
 8012238:	f107 020c 	add.w	r2, r7, #12
 801223c:	4611      	mov	r1, r2
 801223e:	4618      	mov	r0, r3
 8012240:	f7fa fa3f 	bl	800c6c2 <ipv6GenerateLinkLocalAddr>

      //Check whether Duplicate Address Detection should be performed
      if(interface->ndpContext.dupAddrDetectTransmits > 0)
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 801224a:	2b00      	cmp	r3, #0
 801224c:	d011      	beq.n	8012272 <slaacGenerateLinkLocalAddr+0x6e>
      {
         //Use the link-local address as a tentative address
         error = ipv6SetAddr(interface, 0, &addr, IPV6_ADDR_STATE_TENTATIVE,
 801224e:	f107 020c 	add.w	r2, r7, #12
 8012252:	2300      	movs	r3, #0
 8012254:	9302      	str	r3, [sp, #8]
 8012256:	f04f 33ff 	mov.w	r3, #4294967295
 801225a:	9301      	str	r3, [sp, #4]
 801225c:	f04f 33ff 	mov.w	r3, #4294967295
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	2301      	movs	r3, #1
 8012264:	2100      	movs	r1, #0
 8012266:	6a38      	ldr	r0, [r7, #32]
 8012268:	f7f9 fba4 	bl	800b9b4 <ipv6SetAddr>
 801226c:	4603      	mov	r3, r0
 801226e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012270:	e010      	b.n	8012294 <slaacGenerateLinkLocalAddr+0x90>
            NDP_INFINITE_LIFETIME, NDP_INFINITE_LIFETIME, FALSE);
      }
      else
      {
         //The use of the link-local address is now unrestricted
         error = ipv6SetAddr(interface, 0, &addr, IPV6_ADDR_STATE_PREFERRED,
 8012272:	f107 020c 	add.w	r2, r7, #12
 8012276:	2300      	movs	r3, #0
 8012278:	9302      	str	r3, [sp, #8]
 801227a:	f04f 33ff 	mov.w	r3, #4294967295
 801227e:	9301      	str	r3, [sp, #4]
 8012280:	f04f 33ff 	mov.w	r3, #4294967295
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	2302      	movs	r3, #2
 8012288:	2100      	movs	r1, #0
 801228a:	6a38      	ldr	r0, [r7, #32]
 801228c:	f7f9 fb92 	bl	800b9b4 <ipv6SetAddr>
 8012290:	4603      	mov	r3, r0
 8012292:	84fb      	strh	r3, [r7, #38]	; 0x26
            NDP_INFINITE_LIFETIME, NDP_INFINITE_LIFETIME, FALSE);
      }
   }

   //Return status code
   return error;
 8012294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8012296:	4618      	mov	r0, r3
 8012298:	3728      	adds	r7, #40	; 0x28
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <slaacDumpConfig>:
 * @brief Dump IPv6 configuration for debugging purpose
 * @param[in] context Pointer to the SLAAC context
 **/

void slaacDumpConfig(SlaacContext *context)
{
 80122a0:	b5b0      	push	{r4, r5, r7, lr}
 80122a2:	b088      	sub	sp, #32
 80122a4:	af02      	add	r7, sp, #8
 80122a6:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *interface;
   Ipv6Context *ipv6Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	613b      	str	r3, [r7, #16]
   //Point to the IPv6 context
   ipv6Context = &interface->ipv6Context;
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80122b4:	60fb      	str	r3, [r7, #12]

   //Debug message
   TRACE_INFO("\r\n");
 80122b6:	f7ee fef0 	bl	800109a <osSuspendAllTasks>
 80122ba:	4b6c      	ldr	r3, [pc, #432]	; (801246c <slaacDumpConfig+0x1cc>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	68db      	ldr	r3, [r3, #12]
 80122c0:	2202      	movs	r2, #2
 80122c2:	2101      	movs	r1, #1
 80122c4:	486a      	ldr	r0, [pc, #424]	; (8012470 <slaacDumpConfig+0x1d0>)
 80122c6:	f00b f845 	bl	801d354 <fwrite>
 80122ca:	f7ee fef1 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("SLAAC configuration:\r\n");
 80122ce:	f7ee fee4 	bl	800109a <osSuspendAllTasks>
 80122d2:	4b66      	ldr	r3, [pc, #408]	; (801246c <slaacDumpConfig+0x1cc>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	2216      	movs	r2, #22
 80122da:	2101      	movs	r1, #1
 80122dc:	4865      	ldr	r0, [pc, #404]	; (8012474 <slaacDumpConfig+0x1d4>)
 80122de:	f00b f839 	bl	801d354 <fwrite>
 80122e2:	f7ee fee5 	bl	80010b0 <osResumeAllTasks>

   //Link-local address
   TRACE_INFO("  Link-local Address = %s\r\n",
 80122e6:	f7ee fed8 	bl	800109a <osSuspendAllTasks>
 80122ea:	4b60      	ldr	r3, [pc, #384]	; (801246c <slaacDumpConfig+0x1cc>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	68dc      	ldr	r4, [r3, #12]
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	3310      	adds	r3, #16
 80122f4:	2100      	movs	r1, #0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f8 fefe 	bl	800b0f8 <ipv6AddrToString>
 80122fc:	4603      	mov	r3, r0
 80122fe:	461a      	mov	r2, r3
 8012300:	495d      	ldr	r1, [pc, #372]	; (8012478 <slaacDumpConfig+0x1d8>)
 8012302:	4620      	mov	r0, r4
 8012304:	f00a fe3e 	bl	801cf84 <fprintf>
 8012308:	f7ee fed2 	bl	80010b0 <osResumeAllTasks>
      ipv6AddrToString(&ipv6Context->addrList[0].addr, NULL));

   //Global addresses
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 801230c:	2301      	movs	r3, #1
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	e01b      	b.n	801234a <slaacDumpConfig+0xaa>
   {
      TRACE_INFO("  Global Address %u = %s\r\n", i,
 8012312:	f7ee fec2 	bl	800109a <osSuspendAllTasks>
 8012316:	4b55      	ldr	r3, [pc, #340]	; (801246c <slaacDumpConfig+0x1cc>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	68dc      	ldr	r4, [r3, #12]
 801231c:	697a      	ldr	r2, [r7, #20]
 801231e:	4613      	mov	r3, r2
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	4413      	add	r3, r2
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	3310      	adds	r3, #16
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	4413      	add	r3, r2
 801232c:	2100      	movs	r1, #0
 801232e:	4618      	mov	r0, r3
 8012330:	f7f8 fee2 	bl	800b0f8 <ipv6AddrToString>
 8012334:	4603      	mov	r3, r0
 8012336:	697a      	ldr	r2, [r7, #20]
 8012338:	4950      	ldr	r1, [pc, #320]	; (801247c <slaacDumpConfig+0x1dc>)
 801233a:	4620      	mov	r0, r4
 801233c:	f00a fe22 	bl	801cf84 <fprintf>
 8012340:	f7ee feb6 	bl	80010b0 <osResumeAllTasks>
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	3301      	adds	r3, #1
 8012348:	617b      	str	r3, [r7, #20]
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b02      	cmp	r3, #2
 801234e:	d9e0      	bls.n	8012312 <slaacDumpConfig+0x72>
         ipv6AddrToString(&ipv6Context->addrList[i].addr, NULL));
   }

   //IPv6 prefixes
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8012350:	2300      	movs	r3, #0
 8012352:	617b      	str	r3, [r7, #20]
 8012354:	e026      	b.n	80123a4 <slaacDumpConfig+0x104>
   {
      TRACE_INFO("  Prefix %u = %s/%" PRIu8 "\r\n", i + 1,
 8012356:	f7ee fea0 	bl	800109a <osSuspendAllTasks>
 801235a:	4b44      	ldr	r3, [pc, #272]	; (801246c <slaacDumpConfig+0x1cc>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	68dc      	ldr	r4, [r3, #12]
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	1c5d      	adds	r5, r3, #1
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	222c      	movs	r2, #44	; 0x2c
 8012368:	fb02 f303 	mul.w	r3, r2, r3
 801236c:	33b0      	adds	r3, #176	; 0xb0
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	4413      	add	r3, r2
 8012372:	2100      	movs	r1, #0
 8012374:	4618      	mov	r0, r3
 8012376:	f7f8 febf 	bl	800b0f8 <ipv6AddrToString>
 801237a:	4601      	mov	r1, r0
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	202c      	movs	r0, #44	; 0x2c
 8012382:	fb00 f303 	mul.w	r3, r0, r3
 8012386:	4413      	add	r3, r2
 8012388:	33c0      	adds	r3, #192	; 0xc0
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	460b      	mov	r3, r1
 8012390:	462a      	mov	r2, r5
 8012392:	493b      	ldr	r1, [pc, #236]	; (8012480 <slaacDumpConfig+0x1e0>)
 8012394:	4620      	mov	r0, r4
 8012396:	f00a fdf5 	bl	801cf84 <fprintf>
 801239a:	f7ee fe89 	bl	80010b0 <osResumeAllTasks>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	3301      	adds	r3, #1
 80123a2:	617b      	str	r3, [r7, #20]
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d9d5      	bls.n	8012356 <slaacDumpConfig+0xb6>
         ipv6AddrToString(&ipv6Context->prefixList[i].prefix, NULL),
         ipv6Context->prefixList[i].prefixLen);
   }

   //Default routers
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 80123aa:	2300      	movs	r3, #0
 80123ac:	617b      	str	r3, [r7, #20]
 80123ae:	e01b      	b.n	80123e8 <slaacDumpConfig+0x148>
   {
      TRACE_INFO("  Default Router %u = %s\r\n", i + 1,
 80123b0:	f7ee fe73 	bl	800109a <osSuspendAllTasks>
 80123b4:	4b2d      	ldr	r3, [pc, #180]	; (801246c <slaacDumpConfig+0x1cc>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	68dc      	ldr	r4, [r3, #12]
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	1c5d      	adds	r5, r3, #1
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	015b      	lsls	r3, r3, #5
 80123c2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	4413      	add	r3, r2
 80123ca:	2100      	movs	r1, #0
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f8 fe93 	bl	800b0f8 <ipv6AddrToString>
 80123d2:	4603      	mov	r3, r0
 80123d4:	462a      	mov	r2, r5
 80123d6:	492b      	ldr	r1, [pc, #172]	; (8012484 <slaacDumpConfig+0x1e4>)
 80123d8:	4620      	mov	r0, r4
 80123da:	f00a fdd3 	bl	801cf84 <fprintf>
 80123de:	f7ee fe67 	bl	80010b0 <osResumeAllTasks>
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	3301      	adds	r3, #1
 80123e6:	617b      	str	r3, [r7, #20]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d9e0      	bls.n	80123b0 <slaacDumpConfig+0x110>
         ipv6AddrToString(&ipv6Context->routerList[i].addr, NULL));
   }

   //DNS servers
   for(i = 0; i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 80123ee:	2300      	movs	r3, #0
 80123f0:	617b      	str	r3, [r7, #20]
 80123f2:	e01b      	b.n	801242c <slaacDumpConfig+0x18c>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", i + 1,
 80123f4:	f7ee fe51 	bl	800109a <osSuspendAllTasks>
 80123f8:	4b1c      	ldr	r3, [pc, #112]	; (801246c <slaacDumpConfig+0x1cc>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	68dc      	ldr	r4, [r3, #12]
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	1c5d      	adds	r5, r3, #1
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	011b      	lsls	r3, r3, #4
 8012406:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	4413      	add	r3, r2
 801240e:	2100      	movs	r1, #0
 8012410:	4618      	mov	r0, r3
 8012412:	f7f8 fe71 	bl	800b0f8 <ipv6AddrToString>
 8012416:	4603      	mov	r3, r0
 8012418:	462a      	mov	r2, r5
 801241a:	491b      	ldr	r1, [pc, #108]	; (8012488 <slaacDumpConfig+0x1e8>)
 801241c:	4620      	mov	r0, r4
 801241e:	f00a fdb1 	bl	801cf84 <fprintf>
 8012422:	f7ee fe45 	bl	80010b0 <osResumeAllTasks>
   for(i = 0; i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	3301      	adds	r3, #1
 801242a:	617b      	str	r3, [r7, #20]
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d9e0      	bls.n	80123f4 <slaacDumpConfig+0x154>
         ipv6AddrToString(&ipv6Context->dnsServerList[i], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", ipv6Context->linkMtu);
 8012432:	f7ee fe32 	bl	800109a <osSuspendAllTasks>
 8012436:	4b0d      	ldr	r3, [pc, #52]	; (801246c <slaacDumpConfig+0x1cc>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	68d8      	ldr	r0, [r3, #12]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	461a      	mov	r2, r3
 8012442:	4912      	ldr	r1, [pc, #72]	; (801248c <slaacDumpConfig+0x1ec>)
 8012444:	f00a fd9e 	bl	801cf84 <fprintf>
 8012448:	f7ee fe32 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 801244c:	f7ee fe25 	bl	800109a <osSuspendAllTasks>
 8012450:	4b06      	ldr	r3, [pc, #24]	; (801246c <slaacDumpConfig+0x1cc>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	2202      	movs	r2, #2
 8012458:	2101      	movs	r1, #1
 801245a:	4805      	ldr	r0, [pc, #20]	; (8012470 <slaacDumpConfig+0x1d0>)
 801245c:	f00a ff7a 	bl	801d354 <fwrite>
 8012460:	f7ee fe26 	bl	80010b0 <osResumeAllTasks>
#endif
}
 8012464:	bf00      	nop
 8012466:	3718      	adds	r7, #24
 8012468:	46bd      	mov	sp, r7
 801246a:	bdb0      	pop	{r4, r5, r7, pc}
 801246c:	20000044 	.word	0x20000044
 8012470:	080253d0 	.word	0x080253d0
 8012474:	080253d4 	.word	0x080253d4
 8012478:	080253ec 	.word	0x080253ec
 801247c:	08025408 	.word	0x08025408
 8012480:	08025424 	.word	0x08025424
 8012484:	0802543c 	.word	0x0802543c
 8012488:	08025458 	.word	0x08025458
 801248c:	08025470 	.word	0x08025470

08012490 <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   osMemset(socketTable, 0, sizeof(socketTable));
 8012496:	f241 62f8 	movw	r2, #5880	; 0x16f8
 801249a:	2100      	movs	r1, #0
 801249c:	4820      	ldr	r0, [pc, #128]	; (8012520 <socketInit+0x90>)
 801249e:	f00b fa17 	bl	801d8d0 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80124a2:	2300      	movs	r3, #0
 80124a4:	607b      	str	r3, [r7, #4]
 80124a6:	e032      	b.n	801250e <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 80124a8:	4a1d      	ldr	r2, [pc, #116]	; (8012520 <socketInit+0x90>)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80124b0:	fb01 f303 	mul.w	r3, r1, r3
 80124b4:	4413      	add	r3, r2
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f44f 7213 	mov.w	r2, #588	; 0x24c
 80124c0:	fb02 f303 	mul.w	r3, r2, r3
 80124c4:	3348      	adds	r3, #72	; 0x48
 80124c6:	4a16      	ldr	r2, [pc, #88]	; (8012520 <socketInit+0x90>)
 80124c8:	4413      	add	r3, r2
 80124ca:	3304      	adds	r3, #4
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7ee fdfa 	bl	80010c6 <osCreateEvent>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d117      	bne.n	8012508 <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 80124d8:	2300      	movs	r3, #0
 80124da:	603b      	str	r3, [r7, #0]
 80124dc:	e00e      	b.n	80124fc <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	f44f 7213 	mov.w	r2, #588	; 0x24c
 80124e4:	fb02 f303 	mul.w	r3, r2, r3
 80124e8:	3348      	adds	r3, #72	; 0x48
 80124ea:	4a0d      	ldr	r2, [pc, #52]	; (8012520 <socketInit+0x90>)
 80124ec:	4413      	add	r3, r2
 80124ee:	3304      	adds	r3, #4
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ee fdff 	bl	80010f4 <osDeleteEvent>
         for(j = 0; j < i; j++)
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	3301      	adds	r3, #1
 80124fa:	603b      	str	r3, [r7, #0]
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	429a      	cmp	r2, r3
 8012502:	d3ec      	bcc.n	80124de <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8012504:	2365      	movs	r3, #101	; 0x65
 8012506:	e006      	b.n	8012516 <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	3301      	adds	r3, #1
 801250c:	607b      	str	r3, [r7, #4]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2b09      	cmp	r3, #9
 8012512:	d9c9      	bls.n	80124a8 <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	20005700 	.word	0x20005700

08012524 <socketOpen>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketOpen(uint_t type, uint_t protocol)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
   Socket *socket;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 801252e:	4808      	ldr	r0, [pc, #32]	; (8012550 <socketOpen+0x2c>)
 8012530:	f7ee fe98 	bl	8001264 <osAcquireMutex>
   //Allocate a new socket
   socket = socketAllocate(type, protocol);
 8012534:	6839      	ldr	r1, [r7, #0]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f000 fa44 	bl	80129c4 <socketAllocate>
 801253c:	60f8      	str	r0, [r7, #12]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 801253e:	4804      	ldr	r0, [pc, #16]	; (8012550 <socketOpen+0x2c>)
 8012540:	f7ee fe9f 	bl	8001282 <osReleaseMutex>

   //Return a handle to the freshly created socket
   return socket;
 8012544:	68fb      	ldr	r3, [r7, #12]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	200046f4 	.word	0x200046f4

08012554 <socketSetTimeout>:
 * @param[in] timeout Maximum time to wait
 * @return Error code
 **/

error_t socketSetTimeout(Socket *socket, systime_t timeout)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d101      	bne.n	8012568 <socketSetTimeout+0x14>
      return ERROR_INVALID_PARAMETER;
 8012564:	2302      	movs	r3, #2
 8012566:	e009      	b.n	801257c <socketSetTimeout+0x28>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8012568:	4806      	ldr	r0, [pc, #24]	; (8012584 <socketSetTimeout+0x30>)
 801256a:	f7ee fe7b 	bl	8001264 <osAcquireMutex>
   //Record timeout value
   socket->timeout = timeout;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	683a      	ldr	r2, [r7, #0]
 8012572:	641a      	str	r2, [r3, #64]	; 0x40
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8012574:	4803      	ldr	r0, [pc, #12]	; (8012584 <socketSetTimeout+0x30>)
 8012576:	f7ee fe84 	bl	8001282 <osReleaseMutex>

   //No error to report
   return NO_ERROR;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3708      	adds	r7, #8
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}
 8012584:	200046f4 	.word	0x200046f4

08012588 <socketSetInterface>:
 * @param[in] interface Network interface to be used
 * @return Error code
 **/

error_t socketSetInterface(Socket *socket, NetInterface *interface)
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d101      	bne.n	801259c <socketSetInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 8012598:	2302      	movs	r3, #2
 801259a:	e003      	b.n	80125a4 <socketSetInterface+0x1c>

   //Explicitly associate the socket with the specified interface
   socket->interface = interface;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	683a      	ldr	r2, [r7, #0]
 80125a0:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <socketBind>:
 * @param[in] localPort Local port number to assign to the bound socket
 * @return Error code
 **/

error_t socketBind(Socket *socket, const IpAddr *localIpAddr, uint16_t localPort)
{
 80125b0:	b4b0      	push	{r4, r5, r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	4613      	mov	r3, r2
 80125bc:	80fb      	strh	r3, [r7, #6]
   //Check input parameters
   if(socket == NULL || localIpAddr == NULL)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <socketBind+0x1a>
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d101      	bne.n	80125ce <socketBind+0x1e>
      return ERROR_INVALID_PARAMETER;
 80125ca:	2302      	movs	r3, #2
 80125cc:	e016      	b.n	80125fc <socketBind+0x4c>

   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM && socket->type != SOCKET_TYPE_DGRAM)
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d005      	beq.n	80125e2 <socketBind+0x32>
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	2b02      	cmp	r3, #2
 80125dc:	d001      	beq.n	80125e2 <socketBind+0x32>
      return ERROR_INVALID_SOCKET;
 80125de:	23d0      	movs	r3, #208	; 0xd0
 80125e0:	e00c      	b.n	80125fc <socketBind+0x4c>

   //Associate the specified IP address and port number
   socket->localIpAddr = *localIpAddr;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	68ba      	ldr	r2, [r7, #8]
 80125e6:	f103 0410 	add.w	r4, r3, #16
 80125ea:	4615      	mov	r5, r2
 80125ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125f0:	682b      	ldr	r3, [r5, #0]
 80125f2:	6023      	str	r3, [r4, #0]
   socket->localPort = localPort;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	88fa      	ldrh	r2, [r7, #6]
 80125f8:	849a      	strh	r2, [r3, #36]	; 0x24

   //No error to report
   return NO_ERROR;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3714      	adds	r7, #20
 8012600:	46bd      	mov	sp, r7
 8012602:	bcb0      	pop	{r4, r5, r7}
 8012604:	4770      	bx	lr
	...

08012608 <socketListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t socketListen(Socket *socket, uint_t backlog)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <socketListen+0x14>
      return ERROR_INVALID_PARAMETER;
 8012618:	2302      	movs	r3, #2
 801261a:	e012      	b.n	8012642 <socketListen+0x3a>
   //This function shall be used with connection-oriented socket types
   if(socket->type != SOCKET_TYPE_STREAM)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	2b01      	cmp	r3, #1
 8012622:	d001      	beq.n	8012628 <socketListen+0x20>
      return ERROR_INVALID_SOCKET;
 8012624:	23d0      	movs	r3, #208	; 0xd0
 8012626:	e00c      	b.n	8012642 <socketListen+0x3a>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8012628:	4808      	ldr	r0, [pc, #32]	; (801264c <socketListen+0x44>)
 801262a:	f7ee fe1b 	bl	8001264 <osAcquireMutex>

   //Start listening for an incoming connection
   error = tcpListen(socket, backlog);
 801262e:	6839      	ldr	r1, [r7, #0]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f001 fda9 	bl	8014188 <tcpListen>
 8012636:	4603      	mov	r3, r0
 8012638:	81fb      	strh	r3, [r7, #14]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 801263a:	4804      	ldr	r0, [pc, #16]	; (801264c <socketListen+0x44>)
 801263c:	f7ee fe21 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 8012640:	89fb      	ldrh	r3, [r7, #14]
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8012642:	4618      	mov	r0, r3
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	200046f4 	.word	0x200046f4

08012650 <socketAccept>:
 * @param[out] clientPort Port number used by the client
 * @return Handle to the socket in which the actual connection is made
 **/

Socket *socketAccept(Socket *socket, IpAddr *clientIpAddr, uint16_t *clientPort)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b086      	sub	sp, #24
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
#if (TCP_SUPPORT == ENABLED)
   Socket *newSocket;

   //Make sure the socket handle is valid
   if(socket == NULL)
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <socketAccept+0x16>
      return NULL;
 8012662:	2300      	movs	r3, #0
 8012664:	e00c      	b.n	8012680 <socketAccept+0x30>
   //This function shall be used with connection-oriented socket types
   if(socket->type != SOCKET_TYPE_STREAM)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	2b01      	cmp	r3, #1
 801266c:	d001      	beq.n	8012672 <socketAccept+0x22>
      return NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	e006      	b.n	8012680 <socketAccept+0x30>

   //Accept an incoming connection attempt
   newSocket = tcpAccept(socket, clientIpAddr, clientPort);
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	68b9      	ldr	r1, [r7, #8]
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f001 fdae 	bl	80141d8 <tcpAccept>
 801267c:	6178      	str	r0, [r7, #20]

   //Return a handle to the newly created socket
   return newSocket;
 801267e:	697b      	ldr	r3, [r7, #20]
#else
   return NULL;
#endif
}
 8012680:	4618      	mov	r0, r3
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <socketSend>:
 * @return Error code
 **/

error_t socketSend(Socket *socket, const void *data, size_t length,
   size_t *written, uint_t flags)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b088      	sub	sp, #32
 801268c:	af04      	add	r7, sp, #16
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	603b      	str	r3, [r7, #0]
   //Use default remote IP address for connectionless or raw sockets
   return socketSendTo(socket, &socket->remoteIpAddr, socket->remotePort,
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	9302      	str	r3, [sp, #8]
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	9301      	str	r3, [sp, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	9300      	str	r3, [sp, #0]
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f000 f806 	bl	80126c0 <socketSendTo>
 80126b4:	4603      	mov	r3, r0
      data, length, written, flags);
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3710      	adds	r7, #16
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <socketSendTo>:
 * @return Error code
 **/

error_t socketSendTo(Socket *socket, const IpAddr *destIpAddr, uint16_t destPort,
   const void *data, size_t length, size_t *written, uint_t flags)
{
 80126c0:	b5b0      	push	{r4, r5, r7, lr}
 80126c2:	b09c      	sub	sp, #112	; 0x70
 80126c4:	af02      	add	r7, sp, #8
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	603b      	str	r3, [r7, #0]
 80126cc:	4613      	mov	r3, r2
 80126ce:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //No data has been transmitted yet
   if(written != NULL)
 80126d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d002      	beq.n	80126dc <socketSendTo+0x1c>
      *written = 0;
 80126d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126d8:	2200      	movs	r2, #0
 80126da:	601a      	str	r2, [r3, #0]

   //Make sure the socket handle is valid
   if(socket == NULL)
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d101      	bne.n	80126e6 <socketSendTo+0x26>
      return ERROR_INVALID_PARAMETER;
 80126e2:	2302      	movs	r3, #2
 80126e4:	e04e      	b.n	8012784 <socketSendTo+0xc4>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80126e6:	4829      	ldr	r0, [pc, #164]	; (801278c <socketSendTo+0xcc>)
 80126e8:	f7ee fdbc 	bl	8001264 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d10c      	bne.n	801270e <socketSendTo+0x4e>
   {
      //For connection-oriented sockets, target address is ignored
      error = tcpSend(socket, data, length, written, flags);
 80126f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80126f8:	9300      	str	r3, [sp, #0]
 80126fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80126fe:	6839      	ldr	r1, [r7, #0]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f001 feaf 	bl	8014464 <tcpSend>
 8012706:	4603      	mov	r3, r0
 8012708:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801270c:	e035      	b.n	801277a <socketSendTo+0xba>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 801270e:	f107 0314 	add.w	r3, r7, #20
 8012712:	2250      	movs	r2, #80	; 0x50
 8012714:	2100      	movs	r1, #0
 8012716:	4618      	mov	r0, r3
 8012718:	f00b f8da 	bl	801d8d0 <memset>

      //Copy data payload
      message.data = (void *) data;
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	617b      	str	r3, [r7, #20]
      message.length = length;
 8012720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012722:	61fb      	str	r3, [r7, #28]

      //Set destination IP address
      if(destIpAddr != NULL)
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d007      	beq.n	801273a <socketSendTo+0x7a>
         message.destIpAddr = *destIpAddr;
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8012730:	461d      	mov	r5, r3
 8012732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012736:	682b      	ldr	r3, [r5, #0]
 8012738:	6023      	str	r3, [r4, #0]

      //Set destination port
      message.destPort = destPort;
 801273a:	88fb      	ldrh	r3, [r7, #6]
 801273c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	2b02      	cmp	r3, #2
 8012746:	d10b      	bne.n	8012760 <socketSendTo+0xa0>
      {
         //Send UDP datagram
         error = udpSendDatagram(socket, &message, flags);
 8012748:	f107 0314 	add.w	r3, r7, #20
 801274c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012750:	4619      	mov	r1, r3
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f005 fba2 	bl	8017e9c <udpSendDatagram>
 8012758:	4603      	mov	r3, r0
 801275a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801275e:	e002      	b.n	8012766 <socketSendTo+0xa6>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 8012760:	23d0      	movs	r3, #208	; 0xd0
 8012762:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      //Check status code
      if(!error)
 8012766:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801276a:	2b00      	cmp	r3, #0
 801276c:	d105      	bne.n	801277a <socketSendTo+0xba>
      {
         //Total number of data bytes successfully transmitted
         if(written != NULL)
 801276e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <socketSendTo+0xba>
            *written = message.length;
 8012774:	69fa      	ldr	r2, [r7, #28]
 8012776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012778:	601a      	str	r2, [r3, #0]
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 801277a:	4804      	ldr	r0, [pc, #16]	; (801278c <socketSendTo+0xcc>)
 801277c:	f7ee fd81 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 8012780:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 8012784:	4618      	mov	r0, r3
 8012786:	3768      	adds	r7, #104	; 0x68
 8012788:	46bd      	mov	sp, r7
 801278a:	bdb0      	pop	{r4, r5, r7, pc}
 801278c:	200046f4 	.word	0x200046f4

08012790 <socketReceive>:
 * @return Error code
 **/

error_t socketReceive(Socket *socket, void *data,
   size_t size, size_t *received, uint_t flags)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b088      	sub	sp, #32
 8012794:	af04      	add	r7, sp, #16
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
   //For connection-oriented sockets, source and destination addresses are
   //no use
   return socketReceiveEx(socket, NULL, NULL, NULL, data, size, received,
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	9303      	str	r3, [sp, #12]
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	9302      	str	r3, [sp, #8]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	9301      	str	r3, [sp, #4]
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	2300      	movs	r3, #0
 80127b0:	2200      	movs	r2, #0
 80127b2:	2100      	movs	r1, #0
 80127b4:	68f8      	ldr	r0, [r7, #12]
 80127b6:	f000 f805 	bl	80127c4 <socketReceiveEx>
 80127ba:	4603      	mov	r3, r0
      flags);
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <socketReceiveEx>:
 * @return Error code
 **/

error_t socketReceiveEx(Socket *socket, IpAddr *srcIpAddr, uint16_t *srcPort,
   IpAddr *destIpAddr, void *data, size_t size, size_t *received, uint_t flags)
{
 80127c4:	b5b0      	push	{r4, r5, r7, lr}
 80127c6:	b09c      	sub	sp, #112	; 0x70
 80127c8:	af02      	add	r7, sp, #8
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	60b9      	str	r1, [r7, #8]
 80127ce:	607a      	str	r2, [r7, #4]
 80127d0:	603b      	str	r3, [r7, #0]
   error_t error;

   //No data has been received yet
   if(received != NULL)
 80127d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d003      	beq.n	80127e2 <socketReceiveEx+0x1e>
      *received = 0;
 80127da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127de:	2200      	movs	r2, #0
 80127e0:	601a      	str	r2, [r3, #0]

   //Make sure the socket handle is valid
   if(socket == NULL)
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <socketReceiveEx+0x28>
      return ERROR_INVALID_PARAMETER;
 80127e8:	2302      	movs	r3, #2
 80127ea:	e07a      	b.n	80128e2 <socketReceiveEx+0x11e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80127ec:	483f      	ldr	r0, [pc, #252]	; (80128ec <socketReceiveEx+0x128>)
 80127ee:	f7ee fd39 	bl	8001264 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d12c      	bne.n	8012854 <socketReceiveEx+0x90>
   {
      //Receive data
      error = tcpReceive(socket, data, size, received, flags);
 80127fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012804:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012806:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f001 fee3 	bl	80145d4 <tcpReceive>
 801280e:	4603      	mov	r3, r0
 8012810:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

      //Save the source IP address
      if(srcIpAddr != NULL)
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d008      	beq.n	801282c <socketReceiveEx+0x68>
         *srcIpAddr = socket->remoteIpAddr;
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	4615      	mov	r5, r2
 8012820:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8012824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	602b      	str	r3, [r5, #0]

      //Save the source port number
      if(srcPort != NULL)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d003      	beq.n	801283a <socketReceiveEx+0x76>
         *srcPort = socket->remotePort;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	801a      	strh	r2, [r3, #0]

      //Save the destination IP address
      if(destIpAddr != NULL)
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d04b      	beq.n	80128d8 <socketReceiveEx+0x114>
         *destIpAddr = socket->localIpAddr;
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	4615      	mov	r5, r2
 8012846:	f103 0410 	add.w	r4, r3, #16
 801284a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801284c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	602b      	str	r3, [r5, #0]
 8012852:	e041      	b.n	80128d8 <socketReceiveEx+0x114>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 8012854:	f107 0314 	add.w	r3, r7, #20
 8012858:	2250      	movs	r2, #80	; 0x50
 801285a:	2100      	movs	r1, #0
 801285c:	4618      	mov	r0, r3
 801285e:	f00b f837 	bl	801d8d0 <memset>

      //Set data buffer
      message.data = (void *) data;
 8012862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012864:	617b      	str	r3, [r7, #20]
      message.size = size;
 8012866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012868:	61bb      	str	r3, [r7, #24]

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	2b02      	cmp	r3, #2
 8012870:	d10b      	bne.n	801288a <socketReceiveEx+0xc6>
      {
         //Receive UDP datagram
         error = udpReceiveDatagram(socket, &message, flags);
 8012872:	f107 0314 	add.w	r3, r7, #20
 8012876:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801287a:	4619      	mov	r1, r3
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f005 fc97 	bl	80181b0 <udpReceiveDatagram>
 8012882:	4603      	mov	r3, r0
 8012884:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012888:	e002      	b.n	8012890 <socketReceiveEx+0xcc>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 801288a:	23d0      	movs	r3, #208	; 0xd0
 801288c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      //Check status code
      if(!error)
 8012890:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012894:	2b00      	cmp	r3, #0
 8012896:	d11f      	bne.n	80128d8 <socketReceiveEx+0x114>
      {
         //Save the source IP address
         if(srcIpAddr != NULL)
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d007      	beq.n	80128ae <socketReceiveEx+0xea>
            *srcIpAddr = message.srcIpAddr;
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	461d      	mov	r5, r3
 80128a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80128a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	602b      	str	r3, [r5, #0]

         //Save the source port number
         if(srcPort != NULL)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d002      	beq.n	80128ba <socketReceiveEx+0xf6>
            *srcPort = message.srcPort;
 80128b4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	801a      	strh	r2, [r3, #0]

         //Save the destination IP address
         if(destIpAddr != NULL)
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d007      	beq.n	80128d0 <socketReceiveEx+0x10c>
            *destIpAddr = message.destIpAddr;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	461d      	mov	r5, r3
 80128c4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80128c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80128cc:	6823      	ldr	r3, [r4, #0]
 80128ce:	602b      	str	r3, [r5, #0]

         //Total number of data that have been received
         *received = message.length;
 80128d0:	69fa      	ldr	r2, [r7, #28]
 80128d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128d6:	601a      	str	r2, [r3, #0]
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80128d8:	4804      	ldr	r0, [pc, #16]	; (80128ec <socketReceiveEx+0x128>)
 80128da:	f7ee fcd2 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 80128de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3768      	adds	r7, #104	; 0x68
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bdb0      	pop	{r4, r5, r7, pc}
 80128ea:	bf00      	nop
 80128ec:	200046f4 	.word	0x200046f4

080128f0 <socketShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t socketShutdown(Socket *socket, uint_t how)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d101      	bne.n	8012904 <socketShutdown+0x14>
      return ERROR_INVALID_PARAMETER;
 8012900:	2302      	movs	r3, #2
 8012902:	e01d      	b.n	8012940 <socketShutdown+0x50>
   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	2b01      	cmp	r3, #1
 801290a:	d001      	beq.n	8012910 <socketShutdown+0x20>
      return ERROR_INVALID_SOCKET;
 801290c:	23d0      	movs	r3, #208	; 0xd0
 801290e:	e017      	b.n	8012940 <socketShutdown+0x50>
   //Check flags
   if((how != SOCKET_SD_SEND) && (how != SOCKET_SD_RECEIVE) && (how != SOCKET_SD_BOTH))
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d007      	beq.n	8012926 <socketShutdown+0x36>
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d004      	beq.n	8012926 <socketShutdown+0x36>
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	2b02      	cmp	r3, #2
 8012920:	d001      	beq.n	8012926 <socketShutdown+0x36>
      return ERROR_INVALID_PARAMETER;
 8012922:	2302      	movs	r3, #2
 8012924:	e00c      	b.n	8012940 <socketShutdown+0x50>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8012926:	4808      	ldr	r0, [pc, #32]	; (8012948 <socketShutdown+0x58>)
 8012928:	f7ee fc9c 	bl	8001264 <osAcquireMutex>

   //Graceful shutdown
   error = tcpShutdown(socket, how);
 801292c:	6839      	ldr	r1, [r7, #0]
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f001 ff44 	bl	80147bc <tcpShutdown>
 8012934:	4603      	mov	r3, r0
 8012936:	81fb      	strh	r3, [r7, #14]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8012938:	4803      	ldr	r0, [pc, #12]	; (8012948 <socketShutdown+0x58>)
 801293a:	f7ee fca2 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 801293e:	89fb      	ldrh	r3, [r7, #14]
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	200046f4 	.word	0x200046f4

0801294c <socketClose>:
 * @brief Close an existing socket
 * @param[in] socket Handle identifying the socket to close
 **/

void socketClose(Socket *socket)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d02e      	beq.n	80129b8 <socketClose+0x6c>
      return;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 801295a:	4819      	ldr	r0, [pc, #100]	; (80129c0 <socketClose+0x74>)
 801295c:	f7ee fc82 	bl	8001264 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	2b01      	cmp	r3, #1
 8012966:	d102      	bne.n	801296e <socketClose+0x22>
   {
      //Abort the current TCP connection
      tcpAbort(socket);
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f002 f827 	bl	80149bc <tcpAbort>
   }
#endif
#if (UDP_SUPPORT == ENABLED || RAW_SOCKET_SUPPORT == ENABLED)
   //Connectionless socket or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	2b02      	cmp	r3, #2
 8012974:	d007      	beq.n	8012986 <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_IP ||
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	685b      	ldr	r3, [r3, #4]
   if(socket->type == SOCKET_TYPE_DGRAM ||
 801297a:	2b03      	cmp	r3, #3
 801297c:	d003      	beq.n	8012986 <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_ETH)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	685b      	ldr	r3, [r3, #4]
      socket->type == SOCKET_TYPE_RAW_IP ||
 8012982:	2b04      	cmp	r3, #4
 8012984:	d114      	bne.n	80129b0 <socketClose+0x64>
   {
      //Point to the first item in the receive queue
      SocketQueueItem *queueItem = socket->receiveQueue;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 801298c:	60fb      	str	r3, [r7, #12]

      //Purge the receive queue
      while(queueItem)
 801298e:	e009      	b.n	80129a4 <socketClose+0x58>
      {
         //Keep track of the next item in the queue
         SocketQueueItem *nextQueueItem = queueItem->next;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	60bb      	str	r3, [r7, #8]
         //Free previously allocated memory
         netBufferFree(queueItem->buffer);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801299a:	4618      	mov	r0, r3
 801299c:	f7fd ffe0 	bl	8010960 <netBufferFree>
         //Point to the next item
         queueItem = nextQueueItem;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	60fb      	str	r3, [r7, #12]
      while(queueItem)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1f2      	bne.n	8012990 <socketClose+0x44>
      }

      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	605a      	str	r2, [r3, #4]
   }
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80129b0:	4803      	ldr	r0, [pc, #12]	; (80129c0 <socketClose+0x74>)
 80129b2:	f7ee fc66 	bl	8001282 <osReleaseMutex>
 80129b6:	e000      	b.n	80129ba <socketClose+0x6e>
      return;
 80129b8:	bf00      	nop
}
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	200046f4 	.word	0x200046f4

080129c4 <socketAllocate>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketAllocate(uint_t type, uint_t protocol)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b088      	sub	sp, #32
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
   uint16_t port;
   Socket *socket;
   OsEvent event;

   //Initialize socket handle
   socket = NULL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	613b      	str	r3, [r7, #16]

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(type == SOCKET_TYPE_STREAM)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d108      	bne.n	80129ea <socketAllocate+0x26>
   {
      //Always use TCP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_TCP;
 80129d8:	2306      	movs	r3, #6
 80129da:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = tcpGetDynamicPort();
 80129dc:	f001 fba6 	bl	801412c <tcpGetDynamicPort>
 80129e0:	4603      	mov	r3, r0
 80129e2:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 80129e4:	2300      	movs	r3, #0
 80129e6:	83fb      	strh	r3, [r7, #30]
 80129e8:	e00d      	b.n	8012a06 <socketAllocate+0x42>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(type == SOCKET_TYPE_DGRAM)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	d108      	bne.n	8012a02 <socketAllocate+0x3e>
   {
      //Always use UDP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_UDP;
 80129f0:	2311      	movs	r3, #17
 80129f2:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = udpGetDynamicPort();
 80129f4:	f005 f882 	bl	8017afc <udpGetDynamicPort>
 80129f8:	4603      	mov	r3, r0
 80129fa:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 80129fc:	2300      	movs	r3, #0
 80129fe:	83fb      	strh	r3, [r7, #30]
 8012a00:	e001      	b.n	8012a06 <socketAllocate+0x42>
   }
   else
#endif
   {
      //The socket type is not supported
      error = ERROR_INVALID_PARAMETER;
 8012a02:	2302      	movs	r3, #2
 8012a04:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 8012a06:	8bfb      	ldrh	r3, [r7, #30]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d150      	bne.n	8012aae <socketAllocate+0xea>
   {
      //Loop through socket descriptors
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	61bb      	str	r3, [r7, #24]
 8012a10:	e016      	b.n	8012a40 <socketAllocate+0x7c>
      {
         //Unused socket found?
         if(socketTable[i].type == SOCKET_TYPE_UNUSED)
 8012a12:	4a29      	ldr	r2, [pc, #164]	; (8012ab8 <socketAllocate+0xf4>)
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8012a1a:	fb01 f303 	mul.w	r3, r1, r3
 8012a1e:	4413      	add	r3, r2
 8012a20:	3304      	adds	r3, #4
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d108      	bne.n	8012a3a <socketAllocate+0x76>
         {
            //Save socket handle
            socket = &socketTable[i];
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8012a2e:	fb02 f303 	mul.w	r3, r2, r3
 8012a32:	4a21      	ldr	r2, [pc, #132]	; (8012ab8 <socketAllocate+0xf4>)
 8012a34:	4413      	add	r3, r2
 8012a36:	613b      	str	r3, [r7, #16]
            //We are done
            break;
 8012a38:	e005      	b.n	8012a46 <socketAllocate+0x82>
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	61bb      	str	r3, [r7, #24]
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	2b09      	cmp	r3, #9
 8012a44:	d9e5      	bls.n	8012a12 <socketAllocate+0x4e>
         }
      }

#if (TCP_SUPPORT == ENABLED)
      //No more sockets available?
      if(socket == NULL)
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d102      	bne.n	8012a52 <socketAllocate+0x8e>
      {
         //Kill the oldest connection in the TIME-WAIT state whenever the
         //socket table runs out of space
         socket = tcpKillOldestConnection();
 8012a4c:	f002 f808 	bl	8014a60 <tcpKillOldestConnection>
 8012a50:	6138      	str	r0, [r7, #16]
      }
#endif

      //Check whether the current entry is free
      if(socket != NULL)
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d02a      	beq.n	8012aae <socketAllocate+0xea>
      {
         //Save socket descriptor
         i = socket->descriptor;
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	61bb      	str	r3, [r7, #24]
         //Save event object instance
         osMemcpy(&event, &socket->event, sizeof(OsEvent));
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	334c      	adds	r3, #76	; 0x4c
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	60fb      	str	r3, [r7, #12]

         //Clear associated structure
         osMemset(socket, 0, sizeof(Socket));
 8012a66:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	6938      	ldr	r0, [r7, #16]
 8012a6e:	f00a ff2f 	bl	801d8d0 <memset>
         //Reuse event objects and avoid recreating them whenever possible
         osMemcpy(&socket->event, &event, sizeof(OsEvent));
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	334c      	adds	r3, #76	; 0x4c
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	601a      	str	r2, [r3, #0]

         //Save socket characteristics
         socket->descriptor = i;
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	69ba      	ldr	r2, [r7, #24]
 8012a7e:	601a      	str	r2, [r3, #0]
         socket->type = type;
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	605a      	str	r2, [r3, #4]
         socket->protocol = protocol;
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	609a      	str	r2, [r3, #8]
         socket->localPort = port;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	8afa      	ldrh	r2, [r7, #22]
 8012a90:	849a      	strh	r2, [r3, #36]	; 0x24
         socket->timeout = INFINITE_DELAY;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	f04f 32ff 	mov.w	r2, #4294967295
 8012a98:	641a      	str	r2, [r3, #64]	; 0x40
         socket->keepAliveMaxProbes = TCP_DEFAULT_KEEP_ALIVE_PROBES;
#endif

#if (TCP_SUPPORT == ENABLED)
         //Default TX and RX buffer size
         socket->txBufferSize = MIN(TCP_DEFAULT_TX_BUFFER_SIZE, TCP_MAX_TX_BUFFER_SIZE);
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	f640 322c 	movw	r2, #2860	; 0xb2c
 8012aa0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
         socket->rxBufferSize = MIN(TCP_DEFAULT_RX_BUFFER_SIZE, TCP_MAX_RX_BUFFER_SIZE);
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	f640 322c 	movw	r2, #2860	; 0xb2c
 8012aaa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif
      }
   }

   //Return a handle to the freshly created socket
   return socket;
 8012aae:	693b      	ldr	r3, [r7, #16]
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3720      	adds	r7, #32
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	20005700 	.word	0x20005700

08012abc <ssiExecuteScript>:
 * @param[in] level Current level of recursion
 * @return Error code
 **/

error_t ssiExecuteScript(HttpConnection *connection, const char_t *uri, uint_t level)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08c      	sub	sp, #48	; 0x30
 8012ac0:	af02      	add	r7, sp, #8
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
   uint_t j;
   const char_t *data;
#endif

   //Recursion limit exceeded?
   if(level >= HTTP_SERVER_SSI_MAX_RECURSION)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2b02      	cmp	r3, #2
 8012acc:	d901      	bls.n	8012ad2 <ssiExecuteScript+0x16>
      return NO_ERROR;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	e0a7      	b.n	8012c22 <ssiExecuteScript+0x166>

   //Retrieve the full pathname
   httpGetAbsolutePath(connection, uri,
      connection->buffer, HTTP_SERVER_BUFFER_SIZE);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
   httpGetAbsolutePath(connection, uri,
 8012ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012adc:	68b9      	ldr	r1, [r7, #8]
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	f7f4 fd80 	bl	80075e4 <httpGetAbsolutePath>
      //Report an error
      return ERROR_OUT_OF_MEMORY;
   }
#else
   //Get the resource data associated with the URI
   error = resGetData(connection->buffer, (const uint8_t **) &data, &length);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012aea:	f107 0220 	add.w	r2, r7, #32
 8012aee:	f107 0114 	add.w	r1, r7, #20
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7ee fe48 	bl	8001788 <resGetData>
 8012af8:	4603      	mov	r3, r0
 8012afa:	84fb      	strh	r3, [r7, #38]	; 0x26
   //The specified URI cannot be found?
   if(error)
 8012afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d001      	beq.n	8012b06 <ssiExecuteScript+0x4a>
      return error;
 8012b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b04:	e08d      	b.n	8012c22 <ssiExecuteScript+0x166>
#endif

   //Send the HTTP response header before executing the script
   if(!level)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d17e      	bne.n	8012c0a <ssiExecuteScript+0x14e>
   {
      //Format HTTP response header
      connection->response.statusCode = 200;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	22c8      	movs	r2, #200	; 0xc8
 8012b10:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
      connection->response.contentType = mimeGetType(uri);
 8012b14:	68b8      	ldr	r0, [r7, #8]
 8012b16:	f7fa fa99 	bl	800d04c <mimeGetType>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
      connection->response.chunkedEncoding = TRUE;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2201      	movs	r2, #1
 8012b26:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

      //Send the header to the client
      error = httpWriteHeader(connection);
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f7f3 fdc2 	bl	80066b4 <httpWriteHeader>
 8012b30:	4603      	mov	r3, r0
 8012b32:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Any error to report?
      if(error)
 8012b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d067      	beq.n	8012c0a <ssiExecuteScript+0x14e>
         fsCloseFile(file);
         //Release memory buffer
         osFreeMem(buffer);
#endif
         //Return status code
         return error;
 8012b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b3c:	e071      	b.n	8012c22 <ssiExecuteScript+0x166>
#else
   //Parse the specified file
   while(length > 0)
   {
      //Search for any SSI tags
      error = ssiSearchTag(data, length, "<!--#", 5, &i);
 8012b3e:	6978      	ldr	r0, [r7, #20]
 8012b40:	6a39      	ldr	r1, [r7, #32]
 8012b42:	f107 031c 	add.w	r3, r7, #28
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	2305      	movs	r3, #5
 8012b4a:	4a38      	ldr	r2, [pc, #224]	; (8012c2c <ssiExecuteScript+0x170>)
 8012b4c:	f000 fbe6 	bl	801331c <ssiSearchTag>
 8012b50:	4603      	mov	r3, r0
 8012b52:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Opening identifier found?
      if(!error)
 8012b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d110      	bne.n	8012b7c <ssiExecuteScript+0xc0>
      {
         //Search for the comment terminator
         error = ssiSearchTag(data + i + 5, length - i - 5, "-->", 3, &j);
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	3305      	adds	r3, #5
 8012b60:	18d0      	adds	r0, r2, r3
 8012b62:	6a3a      	ldr	r2, [r7, #32]
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	1ad3      	subs	r3, r2, r3
 8012b68:	1f59      	subs	r1, r3, #5
 8012b6a:	f107 0318 	add.w	r3, r7, #24
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	2303      	movs	r3, #3
 8012b72:	4a2f      	ldr	r2, [pc, #188]	; (8012c30 <ssiExecuteScript+0x174>)
 8012b74:	f000 fbd2 	bl	801331c <ssiSearchTag>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      //Check whether a valid SSI tag has been found?
      if(!error)
 8012b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d130      	bne.n	8012be4 <ssiExecuteScript+0x128>
      {
         //Send the part of the file that precedes the tag
         error = httpWriteStream(connection, data, i);
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	69fa      	ldr	r2, [r7, #28]
 8012b86:	4619      	mov	r1, r3
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f7f3 fe7d 	bl	8006888 <httpWriteStream>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	84fb      	strh	r3, [r7, #38]	; 0x26
         //Failed to send data?
         if(error)
 8012b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <ssiExecuteScript+0xe0>
            return error;
 8012b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b9a:	e042      	b.n	8012c22 <ssiExecuteScript+0x166>

         //Advance data pointer over the opening identifier
         data += i + 5;
 8012b9c:	697a      	ldr	r2, [r7, #20]
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	3305      	adds	r3, #5
 8012ba2:	4413      	add	r3, r2
 8012ba4:	617b      	str	r3, [r7, #20]
         length -= i + 5;
 8012ba6:	6a3a      	ldr	r2, [r7, #32]
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	1ad3      	subs	r3, r2, r3
 8012bac:	3b05      	subs	r3, #5
 8012bae:	623b      	str	r3, [r7, #32]

         //Process SSI directive
         error = ssiProcessCommand(connection, data, j, uri, level);
 8012bb0:	6979      	ldr	r1, [r7, #20]
 8012bb2:	69ba      	ldr	r2, [r7, #24]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	9300      	str	r3, [sp, #0]
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	68f8      	ldr	r0, [r7, #12]
 8012bbc:	f000 f83a 	bl	8012c34 <ssiProcessCommand>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
         //Any error to report?
         if(error)
 8012bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d001      	beq.n	8012bce <ssiExecuteScript+0x112>
            return error;
 8012bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bcc:	e029      	b.n	8012c22 <ssiExecuteScript+0x166>

         //Advance data pointer over the SSI tag
         data += j + 3;
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	3303      	adds	r3, #3
 8012bd4:	4413      	add	r3, r2
 8012bd6:	617b      	str	r3, [r7, #20]
         length -= j + 3;
 8012bd8:	6a3a      	ldr	r2, [r7, #32]
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	3b03      	subs	r3, #3
 8012be0:	623b      	str	r3, [r7, #32]
 8012be2:	e012      	b.n	8012c0a <ssiExecuteScript+0x14e>
      }
      else
      {
         //Send the rest of the file
         error = httpWriteStream(connection, data, length);
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	6a3a      	ldr	r2, [r7, #32]
 8012be8:	4619      	mov	r1, r3
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f7f3 fe4c 	bl	8006888 <httpWriteStream>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
         //Failed to send data?
         if(error)
 8012bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d001      	beq.n	8012bfe <ssiExecuteScript+0x142>
            return error;
 8012bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bfc:	e011      	b.n	8012c22 <ssiExecuteScript+0x166>

         //Advance data pointer
         data += length;
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	6a3b      	ldr	r3, [r7, #32]
 8012c02:	4413      	add	r3, r2
 8012c04:	617b      	str	r3, [r7, #20]
         length = 0;
 8012c06:	2300      	movs	r3, #0
 8012c08:	623b      	str	r3, [r7, #32]
   while(length > 0)
 8012c0a:	6a3b      	ldr	r3, [r7, #32]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d196      	bne.n	8012b3e <ssiExecuteScript+0x82>
      }
   }

   //Properly close the output stream
   if(!level)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d104      	bne.n	8012c20 <ssiExecuteScript+0x164>
      error = httpCloseStream(connection);
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f7f3 fe9a 	bl	8006950 <httpCloseStream>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif

   //Return status code
   return error;
 8012c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3728      	adds	r7, #40	; 0x28
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	08025480 	.word	0x08025480
 8012c30:	08025488 	.word	0x08025488

08012c34 <ssiProcessCommand>:
 * @return Error code
 **/

error_t ssiProcessCommand(HttpConnection *connection,
   const char_t *tag, size_t length, const char_t *uri, uint_t level)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b088      	sub	sp, #32
 8012c38:	af02      	add	r7, sp, #8
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	603b      	str	r3, [r7, #0]
   error_t error;

   //Include command found?
   if(length > 7 && !osStrncasecmp(tag, "include", 7))
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b07      	cmp	r3, #7
 8012c46:	d912      	bls.n	8012c6e <ssiProcessCommand+0x3a>
 8012c48:	2207      	movs	r2, #7
 8012c4a:	4924      	ldr	r1, [pc, #144]	; (8012cdc <ssiProcessCommand+0xa8>)
 8012c4c:	68b8      	ldr	r0, [r7, #8]
 8012c4e:	f00b f85b 	bl	801dd08 <strncasecmp>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10a      	bne.n	8012c6e <ssiProcessCommand+0x3a>
   {
      //Process SSI include directive
      error = ssiProcessIncludeCommand(connection, tag, length, uri, level);
 8012c58:	6a3b      	ldr	r3, [r7, #32]
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	68b9      	ldr	r1, [r7, #8]
 8012c62:	68f8      	ldr	r0, [r7, #12]
 8012c64:	f000 f842 	bl	8012cec <ssiProcessIncludeCommand>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	82fb      	strh	r3, [r7, #22]
 8012c6c:	e027      	b.n	8012cbe <ssiProcessCommand+0x8a>
   }
   //Echo command found?
   else if(length > 4 && !osStrncasecmp(tag, "echo", 4))
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b04      	cmp	r3, #4
 8012c72:	d90f      	bls.n	8012c94 <ssiProcessCommand+0x60>
 8012c74:	2204      	movs	r2, #4
 8012c76:	491a      	ldr	r1, [pc, #104]	; (8012ce0 <ssiProcessCommand+0xac>)
 8012c78:	68b8      	ldr	r0, [r7, #8]
 8012c7a:	f00b f845 	bl	801dd08 <strncasecmp>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d107      	bne.n	8012c94 <ssiProcessCommand+0x60>
   {
      //Process SSI echo directive
      error = ssiProcessEchoCommand(connection, tag, length);
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	68b9      	ldr	r1, [r7, #8]
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f000 f937 	bl	8012efc <ssiProcessEchoCommand>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	82fb      	strh	r3, [r7, #22]
 8012c92:	e014      	b.n	8012cbe <ssiProcessCommand+0x8a>
   }
   //Exec command found?
   else if(length > 4 && !osStrncasecmp(tag, "exec", 4))
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b04      	cmp	r3, #4
 8012c98:	d90f      	bls.n	8012cba <ssiProcessCommand+0x86>
 8012c9a:	2204      	movs	r2, #4
 8012c9c:	4911      	ldr	r1, [pc, #68]	; (8012ce4 <ssiProcessCommand+0xb0>)
 8012c9e:	68b8      	ldr	r0, [r7, #8]
 8012ca0:	f00b f832 	bl	801dd08 <strncasecmp>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d107      	bne.n	8012cba <ssiProcessCommand+0x86>
   {
      //Process SSI exec directive
      error = ssiProcessExecCommand(connection, tag, length);
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	68b9      	ldr	r1, [r7, #8]
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f000 fa90 	bl	80131d4 <ssiProcessExecCommand>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	82fb      	strh	r3, [r7, #22]
 8012cb8:	e001      	b.n	8012cbe <ssiProcessCommand+0x8a>
   }
   //Unknown command?
   else
   {
      //The server is unable to decode the SSI tag
      error = ERROR_INVALID_TAG;
 8012cba:	23ef      	movs	r3, #239	; 0xef
 8012cbc:	82fb      	strh	r3, [r7, #22]
   }

   //Invalid SSI directive?
   if(error == ERROR_INVALID_TAG)
 8012cbe:	8afb      	ldrh	r3, [r7, #22]
 8012cc0:	2bef      	cmp	r3, #239	; 0xef
 8012cc2:	d106      	bne.n	8012cd2 <ssiProcessCommand+0x9e>
   {
      //Report a warning to the user
      error = httpWriteStream(connection, "Warning: Invalid SSI Tag", 24);
 8012cc4:	2218      	movs	r2, #24
 8012cc6:	4908      	ldr	r1, [pc, #32]	; (8012ce8 <ssiProcessCommand+0xb4>)
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	f7f3 fddd 	bl	8006888 <httpWriteStream>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8012cd2:	8afb      	ldrh	r3, [r7, #22]
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3718      	adds	r7, #24
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	0802548c 	.word	0x0802548c
 8012ce0:	08025494 	.word	0x08025494
 8012ce4:	0802549c 	.word	0x0802549c
 8012ce8:	080254a4 	.word	0x080254a4

08012cec <ssiProcessIncludeCommand>:
 * @return Error code
 **/

error_t ssiProcessIncludeCommand(HttpConnection *connection,
   const char_t *tag, size_t length, const char_t *uri, uint_t level)
{
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b08d      	sub	sp, #52	; 0x34
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	60b9      	str	r1, [r7, #8]
 8012cf6:	607a      	str	r2, [r7, #4]
 8012cf8:	603b      	str	r3, [r7, #0]
   char_t *value;
   char_t *path;
   char_t *p;

   //Discard invalid SSI directives
   if(length < 7 || length >= HTTP_SERVER_BUFFER_SIZE)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2b06      	cmp	r3, #6
 8012cfe:	d903      	bls.n	8012d08 <ssiProcessIncludeCommand+0x1c>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d06:	d301      	bcc.n	8012d0c <ssiProcessIncludeCommand+0x20>
      return ERROR_INVALID_TAG;
 8012d08:	23ef      	movs	r3, #239	; 0xef
 8012d0a:	e0e8      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>

   //Skip the SSI include command (7 bytes)
   osMemcpy(connection->buffer, tag + 7, length - 7);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	1dd9      	adds	r1, r3, #7
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	3b07      	subs	r3, #7
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	f00a fdb0 	bl	801d880 <memcpy>
   //Ensure the resulting string is NULL-terminated
   connection->buffer[length - 7] = '\0';
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	3b07      	subs	r3, #7
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	4413      	add	r3, r2
 8012d28:	2200      	movs	r2, #0
 8012d2a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

   //Check whether a separator is present
   separator = osStrchr(connection->buffer, '=');
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012d34:	213d      	movs	r1, #61	; 0x3d
 8012d36:	4618      	mov	r0, r3
 8012d38:	f00a ffd0 	bl	801dcdc <strchr>
 8012d3c:	6238      	str	r0, [r7, #32]
   //Separator not found?
   if(!separator)
 8012d3e:	6a3b      	ldr	r3, [r7, #32]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <ssiProcessIncludeCommand+0x5c>
      return ERROR_INVALID_TAG;
 8012d44:	23ef      	movs	r3, #239	; 0xef
 8012d46:	e0ca      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>

   //Split the tag
   *separator = '\0';
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	701a      	strb	r2, [r3, #0]

   //Get attribute name and value
   attribute = strTrimWhitespace(connection->buffer);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ee fe15 	bl	8001984 <strTrimWhitespace>
 8012d5a:	61f8      	str	r0, [r7, #28]
   value = strTrimWhitespace(separator + 1);
 8012d5c:	6a3b      	ldr	r3, [r7, #32]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7ee fe0f 	bl	8001984 <strTrimWhitespace>
 8012d66:	62b8      	str	r0, [r7, #40]	; 0x28

   //Remove leading simple or double quote
   if(value[0] == '\'' || value[0] == '\"')
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	2b27      	cmp	r3, #39	; 0x27
 8012d6e:	d003      	beq.n	8012d78 <ssiProcessIncludeCommand+0x8c>
 8012d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	2b22      	cmp	r3, #34	; 0x22
 8012d76:	d102      	bne.n	8012d7e <ssiProcessIncludeCommand+0x92>
      value++;
 8012d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	62bb      	str	r3, [r7, #40]	; 0x28

   //Get the length of the attribute value
   length = osStrlen(value);
 8012d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d80:	f7ed fa90 	bl	80002a4 <strlen>
 8012d84:	4603      	mov	r3, r0
 8012d86:	607b      	str	r3, [r7, #4]

   //Remove trailing simple or double quote
   if(length > 0)
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d013      	beq.n	8012db6 <ssiProcessIncludeCommand+0xca>
   {
      if(value[length - 1] == '\'' || value[length - 1] == '\"')
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	3b01      	subs	r3, #1
 8012d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d94:	4413      	add	r3, r2
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	2b27      	cmp	r3, #39	; 0x27
 8012d9a:	d006      	beq.n	8012daa <ssiProcessIncludeCommand+0xbe>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012da2:	4413      	add	r3, r2
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	2b22      	cmp	r3, #34	; 0x22
 8012da8:	d105      	bne.n	8012db6 <ssiProcessIncludeCommand+0xca>
         value[length - 1] = '\0';
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	3b01      	subs	r3, #1
 8012dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012db0:	4413      	add	r3, r2
 8012db2:	2200      	movs	r2, #0
 8012db4:	701a      	strb	r2, [r3, #0]
   }

   //Check the length of the filename
   if(osStrlen(value) > HTTP_SERVER_URI_MAX_LEN)
 8012db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012db8:	f7ed fa74 	bl	80002a4 <strlen>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2bff      	cmp	r3, #255	; 0xff
 8012dc0:	d901      	bls.n	8012dc6 <ssiProcessIncludeCommand+0xda>
      return ERROR_INVALID_TAG;
 8012dc2:	23ef      	movs	r3, #239	; 0xef
 8012dc4:	e08b      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>

   //The file parameter defines the included file as relative to the document path
   if(!osStrcasecmp(attribute, "file"))
 8012dc6:	4948      	ldr	r1, [pc, #288]	; (8012ee8 <ssiProcessIncludeCommand+0x1fc>)
 8012dc8:	69f8      	ldr	r0, [r7, #28]
 8012dca:	f00a ff6b 	bl	801dca4 <strcasecmp>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d12a      	bne.n	8012e2a <ssiProcessIncludeCommand+0x13e>
   {
      //Allocate a buffer to hold the path to the file to be included
      path = osAllocMem(osStrlen(uri) + osStrlen(value) + 1);
 8012dd4:	6838      	ldr	r0, [r7, #0]
 8012dd6:	f7ed fa65 	bl	80002a4 <strlen>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dde:	f7ed fa61 	bl	80002a4 <strlen>
 8012de2:	4603      	mov	r3, r0
 8012de4:	4423      	add	r3, r4
 8012de6:	3301      	adds	r3, #1
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7ee fa64 	bl	80012b6 <osAllocMem>
 8012dee:	6278      	str	r0, [r7, #36]	; 0x24
      //Failed to allocate memory?
      if(path == NULL)
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d101      	bne.n	8012dfa <ssiProcessIncludeCommand+0x10e>
         return ERROR_OUT_OF_MEMORY;
 8012df6:	2364      	movs	r3, #100	; 0x64
 8012df8:	e071      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>

      //Copy the path identifying the script file being processed
      osStrcpy(path, uri);
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dfe:	f00a ff7a 	bl	801dcf6 <strcpy>
      //Search for the last slash character
      p = strrchr(path, '/');
 8012e02:	212f      	movs	r1, #47	; 0x2f
 8012e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e06:	f00a ffc6 	bl	801dd96 <strrchr>
 8012e0a:	61b8      	str	r0, [r7, #24]

      //Remove the filename from the path if applicable
      if(p)
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d006      	beq.n	8012e20 <ssiProcessIncludeCommand+0x134>
         osStrcpy(p + 1, value);
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	3301      	adds	r3, #1
 8012e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f00a ff6c 	bl	801dcf6 <strcpy>
 8012e1e:	e016      	b.n	8012e4e <ssiProcessIncludeCommand+0x162>
      else
         osStrcpy(path, value);
 8012e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e24:	f00a ff67 	bl	801dcf6 <strcpy>
 8012e28:	e011      	b.n	8012e4e <ssiProcessIncludeCommand+0x162>
   }
   //The virtual parameter defines the included file as relative to the document root
   else if(!osStrcasecmp(attribute, "virtual"))
 8012e2a:	4930      	ldr	r1, [pc, #192]	; (8012eec <ssiProcessIncludeCommand+0x200>)
 8012e2c:	69f8      	ldr	r0, [r7, #28]
 8012e2e:	f00a ff39 	bl	801dca4 <strcasecmp>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d108      	bne.n	8012e4a <ssiProcessIncludeCommand+0x15e>
   {
      //Copy the absolute path
      path = strDuplicate(value);
 8012e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e3a:	f7ee fd83 	bl	8001944 <strDuplicate>
 8012e3e:	6278      	str	r0, [r7, #36]	; 0x24
      //Failed to duplicate the string?
      if(path == NULL)
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d103      	bne.n	8012e4e <ssiProcessIncludeCommand+0x162>
         return ERROR_OUT_OF_MEMORY;
 8012e46:	2364      	movs	r3, #100	; 0x64
 8012e48:	e049      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>
   }
   //Unknown parameter...
   else
   {
      //Report an error
      return ERROR_INVALID_TAG;
 8012e4a:	23ef      	movs	r3, #239	; 0xef
 8012e4c:	e047      	b.n	8012ede <ssiProcessIncludeCommand+0x1f2>
   }

   //Use server-side scripting to dynamically generate HTML code?
   if(httpCompExtension(value, ".stm") ||
 8012e4e:	4928      	ldr	r1, [pc, #160]	; (8012ef0 <ssiProcessIncludeCommand+0x204>)
 8012e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e52:	f7f4 fbe1 	bl	8007618 <httpCompExtension>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d10d      	bne.n	8012e78 <ssiProcessIncludeCommand+0x18c>
      httpCompExtension(value, ".shtm") ||
 8012e5c:	4925      	ldr	r1, [pc, #148]	; (8012ef4 <ssiProcessIncludeCommand+0x208>)
 8012e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e60:	f7f4 fbda 	bl	8007618 <httpCompExtension>
 8012e64:	4603      	mov	r3, r0
   if(httpCompExtension(value, ".stm") ||
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d106      	bne.n	8012e78 <ssiProcessIncludeCommand+0x18c>
      httpCompExtension(value, ".shtml"))
 8012e6a:	4923      	ldr	r1, [pc, #140]	; (8012ef8 <ssiProcessIncludeCommand+0x20c>)
 8012e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e6e:	f7f4 fbd3 	bl	8007618 <httpCompExtension>
 8012e72:	4603      	mov	r3, r0
      httpCompExtension(value, ".shtm") ||
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d009      	beq.n	8012e8c <ssiProcessIncludeCommand+0x1a0>
   {
      //SSI processing (Server Side Includes)
      error = ssiExecuteScript(connection, path, level + 1);
 8012e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f7ff fe1b 	bl	8012abc <ssiExecuteScript>
 8012e86:	4603      	mov	r3, r0
 8012e88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012e8a:	e01e      	b.n	8012eca <ssiProcessIncludeCommand+0x1de>
#else
      const uint8_t *data;

      //Retrieve the full pathname
      httpGetAbsolutePath(connection, path,
         connection->buffer, HTTP_SERVER_BUFFER_SIZE);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
      httpGetAbsolutePath(connection, path,
 8012e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f7f4 fba3 	bl	80075e4 <httpGetAbsolutePath>

      //Get the resource data associated with the file
      error = resGetData(connection->buffer, &data, &length);
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012ea4:	1d3a      	adds	r2, r7, #4
 8012ea6:	f107 0114 	add.w	r1, r7, #20
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ee fc6c 	bl	8001788 <resGetData>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      //Send the contents of the requested file
      if(!error)
 8012eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d107      	bne.n	8012eca <ssiProcessIncludeCommand+0x1de>
         error = httpWriteStream(connection, data, length);
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f7f3 fce1 	bl	8006888 <httpWriteStream>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif
   }

   //Cannot found the specified resource?
   if(error == ERROR_NOT_FOUND)
 8012eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012ecc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012ed0:	d101      	bne.n	8012ed6 <ssiProcessIncludeCommand+0x1ea>
      error = ERROR_INVALID_TAG;
 8012ed2:	23ef      	movs	r3, #239	; 0xef
 8012ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Release previously allocated memory
   osFreeMem(path);
 8012ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ed8:	f7ee f9fa 	bl	80012d0 <osFreeMem>
   //return status code
   return error;
 8012edc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3734      	adds	r7, #52	; 0x34
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd90      	pop	{r4, r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	080254c0 	.word	0x080254c0
 8012eec:	080254c8 	.word	0x080254c8
 8012ef0:	080254d0 	.word	0x080254d0
 8012ef4:	080254d8 	.word	0x080254d8
 8012ef8:	080254e0 	.word	0x080254e0

08012efc <ssiProcessEchoCommand>:
 * @param[in] length Total length of the SSI tag
 * @return Error code
 **/

error_t ssiProcessEchoCommand(HttpConnection *connection, const char_t *tag, size_t length)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b088      	sub	sp, #32
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	607a      	str	r2, [r7, #4]
   char_t *separator;
   char_t *attribute;
   char_t *value;

   //Discard invalid SSI directives
   if(length < 4 || length >= HTTP_SERVER_BUFFER_SIZE)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b03      	cmp	r3, #3
 8012f0c:	d903      	bls.n	8012f16 <ssiProcessEchoCommand+0x1a>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f14:	d301      	bcc.n	8012f1a <ssiProcessEchoCommand+0x1e>
      return ERROR_INVALID_TAG;
 8012f16:	23ef      	movs	r3, #239	; 0xef
 8012f18:	e13c      	b.n	8013194 <ssiProcessEchoCommand+0x298>

   //Skip the SSI echo command (4 bytes)
   osMemcpy(connection->buffer, tag + 4, length - 4);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	1d19      	adds	r1, r3, #4
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	3b04      	subs	r3, #4
 8012f28:	461a      	mov	r2, r3
 8012f2a:	f00a fca9 	bl	801d880 <memcpy>
   //Ensure the resulting string is NULL-terminated
   connection->buffer[length - 4] = '\0';
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	3b04      	subs	r3, #4
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	4413      	add	r3, r2
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

   //Check whether a separator is present
   separator = osStrchr(connection->buffer, '=');
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012f42:	213d      	movs	r1, #61	; 0x3d
 8012f44:	4618      	mov	r0, r3
 8012f46:	f00a fec9 	bl	801dcdc <strchr>
 8012f4a:	61b8      	str	r0, [r7, #24]
   //Separator not found?
   if(!separator)
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d101      	bne.n	8012f56 <ssiProcessEchoCommand+0x5a>
      return ERROR_INVALID_TAG;
 8012f52:	23ef      	movs	r3, #239	; 0xef
 8012f54:	e11e      	b.n	8013194 <ssiProcessEchoCommand+0x298>

   //Split the tag
   *separator = '\0';
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	701a      	strb	r2, [r3, #0]

   //Get attribute name and value
   attribute = strTrimWhitespace(connection->buffer);
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ee fd0e 	bl	8001984 <strTrimWhitespace>
 8012f68:	6178      	str	r0, [r7, #20]
   value = strTrimWhitespace(separator + 1);
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7ee fd08 	bl	8001984 <strTrimWhitespace>
 8012f74:	61f8      	str	r0, [r7, #28]

   //Remove leading simple or double quote
   if(value[0] == '\'' || value[0] == '\"')
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b27      	cmp	r3, #39	; 0x27
 8012f7c:	d003      	beq.n	8012f86 <ssiProcessEchoCommand+0x8a>
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	2b22      	cmp	r3, #34	; 0x22
 8012f84:	d102      	bne.n	8012f8c <ssiProcessEchoCommand+0x90>
      value++;
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	61fb      	str	r3, [r7, #28]

   //Get the length of the attribute value
   length = osStrlen(value);
 8012f8c:	69f8      	ldr	r0, [r7, #28]
 8012f8e:	f7ed f989 	bl	80002a4 <strlen>
 8012f92:	6078      	str	r0, [r7, #4]

   //Remove trailing simple or double quote
   if(length > 0)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d013      	beq.n	8012fc2 <ssiProcessEchoCommand+0xc6>
   {
      if(value[length - 1] == '\'' || value[length - 1] == '\"')
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	69fa      	ldr	r2, [r7, #28]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	2b27      	cmp	r3, #39	; 0x27
 8012fa6:	d006      	beq.n	8012fb6 <ssiProcessEchoCommand+0xba>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	3b01      	subs	r3, #1
 8012fac:	69fa      	ldr	r2, [r7, #28]
 8012fae:	4413      	add	r3, r2
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	2b22      	cmp	r3, #34	; 0x22
 8012fb4:	d105      	bne.n	8012fc2 <ssiProcessEchoCommand+0xc6>
         value[length - 1] = '\0';
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	69fa      	ldr	r2, [r7, #28]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	701a      	strb	r2, [r3, #0]
   }

   //Enforce attribute name
   if(osStrcasecmp(attribute, "var"))
 8012fc2:	4976      	ldr	r1, [pc, #472]	; (801319c <ssiProcessEchoCommand+0x2a0>)
 8012fc4:	6978      	ldr	r0, [r7, #20]
 8012fc6:	f00a fe6d 	bl	801dca4 <strcasecmp>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <ssiProcessEchoCommand+0xd8>
      return ERROR_INVALID_TAG;
 8012fd0:	23ef      	movs	r3, #239	; 0xef
 8012fd2:	e0df      	b.n	8013194 <ssiProcessEchoCommand+0x298>

   //Remote address?
   if(!osStrcasecmp(value, "REMOTE_ADDR"))
 8012fd4:	4972      	ldr	r1, [pc, #456]	; (80131a0 <ssiProcessEchoCommand+0x2a4>)
 8012fd6:	69f8      	ldr	r0, [r7, #28]
 8012fd8:	f00a fe64 	bl	801dca4 <strcasecmp>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10b      	bne.n	8012ffa <ssiProcessEchoCommand+0xfe>
   {
      //The IP address of the host making this request
      ipAddrToString(&connection->socket->remoteIpAddr, connection->buffer);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	695b      	ldr	r3, [r3, #20]
 8012fe6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	4610      	mov	r0, r2
 8012ff4:	f7f5 fd5c 	bl	8008ab0 <ipAddrToString>
 8012ff8:	e0b5      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Remote port?
   else if(!osStrcasecmp(value, "REMOTE_PORT"))
 8012ffa:	496a      	ldr	r1, [pc, #424]	; (80131a4 <ssiProcessEchoCommand+0x2a8>)
 8012ffc:	69f8      	ldr	r0, [r7, #28]
 8012ffe:	f00a fe51 	bl	801dca4 <strcasecmp>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10a      	bne.n	801301e <ssiProcessEchoCommand+0x122>
   {
      //The port number used by the remote host when making this request
      osSprintf(connection->buffer, "%" PRIu16, connection->socket->remotePort);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	695b      	ldr	r3, [r3, #20]
 8013012:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013014:	461a      	mov	r2, r3
 8013016:	4964      	ldr	r1, [pc, #400]	; (80131a8 <ssiProcessEchoCommand+0x2ac>)
 8013018:	f00a fe24 	bl	801dc64 <sprintf>
 801301c:	e0a3      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Server address?
   else if(!osStrcasecmp(value, "SERVER_ADDR"))
 801301e:	4963      	ldr	r1, [pc, #396]	; (80131ac <ssiProcessEchoCommand+0x2b0>)
 8013020:	69f8      	ldr	r0, [r7, #28]
 8013022:	f00a fe3f 	bl	801dca4 <strcasecmp>
 8013026:	4603      	mov	r3, r0
 8013028:	2b00      	cmp	r3, #0
 801302a:	d10b      	bne.n	8013044 <ssiProcessEchoCommand+0x148>
   {
      //The IP address of the server for this URL
      ipAddrToString(&connection->socket->localIpAddr, connection->buffer);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	695b      	ldr	r3, [r3, #20]
 8013030:	f103 0210 	add.w	r2, r3, #16
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801303a:	4619      	mov	r1, r3
 801303c:	4610      	mov	r0, r2
 801303e:	f7f5 fd37 	bl	8008ab0 <ipAddrToString>
 8013042:	e090      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Server port?
   else if(!osStrcasecmp(value, "SERVER_PORT"))
 8013044:	495a      	ldr	r1, [pc, #360]	; (80131b0 <ssiProcessEchoCommand+0x2b4>)
 8013046:	69f8      	ldr	r0, [r7, #28]
 8013048:	f00a fe2c 	bl	801dca4 <strcasecmp>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10a      	bne.n	8013068 <ssiProcessEchoCommand+0x16c>
   {
      //The port number on this server to which this request was directed
      osSprintf(connection->buffer, "%" PRIu16, connection->socket->localPort);
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	695b      	ldr	r3, [r3, #20]
 801305c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801305e:	461a      	mov	r2, r3
 8013060:	4951      	ldr	r1, [pc, #324]	; (80131a8 <ssiProcessEchoCommand+0x2ac>)
 8013062:	f00a fdff 	bl	801dc64 <sprintf>
 8013066:	e07e      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Request method?
   else if(!osStrcasecmp(value, "REQUEST_METHOD"))
 8013068:	4952      	ldr	r1, [pc, #328]	; (80131b4 <ssiProcessEchoCommand+0x2b8>)
 801306a:	69f8      	ldr	r0, [r7, #28]
 801306c:	f00a fe1a 	bl	801dca4 <strcasecmp>
 8013070:	4603      	mov	r3, r0
 8013072:	2b00      	cmp	r3, #0
 8013074:	d109      	bne.n	801308a <ssiProcessEchoCommand+0x18e>
   {
      //The method used for this HTTP request
      osStrcpy(connection->buffer, connection->request.method);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	331c      	adds	r3, #28
 8013080:	4619      	mov	r1, r3
 8013082:	4610      	mov	r0, r2
 8013084:	f00a fe37 	bl	801dcf6 <strcpy>
 8013088:	e06d      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Document root?
   else if(!osStrcasecmp(value, "DOCUMENT_ROOT"))
 801308a:	494b      	ldr	r1, [pc, #300]	; (80131b8 <ssiProcessEchoCommand+0x2bc>)
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f00a fe09 	bl	801dca4 <strcasecmp>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10a      	bne.n	80130ae <ssiProcessEchoCommand+0x1b2>
   {
      //The root directory
      osStrcpy(connection->buffer, connection->settings->rootDirectory);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	3314      	adds	r3, #20
 80130a4:	4619      	mov	r1, r3
 80130a6:	4610      	mov	r0, r2
 80130a8:	f00a fe25 	bl	801dcf6 <strcpy>
 80130ac:	e05b      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Document URI?
   else if(!osStrcasecmp(value, "DOCUMENT_URI"))
 80130ae:	4943      	ldr	r1, [pc, #268]	; (80131bc <ssiProcessEchoCommand+0x2c0>)
 80130b0:	69f8      	ldr	r0, [r7, #28]
 80130b2:	f00a fdf7 	bl	801dca4 <strcasecmp>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d109      	bne.n	80130d0 <ssiProcessEchoCommand+0x1d4>
   {
      //The URI for this request relative to the root directory
      osStrcpy(connection->buffer, connection->request.uri);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3324      	adds	r3, #36	; 0x24
 80130c6:	4619      	mov	r1, r3
 80130c8:	4610      	mov	r0, r2
 80130ca:	f00a fe14 	bl	801dcf6 <strcpy>
 80130ce:	e04a      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Document name?
   else if(!osStrcasecmp(value, "DOCUMENT_NAME"))
 80130d0:	493b      	ldr	r1, [pc, #236]	; (80131c0 <ssiProcessEchoCommand+0x2c4>)
 80130d2:	69f8      	ldr	r0, [r7, #28]
 80130d4:	f00a fde6 	bl	801dca4 <strcasecmp>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d10b      	bne.n	80130f6 <ssiProcessEchoCommand+0x1fa>
   {
      //The full physical path and filename of the document requested
      httpGetAbsolutePath(connection, connection->request.uri,
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f103 0124 	add.w	r1, r3, #36	; 0x24
         connection->buffer, HTTP_SERVER_BUFFER_SIZE);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
      httpGetAbsolutePath(connection, connection->request.uri,
 80130ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f7f4 fa78 	bl	80075e4 <httpGetAbsolutePath>
 80130f4:	e037      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Query string?
   else if(!osStrcasecmp(value, "QUERY_STRING"))
 80130f6:	4933      	ldr	r1, [pc, #204]	; (80131c4 <ssiProcessEchoCommand+0x2c8>)
 80130f8:	69f8      	ldr	r0, [r7, #28]
 80130fa:	f00a fdd3 	bl	801dca4 <strcasecmp>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <ssiProcessEchoCommand+0x21e>
   {
      //The information following the "?" in the URL for this request
      osStrcpy(connection->buffer, connection->request.queryString);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013110:	4619      	mov	r1, r3
 8013112:	4610      	mov	r0, r2
 8013114:	f00a fdef 	bl	801dcf6 <strcpy>
 8013118:	e025      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //User name?
   else if(!osStrcasecmp(value, "AUTH_USER"))
 801311a:	492b      	ldr	r1, [pc, #172]	; (80131c8 <ssiProcessEchoCommand+0x2cc>)
 801311c:	69f8      	ldr	r0, [r7, #28]
 801311e:	f00a fdc1 	bl	801dca4 <strcasecmp>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d104      	bne.n	8013132 <ssiProcessEchoCommand+0x236>
#if (HTTP_SERVER_BASIC_AUTH_SUPPORT == ENABLED || HTTP_SERVER_DIGEST_AUTH_SUPPORT == ENABLED)
      //The username provided by the user to the server
      osStrcpy(connection->buffer, connection->request.auth.user);
#else
      //Basic access authentication is not supported
      connection->buffer[0] = '\0';
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 8013130:	e019      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
#endif
   }
   //GMT time?
   else if(!osStrcasecmp(value, "DATE_GMT"))
 8013132:	4926      	ldr	r1, [pc, #152]	; (80131cc <ssiProcessEchoCommand+0x2d0>)
 8013134:	69f8      	ldr	r0, [r7, #28]
 8013136:	f00a fdb5 	bl	801dca4 <strcasecmp>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d104      	bne.n	801314a <ssiProcessEchoCommand+0x24e>
   {
      //The current date and time in Greenwich Mean Time
      connection->buffer[0] = '\0';
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 8013148:	e00d      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Local time?
   else if(!osStrcasecmp(value, "DATE_LOCAL"))
 801314a:	4921      	ldr	r1, [pc, #132]	; (80131d0 <ssiProcessEchoCommand+0x2d4>)
 801314c:	69f8      	ldr	r0, [r7, #28]
 801314e:	f00a fda9 	bl	801dca4 <strcasecmp>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d104      	bne.n	8013162 <ssiProcessEchoCommand+0x266>
   {
      //The current date and time in the local timezone
      connection->buffer[0] = '\0';
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2200      	movs	r2, #0
 801315c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 8013160:	e001      	b.n	8013166 <ssiProcessEchoCommand+0x26a>
   }
   //Unknown variable?
   else
   {
      //Report an error
      return ERROR_INVALID_TAG;
 8013162:	23ef      	movs	r3, #239	; 0xef
 8013164:	e016      	b.n	8013194 <ssiProcessEchoCommand+0x298>
   }

   //Get the length of the resulting string
   length = osStrlen(connection->buffer);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801316c:	4618      	mov	r0, r3
 801316e:	f7ed f899 	bl	80002a4 <strlen>
 8013172:	6078      	str	r0, [r7, #4]

   //Send the contents of the specified environment variable
   error = httpWriteStream(connection, connection->buffer, length);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	4619      	mov	r1, r3
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f7f3 fb82 	bl	8006888 <httpWriteStream>
 8013184:	4603      	mov	r3, r0
 8013186:	827b      	strh	r3, [r7, #18]
   //Failed to send data?
   if(error)
 8013188:	8a7b      	ldrh	r3, [r7, #18]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <ssiProcessEchoCommand+0x296>
      return error;
 801318e:	8a7b      	ldrh	r3, [r7, #18]
 8013190:	e000      	b.n	8013194 <ssiProcessEchoCommand+0x298>

   //Successful processing
   return NO_ERROR;
 8013192:	2300      	movs	r3, #0
}
 8013194:	4618      	mov	r0, r3
 8013196:	3720      	adds	r7, #32
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}
 801319c:	080254e8 	.word	0x080254e8
 80131a0:	080254ec 	.word	0x080254ec
 80131a4:	080254f8 	.word	0x080254f8
 80131a8:	08025504 	.word	0x08025504
 80131ac:	08025508 	.word	0x08025508
 80131b0:	08025514 	.word	0x08025514
 80131b4:	08025520 	.word	0x08025520
 80131b8:	08025530 	.word	0x08025530
 80131bc:	08025540 	.word	0x08025540
 80131c0:	08025550 	.word	0x08025550
 80131c4:	08025560 	.word	0x08025560
 80131c8:	08025570 	.word	0x08025570
 80131cc:	0802557c 	.word	0x0802557c
 80131d0:	08025588 	.word	0x08025588

080131d4 <ssiProcessExecCommand>:
 * @param[in] length Total length of the SSI tag
 * @return Error code
 **/

error_t ssiProcessExecCommand(HttpConnection *connection, const char_t *tag, size_t length)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b088      	sub	sp, #32
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
   char_t *separator;
   char_t *attribute;
   char_t *value;

   //First, check whether CGI is supported by the server
   if(connection->settings->cgiCallback == NULL)
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d101      	bne.n	80131ee <ssiProcessExecCommand+0x1a>
      return ERROR_INVALID_TAG;
 80131ea:	23ef      	movs	r3, #239	; 0xef
 80131ec:	e08c      	b.n	8013308 <ssiProcessExecCommand+0x134>

   //Discard invalid SSI directives
   if(length < 4 || length >= HTTP_SERVER_BUFFER_SIZE)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2b03      	cmp	r3, #3
 80131f2:	d903      	bls.n	80131fc <ssiProcessExecCommand+0x28>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131fa:	d301      	bcc.n	8013200 <ssiProcessExecCommand+0x2c>
      return ERROR_INVALID_TAG;
 80131fc:	23ef      	movs	r3, #239	; 0xef
 80131fe:	e083      	b.n	8013308 <ssiProcessExecCommand+0x134>

   //Skip the SSI exec command (4 bytes)
   osMemcpy(connection->buffer, tag + 4, length - 4);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	1d19      	adds	r1, r3, #4
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	3b04      	subs	r3, #4
 801320e:	461a      	mov	r2, r3
 8013210:	f00a fb36 	bl	801d880 <memcpy>
   //Ensure the resulting string is NULL-terminated
   connection->buffer[length - 4] = '\0';
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	3b04      	subs	r3, #4
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	4413      	add	r3, r2
 801321c:	2200      	movs	r2, #0
 801321e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

   //Check whether a separator is present
   separator = osStrchr(connection->buffer, '=');
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8013228:	213d      	movs	r1, #61	; 0x3d
 801322a:	4618      	mov	r0, r3
 801322c:	f00a fd56 	bl	801dcdc <strchr>
 8013230:	61b8      	str	r0, [r7, #24]
   //Separator not found?
   if(!separator)
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d101      	bne.n	801323c <ssiProcessExecCommand+0x68>
      return ERROR_INVALID_TAG;
 8013238:	23ef      	movs	r3, #239	; 0xef
 801323a:	e065      	b.n	8013308 <ssiProcessExecCommand+0x134>

   //Split the tag
   *separator = '\0';
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	2200      	movs	r2, #0
 8013240:	701a      	strb	r2, [r3, #0]

   //Get attribute name and value
   attribute = strTrimWhitespace(connection->buffer);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8013248:	4618      	mov	r0, r3
 801324a:	f7ee fb9b 	bl	8001984 <strTrimWhitespace>
 801324e:	6178      	str	r0, [r7, #20]
   value = strTrimWhitespace(separator + 1);
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	3301      	adds	r3, #1
 8013254:	4618      	mov	r0, r3
 8013256:	f7ee fb95 	bl	8001984 <strTrimWhitespace>
 801325a:	61f8      	str	r0, [r7, #28]

   //Remove leading simple or double quote
   if(value[0] == '\'' || value[0] == '\"')
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	2b27      	cmp	r3, #39	; 0x27
 8013262:	d003      	beq.n	801326c <ssiProcessExecCommand+0x98>
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b22      	cmp	r3, #34	; 0x22
 801326a:	d102      	bne.n	8013272 <ssiProcessExecCommand+0x9e>
      value++;
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	3301      	adds	r3, #1
 8013270:	61fb      	str	r3, [r7, #28]

   //Get the length of the attribute value
   length = osStrlen(value);
 8013272:	69f8      	ldr	r0, [r7, #28]
 8013274:	f7ed f816 	bl	80002a4 <strlen>
 8013278:	6078      	str	r0, [r7, #4]

   //Remove trailing simple or double quote
   if(length > 0)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d013      	beq.n	80132a8 <ssiProcessExecCommand+0xd4>
   {
      if(value[length - 1] == '\'' || value[length - 1] == '\"')
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	3b01      	subs	r3, #1
 8013284:	69fa      	ldr	r2, [r7, #28]
 8013286:	4413      	add	r3, r2
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	2b27      	cmp	r3, #39	; 0x27
 801328c:	d006      	beq.n	801329c <ssiProcessExecCommand+0xc8>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	3b01      	subs	r3, #1
 8013292:	69fa      	ldr	r2, [r7, #28]
 8013294:	4413      	add	r3, r2
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	2b22      	cmp	r3, #34	; 0x22
 801329a:	d105      	bne.n	80132a8 <ssiProcessExecCommand+0xd4>
         value[length - 1] = '\0';
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	3b01      	subs	r3, #1
 80132a0:	69fa      	ldr	r2, [r7, #28]
 80132a2:	4413      	add	r3, r2
 80132a4:	2200      	movs	r2, #0
 80132a6:	701a      	strb	r2, [r3, #0]
   }

   //Enforce attribute name
   if(osStrcasecmp(attribute, "cgi") && osStrcasecmp(attribute, "cmd") && osStrcasecmp(attribute, "cmd_argument"))
 80132a8:	4919      	ldr	r1, [pc, #100]	; (8013310 <ssiProcessExecCommand+0x13c>)
 80132aa:	6978      	ldr	r0, [r7, #20]
 80132ac:	f00a fcfa 	bl	801dca4 <strcasecmp>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00f      	beq.n	80132d6 <ssiProcessExecCommand+0x102>
 80132b6:	4917      	ldr	r1, [pc, #92]	; (8013314 <ssiProcessExecCommand+0x140>)
 80132b8:	6978      	ldr	r0, [r7, #20]
 80132ba:	f00a fcf3 	bl	801dca4 <strcasecmp>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d008      	beq.n	80132d6 <ssiProcessExecCommand+0x102>
 80132c4:	4914      	ldr	r1, [pc, #80]	; (8013318 <ssiProcessExecCommand+0x144>)
 80132c6:	6978      	ldr	r0, [r7, #20]
 80132c8:	f00a fcec 	bl	801dca4 <strcasecmp>
 80132cc:	4603      	mov	r3, r0
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d001      	beq.n	80132d6 <ssiProcessExecCommand+0x102>
      return ERROR_INVALID_TAG;
 80132d2:	23ef      	movs	r3, #239	; 0xef
 80132d4:	e018      	b.n	8013308 <ssiProcessExecCommand+0x134>
   //Check the length of the CGI parameter
   if(osStrlen(value) > HTTP_SERVER_CGI_PARAM_MAX_LEN)
 80132d6:	69f8      	ldr	r0, [r7, #28]
 80132d8:	f7ec ffe4 	bl	80002a4 <strlen>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b1f      	cmp	r3, #31
 80132e0:	d901      	bls.n	80132e6 <ssiProcessExecCommand+0x112>
      return ERROR_INVALID_TAG;
 80132e2:	23ef      	movs	r3, #239	; 0xef
 80132e4:	e010      	b.n	8013308 <ssiProcessExecCommand+0x134>

   //The scratch buffer may be altered by the user-defined callback.
   //So the CGI parameter must be copied prior to function invocation
   osStrcpy(connection->cgiParam, value);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f203 2385 	addw	r3, r3, #645	; 0x285
 80132ec:	69f9      	ldr	r1, [r7, #28]
 80132ee:	4618      	mov	r0, r3
 80132f0:	f00a fd01 	bl	801dcf6 <strcpy>

   //Invoke user-defined callback
   return connection->settings->cgiCallback(connection, connection->cgiParam);
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	f202 2285 	addw	r2, r2, #645	; 0x285
 8013300:	4611      	mov	r1, r2
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	4798      	blx	r3
 8013306:	4603      	mov	r3, r0
}
 8013308:	4618      	mov	r0, r3
 801330a:	3720      	adds	r7, #32
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	08025594 	.word	0x08025594
 8013314:	08025598 	.word	0x08025598
 8013318:	0802559c 	.word	0x0802559c

0801331c <ssiSearchTag>:
 * @retval ERROR_PARTIAL_MATCH if a partial match occurs
 * @retval ERROR_NO_MATCH if the tag does not appear in the string
 **/

error_t ssiSearchTag(const char_t *s, size_t sLen, const char_t *tag, size_t tagLen, uint_t *pos)
{
 801331c:	b480      	push	{r7}
 801331e:	b087      	sub	sp, #28
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Parse the input string
   for(i = 0; i <= sLen; i++)
 801332a:	2300      	movs	r3, #0
 801332c:	617b      	str	r3, [r7, #20]
 801332e:	e038      	b.n	80133a2 <ssiSearchTag+0x86>
   {
      //Compare current substring with the given tag
      for(j = 0; (i + j) < sLen && j < tagLen; j++)
 8013330:	2300      	movs	r3, #0
 8013332:	613b      	str	r3, [r7, #16]
 8013334:	e00e      	b.n	8013354 <ssiSearchTag+0x38>
      {
         if(s[i + j] != tag[j])
 8013336:	697a      	ldr	r2, [r7, #20]
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	4413      	add	r3, r2
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	4413      	add	r3, r2
 8013340:	781a      	ldrb	r2, [r3, #0]
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	440b      	add	r3, r1
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	429a      	cmp	r2, r3
 801334c:	d10d      	bne.n	801336a <ssiSearchTag+0x4e>
      for(j = 0; (i + j) < sLen && j < tagLen; j++)
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	3301      	adds	r3, #1
 8013352:	613b      	str	r3, [r7, #16]
 8013354:	697a      	ldr	r2, [r7, #20]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	4413      	add	r3, r2
 801335a:	68ba      	ldr	r2, [r7, #8]
 801335c:	429a      	cmp	r2, r3
 801335e:	d905      	bls.n	801336c <ssiSearchTag+0x50>
 8013360:	693a      	ldr	r2, [r7, #16]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	429a      	cmp	r2, r3
 8013366:	d3e6      	bcc.n	8013336 <ssiSearchTag+0x1a>
 8013368:	e000      	b.n	801336c <ssiSearchTag+0x50>
            break;
 801336a:	bf00      	nop
      }

      //Check whether a full match occurred
      if(j == tagLen)
 801336c:	693a      	ldr	r2, [r7, #16]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d104      	bne.n	801337e <ssiSearchTag+0x62>
      {
         //Save the position of the first character
         *pos = i;
 8013374:	6a3b      	ldr	r3, [r7, #32]
 8013376:	697a      	ldr	r2, [r7, #20]
 8013378:	601a      	str	r2, [r3, #0]
         //The specified tag has been found
         return NO_ERROR;
 801337a:	2300      	movs	r3, #0
 801337c:	e017      	b.n	80133ae <ssiSearchTag+0x92>
      }
      //Check whether a partial match occurred
      else if((i + j) == sLen && j > 0)
 801337e:	697a      	ldr	r2, [r7, #20]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	4413      	add	r3, r2
 8013384:	68ba      	ldr	r2, [r7, #8]
 8013386:	429a      	cmp	r2, r3
 8013388:	d108      	bne.n	801339c <ssiSearchTag+0x80>
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d005      	beq.n	801339c <ssiSearchTag+0x80>
      {
         //Save the position of the first character
         *pos = i;
 8013390:	6a3b      	ldr	r3, [r7, #32]
 8013392:	697a      	ldr	r2, [r7, #20]
 8013394:	601a      	str	r2, [r3, #0]
         //The beginning of the tag matches the end of the string
         return ERROR_PARTIAL_MATCH;
 8013396:	f240 2345 	movw	r3, #581	; 0x245
 801339a:	e008      	b.n	80133ae <ssiSearchTag+0x92>
   for(i = 0; i <= sLen; i++)
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	3301      	adds	r3, #1
 80133a0:	617b      	str	r3, [r7, #20]
 80133a2:	697a      	ldr	r2, [r7, #20]
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d9c2      	bls.n	8013330 <ssiSearchTag+0x14>
      }
   }

   //The tag does not appear in the string
   return ERROR_NO_MATCH;
 80133aa:	f44f 7311 	mov.w	r3, #580	; 0x244
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	371c      	adds	r7, #28
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr
	...

080133bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80133bc:	b480      	push	{r7}
 80133be:	b085      	sub	sp, #20
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f003 0307 	and.w	r3, r3, #7
 80133ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80133cc:	4b0c      	ldr	r3, [pc, #48]	; (8013400 <__NVIC_SetPriorityGrouping+0x44>)
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80133d8:	4013      	ands	r3, r2
 80133da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80133e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80133e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80133ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80133ee:	4a04      	ldr	r2, [pc, #16]	; (8013400 <__NVIC_SetPriorityGrouping+0x44>)
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	60d3      	str	r3, [r2, #12]
}
 80133f4:	bf00      	nop
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr
 8013400:	e000ed00 	.word	0xe000ed00

08013404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	4603      	mov	r3, r0
 801340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013412:	2b00      	cmp	r3, #0
 8013414:	db0b      	blt.n	801342e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013416:	79fb      	ldrb	r3, [r7, #7]
 8013418:	f003 021f 	and.w	r2, r3, #31
 801341c:	4907      	ldr	r1, [pc, #28]	; (801343c <__NVIC_EnableIRQ+0x38>)
 801341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013422:	095b      	lsrs	r3, r3, #5
 8013424:	2001      	movs	r0, #1
 8013426:	fa00 f202 	lsl.w	r2, r0, r2
 801342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801342e:	bf00      	nop
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	e000e100 	.word	0xe000e100

08013440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	4603      	mov	r3, r0
 8013448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801344e:	2b00      	cmp	r3, #0
 8013450:	db12      	blt.n	8013478 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013452:	79fb      	ldrb	r3, [r7, #7]
 8013454:	f003 021f 	and.w	r2, r3, #31
 8013458:	490a      	ldr	r1, [pc, #40]	; (8013484 <__NVIC_DisableIRQ+0x44>)
 801345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801345e:	095b      	lsrs	r3, r3, #5
 8013460:	2001      	movs	r0, #1
 8013462:	fa00 f202 	lsl.w	r2, r0, r2
 8013466:	3320      	adds	r3, #32
 8013468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801346c:	f3bf 8f4f 	dsb	sy
}
 8013470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013472:	f3bf 8f6f 	isb	sy
}
 8013476:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8013478:	bf00      	nop
 801347a:	370c      	adds	r7, #12
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr
 8013484:	e000e100 	.word	0xe000e100

08013488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	6039      	str	r1, [r7, #0]
 8013492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013498:	2b00      	cmp	r3, #0
 801349a:	db0a      	blt.n	80134b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	490c      	ldr	r1, [pc, #48]	; (80134d4 <__NVIC_SetPriority+0x4c>)
 80134a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134a6:	0112      	lsls	r2, r2, #4
 80134a8:	b2d2      	uxtb	r2, r2
 80134aa:	440b      	add	r3, r1
 80134ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80134b0:	e00a      	b.n	80134c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	4908      	ldr	r1, [pc, #32]	; (80134d8 <__NVIC_SetPriority+0x50>)
 80134b8:	79fb      	ldrb	r3, [r7, #7]
 80134ba:	f003 030f 	and.w	r3, r3, #15
 80134be:	3b04      	subs	r3, #4
 80134c0:	0112      	lsls	r2, r2, #4
 80134c2:	b2d2      	uxtb	r2, r2
 80134c4:	440b      	add	r3, r1
 80134c6:	761a      	strb	r2, [r3, #24]
}
 80134c8:	bf00      	nop
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	e000e100 	.word	0xe000e100
 80134d8:	e000ed00 	.word	0xe000ed00

080134dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80134dc:	b480      	push	{r7}
 80134de:	b089      	sub	sp, #36	; 0x24
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f003 0307 	and.w	r3, r3, #7
 80134ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	f1c3 0307 	rsb	r3, r3, #7
 80134f6:	2b04      	cmp	r3, #4
 80134f8:	bf28      	it	cs
 80134fa:	2304      	movcs	r3, #4
 80134fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	3304      	adds	r3, #4
 8013502:	2b06      	cmp	r3, #6
 8013504:	d902      	bls.n	801350c <NVIC_EncodePriority+0x30>
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	3b03      	subs	r3, #3
 801350a:	e000      	b.n	801350e <NVIC_EncodePriority+0x32>
 801350c:	2300      	movs	r3, #0
 801350e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013510:	f04f 32ff 	mov.w	r2, #4294967295
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	fa02 f303 	lsl.w	r3, r2, r3
 801351a:	43da      	mvns	r2, r3
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	401a      	ands	r2, r3
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013524:	f04f 31ff 	mov.w	r1, #4294967295
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	fa01 f303 	lsl.w	r3, r1, r3
 801352e:	43d9      	mvns	r1, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013534:	4313      	orrs	r3, r2
         );
}
 8013536:	4618      	mov	r0, r3
 8013538:	3724      	adds	r7, #36	; 0x24
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
	...

08013544 <stm32f4xxEthInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t stm32f4xxEthInit(NetInterface *interface)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("Initializing STM32F4 Ethernet MAC...\r\n");
 801354c:	f7ed fda5 	bl	800109a <osSuspendAllTasks>
 8013550:	4b7d      	ldr	r3, [pc, #500]	; (8013748 <stm32f4xxEthInit+0x204>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	2226      	movs	r2, #38	; 0x26
 8013558:	2101      	movs	r1, #1
 801355a:	487c      	ldr	r0, [pc, #496]	; (801374c <stm32f4xxEthInit+0x208>)
 801355c:	f009 fefa 	bl	801d354 <fwrite>
 8013560:	f7ed fda6 	bl	80010b0 <osResumeAllTasks>

   //Save underlying network interface
   nicDriverInterface = interface;
 8013564:	4a7a      	ldr	r2, [pc, #488]	; (8013750 <stm32f4xxEthInit+0x20c>)
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6013      	str	r3, [r2, #0]

   //GPIO configuration
   stm32f4xxEthInitGpio(interface);
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f000 f8fc 	bl	8013768 <stm32f4xxEthInitGpio>

   //Enable Ethernet MAC clock
   __HAL_RCC_ETHMAC_CLK_ENABLE();
 8013570:	2300      	movs	r3, #0
 8013572:	613b      	str	r3, [r7, #16]
 8013574:	4b77      	ldr	r3, [pc, #476]	; (8013754 <stm32f4xxEthInit+0x210>)
 8013576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013578:	4a76      	ldr	r2, [pc, #472]	; (8013754 <stm32f4xxEthInit+0x210>)
 801357a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801357e:	6313      	str	r3, [r2, #48]	; 0x30
 8013580:	4b74      	ldr	r3, [pc, #464]	; (8013754 <stm32f4xxEthInit+0x210>)
 8013582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013588:	613b      	str	r3, [r7, #16]
 801358a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_ETHMACTX_CLK_ENABLE();
 801358c:	2300      	movs	r3, #0
 801358e:	60fb      	str	r3, [r7, #12]
 8013590:	4b70      	ldr	r3, [pc, #448]	; (8013754 <stm32f4xxEthInit+0x210>)
 8013592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013594:	4a6f      	ldr	r2, [pc, #444]	; (8013754 <stm32f4xxEthInit+0x210>)
 8013596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801359a:	6313      	str	r3, [r2, #48]	; 0x30
 801359c:	4b6d      	ldr	r3, [pc, #436]	; (8013754 <stm32f4xxEthInit+0x210>)
 801359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80135a4:	60fb      	str	r3, [r7, #12]
 80135a6:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_ETHMACRX_CLK_ENABLE();
 80135a8:	2300      	movs	r3, #0
 80135aa:	60bb      	str	r3, [r7, #8]
 80135ac:	4b69      	ldr	r3, [pc, #420]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b0:	4a68      	ldr	r2, [pc, #416]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80135b6:	6313      	str	r3, [r2, #48]	; 0x30
 80135b8:	4b66      	ldr	r3, [pc, #408]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135c0:	60bb      	str	r3, [r7, #8]
 80135c2:	68bb      	ldr	r3, [r7, #8]

   //Reset Ethernet MAC peripheral
   __HAL_RCC_ETHMAC_FORCE_RESET();
 80135c4:	4b63      	ldr	r3, [pc, #396]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135c6:	691b      	ldr	r3, [r3, #16]
 80135c8:	4a62      	ldr	r2, [pc, #392]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80135ce:	6113      	str	r3, [r2, #16]
   __HAL_RCC_ETHMAC_RELEASE_RESET();
 80135d0:	4b60      	ldr	r3, [pc, #384]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135d2:	691b      	ldr	r3, [r3, #16]
 80135d4:	4a5f      	ldr	r2, [pc, #380]	; (8013754 <stm32f4xxEthInit+0x210>)
 80135d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80135da:	6113      	str	r3, [r2, #16]

   //Perform a software reset
   ETH->DMABMR |= ETH_DMABMR_SR;
 80135dc:	4b5e      	ldr	r3, [pc, #376]	; (8013758 <stm32f4xxEthInit+0x214>)
 80135de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	495c      	ldr	r1, [pc, #368]	; (8013758 <stm32f4xxEthInit+0x214>)
 80135e6:	f043 0201 	orr.w	r2, r3, #1
 80135ea:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80135ee:	601a      	str	r2, [r3, #0]
   //Wait for the reset to complete
   while((ETH->DMABMR & ETH_DMABMR_SR) != 0)
 80135f0:	bf00      	nop
 80135f2:	4b59      	ldr	r3, [pc, #356]	; (8013758 <stm32f4xxEthInit+0x214>)
 80135f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f003 0301 	and.w	r3, r3, #1
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1f7      	bne.n	80135f2 <stm32f4xxEthInit+0xae>
   {
   }

   //Adjust MDC clock range depending on HCLK frequency
   ETH->MACMIIAR = ETH_MACMIIAR_CR_Div102;
 8013602:	4b55      	ldr	r3, [pc, #340]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013604:	2210      	movs	r2, #16
 8013606:	611a      	str	r2, [r3, #16]

   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801360c:	2b00      	cmp	r3, #0
 801360e:	d007      	beq.n	8013620 <stm32f4xxEthInit+0xdc>
   {
      //Ethernet PHY initialization
      error = interface->phyDriver->init(interface);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	4798      	blx	r3
 801361a:	4603      	mov	r3, r0
 801361c:	82fb      	strh	r3, [r7, #22]
 801361e:	e00d      	b.n	801363c <stm32f4xxEthInit+0xf8>
   }
   else if(interface->switchDriver != NULL)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013624:	2b00      	cmp	r3, #0
 8013626:	d007      	beq.n	8013638 <stm32f4xxEthInit+0xf4>
   {
      //Ethernet switch initialization
      error = interface->switchDriver->init(interface);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	4798      	blx	r3
 8013632:	4603      	mov	r3, r0
 8013634:	82fb      	strh	r3, [r7, #22]
 8013636:	e001      	b.n	801363c <stm32f4xxEthInit+0xf8>
   }
   else
   {
      //The interface is not properly configured
      error = ERROR_FAILURE;
 8013638:	2301      	movs	r3, #1
 801363a:	82fb      	strh	r3, [r7, #22]
   }

   //Any error to report?
   if(error)
 801363c:	8afb      	ldrh	r3, [r7, #22]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <stm32f4xxEthInit+0x102>
   {
      return error;
 8013642:	8afb      	ldrh	r3, [r7, #22]
 8013644:	e07b      	b.n	801373e <stm32f4xxEthInit+0x1fa>
   }

   //Use default MAC configuration
   ETH->MACCR = ETH_MACCR_RESERVED15 | ETH_MACCR_ROD;
 8013646:	4b44      	ldr	r3, [pc, #272]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013648:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 801364c:	601a      	str	r2, [r3, #0]

   //Set the MAC address of the station
   ETH->MACA0LR = interface->macAddr.w[0] | (interface->macAddr.w[1] << 16);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8013654:	461a      	mov	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801365c:	041b      	lsls	r3, r3, #16
 801365e:	431a      	orrs	r2, r3
 8013660:	4b3d      	ldr	r3, [pc, #244]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013662:	645a      	str	r2, [r3, #68]	; 0x44
   ETH->MACA0HR = interface->macAddr.w[2];
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801366a:	4b3b      	ldr	r3, [pc, #236]	; (8013758 <stm32f4xxEthInit+0x214>)
 801366c:	641a      	str	r2, [r3, #64]	; 0x40

   //The MAC supports 3 additional addresses for unicast perfect filtering
   ETH->MACA1LR = 0;
 801366e:	4b3a      	ldr	r3, [pc, #232]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013670:	2200      	movs	r2, #0
 8013672:	64da      	str	r2, [r3, #76]	; 0x4c
   ETH->MACA1HR = 0;
 8013674:	4b38      	ldr	r3, [pc, #224]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013676:	2200      	movs	r2, #0
 8013678:	649a      	str	r2, [r3, #72]	; 0x48
   ETH->MACA2LR = 0;
 801367a:	4b37      	ldr	r3, [pc, #220]	; (8013758 <stm32f4xxEthInit+0x214>)
 801367c:	2200      	movs	r2, #0
 801367e:	655a      	str	r2, [r3, #84]	; 0x54
   ETH->MACA2HR = 0;
 8013680:	4b35      	ldr	r3, [pc, #212]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013682:	2200      	movs	r2, #0
 8013684:	651a      	str	r2, [r3, #80]	; 0x50
   ETH->MACA3LR = 0;
 8013686:	4b34      	ldr	r3, [pc, #208]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013688:	2200      	movs	r2, #0
 801368a:	65da      	str	r2, [r3, #92]	; 0x5c
   ETH->MACA3HR = 0;
 801368c:	4b32      	ldr	r3, [pc, #200]	; (8013758 <stm32f4xxEthInit+0x214>)
 801368e:	2200      	movs	r2, #0
 8013690:	659a      	str	r2, [r3, #88]	; 0x58

   //Initialize hash table
   ETH->MACHTLR = 0;
 8013692:	4b31      	ldr	r3, [pc, #196]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013694:	2200      	movs	r2, #0
 8013696:	60da      	str	r2, [r3, #12]
   ETH->MACHTHR = 0;
 8013698:	4b2f      	ldr	r3, [pc, #188]	; (8013758 <stm32f4xxEthInit+0x214>)
 801369a:	2200      	movs	r2, #0
 801369c:	609a      	str	r2, [r3, #8]

   //Configure the receive filter
   ETH->MACFFR = ETH_MACFFR_HPF | ETH_MACFFR_HM;
 801369e:	4b2e      	ldr	r3, [pc, #184]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136a0:	f240 4204 	movw	r2, #1028	; 0x404
 80136a4:	605a      	str	r2, [r3, #4]
   //Disable flow control
   ETH->MACFCR = 0;
 80136a6:	4b2c      	ldr	r3, [pc, #176]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	619a      	str	r2, [r3, #24]
   //Enable store and forward mode
   ETH->DMAOMR = ETH_DMAOMR_RSF | ETH_DMAOMR_TSF;
 80136ac:	4b2a      	ldr	r3, [pc, #168]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136b2:	3318      	adds	r3, #24
 80136b4:	f04f 7208 	mov.w	r2, #35651584	; 0x2200000
 80136b8:	601a      	str	r2, [r3, #0]

   //Configure DMA bus mode
   ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP | ETH_DMABMR_RDP_1Beat |
 80136ba:	4b27      	ldr	r3, [pc, #156]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136c0:	4a26      	ldr	r2, [pc, #152]	; (801375c <stm32f4xxEthInit+0x218>)
 80136c2:	601a      	str	r2, [r3, #0]
      ETH_DMABMR_RTPR_1_1 | ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;

   //Initialize DMA descriptor lists
   stm32f4xxEthInitDmaDesc(interface);
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 f8d9 	bl	801387c <stm32f4xxEthInitDmaDesc>

   //Prevent interrupts from being generated when the transmit statistic
   //counters reach half their maximum value
   ETH->MMCTIMR = ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | ETH_MMCTIMR_TGFSCM;
 80136ca:	4b23      	ldr	r3, [pc, #140]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136cc:	f44f 1203 	mov.w	r2, #2146304	; 0x20c000
 80136d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

   //Prevent interrupts from being generated when the receive statistic
   //counters reach half their maximum value
   ETH->MMCRIMR = ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | ETH_MMCRIMR_RFCEM;
 80136d4:	4b20      	ldr	r3, [pc, #128]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136d6:	4a22      	ldr	r2, [pc, #136]	; (8013760 <stm32f4xxEthInit+0x21c>)
 80136d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

   //Disable MAC interrupts
   ETH->MACIMR = ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM;
 80136dc:	4b1e      	ldr	r3, [pc, #120]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136de:	f44f 7202 	mov.w	r2, #520	; 0x208
 80136e2:	63da      	str	r2, [r3, #60]	; 0x3c
   //Enable the desired DMA interrupts
   ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE;
 80136e4:	4b1c      	ldr	r3, [pc, #112]	; (8013758 <stm32f4xxEthInit+0x214>)
 80136e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136ea:	331c      	adds	r3, #28
 80136ec:	4a1d      	ldr	r2, [pc, #116]	; (8013764 <stm32f4xxEthInit+0x220>)
 80136ee:	601a      	str	r2, [r3, #0]

   //Set priority grouping (4 bits for pre-emption priority, no bits for subpriority)
   NVIC_SetPriorityGrouping(STM32F4XX_ETH_IRQ_PRIORITY_GROUPING);
 80136f0:	2003      	movs	r0, #3
 80136f2:	f7ff fe63 	bl	80133bc <__NVIC_SetPriorityGrouping>

   //Configure Ethernet interrupt priority
   NVIC_SetPriority(ETH_IRQn, NVIC_EncodePriority(STM32F4XX_ETH_IRQ_PRIORITY_GROUPING,
 80136f6:	2200      	movs	r2, #0
 80136f8:	210c      	movs	r1, #12
 80136fa:	2003      	movs	r0, #3
 80136fc:	f7ff feee 	bl	80134dc <NVIC_EncodePriority>
 8013700:	4603      	mov	r3, r0
 8013702:	4619      	mov	r1, r3
 8013704:	203d      	movs	r0, #61	; 0x3d
 8013706:	f7ff febf 	bl	8013488 <__NVIC_SetPriority>
      STM32F4XX_ETH_IRQ_GROUP_PRIORITY, STM32F4XX_ETH_IRQ_SUB_PRIORITY));

   //Enable MAC transmission and reception
   ETH->MACCR |= ETH_MACCR_TE | ETH_MACCR_RE;
 801370a:	4b13      	ldr	r3, [pc, #76]	; (8013758 <stm32f4xxEthInit+0x214>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	4a12      	ldr	r2, [pc, #72]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013710:	f043 030c 	orr.w	r3, r3, #12
 8013714:	6013      	str	r3, [r2, #0]
   //Enable DMA transmission and reception
   ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR;
 8013716:	4b10      	ldr	r3, [pc, #64]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801371c:	3318      	adds	r3, #24
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	490d      	ldr	r1, [pc, #52]	; (8013758 <stm32f4xxEthInit+0x214>)
 8013722:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8013726:	f042 0202 	orr.w	r2, r2, #2
 801372a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 801372e:	3318      	adds	r3, #24
 8013730:	601a      	str	r2, [r3, #0]

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	3354      	adds	r3, #84	; 0x54
 8013736:	4618      	mov	r0, r3
 8013738:	f7ed fced 	bl	8001116 <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3718      	adds	r7, #24
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	20000044 	.word	0x20000044
 801374c:	080255ec 	.word	0x080255ec
 8013750:	20000a88 	.word	0x20000a88
 8013754:	40023800 	.word	0x40023800
 8013758:	40028000 	.word	0x40028000
 801375c:	02820180 	.word	0x02820180
 8013760:	00020060 	.word	0x00020060
 8013764:	00010041 	.word	0x00010041

08013768 <stm32f4xxEthInitGpio>:
 * @brief GPIO configuration
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthInitGpio(NetInterface *interface)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b08c      	sub	sp, #48	; 0x30
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
   sleep(10);

//Nucleo-F429ZI evaluation board?
#elif defined(USE_STM32F4XX_NUCLEO_144)
   //Enable SYSCFG clock
     __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013770:	2300      	movs	r3, #0
 8013772:	61bb      	str	r3, [r7, #24]
 8013774:	4b3b      	ldr	r3, [pc, #236]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 8013776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013778:	4a3a      	ldr	r2, [pc, #232]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 801377a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801377e:	6453      	str	r3, [r2, #68]	; 0x44
 8013780:	4b38      	ldr	r3, [pc, #224]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 8013782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013788:	61bb      	str	r3, [r7, #24]
 801378a:	69bb      	ldr	r3, [r7, #24]

     //Enable GPIO clocks
     __HAL_RCC_GPIOA_CLK_ENABLE();
 801378c:	2300      	movs	r3, #0
 801378e:	617b      	str	r3, [r7, #20]
 8013790:	4b34      	ldr	r3, [pc, #208]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 8013792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013794:	4a33      	ldr	r2, [pc, #204]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 8013796:	f043 0301 	orr.w	r3, r3, #1
 801379a:	6313      	str	r3, [r2, #48]	; 0x30
 801379c:	4b31      	ldr	r3, [pc, #196]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 801379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	617b      	str	r3, [r7, #20]
 80137a6:	697b      	ldr	r3, [r7, #20]
     __HAL_RCC_GPIOB_CLK_ENABLE();
 80137a8:	2300      	movs	r3, #0
 80137aa:	613b      	str	r3, [r7, #16]
 80137ac:	4b2d      	ldr	r3, [pc, #180]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137b0:	4a2c      	ldr	r2, [pc, #176]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137b2:	f043 0302 	orr.w	r3, r3, #2
 80137b6:	6313      	str	r3, [r2, #48]	; 0x30
 80137b8:	4b2a      	ldr	r3, [pc, #168]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137bc:	f003 0302 	and.w	r3, r3, #2
 80137c0:	613b      	str	r3, [r7, #16]
 80137c2:	693b      	ldr	r3, [r7, #16]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 80137c4:	2300      	movs	r3, #0
 80137c6:	60fb      	str	r3, [r7, #12]
 80137c8:	4b26      	ldr	r3, [pc, #152]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137cc:	4a25      	ldr	r2, [pc, #148]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137ce:	f043 0304 	orr.w	r3, r3, #4
 80137d2:	6313      	str	r3, [r2, #48]	; 0x30
 80137d4:	4b23      	ldr	r3, [pc, #140]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137d8:	f003 0304 	and.w	r3, r3, #4
 80137dc:	60fb      	str	r3, [r7, #12]
 80137de:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOG_CLK_ENABLE();
 80137e0:	2300      	movs	r3, #0
 80137e2:	60bb      	str	r3, [r7, #8]
 80137e4:	4b1f      	ldr	r3, [pc, #124]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e8:	4a1e      	ldr	r2, [pc, #120]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137ee:	6313      	str	r3, [r2, #48]	; 0x30
 80137f0:	4b1c      	ldr	r3, [pc, #112]	; (8013864 <stm32f4xxEthInitGpio+0xfc>)
 80137f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137f8:	60bb      	str	r3, [r7, #8]
 80137fa:	68bb      	ldr	r3, [r7, #8]

     //Select RMII interface mode
     SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80137fc:	4b1a      	ldr	r3, [pc, #104]	; (8013868 <stm32f4xxEthInitGpio+0x100>)
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	4a19      	ldr	r2, [pc, #100]	; (8013868 <stm32f4xxEthInitGpio+0x100>)
 8013802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013806:	6053      	str	r3, [r2, #4]

     //Configure RMII pins
     GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8013808:	2302      	movs	r3, #2
 801380a:	623b      	str	r3, [r7, #32]
     GPIO_InitStructure.Pull = GPIO_NOPULL;
 801380c:	2300      	movs	r3, #0
 801380e:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013810:	2303      	movs	r3, #3
 8013812:	62bb      	str	r3, [r7, #40]	; 0x28
     GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8013814:	230b      	movs	r3, #11
 8013816:	62fb      	str	r3, [r7, #44]	; 0x2c

     //Configure ETH_RMII_REF_CLK (PA1), ETH_MDIO (PA2) and ETH_RMII_CRS_DV (PA7)
     GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8013818:	2386      	movs	r3, #134	; 0x86
 801381a:	61fb      	str	r3, [r7, #28]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801381c:	f107 031c 	add.w	r3, r7, #28
 8013820:	4619      	mov	r1, r3
 8013822:	4812      	ldr	r0, [pc, #72]	; (801386c <stm32f4xxEthInitGpio+0x104>)
 8013824:	f007 ff5c 	bl	801b6e0 <HAL_GPIO_Init>

     //Configure ETH_RMII_TX_EN (PB11)
     GPIO_InitStructure.Pin = GPIO_PIN_11;
 8013828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801382c:	61fb      	str	r3, [r7, #28]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801382e:	f107 031c 	add.w	r3, r7, #28
 8013832:	4619      	mov	r1, r3
 8013834:	480e      	ldr	r0, [pc, #56]	; (8013870 <stm32f4xxEthInitGpio+0x108>)
 8013836:	f007 ff53 	bl	801b6e0 <HAL_GPIO_Init>

     //Configure ETH_MDC (PC1), ETH_RMII_RXD0 (PC4) and ETH_RMII_RXD1 (PC5)
     GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 801383a:	2332      	movs	r3, #50	; 0x32
 801383c:	61fb      	str	r3, [r7, #28]
     HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 801383e:	f107 031c 	add.w	r3, r7, #28
 8013842:	4619      	mov	r1, r3
 8013844:	480b      	ldr	r0, [pc, #44]	; (8013874 <stm32f4xxEthInitGpio+0x10c>)
 8013846:	f007 ff4b 	bl	801b6e0 <HAL_GPIO_Init>

     //Configure ETH_RMII_TXD0 (PG13) and ETH_RMII_TXD1 (PG14)
     GPIO_InitStructure.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 801384a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801384e:	61fb      	str	r3, [r7, #28]
     HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8013850:	f107 031c 	add.w	r3, r7, #28
 8013854:	4619      	mov	r1, r3
 8013856:	4808      	ldr	r0, [pc, #32]	; (8013878 <stm32f4xxEthInitGpio+0x110>)
 8013858:	f007 ff42 	bl	801b6e0 <HAL_GPIO_Init>

   //Configure ETH_RMII_TXD0 (PG13) and ETH_RMII_TXD1 (PG14)
   GPIO_InitStructure.Pin = GPIO_PIN_13 | GPIO_PIN_14;
   HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
#endif
}
 801385c:	bf00      	nop
 801385e:	3730      	adds	r7, #48	; 0x30
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	40023800 	.word	0x40023800
 8013868:	40013800 	.word	0x40013800
 801386c:	40020000 	.word	0x40020000
 8013870:	40020400 	.word	0x40020400
 8013874:	40020800 	.word	0x40020800
 8013878:	40021800 	.word	0x40021800

0801387c <stm32f4xxEthInitDmaDesc>:
 * @brief Initialize DMA descriptor lists
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthInitDmaDesc(NetInterface *interface)
{
 801387c:	b480      	push	{r7}
 801387e:	b085      	sub	sp, #20
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Initialize TX DMA descriptor list
   for(i = 0; i < STM32F4XX_ETH_TX_BUFFER_COUNT; i++)
 8013884:	2300      	movs	r3, #0
 8013886:	60fb      	str	r3, [r7, #12]
 8013888:	e045      	b.n	8013916 <stm32f4xxEthInitDmaDesc+0x9a>
   {
      //Use chain structure rather than ring structure
      txDmaDesc[i].tdes0 = ETH_TDES0_IC | ETH_TDES0_TCH;
 801388a:	4a5f      	ldr	r2, [pc, #380]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	015b      	lsls	r3, r3, #5
 8013890:	4413      	add	r3, r2
 8013892:	4a5e      	ldr	r2, [pc, #376]	; (8013a0c <stm32f4xxEthInitDmaDesc+0x190>)
 8013894:	601a      	str	r2, [r3, #0]
      //Initialize transmit buffer size
      txDmaDesc[i].tdes1 = 0;
 8013896:	4a5c      	ldr	r2, [pc, #368]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	015b      	lsls	r3, r3, #5
 801389c:	4413      	add	r3, r2
 801389e:	3304      	adds	r3, #4
 80138a0:	2200      	movs	r2, #0
 80138a2:	601a      	str	r2, [r3, #0]
      //Transmit buffer address
      txDmaDesc[i].tdes2 = (uint32_t) txBuffer[i];
 80138a4:	68fa      	ldr	r2, [r7, #12]
 80138a6:	4613      	mov	r3, r2
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	4413      	add	r3, r2
 80138ac:	025b      	lsls	r3, r3, #9
 80138ae:	4a58      	ldr	r2, [pc, #352]	; (8013a10 <stm32f4xxEthInitDmaDesc+0x194>)
 80138b0:	4413      	add	r3, r2
 80138b2:	4619      	mov	r1, r3
 80138b4:	4a54      	ldr	r2, [pc, #336]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	015b      	lsls	r3, r3, #5
 80138ba:	4413      	add	r3, r2
 80138bc:	3308      	adds	r3, #8
 80138be:	6019      	str	r1, [r3, #0]
      //Next descriptor address
      txDmaDesc[i].tdes3 = (uint32_t) &txDmaDesc[i + 1];
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	3301      	adds	r3, #1
 80138c4:	015b      	lsls	r3, r3, #5
 80138c6:	4a50      	ldr	r2, [pc, #320]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138c8:	4413      	add	r3, r2
 80138ca:	4619      	mov	r1, r3
 80138cc:	4a4e      	ldr	r2, [pc, #312]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	015b      	lsls	r3, r3, #5
 80138d2:	4413      	add	r3, r2
 80138d4:	330c      	adds	r3, #12
 80138d6:	6019      	str	r1, [r3, #0]
      //Reserved fields
      txDmaDesc[i].tdes4 = 0;
 80138d8:	4a4b      	ldr	r2, [pc, #300]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	015b      	lsls	r3, r3, #5
 80138de:	4413      	add	r3, r2
 80138e0:	3310      	adds	r3, #16
 80138e2:	2200      	movs	r2, #0
 80138e4:	601a      	str	r2, [r3, #0]
      txDmaDesc[i].tdes5 = 0;
 80138e6:	4a48      	ldr	r2, [pc, #288]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	015b      	lsls	r3, r3, #5
 80138ec:	4413      	add	r3, r2
 80138ee:	3314      	adds	r3, #20
 80138f0:	2200      	movs	r2, #0
 80138f2:	601a      	str	r2, [r3, #0]
      //Transmit frame time stamp
      txDmaDesc[i].tdes6 = 0;
 80138f4:	4a44      	ldr	r2, [pc, #272]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	015b      	lsls	r3, r3, #5
 80138fa:	4413      	add	r3, r2
 80138fc:	3318      	adds	r3, #24
 80138fe:	2200      	movs	r2, #0
 8013900:	601a      	str	r2, [r3, #0]
      txDmaDesc[i].tdes7 = 0;
 8013902:	4a41      	ldr	r2, [pc, #260]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	015b      	lsls	r3, r3, #5
 8013908:	4413      	add	r3, r2
 801390a:	331c      	adds	r3, #28
 801390c:	2200      	movs	r2, #0
 801390e:	601a      	str	r2, [r3, #0]
   for(i = 0; i < STM32F4XX_ETH_TX_BUFFER_COUNT; i++)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3301      	adds	r3, #1
 8013914:	60fb      	str	r3, [r7, #12]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2b02      	cmp	r3, #2
 801391a:	d9b6      	bls.n	801388a <stm32f4xxEthInitDmaDesc+0xe>
   }

   //The last descriptor is chained to the first entry
   txDmaDesc[i - 1].tdes3 = (uint32_t) &txDmaDesc[0];
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	3b01      	subs	r3, #1
 8013920:	4a39      	ldr	r2, [pc, #228]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 8013922:	4939      	ldr	r1, [pc, #228]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 8013924:	015b      	lsls	r3, r3, #5
 8013926:	440b      	add	r3, r1
 8013928:	330c      	adds	r3, #12
 801392a:	601a      	str	r2, [r3, #0]
   //Point to the very first descriptor
   txCurDmaDesc = &txDmaDesc[0];
 801392c:	4b39      	ldr	r3, [pc, #228]	; (8013a14 <stm32f4xxEthInitDmaDesc+0x198>)
 801392e:	4a36      	ldr	r2, [pc, #216]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 8013930:	601a      	str	r2, [r3, #0]

   //Initialize RX DMA descriptor list
   for(i = 0; i < STM32F4XX_ETH_RX_BUFFER_COUNT; i++)
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
 8013936:	e047      	b.n	80139c8 <stm32f4xxEthInitDmaDesc+0x14c>
   {
      //The descriptor is initially owned by the DMA
      rxDmaDesc[i].rdes0 = ETH_RDES0_OWN;
 8013938:	4a37      	ldr	r2, [pc, #220]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	015b      	lsls	r3, r3, #5
 801393e:	4413      	add	r3, r2
 8013940:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013944:	601a      	str	r2, [r3, #0]
      //Use chain structure rather than ring structure
      rxDmaDesc[i].rdes1 = ETH_RDES1_RCH | (STM32F4XX_ETH_RX_BUFFER_SIZE & ETH_RDES1_RBS1);
 8013946:	4a34      	ldr	r2, [pc, #208]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	015b      	lsls	r3, r3, #5
 801394c:	4413      	add	r3, r2
 801394e:	3304      	adds	r3, #4
 8013950:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8013954:	601a      	str	r2, [r3, #0]
      //Receive buffer address
      rxDmaDesc[i].rdes2 = (uint32_t) rxBuffer[i];
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	4613      	mov	r3, r2
 801395a:	005b      	lsls	r3, r3, #1
 801395c:	4413      	add	r3, r2
 801395e:	025b      	lsls	r3, r3, #9
 8013960:	4a2e      	ldr	r2, [pc, #184]	; (8013a1c <stm32f4xxEthInitDmaDesc+0x1a0>)
 8013962:	4413      	add	r3, r2
 8013964:	4619      	mov	r1, r3
 8013966:	4a2c      	ldr	r2, [pc, #176]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	015b      	lsls	r3, r3, #5
 801396c:	4413      	add	r3, r2
 801396e:	3308      	adds	r3, #8
 8013970:	6019      	str	r1, [r3, #0]
      //Next descriptor address
      rxDmaDesc[i].rdes3 = (uint32_t) &rxDmaDesc[i + 1];
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	3301      	adds	r3, #1
 8013976:	015b      	lsls	r3, r3, #5
 8013978:	4a27      	ldr	r2, [pc, #156]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 801397a:	4413      	add	r3, r2
 801397c:	4619      	mov	r1, r3
 801397e:	4a26      	ldr	r2, [pc, #152]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	015b      	lsls	r3, r3, #5
 8013984:	4413      	add	r3, r2
 8013986:	330c      	adds	r3, #12
 8013988:	6019      	str	r1, [r3, #0]
      //Extended status
      rxDmaDesc[i].rdes4 = 0;
 801398a:	4a23      	ldr	r2, [pc, #140]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	015b      	lsls	r3, r3, #5
 8013990:	4413      	add	r3, r2
 8013992:	3310      	adds	r3, #16
 8013994:	2200      	movs	r2, #0
 8013996:	601a      	str	r2, [r3, #0]
      //Reserved field
      rxDmaDesc[i].rdes5 = 0;
 8013998:	4a1f      	ldr	r2, [pc, #124]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	015b      	lsls	r3, r3, #5
 801399e:	4413      	add	r3, r2
 80139a0:	3314      	adds	r3, #20
 80139a2:	2200      	movs	r2, #0
 80139a4:	601a      	str	r2, [r3, #0]
      //Receive frame time stamp
      rxDmaDesc[i].rdes6 = 0;
 80139a6:	4a1c      	ldr	r2, [pc, #112]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	015b      	lsls	r3, r3, #5
 80139ac:	4413      	add	r3, r2
 80139ae:	3318      	adds	r3, #24
 80139b0:	2200      	movs	r2, #0
 80139b2:	601a      	str	r2, [r3, #0]
      rxDmaDesc[i].rdes7 = 0;
 80139b4:	4a18      	ldr	r2, [pc, #96]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	015b      	lsls	r3, r3, #5
 80139ba:	4413      	add	r3, r2
 80139bc:	331c      	adds	r3, #28
 80139be:	2200      	movs	r2, #0
 80139c0:	601a      	str	r2, [r3, #0]
   for(i = 0; i < STM32F4XX_ETH_RX_BUFFER_COUNT; i++)
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	3301      	adds	r3, #1
 80139c6:	60fb      	str	r3, [r7, #12]
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2b05      	cmp	r3, #5
 80139cc:	d9b4      	bls.n	8013938 <stm32f4xxEthInitDmaDesc+0xbc>
   }

   //The last descriptor is chained to the first entry
   rxDmaDesc[i - 1].rdes3 = (uint32_t) &rxDmaDesc[0];
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	3b01      	subs	r3, #1
 80139d2:	4a11      	ldr	r2, [pc, #68]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139d4:	4910      	ldr	r1, [pc, #64]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139d6:	015b      	lsls	r3, r3, #5
 80139d8:	440b      	add	r3, r1
 80139da:	330c      	adds	r3, #12
 80139dc:	601a      	str	r2, [r3, #0]
   //Point to the very first descriptor
   rxCurDmaDesc = &rxDmaDesc[0];
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <stm32f4xxEthInitDmaDesc+0x1a4>)
 80139e0:	4a0d      	ldr	r2, [pc, #52]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139e2:	601a      	str	r2, [r3, #0]

   //Start location of the TX descriptor list
   ETH->DMATDLAR = (uint32_t) txDmaDesc;
 80139e4:	4b0f      	ldr	r3, [pc, #60]	; (8013a24 <stm32f4xxEthInitDmaDesc+0x1a8>)
 80139e6:	4a08      	ldr	r2, [pc, #32]	; (8013a08 <stm32f4xxEthInitDmaDesc+0x18c>)
 80139e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139ec:	3310      	adds	r3, #16
 80139ee:	601a      	str	r2, [r3, #0]
   //Start location of the RX descriptor list
   ETH->DMARDLAR = (uint32_t) rxDmaDesc;
 80139f0:	4b0c      	ldr	r3, [pc, #48]	; (8013a24 <stm32f4xxEthInitDmaDesc+0x1a8>)
 80139f2:	4a09      	ldr	r2, [pc, #36]	; (8013a18 <stm32f4xxEthInitDmaDesc+0x19c>)
 80139f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139f8:	330c      	adds	r3, #12
 80139fa:	601a      	str	r2, [r3, #0]
}
 80139fc:	bf00      	nop
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	2000408c 	.word	0x2000408c
 8013a0c:	40100000 	.word	0x40100000
 8013a10:	20000a8c 	.word	0x20000a8c
 8013a14:	200041ac 	.word	0x200041ac
 8013a18:	200040ec 	.word	0x200040ec
 8013a1c:	20001c8c 	.word	0x20001c8c
 8013a20:	200041b0 	.word	0x200041b0
 8013a24:	40028000 	.word	0x40028000

08013a28 <stm32f4xxEthTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthTick(NetInterface *interface)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d005      	beq.n	8013a44 <stm32f4xxEthTick+0x1c>
   {
      //Handle periodic operations
      interface->phyDriver->tick(interface);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 8013a42:	e008      	b.n	8013a56 <stm32f4xxEthTick+0x2e>
   else if(interface->switchDriver != NULL)
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d004      	beq.n	8013a56 <stm32f4xxEthTick+0x2e>
      interface->switchDriver->tick(interface);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	4798      	blx	r3
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <stm32f4xxEthEnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthEnableIrq(NetInterface *interface)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
   //Enable Ethernet MAC interrupts
   NVIC_EnableIRQ(ETH_IRQn);
 8013a66:	203d      	movs	r0, #61	; 0x3d
 8013a68:	f7ff fccc 	bl	8013404 <__NVIC_EnableIRQ>

   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d005      	beq.n	8013a80 <stm32f4xxEthEnableIrq+0x22>
   {
      //Enable Ethernet PHY interrupts
      interface->phyDriver->enableIrq(interface);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 8013a7e:	e008      	b.n	8013a92 <stm32f4xxEthEnableIrq+0x34>
   else if(interface->switchDriver != NULL)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d004      	beq.n	8013a92 <stm32f4xxEthEnableIrq+0x34>
      interface->switchDriver->enableIrq(interface);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	4798      	blx	r3
}
 8013a92:	bf00      	nop
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <stm32f4xxEthDisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthDisableIrq(NetInterface *interface)
{
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	6078      	str	r0, [r7, #4]
   //Disable Ethernet MAC interrupts
   NVIC_DisableIRQ(ETH_IRQn);
 8013aa2:	203d      	movs	r0, #61	; 0x3d
 8013aa4:	f7ff fccc 	bl	8013440 <__NVIC_DisableIRQ>

   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d005      	beq.n	8013abc <stm32f4xxEthDisableIrq+0x22>
   {
      //Disable Ethernet PHY interrupts
      interface->phyDriver->disableIrq(interface);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 8013aba:	e008      	b.n	8013ace <stm32f4xxEthDisableIrq+0x34>
   else if(interface->switchDriver != NULL)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d004      	beq.n	8013ace <stm32f4xxEthDisableIrq+0x34>
      interface->switchDriver->disableIrq(interface);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	4798      	blx	r3
}
 8013ace:	bf00      	nop
 8013ad0:	3708      	adds	r7, #8
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
	...

08013ad8 <ETH_IRQHandler>:
/**
 * @brief STM32F4 Ethernet MAC interrupt service routine
 **/

void ETH_IRQHandler(void)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0

   //Interrupt service routine prologue
   osEnterIsr();

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	607b      	str	r3, [r7, #4]

   //Read DMA status register
   status = ETH->DMASR;
 8013ae2:	4b29      	ldr	r3, [pc, #164]	; (8013b88 <ETH_IRQHandler+0xb0>)
 8013ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ae8:	3314      	adds	r3, #20
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	603b      	str	r3, [r7, #0]

   //Packet transmitted?
   if((status & ETH_DMASR_TS) != 0)
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	f003 0301 	and.w	r3, r3, #1
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d014      	beq.n	8013b22 <ETH_IRQHandler+0x4a>
   {
      //Clear TS interrupt flag
      ETH->DMASR = ETH_DMASR_TS;
 8013af8:	4b23      	ldr	r3, [pc, #140]	; (8013b88 <ETH_IRQHandler+0xb0>)
 8013afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013afe:	3314      	adds	r3, #20
 8013b00:	2201      	movs	r2, #1
 8013b02:	601a      	str	r2, [r3, #0]

      //Check whether the TX buffer is available for writing
      if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) == 0)
 8013b04:	4b21      	ldr	r3, [pc, #132]	; (8013b8c <ETH_IRQHandler+0xb4>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	db09      	blt.n	8013b22 <ETH_IRQHandler+0x4a>
      {
         //Notify the TCP/IP stack that the transmitter is ready to send
         flag |= osSetEventFromIsr(&nicDriverInterface->nicTxEvent);
 8013b0e:	4b20      	ldr	r3, [pc, #128]	; (8013b90 <ETH_IRQHandler+0xb8>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	3354      	adds	r3, #84	; 0x54
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ed fb39 	bl	800118c <osSetEventFromIsr>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4313      	orrs	r3, r2
 8013b20:	607b      	str	r3, [r7, #4]
      }
   }

   //Packet received?
   if((status & ETH_DMASR_RS) != 0)
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d016      	beq.n	8013b5a <ETH_IRQHandler+0x82>
   {
      //Disable RIE interrupt
      ETH->DMAIER &= ~ETH_DMAIER_RIE;
 8013b2c:	4b16      	ldr	r3, [pc, #88]	; (8013b88 <ETH_IRQHandler+0xb0>)
 8013b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b32:	331c      	adds	r3, #28
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4914      	ldr	r1, [pc, #80]	; (8013b88 <ETH_IRQHandler+0xb0>)
 8013b38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013b3c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8013b40:	331c      	adds	r3, #28
 8013b42:	601a      	str	r2, [r3, #0]

      //Set event flag
      nicDriverInterface->nicEvent = TRUE;
 8013b44:	4b12      	ldr	r3, [pc, #72]	; (8013b90 <ETH_IRQHandler+0xb8>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	659a      	str	r2, [r3, #88]	; 0x58
      //Notify the TCP/IP stack of the event
      flag |= osSetEventFromIsr(&netEvent);
 8013b4c:	4811      	ldr	r0, [pc, #68]	; (8013b94 <ETH_IRQHandler+0xbc>)
 8013b4e:	f7ed fb1d 	bl	800118c <osSetEventFromIsr>
 8013b52:	4602      	mov	r2, r0
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	607b      	str	r3, [r7, #4]
   }

   //Clear NIS interrupt flag
   ETH->DMASR = ETH_DMASR_NIS;
 8013b5a:	4b0b      	ldr	r3, [pc, #44]	; (8013b88 <ETH_IRQHandler+0xb0>)
 8013b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b60:	3314      	adds	r3, #20
 8013b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013b66:	601a      	str	r2, [r3, #0]

   //Interrupt service routine epilogue
   osExitIsr(flag);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d007      	beq.n	8013b7e <ETH_IRQHandler+0xa6>
 8013b6e:	4b0a      	ldr	r3, [pc, #40]	; (8013b98 <ETH_IRQHandler+0xc0>)
 8013b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b74:	601a      	str	r2, [r3, #0]
 8013b76:	f3bf 8f4f 	dsb	sy
 8013b7a:	f3bf 8f6f 	isb	sy
}
 8013b7e:	bf00      	nop
 8013b80:	3708      	adds	r7, #8
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	40028000 	.word	0x40028000
 8013b8c:	200041ac 	.word	0x200041ac
 8013b90:	20000a88 	.word	0x20000a88
 8013b94:	200046f8 	.word	0x200046f8
 8013b98:	e000ed04 	.word	0xe000ed04

08013b9c <stm32f4xxEthEventHandler>:
 * @brief STM32F4 Ethernet MAC event handler
 * @param[in] interface Underlying network interface
 **/

void stm32f4xxEthEventHandler(NetInterface *interface)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
   error_t error;

   //Packet received?
   if((ETH->DMASR & ETH_DMASR_RS) != 0)
 8013ba4:	4b11      	ldr	r3, [pc, #68]	; (8013bec <stm32f4xxEthEventHandler+0x50>)
 8013ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013baa:	3314      	adds	r3, #20
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00f      	beq.n	8013bd6 <stm32f4xxEthEventHandler+0x3a>
   {
      //Clear interrupt flag
      ETH->DMASR = ETH_DMASR_RS;
 8013bb6:	4b0d      	ldr	r3, [pc, #52]	; (8013bec <stm32f4xxEthEventHandler+0x50>)
 8013bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bbc:	3314      	adds	r3, #20
 8013bbe:	2240      	movs	r2, #64	; 0x40
 8013bc0:	601a      	str	r2, [r3, #0]

      //Process all pending packets
      do
      {
         //Read incoming packet
         error = stm32f4xxEthReceivePacket(interface);
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 f87a 	bl	8013cbc <stm32f4xxEthReceivePacket>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	81fb      	strh	r3, [r7, #14]

         //No more data in the receive buffer?
      } while(error != ERROR_BUFFER_EMPTY);
 8013bcc:	89fb      	ldrh	r3, [r7, #14]
 8013bce:	f240 1209 	movw	r2, #265	; 0x109
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d1f5      	bne.n	8013bc2 <stm32f4xxEthEventHandler+0x26>
   }

   //Re-enable DMA interrupts
   ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE;
 8013bd6:	4b05      	ldr	r3, [pc, #20]	; (8013bec <stm32f4xxEthEventHandler+0x50>)
 8013bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bdc:	331c      	adds	r3, #28
 8013bde:	4a04      	ldr	r2, [pc, #16]	; (8013bf0 <stm32f4xxEthEventHandler+0x54>)
 8013be0:	601a      	str	r2, [r3, #0]
}
 8013be2:	bf00      	nop
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	40028000 	.word	0x40028000
 8013bf0:	00010041 	.word	0x00010041

08013bf4 <stm32f4xxEthSendPacket>:
 * @return Error code
 **/

error_t stm32f4xxEthSendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b086      	sub	sp, #24
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
 8013c00:	603b      	str	r3, [r7, #0]
   size_t length;

   //Retrieve the length of the packet
   length = netBufferGetLength(buffer) - offset;
 8013c02:	68b8      	ldr	r0, [r7, #8]
 8013c04:	f7fc febb 	bl	801097e <netBufferGetLength>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	617b      	str	r3, [r7, #20]

   //Check the frame length
   if(length > STM32F4XX_ETH_TX_BUFFER_SIZE)
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013c16:	d906      	bls.n	8013c26 <stm32f4xxEthSendPacket+0x32>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	3354      	adds	r3, #84	; 0x54
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ed fa7a 	bl	8001116 <osSetEvent>
      //Report an error
      return ERROR_INVALID_LENGTH;
 8013c22:	23ec      	movs	r3, #236	; 0xec
 8013c24:	e042      	b.n	8013cac <stm32f4xxEthSendPacket+0xb8>
   }

   //Make sure the current buffer is available for writing
   if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) != 0)
 8013c26:	4b23      	ldr	r3, [pc, #140]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	da01      	bge.n	8013c34 <stm32f4xxEthSendPacket+0x40>
   {
      return ERROR_FAILURE;
 8013c30:	2301      	movs	r3, #1
 8013c32:	e03b      	b.n	8013cac <stm32f4xxEthSendPacket+0xb8>
   }

   //Copy user data to the transmit buffer
   netBufferRead((uint8_t *) txCurDmaDesc->tdes2, buffer, offset, length);
 8013c34:	4b1f      	ldr	r3, [pc, #124]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	68b9      	ldr	r1, [r7, #8]
 8013c42:	f7fd f988 	bl	8010f56 <netBufferRead>

   //Write the number of bytes to send
   txCurDmaDesc->tdes1 = length & ETH_TDES1_TBS1;
 8013c46:	4b1b      	ldr	r3, [pc, #108]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013c50:	605a      	str	r2, [r3, #4]
   //Set LS and FS flags as the data fits in a single buffer
   txCurDmaDesc->tdes0 |= ETH_TDES0_LS | ETH_TDES0_FS;
 8013c52:	4b18      	ldr	r3, [pc, #96]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	681a      	ldr	r2, [r3, #0]
 8013c58:	4b16      	ldr	r3, [pc, #88]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8013c60:	601a      	str	r2, [r3, #0]
   //Give the ownership of the descriptor to the DMA
   txCurDmaDesc->tdes0 |= ETH_TDES0_OWN;
 8013c62:	4b14      	ldr	r3, [pc, #80]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	4b12      	ldr	r3, [pc, #72]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013c70:	601a      	str	r2, [r3, #0]

   //Clear TBUS flag to resume processing
   ETH->DMASR = ETH_DMASR_TBUS;
 8013c72:	4b11      	ldr	r3, [pc, #68]	; (8013cb8 <stm32f4xxEthSendPacket+0xc4>)
 8013c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c78:	3314      	adds	r3, #20
 8013c7a:	2204      	movs	r2, #4
 8013c7c:	601a      	str	r2, [r3, #0]
   //Instruct the DMA to poll the transmit descriptor list
   ETH->DMATPDR = 0;
 8013c7e:	4b0e      	ldr	r3, [pc, #56]	; (8013cb8 <stm32f4xxEthSendPacket+0xc4>)
 8013c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c84:	3304      	adds	r3, #4
 8013c86:	2200      	movs	r2, #0
 8013c88:	601a      	str	r2, [r3, #0]

   //Point to the next descriptor in the list
   txCurDmaDesc = (Stm32f4xxTxDmaDesc *) txCurDmaDesc->tdes3;
 8013c8a:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	461a      	mov	r2, r3
 8013c92:	4b08      	ldr	r3, [pc, #32]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c94:	601a      	str	r2, [r3, #0]

   //Check whether the next buffer is available for writing
   if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) == 0)
 8013c96:	4b07      	ldr	r3, [pc, #28]	; (8013cb4 <stm32f4xxEthSendPacket+0xc0>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	db04      	blt.n	8013caa <stm32f4xxEthSendPacket+0xb6>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	3354      	adds	r3, #84	; 0x54
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ed fa36 	bl	8001116 <osSetEvent>
   }

   //Data successfully written
   return NO_ERROR;
 8013caa:	2300      	movs	r3, #0
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3718      	adds	r7, #24
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	200041ac 	.word	0x200041ac
 8013cb8:	40028000 	.word	0x40028000

08013cbc <stm32f4xxEthReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t stm32f4xxEthReceivePacket(NetInterface *interface)
{
 8013cbc:	b590      	push	{r4, r7, lr}
 8013cbe:	b089      	sub	sp, #36	; 0x24
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
   error_t error;
   size_t n;
   NetRxAncillary ancillary;

   //Current buffer available for reading?
   if((rxCurDmaDesc->rdes0 & ETH_RDES0_OWN) == 0)
 8013cc4:	4b32      	ldr	r3, [pc, #200]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	db4c      	blt.n	8013d68 <stm32f4xxEthReceivePacket+0xac>
   {
      //FS and LS flags should be set
      if((rxCurDmaDesc->rdes0 & ETH_RDES0_FS) != 0 &&
 8013cce:	4b30      	ldr	r3, [pc, #192]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d036      	beq.n	8013d4a <stm32f4xxEthReceivePacket+0x8e>
         (rxCurDmaDesc->rdes0 & ETH_RDES0_LS) != 0)
 8013cdc:	4b2c      	ldr	r3, [pc, #176]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
      if((rxCurDmaDesc->rdes0 & ETH_RDES0_FS) != 0 &&
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d02f      	beq.n	8013d4a <stm32f4xxEthReceivePacket+0x8e>
      {
         //Make sure no error occurred
         if((rxCurDmaDesc->rdes0 & ETH_RDES0_ES) == 0)
 8013cea:	4b29      	ldr	r3, [pc, #164]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d124      	bne.n	8013d42 <stm32f4xxEthReceivePacket+0x86>
         {
            //Retrieve the length of the frame
            n = (rxCurDmaDesc->rdes0 & ETH_RDES0_FL) >> 16;
 8013cf8:	4b25      	ldr	r3, [pc, #148]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	0c1b      	lsrs	r3, r3, #16
 8013d00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013d04:	61bb      	str	r3, [r7, #24]
            //Limit the number of data to read
            n = MIN(n, STM32F4XX_ETH_RX_BUFFER_SIZE);
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013d0c:	bf28      	it	cs
 8013d0e:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8013d12:	61bb      	str	r3, [r7, #24]

            //Additional options can be passed to the stack along with the packet
            ancillary = NET_DEFAULT_RX_ANCILLARY;
 8013d14:	4a1f      	ldr	r2, [pc, #124]	; (8013d94 <stm32f4xxEthReceivePacket+0xd8>)
 8013d16:	f107 0308 	add.w	r3, r7, #8
 8013d1a:	4614      	mov	r4, r2
 8013d1c:	6820      	ldr	r0, [r4, #0]
 8013d1e:	6861      	ldr	r1, [r4, #4]
 8013d20:	68a2      	ldr	r2, [r4, #8]
 8013d22:	c307      	stmia	r3!, {r0, r1, r2}
 8013d24:	7b22      	ldrb	r2, [r4, #12]
 8013d26:	701a      	strb	r2, [r3, #0]

            //Pass the packet to the upper layer
            nicProcessPacket(interface, (uint8_t *) rxCurDmaDesc->rdes2, n,
 8013d28:	4b19      	ldr	r3, [pc, #100]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	689b      	ldr	r3, [r3, #8]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	f107 0308 	add.w	r3, r7, #8
 8013d34:	69ba      	ldr	r2, [r7, #24]
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f7fd ff10 	bl	8011b5c <nicProcessPacket>
               &ancillary);

            //Valid packet received
            error = NO_ERROR;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	83fb      	strh	r3, [r7, #30]
         if((rxCurDmaDesc->rdes0 & ETH_RDES0_ES) == 0)
 8013d40:	e006      	b.n	8013d50 <stm32f4xxEthReceivePacket+0x94>
         }
         else
         {
            //The received packet contains an error
            error = ERROR_INVALID_PACKET;
 8013d42:	f44f 7384 	mov.w	r3, #264	; 0x108
 8013d46:	83fb      	strh	r3, [r7, #30]
         if((rxCurDmaDesc->rdes0 & ETH_RDES0_ES) == 0)
 8013d48:	e002      	b.n	8013d50 <stm32f4xxEthReceivePacket+0x94>
         }
      }
      else
      {
         //The packet is not valid
         error = ERROR_INVALID_PACKET;
 8013d4a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8013d4e:	83fb      	strh	r3, [r7, #30]
      }

      //Give the ownership of the descriptor back to the DMA
      rxCurDmaDesc->rdes0 = ETH_RDES0_OWN;
 8013d50:	4b0f      	ldr	r3, [pc, #60]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d58:	601a      	str	r2, [r3, #0]
      //Point to the next descriptor in the list
      rxCurDmaDesc = (Stm32f4xxRxDmaDesc *) rxCurDmaDesc->rdes3;
 8013d5a:	4b0d      	ldr	r3, [pc, #52]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	461a      	mov	r2, r3
 8013d62:	4b0b      	ldr	r3, [pc, #44]	; (8013d90 <stm32f4xxEthReceivePacket+0xd4>)
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	e002      	b.n	8013d6e <stm32f4xxEthReceivePacket+0xb2>
   }
   else
   {
      //No more data in the receive buffer
      error = ERROR_BUFFER_EMPTY;
 8013d68:	f240 1309 	movw	r3, #265	; 0x109
 8013d6c:	83fb      	strh	r3, [r7, #30]
   }

   //Clear RBUS flag to resume processing
   ETH->DMASR = ETH_DMASR_RBUS;
 8013d6e:	4b0a      	ldr	r3, [pc, #40]	; (8013d98 <stm32f4xxEthReceivePacket+0xdc>)
 8013d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d74:	3314      	adds	r3, #20
 8013d76:	2280      	movs	r2, #128	; 0x80
 8013d78:	601a      	str	r2, [r3, #0]
   //Instruct the DMA to poll the receive descriptor list
   ETH->DMARPDR = 0;
 8013d7a:	4b07      	ldr	r3, [pc, #28]	; (8013d98 <stm32f4xxEthReceivePacket+0xdc>)
 8013d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d80:	3308      	adds	r3, #8
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]

   //Return status code
   return error;
 8013d86:	8bfb      	ldrh	r3, [r7, #30]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3724      	adds	r7, #36	; 0x24
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd90      	pop	{r4, r7, pc}
 8013d90:	200041b0 	.word	0x200041b0
 8013d94:	080252a0 	.word	0x080252a0
 8013d98:	40028000 	.word	0x40028000

08013d9c <stm32f4xxEthUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t stm32f4xxEthUpdateMacAddrFilter(NetInterface *interface)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b08e      	sub	sp, #56	; 0x38
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_DEBUG("Updating MAC filter...\r\n");

   //Set the MAC address of the station
   ETH->MACA0LR = interface->macAddr.w[0] | (interface->macAddr.w[1] << 16);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8013daa:	461a      	mov	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8013db2:	041b      	lsls	r3, r3, #16
 8013db4:	431a      	orrs	r2, r3
 8013db6:	4b5f      	ldr	r3, [pc, #380]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013db8:	645a      	str	r2, [r3, #68]	; 0x44
   ETH->MACA0HR = interface->macAddr.w[2];
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8013dc0:	4b5c      	ldr	r3, [pc, #368]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013dc2:	641a      	str	r2, [r3, #64]	; 0x40

   //The MAC supports 3 additional addresses for unicast perfect filtering
   unicastMacAddr[0] = MAC_UNSPECIFIED_ADDR;
 8013dc4:	4a5c      	ldr	r2, [pc, #368]	; (8013f38 <stm32f4xxEthUpdateMacAddrFilter+0x19c>)
 8013dc6:	f107 0308 	add.w	r3, r7, #8
 8013dca:	6810      	ldr	r0, [r2, #0]
 8013dcc:	6018      	str	r0, [r3, #0]
 8013dce:	8892      	ldrh	r2, [r2, #4]
 8013dd0:	809a      	strh	r2, [r3, #4]
   unicastMacAddr[1] = MAC_UNSPECIFIED_ADDR;
 8013dd2:	4a59      	ldr	r2, [pc, #356]	; (8013f38 <stm32f4xxEthUpdateMacAddrFilter+0x19c>)
 8013dd4:	f107 030e 	add.w	r3, r7, #14
 8013dd8:	6811      	ldr	r1, [r2, #0]
 8013dda:	6019      	str	r1, [r3, #0]
 8013ddc:	8892      	ldrh	r2, [r2, #4]
 8013dde:	809a      	strh	r2, [r3, #4]
   unicastMacAddr[2] = MAC_UNSPECIFIED_ADDR;
 8013de0:	4a55      	ldr	r2, [pc, #340]	; (8013f38 <stm32f4xxEthUpdateMacAddrFilter+0x19c>)
 8013de2:	f107 0314 	add.w	r3, r7, #20
 8013de6:	6810      	ldr	r0, [r2, #0]
 8013de8:	6018      	str	r0, [r3, #0]
 8013dea:	8892      	ldrh	r2, [r2, #4]
 8013dec:	809a      	strh	r2, [r3, #4]

   //The hash table is used for multicast address filtering
   hashTable[0] = 0;
 8013dee:	2300      	movs	r3, #0
 8013df0:	61fb      	str	r3, [r7, #28]
   hashTable[1] = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	623b      	str	r3, [r7, #32]

   //The MAC address filter contains the list of MAC addresses to accept
   //when receiving an Ethernet frame
   for(i = 0, j = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8013df6:	2300      	movs	r3, #0
 8013df8:	637b      	str	r3, [r7, #52]	; 0x34
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8013dfe:	e048      	b.n	8013e92 <stm32f4xxEthUpdateMacAddrFilter+0xf6>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8013e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e02:	4613      	mov	r3, r2
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	4413      	add	r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	3388      	adds	r3, #136	; 0x88
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4413      	add	r3, r2
 8013e10:	3304      	adds	r3, #4
 8013e12:	62fb      	str	r3, [r7, #44]	; 0x2c

      //Valid entry?
      if(entry->refCount > 0)
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d037      	beq.n	8013e8c <stm32f4xxEthUpdateMacAddrFilter+0xf0>
      {
         //Multicast address?
         if(macIsMulticastAddr(&entry->addr))
 8013e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1e:	781b      	ldrb	r3, [r3, #0]
 8013e20:	f003 0301 	and.w	r3, r3, #1
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d01e      	beq.n	8013e66 <stm32f4xxEthUpdateMacAddrFilter+0xca>
         {
            //Compute CRC over the current MAC address
            crc = stm32f4xxEthCalcCrc(&entry->addr, sizeof(MacAddr));
 8013e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2a:	2106      	movs	r1, #6
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 f92f 	bl	8014090 <stm32f4xxEthCalcCrc>
 8013e32:	62b8      	str	r0, [r7, #40]	; 0x28

            //The upper 6 bits in the CRC register are used to index the
            //contents of the hash table
            k = (crc >> 26) & 0x3F;
 8013e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e36:	0e9b      	lsrs	r3, r3, #26
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24

            //Update hash table contents
            hashTable[k / 32] |= (1 << (k % 32));
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	095a      	lsrs	r2, r3, #5
 8013e3e:	0093      	lsls	r3, r2, #2
 8013e40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013e44:	440b      	add	r3, r1
 8013e46:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8013e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e4c:	f001 011f 	and.w	r1, r1, #31
 8013e50:	2001      	movs	r0, #1
 8013e52:	fa00 f101 	lsl.w	r1, r0, r1
 8013e56:	4319      	orrs	r1, r3
 8013e58:	0093      	lsls	r3, r2, #2
 8013e5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013e5e:	4413      	add	r3, r2
 8013e60:	f843 1c1c 	str.w	r1, [r3, #-28]
 8013e64:	e012      	b.n	8013e8c <stm32f4xxEthUpdateMacAddrFilter+0xf0>
         }
         else
         {
            //Up to 3 additional MAC addresses can be specified
            if(j < 3)
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	d80f      	bhi.n	8013e8c <stm32f4xxEthUpdateMacAddrFilter+0xf0>
            {
               //Save the unicast address
               unicastMacAddr[j++] = entry->addr;
 8013e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e6e:	1c53      	adds	r3, r2, #1
 8013e70:	633b      	str	r3, [r7, #48]	; 0x30
 8013e72:	4613      	mov	r3, r2
 8013e74:	005b      	lsls	r3, r3, #1
 8013e76:	4413      	add	r3, r2
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013e7e:	4413      	add	r3, r2
 8013e80:	3b30      	subs	r3, #48	; 0x30
 8013e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e84:	6810      	ldr	r0, [r2, #0]
 8013e86:	6018      	str	r0, [r3, #0]
 8013e88:	8892      	ldrh	r2, [r2, #4]
 8013e8a:	809a      	strh	r2, [r3, #4]
   for(i = 0, j = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	3301      	adds	r3, #1
 8013e90:	637b      	str	r3, [r7, #52]	; 0x34
 8013e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e94:	2b0b      	cmp	r3, #11
 8013e96:	d9b3      	bls.n	8013e00 <stm32f4xxEthUpdateMacAddrFilter+0x64>
         }
      }
   }

   //Configure the first unicast address filter
   if(j >= 1)
 8013e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d00c      	beq.n	8013eb8 <stm32f4xxEthUpdateMacAddrFilter+0x11c>
   {
      //When the AE bit is set, the entry is used for perfect filtering
      ETH->MACA1LR = unicastMacAddr[0].w[0] | (unicastMacAddr[0].w[1] << 16);
 8013e9e:	893b      	ldrh	r3, [r7, #8]
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	897b      	ldrh	r3, [r7, #10]
 8013ea4:	041b      	lsls	r3, r3, #16
 8013ea6:	431a      	orrs	r2, r3
 8013ea8:	4b22      	ldr	r3, [pc, #136]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013eaa:	64da      	str	r2, [r3, #76]	; 0x4c
      ETH->MACA1HR = unicastMacAddr[0].w[2] | ETH_MACA1HR_AE;
 8013eac:	89bb      	ldrh	r3, [r7, #12]
 8013eae:	4a21      	ldr	r2, [pc, #132]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013eb4:	6493      	str	r3, [r2, #72]	; 0x48
 8013eb6:	e005      	b.n	8013ec4 <stm32f4xxEthUpdateMacAddrFilter+0x128>
   }
   else
   {
      //When the AE bit is cleared, the entry is ignored
      ETH->MACA1LR = 0;
 8013eb8:	4b1e      	ldr	r3, [pc, #120]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013eba:	2200      	movs	r2, #0
 8013ebc:	64da      	str	r2, [r3, #76]	; 0x4c
      ETH->MACA1HR = 0;
 8013ebe:	4b1d      	ldr	r3, [pc, #116]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	649a      	str	r2, [r3, #72]	; 0x48
   }

   //Configure the second unicast address filter
   if(j >= 2)
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d90c      	bls.n	8013ee4 <stm32f4xxEthUpdateMacAddrFilter+0x148>
   {
      //When the AE bit is set, the entry is used for perfect filtering
      ETH->MACA2LR = unicastMacAddr[1].w[0] | (unicastMacAddr[1].w[1] << 16);
 8013eca:	89fb      	ldrh	r3, [r7, #14]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	8a3b      	ldrh	r3, [r7, #16]
 8013ed0:	041b      	lsls	r3, r3, #16
 8013ed2:	431a      	orrs	r2, r3
 8013ed4:	4b17      	ldr	r3, [pc, #92]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013ed6:	655a      	str	r2, [r3, #84]	; 0x54
      ETH->MACA2HR = unicastMacAddr[1].w[2] | ETH_MACA2HR_AE;
 8013ed8:	8a7b      	ldrh	r3, [r7, #18]
 8013eda:	4a16      	ldr	r2, [pc, #88]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8013ee2:	e005      	b.n	8013ef0 <stm32f4xxEthUpdateMacAddrFilter+0x154>
   }
   else
   {
      //When the AE bit is cleared, the entry is ignored
      ETH->MACA2LR = 0;
 8013ee4:	4b13      	ldr	r3, [pc, #76]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	655a      	str	r2, [r3, #84]	; 0x54
      ETH->MACA2HR = 0;
 8013eea:	4b12      	ldr	r3, [pc, #72]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	651a      	str	r2, [r3, #80]	; 0x50
   }

   //Configure the third unicast address filter
   if(j >= 3)
 8013ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef2:	2b02      	cmp	r3, #2
 8013ef4:	d90c      	bls.n	8013f10 <stm32f4xxEthUpdateMacAddrFilter+0x174>
   {
      //When the AE bit is set, the entry is used for perfect filtering
      ETH->MACA3LR = unicastMacAddr[2].w[0] | (unicastMacAddr[2].w[1] << 16);
 8013ef6:	8abb      	ldrh	r3, [r7, #20]
 8013ef8:	461a      	mov	r2, r3
 8013efa:	8afb      	ldrh	r3, [r7, #22]
 8013efc:	041b      	lsls	r3, r3, #16
 8013efe:	431a      	orrs	r2, r3
 8013f00:	4b0c      	ldr	r3, [pc, #48]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f02:	65da      	str	r2, [r3, #92]	; 0x5c
      ETH->MACA3HR = unicastMacAddr[2].w[2] | ETH_MACA3HR_AE;
 8013f04:	8b3b      	ldrh	r3, [r7, #24]
 8013f06:	4a0b      	ldr	r2, [pc, #44]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8013f0e:	e005      	b.n	8013f1c <stm32f4xxEthUpdateMacAddrFilter+0x180>
   }
   else
   {
      //When the AE bit is cleared, the entry is ignored
      ETH->MACA3LR = 0;
 8013f10:	4b08      	ldr	r3, [pc, #32]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f12:	2200      	movs	r2, #0
 8013f14:	65da      	str	r2, [r3, #92]	; 0x5c
      ETH->MACA3HR = 0;
 8013f16:	4b07      	ldr	r3, [pc, #28]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f18:	2200      	movs	r2, #0
 8013f1a:	659a      	str	r2, [r3, #88]	; 0x58
   }

   //Configure the multicast address filter
   ETH->MACHTLR = hashTable[0];
 8013f1c:	4a05      	ldr	r2, [pc, #20]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	60d3      	str	r3, [r2, #12]
   ETH->MACHTHR = hashTable[1];
 8013f22:	4a04      	ldr	r2, [pc, #16]	; (8013f34 <stm32f4xxEthUpdateMacAddrFilter+0x198>)
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	6093      	str	r3, [r2, #8]
   //Debug message
   TRACE_DEBUG("  MACHTLR = %08" PRIX32 "\r\n", ETH->MACHTLR);
   TRACE_DEBUG("  MACHTHR = %08" PRIX32 "\r\n", ETH->MACHTHR);

   //Successful processing
   return NO_ERROR;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3738      	adds	r7, #56	; 0x38
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	40028000 	.word	0x40028000
 8013f38:	080243c4 	.word	0x080243c4

08013f3c <stm32f4xxEthUpdateMacConfig>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t stm32f4xxEthUpdateMacConfig(NetInterface *interface)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b085      	sub	sp, #20
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
   uint32_t config;

   //Read current MAC configuration
   config = ETH->MACCR;
 8013f44:	4b14      	ldr	r3, [pc, #80]	; (8013f98 <stm32f4xxEthUpdateMacConfig+0x5c>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	60fb      	str	r3, [r7, #12]

   //10BASE-T or 100BASE-TX operation mode?
   if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013f4e:	4a13      	ldr	r2, [pc, #76]	; (8013f9c <stm32f4xxEthUpdateMacConfig+0x60>)
 8013f50:	4293      	cmp	r3, r2
 8013f52:	d104      	bne.n	8013f5e <stm32f4xxEthUpdateMacConfig+0x22>
   {
      config |= ETH_MACCR_FES;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013f5a:	60fb      	str	r3, [r7, #12]
 8013f5c:	e003      	b.n	8013f66 <stm32f4xxEthUpdateMacConfig+0x2a>
   }
   else
   {
      config &= ~ETH_MACCR_FES;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013f64:	60fb      	str	r3, [r7, #12]
   }

   //Half-duplex or full-duplex mode?
   if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013f6c:	2b02      	cmp	r3, #2
 8013f6e:	d104      	bne.n	8013f7a <stm32f4xxEthUpdateMacConfig+0x3e>
   {
      config |= ETH_MACCR_DM;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013f76:	60fb      	str	r3, [r7, #12]
 8013f78:	e003      	b.n	8013f82 <stm32f4xxEthUpdateMacConfig+0x46>
   }
   else
   {
      config &= ~ETH_MACCR_DM;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f80:	60fb      	str	r3, [r7, #12]
   }

   //Update MAC configuration register
   ETH->MACCR = config;
 8013f82:	4a05      	ldr	r2, [pc, #20]	; (8013f98 <stm32f4xxEthUpdateMacConfig+0x5c>)
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	6013      	str	r3, [r2, #0]

   //Successful processing
   return NO_ERROR;
 8013f88:	2300      	movs	r3, #0
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3714      	adds	r7, #20
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	40028000 	.word	0x40028000
 8013f9c:	05f5e100 	.word	0x05f5e100

08013fa0 <stm32f4xxEthWritePhyReg>:
 * @param[in] data Register value
 **/

void stm32f4xxEthWritePhyReg(uint8_t opcode, uint8_t phyAddr,
   uint8_t regAddr, uint16_t data)
{
 8013fa0:	b490      	push	{r4, r7}
 8013fa2:	b084      	sub	sp, #16
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	4608      	mov	r0, r1
 8013faa:	4611      	mov	r1, r2
 8013fac:	461a      	mov	r2, r3
 8013fae:	4623      	mov	r3, r4
 8013fb0:	71fb      	strb	r3, [r7, #7]
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	71bb      	strb	r3, [r7, #6]
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	717b      	strb	r3, [r7, #5]
 8013fba:	4613      	mov	r3, r2
 8013fbc:	807b      	strh	r3, [r7, #2]
   uint32_t temp;

   //Valid opcode?
   if(opcode == SMI_OPCODE_WRITE)
 8013fbe:	79fb      	ldrb	r3, [r7, #7]
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d122      	bne.n	801400a <stm32f4xxEthWritePhyReg+0x6a>
   {
      //Take care not to alter MDC clock configuration
      temp = ETH->MACMIIAR & ETH_MACMIIAR_CR;
 8013fc4:	4b13      	ldr	r3, [pc, #76]	; (8014014 <stm32f4xxEthWritePhyReg+0x74>)
 8013fc6:	691b      	ldr	r3, [r3, #16]
 8013fc8:	f003 031c 	and.w	r3, r3, #28
 8013fcc:	60fb      	str	r3, [r7, #12]
      //Set up a write operation
      temp |= ETH_MACMIIAR_MW | ETH_MACMIIAR_MB;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f043 0303 	orr.w	r3, r3, #3
 8013fd4:	60fb      	str	r3, [r7, #12]
      //PHY address
      temp |= (phyAddr << 11) & ETH_MACMIIAR_PA;
 8013fd6:	79bb      	ldrb	r3, [r7, #6]
 8013fd8:	02db      	lsls	r3, r3, #11
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	68fa      	ldr	r2, [r7, #12]
 8013fde:	4313      	orrs	r3, r2
 8013fe0:	60fb      	str	r3, [r7, #12]
      //Register address
      temp |= (regAddr << 6) & ETH_MACMIIAR_MR;
 8013fe2:	797b      	ldrb	r3, [r7, #5]
 8013fe4:	019b      	lsls	r3, r3, #6
 8013fe6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	4313      	orrs	r3, r2
 8013fee:	60fb      	str	r3, [r7, #12]

      //Data to be written in the PHY register
      ETH->MACMIIDR = data & ETH_MACMIIDR_MD;
 8013ff0:	4a08      	ldr	r2, [pc, #32]	; (8014014 <stm32f4xxEthWritePhyReg+0x74>)
 8013ff2:	887b      	ldrh	r3, [r7, #2]
 8013ff4:	6153      	str	r3, [r2, #20]

      //Start a write operation
      ETH->MACMIIAR = temp;
 8013ff6:	4a07      	ldr	r2, [pc, #28]	; (8014014 <stm32f4xxEthWritePhyReg+0x74>)
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	6113      	str	r3, [r2, #16]
      //Wait for the write to complete
      while((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 8013ffc:	bf00      	nop
 8013ffe:	4b05      	ldr	r3, [pc, #20]	; (8014014 <stm32f4xxEthWritePhyReg+0x74>)
 8014000:	691b      	ldr	r3, [r3, #16]
 8014002:	f003 0301 	and.w	r3, r3, #1
 8014006:	2b00      	cmp	r3, #0
 8014008:	d1f9      	bne.n	8013ffe <stm32f4xxEthWritePhyReg+0x5e>
   }
   else
   {
      //The MAC peripheral only supports standard Clause 22 opcodes
   }
}
 801400a:	bf00      	nop
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bc90      	pop	{r4, r7}
 8014012:	4770      	bx	lr
 8014014:	40028000 	.word	0x40028000

08014018 <stm32f4xxEthReadPhyReg>:
 * @return Register value
 **/

uint16_t stm32f4xxEthReadPhyReg(uint8_t opcode, uint8_t phyAddr,
   uint8_t regAddr)
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	4603      	mov	r3, r0
 8014020:	71fb      	strb	r3, [r7, #7]
 8014022:	460b      	mov	r3, r1
 8014024:	71bb      	strb	r3, [r7, #6]
 8014026:	4613      	mov	r3, r2
 8014028:	717b      	strb	r3, [r7, #5]
   uint16_t data;
   uint32_t temp;

   //Valid opcode?
   if(opcode == SMI_OPCODE_READ)
 801402a:	79fb      	ldrb	r3, [r7, #7]
 801402c:	2b02      	cmp	r3, #2
 801402e:	d123      	bne.n	8014078 <stm32f4xxEthReadPhyReg+0x60>
   {
      //Take care not to alter MDC clock configuration
      temp = ETH->MACMIIAR & ETH_MACMIIAR_CR;
 8014030:	4b16      	ldr	r3, [pc, #88]	; (801408c <stm32f4xxEthReadPhyReg+0x74>)
 8014032:	691b      	ldr	r3, [r3, #16]
 8014034:	f003 031c 	and.w	r3, r3, #28
 8014038:	60bb      	str	r3, [r7, #8]
      //Set up a read operation
      temp |= ETH_MACMIIAR_MB;
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	f043 0301 	orr.w	r3, r3, #1
 8014040:	60bb      	str	r3, [r7, #8]
      //PHY address
      temp |= (phyAddr << 11) & ETH_MACMIIAR_PA;
 8014042:	79bb      	ldrb	r3, [r7, #6]
 8014044:	02db      	lsls	r3, r3, #11
 8014046:	b29b      	uxth	r3, r3
 8014048:	68ba      	ldr	r2, [r7, #8]
 801404a:	4313      	orrs	r3, r2
 801404c:	60bb      	str	r3, [r7, #8]
      //Register address
      temp |= (regAddr << 6) & ETH_MACMIIAR_MR;
 801404e:	797b      	ldrb	r3, [r7, #5]
 8014050:	019b      	lsls	r3, r3, #6
 8014052:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8014056:	68ba      	ldr	r2, [r7, #8]
 8014058:	4313      	orrs	r3, r2
 801405a:	60bb      	str	r3, [r7, #8]

      //Start a read operation
      ETH->MACMIIAR = temp;
 801405c:	4a0b      	ldr	r2, [pc, #44]	; (801408c <stm32f4xxEthReadPhyReg+0x74>)
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	6113      	str	r3, [r2, #16]
      //Wait for the read to complete
      while((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 8014062:	bf00      	nop
 8014064:	4b09      	ldr	r3, [pc, #36]	; (801408c <stm32f4xxEthReadPhyReg+0x74>)
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	f003 0301 	and.w	r3, r3, #1
 801406c:	2b00      	cmp	r3, #0
 801406e:	d1f9      	bne.n	8014064 <stm32f4xxEthReadPhyReg+0x4c>
      {
      }

      //Get register value
      data = ETH->MACMIIDR & ETH_MACMIIDR_MD;
 8014070:	4b06      	ldr	r3, [pc, #24]	; (801408c <stm32f4xxEthReadPhyReg+0x74>)
 8014072:	695b      	ldr	r3, [r3, #20]
 8014074:	81fb      	strh	r3, [r7, #14]
 8014076:	e001      	b.n	801407c <stm32f4xxEthReadPhyReg+0x64>
   }
   else
   {
      //The MAC peripheral only supports standard Clause 22 opcodes
      data = 0;
 8014078:	2300      	movs	r3, #0
 801407a:	81fb      	strh	r3, [r7, #14]
   }

   //Return the value of the PHY register
   return data;
 801407c:	89fb      	ldrh	r3, [r7, #14]
}
 801407e:	4618      	mov	r0, r3
 8014080:	3714      	adds	r7, #20
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop
 801408c:	40028000 	.word	0x40028000

08014090 <stm32f4xxEthCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t stm32f4xxEthCalcCrc(const void *data, size_t length)
{
 8014090:	b480      	push	{r7}
 8014092:	b087      	sub	sp, #28
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
   uint_t j;
   uint32_t crc;
   const uint8_t *p;

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   crc = 0xFFFFFFFF;
 801409e:	f04f 33ff 	mov.w	r3, #4294967295
 80140a2:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 80140a4:	2300      	movs	r3, #0
 80140a6:	617b      	str	r3, [r7, #20]
 80140a8:	e023      	b.n	80140f2 <stm32f4xxEthCalcCrc+0x62>
   {
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 80140aa:	2300      	movs	r3, #0
 80140ac:	613b      	str	r3, [r7, #16]
 80140ae:	e01a      	b.n	80140e6 <stm32f4xxEthCalcCrc+0x56>
      {
         //Update CRC value
         if((((crc >> 31) ^ (p[i] >> j)) & 0x01) != 0)
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	0fdb      	lsrs	r3, r3, #31
 80140b4:	68b9      	ldr	r1, [r7, #8]
 80140b6:	697a      	ldr	r2, [r7, #20]
 80140b8:	440a      	add	r2, r1
 80140ba:	7812      	ldrb	r2, [r2, #0]
 80140bc:	4611      	mov	r1, r2
 80140be:	693a      	ldr	r2, [r7, #16]
 80140c0:	fa41 f202 	asr.w	r2, r1, r2
 80140c4:	4053      	eors	r3, r2
 80140c6:	f003 0301 	and.w	r3, r3, #1
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d005      	beq.n	80140da <stm32f4xxEthCalcCrc+0x4a>
         {
            crc = (crc << 1) ^ 0x04C11DB7;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	005a      	lsls	r2, r3, #1
 80140d2:	4b0e      	ldr	r3, [pc, #56]	; (801410c <stm32f4xxEthCalcCrc+0x7c>)
 80140d4:	4053      	eors	r3, r2
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	e002      	b.n	80140e0 <stm32f4xxEthCalcCrc+0x50>
         }
         else
         {
            crc = crc << 1;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	005b      	lsls	r3, r3, #1
 80140de:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	3301      	adds	r3, #1
 80140e4:	613b      	str	r3, [r7, #16]
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	2b07      	cmp	r3, #7
 80140ea:	d9e1      	bls.n	80140b0 <stm32f4xxEthCalcCrc+0x20>
   for(i = 0; i < length; i++)
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	3301      	adds	r3, #1
 80140f0:	617b      	str	r3, [r7, #20]
 80140f2:	697a      	ldr	r2, [r7, #20]
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d3d7      	bcc.n	80140aa <stm32f4xxEthCalcCrc+0x1a>
         }
      }
   }

   //Return CRC value
   return ~crc;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	43db      	mvns	r3, r3
}
 80140fe:	4618      	mov	r0, r3
 8014100:	371c      	adds	r7, #28
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	04c11db7 	.word	0x04c11db7

08014110 <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 8014110:	b480      	push	{r7}
 8014112:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 8014114:	4b04      	ldr	r3, [pc, #16]	; (8014128 <tcpInit+0x18>)
 8014116:	2200      	movs	r2, #0
 8014118:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr
 8014126:	bf00      	nop
 8014128:	200041b4 	.word	0x200041b4

0801412c <tcpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t tcpGetDynamicPort(void)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = tcpDynamicPort;
 8014132:	4b14      	ldr	r3, [pc, #80]	; (8014184 <tcpGetDynamicPort+0x58>)
 8014134:	881b      	ldrh	r3, [r3, #0]
 8014136:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801413e:	d303      	bcc.n	8014148 <tcpGetDynamicPort+0x1c>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014146:	d307      	bcc.n	8014158 <tcpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8014148:	f7fd fafe 	bl	8011748 <netGetRand>
 801414c:	4603      	mov	r3, r0
 801414e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014152:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8014156:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801415e:	4293      	cmp	r3, r2
 8014160:	d806      	bhi.n	8014170 <tcpGetDynamicPort+0x44>
   {
      //Increment port number
      tcpDynamicPort = port + 1;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	b29b      	uxth	r3, r3
 8014166:	3301      	adds	r3, #1
 8014168:	b29a      	uxth	r2, r3
 801416a:	4b06      	ldr	r3, [pc, #24]	; (8014184 <tcpGetDynamicPort+0x58>)
 801416c:	801a      	strh	r2, [r3, #0]
 801416e:	e003      	b.n	8014178 <tcpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8014170:	4b04      	ldr	r3, [pc, #16]	; (8014184 <tcpGetDynamicPort+0x58>)
 8014172:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014176:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	b29b      	uxth	r3, r3
}
 801417c:	4618      	mov	r0, r3
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	200041b4 	.word	0x200041b4

08014188 <tcpListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t tcpListen(Socket *socket, uint_t backlog)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
   //Socket already connected?
   if(socket->state != TCP_STATE_CLOSED)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <tcpListen+0x18>
      return ERROR_ALREADY_CONNECTED;
 801419c:	23cf      	movs	r3, #207	; 0xcf
 801419e:	e017      	b.n	80141d0 <tcpListen+0x48>

   //Set the size of the SYN queue
   socket->synQueueSize = (backlog > 0) ? backlog : TCP_DEFAULT_SYN_QUEUE_SIZE;
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <tcpListen+0x22>
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	e000      	b.n	80141ac <tcpListen+0x24>
 80141aa:	2304      	movs	r3, #4
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
   //Limit the number of pending connections
   socket->synQueueSize = MIN(socket->synQueueSize, TCP_MAX_SYN_QUEUE_SIZE);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80141b8:	2b10      	cmp	r3, #16
 80141ba:	bf28      	it	cs
 80141bc:	2310      	movcs	r3, #16
 80141be:	461a      	mov	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4

   //Place the socket in the listening state
   tcpChangeState(socket, TCP_STATE_LISTEN);
 80141c6:	2101      	movs	r1, #1
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f002 ffbd 	bl	8017148 <tcpChangeState>

   //Successful processing
   return NO_ERROR;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <tcpAccept>:
 * @param[out] clientPort Port number used by the client
 * @return Handle to the socket in which the actual connection is made
 **/

Socket *tcpAccept(Socket *socket, IpAddr *clientIpAddr, uint16_t *clientPort)
{
 80141d8:	b5b0      	push	{r4, r5, r7, lr}
 80141da:	b08a      	sub	sp, #40	; 0x28
 80141dc:	af02      	add	r7, sp, #8
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
   error_t error;
   Socket *newSocket;
   TcpSynQueueItem *queueItem;

   //Ensure the socket was previously placed in the listening state
   if(tcpGetState(socket) != TCP_STATE_LISTEN)
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	f000 fc25 	bl	8014a34 <tcpGetState>
 80141ea:	4603      	mov	r3, r0
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d001      	beq.n	80141f4 <tcpAccept+0x1c>
      return NULL;
 80141f0:	2300      	movs	r3, #0
 80141f2:	e130      	b.n	8014456 <tcpAccept+0x27e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80141f4:	489a      	ldr	r0, [pc, #616]	; (8014460 <tcpAccept+0x288>)
 80141f6:	f7ed f835 	bl	8001264 <osAcquireMutex>

   //Wait for an connection attempt
   while(1)
   {
      //The SYN queue is empty?
      if(socket->synQueue == NULL)
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d116      	bne.n	8014232 <tcpAccept+0x5a>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2280      	movs	r2, #128	; 0x80
 8014208:	651a      	str	r2, [r3, #80]	; 0x50
         //Reset the event object
         osResetEvent(&socket->event);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	334c      	adds	r3, #76	; 0x4c
 801420e:	4618      	mov	r0, r3
 8014210:	f7ec ff90 	bl	8001134 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8014214:	4892      	ldr	r0, [pc, #584]	; (8014460 <tcpAccept+0x288>)
 8014216:	f7ed f834 	bl	8001282 <osReleaseMutex>
         //Wait until a SYN message is received from a client
         osWaitForEvent(&socket->event, socket->timeout);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7ec ff92 	bl	8001150 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 801422c:	488c      	ldr	r0, [pc, #560]	; (8014460 <tcpAccept+0x288>)
 801422e:	f7ed f819 	bl	8001264 <osAcquireMutex>
      }

      //Check whether the queue is still empty
      if(socket->synQueue == NULL)
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014238:	2b00      	cmp	r3, #0
 801423a:	d102      	bne.n	8014242 <tcpAccept+0x6a>
      {
         //Timeout error
         newSocket = NULL;
 801423c:	2300      	movs	r3, #0
 801423e:	61bb      	str	r3, [r7, #24]
         //Exit immediately
         break;
 8014240:	e105      	b.n	801444e <tcpAccept+0x276>
      }

      //Point to the first item in the SYN queue
      queueItem = socket->synQueue;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014248:	617b      	str	r3, [r7, #20]

      //The function optionally returns the IP address of the client
      if(clientIpAddr != NULL)
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d008      	beq.n	8014262 <tcpAccept+0x8a>
      {
         *clientIpAddr = queueItem->srcAddr;
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	4615      	mov	r5, r2
 8014256:	f103 0408 	add.w	r4, r3, #8
 801425a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	602b      	str	r3, [r5, #0]
      }

      //The function optionally returns the port number used by the client
      if(clientPort != NULL)
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d003      	beq.n	8014270 <tcpAccept+0x98>
      {
         *clientPort = queueItem->srcPort;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	8b9a      	ldrh	r2, [r3, #28]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	801a      	strh	r2, [r3, #0]
      }

      //Create a new socket to handle the incoming connection request
      newSocket = socketAllocate(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 8014270:	2106      	movs	r1, #6
 8014272:	2001      	movs	r0, #1
 8014274:	f7fe fba6 	bl	80129c4 <socketAllocate>
 8014278:	61b8      	str	r0, [r7, #24]

      //Socket successfully created?
      if(newSocket != NULL)
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	2b00      	cmp	r3, #0
 801427e:	f000 80dd 	beq.w	801443c <tcpAccept+0x264>
      {
         //The user owns the socket
         newSocket->ownedFlag = TRUE;
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	2201      	movs	r2, #1
 8014286:	661a      	str	r2, [r3, #96]	; 0x60

         //Inherit parameters from the listening socket
         newSocket->txBufferSize = socket->txBufferSize;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
         newSocket->rxBufferSize = socket->rxBufferSize;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
         newSocket->keepAliveIdle = socket->keepAliveIdle;
         newSocket->keepAliveInterval = socket->keepAliveInterval;
         newSocket->keepAliveMaxProbes = socket->keepAliveMaxProbes;
#endif
         //Number of chunks that comprise the TX and the RX buffers
         newSocket->txBuffer.maxChunkCount = arraysize(newSocket->txBuffer.chunk);
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	220f      	movs	r2, #15
 80142a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
         newSocket->rxBuffer.maxChunkCount = arraysize(newSocket->rxBuffer.chunk);
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	220f      	movs	r2, #15
 80142ac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

         //Allocate transmit buffer
         error = netBufferSetLength((NetBuffer *) &newSocket->txBuffer,
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80142bc:	4619      	mov	r1, r3
 80142be:	4610      	mov	r0, r2
 80142c0:	f7fc fb7f 	bl	80109c2 <netBufferSetLength>
 80142c4:	4603      	mov	r3, r0
 80142c6:	83fb      	strh	r3, [r7, #30]
            newSocket->txBufferSize);

         //Check status code
         if(!error)
 80142c8:	8bfb      	ldrh	r3, [r7, #30]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d10b      	bne.n	80142e6 <tcpAccept+0x10e>
         {
            //Allocate receive buffer
            error = netBufferSetLength((NetBuffer *) &newSocket->rxBuffer,
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 80142d4:	69bb      	ldr	r3, [r7, #24]
 80142d6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80142da:	4619      	mov	r1, r3
 80142dc:	4610      	mov	r0, r2
 80142de:	f7fc fb70 	bl	80109c2 <netBufferSetLength>
 80142e2:	4603      	mov	r3, r0
 80142e4:	83fb      	strh	r3, [r7, #30]
               newSocket->rxBufferSize);
         }

         //Transmit and receive buffers successfully allocated?
         if(!error)
 80142e6:	8bfb      	ldrh	r3, [r7, #30]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f040 80a4 	bne.w	8014436 <tcpAccept+0x25e>
         {
            //Bind the newly created socket to the appropriate interface
            newSocket->interface = queueItem->interface;
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	685a      	ldr	r2, [r3, #4]
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	60da      	str	r2, [r3, #12]

            //Bind the socket to the specified address
            newSocket->localIpAddr = queueItem->destAddr;
 80142f6:	69ba      	ldr	r2, [r7, #24]
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	f102 0410 	add.w	r4, r2, #16
 80142fe:	f103 0520 	add.w	r5, r3, #32
 8014302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014306:	682b      	ldr	r3, [r5, #0]
 8014308:	6023      	str	r3, [r4, #0]
            newSocket->localPort = socket->localPort;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801430e:	69bb      	ldr	r3, [r7, #24]
 8014310:	849a      	strh	r2, [r3, #36]	; 0x24

            //Save the port number and the IP address of the remote host
            newSocket->remoteIpAddr = queueItem->srcAddr;
 8014312:	69ba      	ldr	r2, [r7, #24]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	f102 0428 	add.w	r4, r2, #40	; 0x28
 801431a:	f103 0508 	add.w	r5, r3, #8
 801431e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014322:	682b      	ldr	r3, [r5, #0]
 8014324:	6023      	str	r3, [r4, #0]
            newSocket->remotePort = queueItem->srcPort;
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	8b9a      	ldrh	r2, [r3, #28]
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	879a      	strh	r2, [r3, #60]	; 0x3c

            //The SMSS is the size of the largest segment that the sender can
            //transmit
            newSocket->smss = queueItem->mss;
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8014332:	69bb      	ldr	r3, [r7, #24]
 8014334:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

            //The RMSS is the size of the largest segment the receiver is
            //willing to accept
            newSocket->rmss = MIN(newSocket->rxBufferSize, TCP_MAX_MSS);
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801433e:	f240 5296 	movw	r2, #1430	; 0x596
 8014342:	4293      	cmp	r3, r2
 8014344:	bf28      	it	cs
 8014346:	4613      	movcs	r3, r2
 8014348:	b29a      	uxth	r2, r3
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

            //Generate the initial sequence number
            newSocket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f103 0010 	add.w	r0, r3, #16
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	8c99      	ldrh	r1, [r3, #36]	; 0x24
               socket->localPort, &socket->remoteIpAddr, socket->remotePort);
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	f103 0228 	add.w	r2, r3, #40	; 0x28
            newSocket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014364:	f001 feb0 	bl	80160c8 <tcpGenerateInitialSeqNum>
 8014368:	4602      	mov	r2, r0
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	671a      	str	r2, [r3, #112]	; 0x70

            //Initialize TCP control block
            newSocket->irs = queueItem->isn;
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	675a      	str	r2, [r3, #116]	; 0x74
            newSocket->sndUna = newSocket->iss;
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	679a      	str	r2, [r3, #120]	; 0x78
            newSocket->sndNxt = newSocket->iss + 1;
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	67da      	str	r2, [r3, #124]	; 0x7c
            newSocket->rcvNxt = newSocket->irs + 1;
 8014388:	69bb      	ldr	r3, [r7, #24]
 801438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801438c:	1c5a      	adds	r2, r3, #1
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            newSocket->rcvUser = 0;
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	2200      	movs	r2, #0
 8014398:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
            newSocket->rcvWnd = newSocket->rxBufferSize;
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

            //Default retransmission timeout
            newSocket->rto = TCP_INITIAL_RTO;
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80143b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //Default congestion state
            newSocket->congestState = TCP_CONGEST_STATE_IDLE;
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	2200      	movs	r2, #0
 80143b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            //Initial congestion window
            newSocket->cwnd = MIN(TCP_INITIAL_WINDOW * newSocket->smss, newSocket->txBufferSize);
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80143c8:	4619      	mov	r1, r3
 80143ca:	460b      	mov	r3, r1
 80143cc:	005b      	lsls	r3, r3, #1
 80143ce:	440b      	add	r3, r1
 80143d0:	4293      	cmp	r3, r2
 80143d2:	bf28      	it	cs
 80143d4:	4613      	movcs	r3, r2
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
            //Slow start threshold should be set arbitrarily high
            newSocket->ssthresh = UINT16_MAX;
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            //Recover is set to the initial send sequence number
            newSocket->recover = newSocket->iss;
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif
            //The connection state should be changed to SYN-RECEIVED
            tcpChangeState(newSocket, TCP_STATE_SYN_RECEIVED);
 80143f2:	2103      	movs	r1, #3
 80143f4:	69b8      	ldr	r0, [r7, #24]
 80143f6:	f002 fea7 	bl	8017148 <tcpChangeState>
            //the SYN-RECEIVED state from the LISTEN state
            MIB2_INC_COUNTER32(tcpGroup.tcpPassiveOpens, 1);
            TCP_MIB_INC_COUNTER32(tcpPassiveOpens, 1);

            //Send a SYN ACK control segment
            error = tcpSendSegment(newSocket, TCP_FLAG_SYN | TCP_FLAG_ACK,
 80143fa:	69bb      	ldr	r3, [r7, #24]
 80143fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014404:	2101      	movs	r1, #1
 8014406:	9101      	str	r1, [sp, #4]
 8014408:	2100      	movs	r1, #0
 801440a:	9100      	str	r1, [sp, #0]
 801440c:	2112      	movs	r1, #18
 801440e:	69b8      	ldr	r0, [r7, #24]
 8014410:	f001 fa84 	bl	801591c <tcpSendSegment>
 8014414:	4603      	mov	r3, r0
 8014416:	83fb      	strh	r3, [r7, #30]
               newSocket->iss, newSocket->rcvNxt, 0, TRUE);

            //TCP segment successfully sent?
            if(!error)
 8014418:	8bfb      	ldrh	r3, [r7, #30]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d10b      	bne.n	8014436 <tcpAccept+0x25e>
            {
               //Remove the item from the SYN queue
               socket->synQueue = queueItem->next;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
               //Deallocate memory buffer
               memPoolFree(queueItem);
 8014428:	6978      	ldr	r0, [r7, #20]
 801442a:	f7fc fa5b 	bl	80108e4 <memPoolFree>
               //Update the state of events
               tcpUpdateEvents(socket);
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f002 feb0 	bl	8017194 <tcpUpdateEvents>

               //We are done
               break;
 8014434:	e00b      	b.n	801444e <tcpAccept+0x276>
            }
         }

         //Dispose the socket
         tcpAbort(newSocket);
 8014436:	69b8      	ldr	r0, [r7, #24]
 8014438:	f000 fac0 	bl	80149bc <tcpAbort>

      //Debug message
      TRACE_WARNING("Cannot accept TCP connection!\r\n");

      //Remove the item from the SYN queue
      socket->synQueue = queueItem->next;
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      //Deallocate memory buffer
      memPoolFree(queueItem);
 8014446:	6978      	ldr	r0, [r7, #20]
 8014448:	f7fc fa4c 	bl	80108e4 <memPoolFree>
      if(socket->synQueue == NULL)
 801444c:	e6d5      	b.n	80141fa <tcpAccept+0x22>

      //Wait for the next connection attempt
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 801444e:	4804      	ldr	r0, [pc, #16]	; (8014460 <tcpAccept+0x288>)
 8014450:	f7ec ff17 	bl	8001282 <osReleaseMutex>

   //Return a handle to the newly created socket
   return newSocket;
 8014454:	69bb      	ldr	r3, [r7, #24]
}
 8014456:	4618      	mov	r0, r3
 8014458:	3720      	adds	r7, #32
 801445a:	46bd      	mov	sp, r7
 801445c:	bdb0      	pop	{r4, r5, r7, pc}
 801445e:	bf00      	nop
 8014460:	200046f4 	.word	0x200046f4

08014464 <tcpSend>:
 * @return Error code
 **/

error_t tcpSend(Socket *socket, const uint8_t *data,
   size_t length, size_t *written, uint_t flags)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b088      	sub	sp, #32
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint_t totalLength;
   uint_t event;

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014478:	2b01      	cmp	r3, #1
 801447a:	d101      	bne.n	8014480 <tcpSend+0x1c>
      return ERROR_NOT_CONNECTED;
 801447c:	23cd      	movs	r3, #205	; 0xcd
 801447e:	e0a5      	b.n	80145cc <tcpSend+0x168>

   //Actual number of bytes written
   totalLength = 0;
 8014480:	2300      	movs	r3, #0
 8014482:	61fb      	str	r3, [r7, #28]

   //Send as much data as possible
   do
   {
      //Wait until there is more room in the send buffer
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_READY, socket->timeout);
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014488:	461a      	mov	r2, r3
 801448a:	2108      	movs	r1, #8
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f002 ffb9 	bl	8017404 <tcpWaitForEvents>
 8014492:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_READY)
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	2b08      	cmp	r3, #8
 8014498:	d001      	beq.n	801449e <tcpSend+0x3a>
         return ERROR_TIMEOUT;
 801449a:	23dc      	movs	r3, #220	; 0xdc
 801449c:	e096      	b.n	80145cc <tcpSend+0x168>

      //Check current TCP state
      switch(socket->state)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80144a4:	2b05      	cmp	r3, #5
 80144a6:	dc02      	bgt.n	80144ae <tcpSend+0x4a>
 80144a8:	2b04      	cmp	r3, #4
 80144aa:	da0d      	bge.n	80144c8 <tcpSend+0x64>
 80144ac:	e004      	b.n	80144b8 <tcpSend+0x54>
 80144ae:	3b06      	subs	r3, #6
 80144b0:	2b04      	cmp	r3, #4
 80144b2:	d801      	bhi.n	80144b8 <tcpSend+0x54>
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The connection is being closed
         return ERROR_CONNECTION_CLOSING;
 80144b4:	23cb      	movs	r3, #203	; 0xcb
 80144b6:	e089      	b.n	80145cc <tcpSend+0x168>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d001      	beq.n	80144c4 <tcpSend+0x60>
 80144c0:	23cc      	movs	r3, #204	; 0xcc
 80144c2:	e083      	b.n	80145cc <tcpSend+0x168>
 80144c4:	23cd      	movs	r3, #205	; 0xcd
 80144c6:	e081      	b.n	80145cc <tcpSend+0x168>
         break;
 80144c8:	bf00      	nop
      }

      //Determine the actual number of bytes in the send buffer
      n = socket->sndUser + socket->sndNxt - socket->sndUna;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80144d0:	461a      	mov	r2, r3
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144d6:	441a      	add	r2, r3
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144dc:	1ad3      	subs	r3, r2, r3
 80144de:	617b      	str	r3, [r7, #20]
      //Exit immediately if the transmission buffer is full (sanity check)
      if(n >= socket->txBufferSize)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80144e6:	697a      	ldr	r2, [r7, #20]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d301      	bcc.n	80144f0 <tcpSend+0x8c>
         return ERROR_FAILURE;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e06d      	b.n	80145cc <tcpSend+0x168>

      //Number of bytes available for writing
      n = socket->txBufferSize - n;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	617b      	str	r3, [r7, #20]
      //Calculate the number of bytes to copy at a time
      n = MIN(n, length - totalLength);
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	1ad3      	subs	r3, r2, r3
 8014502:	697a      	ldr	r2, [r7, #20]
 8014504:	4293      	cmp	r3, r2
 8014506:	bf28      	it	cs
 8014508:	4613      	movcs	r3, r2
 801450a:	617b      	str	r3, [r7, #20]

      //Any data to copy?
      if(n > 0)
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d034      	beq.n	801457c <tcpSend+0x118>
      {
         //Copy user data to send buffer
         tcpWriteTxBuffer(socket, socket->sndNxt + socket->sndUser, data, n);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 801451c:	1899      	adds	r1, r3, r2
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	68ba      	ldr	r2, [r7, #8]
 8014522:	68f8      	ldr	r0, [r7, #12]
 8014524:	f002 ff9c 	bl	8017460 <tcpWriteTxBuffer>

         //Update the number of data buffered but not yet sent
         socket->sndUser += n;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	b29b      	uxth	r3, r3
 8014532:	4413      	add	r3, r2
 8014534:	b29a      	uxth	r2, r3
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
         //Advance data pointer
         data += n;
 801453c:	68ba      	ldr	r2, [r7, #8]
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	4413      	add	r3, r2
 8014542:	60bb      	str	r3, [r7, #8]
         //Update byte counter
         totalLength += n;
 8014544:	69fa      	ldr	r2, [r7, #28]
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	4413      	add	r3, r2
 801454a:	61fb      	str	r3, [r7, #28]

         //Total number of data that have been written
         if(written != NULL)
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d002      	beq.n	8014558 <tcpSend+0xf4>
            *written = totalLength;
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	69fa      	ldr	r2, [r7, #28]
 8014556:	601a      	str	r2, [r3, #0]

         //Update TX events
         tcpUpdateEvents(socket);
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f002 fe1b 	bl	8017194 <tcpUpdateEvents>

         //To avoid a deadlock, it is necessary to have a timeout to force
         //transmission of data, overriding the SWS avoidance algorithm. In
         //practice, this timeout should seldom occur (refer to RFC 1122,
         //section 4.2.3.4)
         if(socket->sndUser == n)
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8014564:	461a      	mov	r2, r3
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	4293      	cmp	r3, r2
 801456a:	d107      	bne.n	801457c <tcpSend+0x118>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014572:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8014576:	4618      	mov	r0, r3
 8014578:	f7fd f800 	bl	801157c <netStartTimer>
         }
      }

      //The Nagle algorithm should be implemented to coalesce
      //short segments (refer to RFC 1122 4.2.3.4)
      tcpNagleAlgo(socket, flags);
 801457c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f002 fcd2 	bl	8016f28 <tcpNagleAlgo>

      //Send as much data as possible
   } while(totalLength < length);
 8014584:	69fa      	ldr	r2, [r7, #28]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	429a      	cmp	r2, r3
 801458a:	f4ff af7b 	bcc.w	8014484 <tcpSend+0x20>

   //The SOCKET_FLAG_WAIT_ACK flag causes the function to
   //wait for acknowledgment from the remote side
   if((flags & SOCKET_FLAG_WAIT_ACK) != 0)
 801458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014594:	2b00      	cmp	r3, #0
 8014596:	d018      	beq.n	80145ca <tcpSend+0x166>
   {
      //Wait for the data to be acknowledged
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_ACKED, socket->timeout);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801459c:	461a      	mov	r2, r3
 801459e:	2120      	movs	r1, #32
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f002 ff2f 	bl	8017404 <tcpWaitForEvents>
 80145a6:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_ACKED)
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	2b20      	cmp	r3, #32
 80145ac:	d001      	beq.n	80145b2 <tcpSend+0x14e>
         return ERROR_TIMEOUT;
 80145ae:	23dc      	movs	r3, #220	; 0xdc
 80145b0:	e00c      	b.n	80145cc <tcpSend+0x168>

      //The connection was closed before an acknowledgment was received?
      if(socket->state != TCP_STATE_ESTABLISHED && socket->state != TCP_STATE_CLOSE_WAIT)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80145b8:	2b04      	cmp	r3, #4
 80145ba:	d006      	beq.n	80145ca <tcpSend+0x166>
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80145c2:	2b05      	cmp	r3, #5
 80145c4:	d001      	beq.n	80145ca <tcpSend+0x166>
         return ERROR_NOT_CONNECTED;
 80145c6:	23cd      	movs	r3, #205	; 0xcd
 80145c8:	e000      	b.n	80145cc <tcpSend+0x168>
   }

   //Successful write operation
   return NO_ERROR;
 80145ca:	2300      	movs	r3, #0
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3720      	adds	r7, #32
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <tcpReceive>:
 * @return Error code
 **/

error_t tcpReceive(Socket *socket, uint8_t *data,
   size_t size, size_t *received, uint_t flags)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b08a      	sub	sp, #40	; 0x28
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	603b      	str	r3, [r7, #0]
   uint_t event;
   uint32_t seqNum;
   systime_t timeout;

   //Retrieve the break character code
   char_t c = LSB(flags);
 80145e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e4:	76fb      	strb	r3, [r7, #27]
   //No data has been read yet
   *received = 0;
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	2200      	movs	r2, #0
 80145ea:	601a      	str	r2, [r3, #0]

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	f040 80d5 	bne.w	80147a2 <tcpReceive+0x1ce>
      return ERROR_NOT_CONNECTED;
 80145f8:	23cd      	movs	r3, #205	; 0xcd
 80145fa:	e0db      	b.n	80147b4 <tcpReceive+0x1e0>

   //Read as much data as possible
   while(*received < size)
   {
      //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
      timeout = (flags & SOCKET_FLAG_DONT_WAIT) ? 0 : socket->timeout;
 80145fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014602:	2b00      	cmp	r3, #0
 8014604:	d102      	bne.n	801460c <tcpReceive+0x38>
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460a:	e000      	b.n	801460e <tcpReceive+0x3a>
 801460c:	2300      	movs	r3, #0
 801460e:	617b      	str	r3, [r7, #20]
      //Wait for data to be available for reading
      event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_READY, timeout);
 8014610:	697a      	ldr	r2, [r7, #20]
 8014612:	2180      	movs	r1, #128	; 0x80
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f002 fef5 	bl	8017404 <tcpWaitForEvents>
 801461a:	6138      	str	r0, [r7, #16]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_RX_READY)
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	2b80      	cmp	r3, #128	; 0x80
 8014620:	d001      	beq.n	8014626 <tcpReceive+0x52>
         return ERROR_TIMEOUT;
 8014622:	23dc      	movs	r3, #220	; 0xdc
 8014624:	e0c6      	b.n	80147b4 <tcpReceive+0x1e0>

      //Check current TCP state
      switch(socket->state)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801462c:	3b04      	subs	r3, #4
 801462e:	2b06      	cmp	r3, #6
 8014630:	d831      	bhi.n	8014696 <tcpReceive+0xc2>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <tcpReceive+0x64>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014655 	.word	0x08014655
 801463c:	08014667 	.word	0x08014667
 8014640:	08014667 	.word	0x08014667
 8014644:	08014655 	.word	0x08014655
 8014648:	08014655 	.word	0x08014655
 801464c:	08014667 	.word	0x08014667
 8014650:	08014667 	.word	0x08014667
      //ESTABLISHED, FIN-WAIT-1 or FIN-WAIT-2 state?
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Sequence number of the first byte to read
         seqNum = socket->rcvNxt - socket->rcvUser;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	f8b2 2094 	ldrh.w	r2, [r2, #148]	; 0x94
 8014660:	1a9b      	subs	r3, r3, r2
 8014662:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8014664:	e03b      	b.n	80146de <tcpReceive+0x10a>
      case TCP_STATE_CLOSE_WAIT:
      case TCP_STATE_LAST_ACK:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The user must be satisfied with data already on hand
         if(socket->rcvUser == 0)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 801466c:	2b00      	cmp	r3, #0
 801466e:	d108      	bne.n	8014682 <tcpReceive+0xae>
         {
            if(*received > 0)
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d001      	beq.n	801467c <tcpReceive+0xa8>
               return NO_ERROR;
 8014678:	2300      	movs	r3, #0
 801467a:	e09b      	b.n	80147b4 <tcpReceive+0x1e0>
            else
               return ERROR_END_OF_STREAM;
 801467c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014680:	e098      	b.n	80147b4 <tcpReceive+0x1e0>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	f8b2 2094 	ldrh.w	r2, [r2, #148]	; 0x94
 801468e:	1a9b      	subs	r3, r3, r2
 8014690:	3b01      	subs	r3, #1
 8014692:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8014694:	e023      	b.n	80146de <tcpReceive+0x10a>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         if(socket->resetFlag)
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801469a:	2b00      	cmp	r3, #0
 801469c:	d001      	beq.n	80146a2 <tcpReceive+0xce>
            return ERROR_CONNECTION_RESET;
 801469e:	23cc      	movs	r3, #204	; 0xcc
 80146a0:	e088      	b.n	80147b4 <tcpReceive+0x1e0>
         //The connection has not yet been established?
         if(!socket->closedFlag)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d101      	bne.n	80146ae <tcpReceive+0xda>
            return ERROR_NOT_CONNECTED;
 80146aa:	23cd      	movs	r3, #205	; 0xcd
 80146ac:	e082      	b.n	80147b4 <tcpReceive+0x1e0>

         //The user must be satisfied with data already on hand
         if(socket->rcvUser == 0)
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d108      	bne.n	80146ca <tcpReceive+0xf6>
         {
            if(*received > 0)
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d001      	beq.n	80146c4 <tcpReceive+0xf0>
               return NO_ERROR;
 80146c0:	2300      	movs	r3, #0
 80146c2:	e077      	b.n	80147b4 <tcpReceive+0x1e0>
            else
               return ERROR_END_OF_STREAM;
 80146c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146c8:	e074      	b.n	80147b4 <tcpReceive+0x1e0>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146d0:	68fa      	ldr	r2, [r7, #12]
 80146d2:	f8b2 2094 	ldrh.w	r2, [r2, #148]	; 0x94
 80146d6:	1a9b      	subs	r3, r3, r2
 80146d8:	3b01      	subs	r3, #1
 80146da:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 80146dc:	bf00      	nop
      }

      //Sanity check
      if(socket->rcvUser == 0)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d101      	bne.n	80146ec <tcpReceive+0x118>
         return ERROR_FAILURE;
 80146e8:	2301      	movs	r3, #1
 80146ea:	e063      	b.n	80147b4 <tcpReceive+0x1e0>

      //Calculate the number of bytes to read at a time
      n = MIN(socket->rcvUser, size - *received);
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	687a      	ldr	r2, [r7, #4]
 80146f2:	1ad3      	subs	r3, r2, r3
 80146f4:	68fa      	ldr	r2, [r7, #12]
 80146f6:	f8b2 2094 	ldrh.w	r2, [r2, #148]	; 0x94
 80146fa:	4293      	cmp	r3, r2
 80146fc:	bf28      	it	cs
 80146fe:	4613      	movcs	r3, r2
 8014700:	623b      	str	r3, [r7, #32]
      //Copy data from circular buffer
      tcpReadRxBuffer(socket, seqNum, data, n);
 8014702:	6a3b      	ldr	r3, [r7, #32]
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	69f9      	ldr	r1, [r7, #28]
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f002 ff93 	bl	8017634 <tcpReadRxBuffer>

      //Read data until a break character is encountered?
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014714:	2b00      	cmp	r3, #0
 8014716:	d017      	beq.n	8014748 <tcpReceive+0x174>
      {
         //Search for the specified break character
         for(i = 0; i < n && data[i] != c; i++);
 8014718:	2300      	movs	r3, #0
 801471a:	627b      	str	r3, [r7, #36]	; 0x24
 801471c:	e002      	b.n	8014724 <tcpReceive+0x150>
 801471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014720:	3301      	adds	r3, #1
 8014722:	627b      	str	r3, [r7, #36]	; 0x24
 8014724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	429a      	cmp	r2, r3
 801472a:	d206      	bcs.n	801473a <tcpReceive+0x166>
 801472c:	68ba      	ldr	r2, [r7, #8]
 801472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014730:	4413      	add	r3, r2
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	7efa      	ldrb	r2, [r7, #27]
 8014736:	429a      	cmp	r2, r3
 8014738:	d1f1      	bne.n	801471e <tcpReceive+0x14a>
         //Adjust the number of data to read
         n = MIN(n, i + 1);
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	3301      	adds	r3, #1
 801473e:	6a3a      	ldr	r2, [r7, #32]
 8014740:	4293      	cmp	r3, r2
 8014742:	bf28      	it	cs
 8014744:	4613      	movcs	r3, r2
 8014746:	623b      	str	r3, [r7, #32]
      }

      //Total number of data that have been read
      *received += n;
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	441a      	add	r2, r3
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	601a      	str	r2, [r3, #0]
      //Remaining data still available in the receive buffer
      socket->rcvUser -= n;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 801475a:	6a3b      	ldr	r3, [r7, #32]
 801475c:	b29b      	uxth	r3, r3
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	b29a      	uxth	r2, r3
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

      //Update the receive window
      tcpUpdateReceiveWindow(socket);
 8014768:	68f8      	ldr	r0, [r7, #12]
 801476a:	f002 fa72 	bl	8016c52 <tcpUpdateReceiveWindow>
      //Update RX event state
      tcpUpdateEvents(socket);
 801476e:	68f8      	ldr	r0, [r7, #12]
 8014770:	f002 fd10 	bl	8017194 <tcpUpdateEvents>

      //The SOCKET_FLAG_BREAK_CHAR flag causes the function to stop reading
      //data as soon as the specified break character is encountered
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 8014774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801477a:	2b00      	cmp	r3, #0
 801477c:	d008      	beq.n	8014790 <tcpReceive+0x1bc>
      {
         //Check whether a break character has been found
         if(data[n - 1] == c)
 801477e:	6a3b      	ldr	r3, [r7, #32]
 8014780:	3b01      	subs	r3, #1
 8014782:	68ba      	ldr	r2, [r7, #8]
 8014784:	4413      	add	r3, r2
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	7efa      	ldrb	r2, [r7, #27]
 801478a:	429a      	cmp	r2, r3
 801478c:	d105      	bne.n	801479a <tcpReceive+0x1c6>
            break;
 801478e:	e010      	b.n	80147b2 <tcpReceive+0x1de>
      }
      //The SOCKET_FLAG_WAIT_ALL flag causes the function to return
      //only when the requested number of bytes have been read
      else if((flags & SOCKET_FLAG_WAIT_ALL) == 0)
 8014790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014796:	2b00      	cmp	r3, #0
 8014798:	d00a      	beq.n	80147b0 <tcpReceive+0x1dc>
      {
         break;
      }

      //Advance data pointer
      data += n;
 801479a:	68ba      	ldr	r2, [r7, #8]
 801479c:	6a3b      	ldr	r3, [r7, #32]
 801479e:	4413      	add	r3, r2
 80147a0:	60bb      	str	r3, [r7, #8]
   while(*received < size)
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	f63f af27 	bhi.w	80145fc <tcpReceive+0x28>
 80147ae:	e000      	b.n	80147b2 <tcpReceive+0x1de>
         break;
 80147b0:	bf00      	nop
   }

   //Successful read operation
   return NO_ERROR;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3728      	adds	r7, #40	; 0x28
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <tcpShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t tcpShutdown(Socket *socket, uint_t how)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af02      	add	r7, sp, #8
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t event;

   //Disable transmission?
   if(how == SOCKET_SD_SEND || how == SOCKET_SD_BOTH)
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d003      	beq.n	80147d4 <tcpShutdown+0x18>
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	2b02      	cmp	r3, #2
 80147d0:	f040 80bb 	bne.w	801494a <tcpShutdown+0x18e>
   {
      //Check current state
      switch(socket->state)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80147da:	2b09      	cmp	r3, #9
 80147dc:	f200 80b7 	bhi.w	801494e <tcpShutdown+0x192>
 80147e0:	a201      	add	r2, pc, #4	; (adr r2, 80147e8 <tcpShutdown+0x2c>)
 80147e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e6:	bf00      	nop
 80147e8:	08014811 	.word	0x08014811
 80147ec:	08014811 	.word	0x08014811
 80147f0:	0801494f 	.word	0x0801494f
 80147f4:	08014815 	.word	0x08014815
 80147f8:	08014815 	.word	0x08014815
 80147fc:	080148a3 	.word	0x080148a3
 8014800:	08014931 	.word	0x08014931
 8014804:	08014931 	.word	0x08014931
 8014808:	0801494f 	.word	0x0801494f
 801480c:	08014931 	.word	0x08014931
      {
      //CLOSED or LISTEN state?
      case TCP_STATE_CLOSED:
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8014810:	23cd      	movs	r3, #205	; 0xcd
 8014812:	e0cf      	b.n	80149b4 <tcpShutdown+0x1f8>

      //SYN-RECEIVED or ESTABLISHED state?
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 8014814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	2300      	movs	r3, #0
 801481c:	2200      	movs	r2, #0
 801481e:	2100      	movs	r1, #0
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7ff fe1f 	bl	8014464 <tcpSend>
 8014826:	4603      	mov	r3, r0
 8014828:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 801482a:	897b      	ldrh	r3, [r7, #10]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <tcpShutdown+0x78>
            return error;
 8014830:	897b      	ldrh	r3, [r7, #10]
 8014832:	e0bf      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014838:	461a      	mov	r2, r3
 801483a:	2110      	movs	r1, #16
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f002 fde1 	bl	8017404 <tcpWaitForEvents>
 8014842:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2b10      	cmp	r3, #16
 8014848:	d001      	beq.n	801484e <tcpShutdown+0x92>
            return ERROR_TIMEOUT;
 801484a:	23dc      	movs	r3, #220	; 0xdc
 801484c:	e0b2      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014858:	2101      	movs	r1, #1
 801485a:	9101      	str	r1, [sp, #4]
 801485c:	2100      	movs	r1, #0
 801485e:	9100      	str	r1, [sp, #0]
 8014860:	2111      	movs	r1, #17
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 f85a 	bl	801591c <tcpSendSegment>
 8014868:	4603      	mov	r3, r0
 801486a:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 801486c:	897b      	ldrh	r3, [r7, #10]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <tcpShutdown+0xba>
            return error;
 8014872:	897b      	ldrh	r3, [r7, #10]
 8014874:	e09e      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Sequence number expected to be received
         socket->sndNxt++;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801487a:	1c5a      	adds	r2, r3, #1
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	67da      	str	r2, [r3, #124]	; 0x7c
         //Switch to the FIN-WAIT1 state
         tcpChangeState(socket, TCP_STATE_FIN_WAIT_1);
 8014880:	2107      	movs	r1, #7
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f002 fc60 	bl	8017148 <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801488c:	461a      	mov	r2, r3
 801488e:	2140      	movs	r1, #64	; 0x40
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f002 fdb7 	bl	8017404 <tcpWaitForEvents>
 8014896:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2b40      	cmp	r3, #64	; 0x40
 801489c:	d059      	beq.n	8014952 <tcpShutdown+0x196>
            return ERROR_TIMEOUT;
 801489e:	23dc      	movs	r3, #220	; 0xdc
 80148a0:	e088      	b.n	80149b4 <tcpShutdown+0x1f8>
         break;

      //CLOSE-WAIT state?
      case TCP_STATE_CLOSE_WAIT:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 80148a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80148a6:	9300      	str	r3, [sp, #0]
 80148a8:	2300      	movs	r3, #0
 80148aa:	2200      	movs	r2, #0
 80148ac:	2100      	movs	r1, #0
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7ff fdd8 	bl	8014464 <tcpSend>
 80148b4:	4603      	mov	r3, r0
 80148b6:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 80148b8:	897b      	ldrh	r3, [r7, #10]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <tcpShutdown+0x106>
            return error;
 80148be:	897b      	ldrh	r3, [r7, #10]
 80148c0:	e078      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c6:	461a      	mov	r2, r3
 80148c8:	2110      	movs	r1, #16
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f002 fd9a 	bl	8017404 <tcpWaitForEvents>
 80148d0:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2b10      	cmp	r3, #16
 80148d6:	d001      	beq.n	80148dc <tcpShutdown+0x120>
            return ERROR_TIMEOUT;
 80148d8:	23dc      	movs	r3, #220	; 0xdc
 80148da:	e06b      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148e6:	2101      	movs	r1, #1
 80148e8:	9101      	str	r1, [sp, #4]
 80148ea:	2100      	movs	r1, #0
 80148ec:	9100      	str	r1, [sp, #0]
 80148ee:	2111      	movs	r1, #17
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f001 f813 	bl	801591c <tcpSendSegment>
 80148f6:	4603      	mov	r3, r0
 80148f8:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 80148fa:	897b      	ldrh	r3, [r7, #10]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <tcpShutdown+0x148>
            return error;
 8014900:	897b      	ldrh	r3, [r7, #10]
 8014902:	e057      	b.n	80149b4 <tcpShutdown+0x1f8>

         //Sequence number expected to be received
         socket->sndNxt++;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014908:	1c5a      	adds	r2, r3, #1
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	67da      	str	r2, [r3, #124]	; 0x7c
         //Switch to the LAST-ACK state
         tcpChangeState(socket, TCP_STATE_LAST_ACK);
 801490e:	2106      	movs	r1, #6
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f002 fc19 	bl	8017148 <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801491a:	461a      	mov	r2, r3
 801491c:	2140      	movs	r1, #64	; 0x40
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f002 fd70 	bl	8017404 <tcpWaitForEvents>
 8014924:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2b40      	cmp	r3, #64	; 0x40
 801492a:	d014      	beq.n	8014956 <tcpShutdown+0x19a>
            return ERROR_TIMEOUT;
 801492c:	23dc      	movs	r3, #220	; 0xdc
 801492e:	e041      	b.n	80149b4 <tcpShutdown+0x1f8>
      //FIN-WAIT-1, CLOSING or LAST-ACK state?
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_CLOSING:
      case TCP_STATE_LAST_ACK:
         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014934:	461a      	mov	r2, r3
 8014936:	2140      	movs	r1, #64	; 0x40
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f002 fd63 	bl	8017404 <tcpWaitForEvents>
 801493e:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2b40      	cmp	r3, #64	; 0x40
 8014944:	d009      	beq.n	801495a <tcpShutdown+0x19e>
            return ERROR_TIMEOUT;
 8014946:	23dc      	movs	r3, #220	; 0xdc
 8014948:	e034      	b.n	80149b4 <tcpShutdown+0x1f8>
      //SYN-SENT, FIN-WAIT-2 or TIME-WAIT state?
      default:
         //Continue processing
         break;
      }
   }
 801494a:	bf00      	nop
 801494c:	e006      	b.n	801495c <tcpShutdown+0x1a0>
         break;
 801494e:	bf00      	nop
 8014950:	e004      	b.n	801495c <tcpShutdown+0x1a0>
         break;
 8014952:	bf00      	nop
 8014954:	e002      	b.n	801495c <tcpShutdown+0x1a0>
         break;
 8014956:	bf00      	nop
 8014958:	e000      	b.n	801495c <tcpShutdown+0x1a0>
         break;
 801495a:	bf00      	nop

   //Disable reception?
   if(how == SOCKET_SD_RECEIVE || how == SOCKET_SD_BOTH)
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d002      	beq.n	8014968 <tcpShutdown+0x1ac>
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d11f      	bne.n	80149a8 <tcpShutdown+0x1ec>
   {
      //Check current state
      switch(socket->state)
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801496e:	2b08      	cmp	r3, #8
 8014970:	dc1c      	bgt.n	80149ac <tcpShutdown+0x1f0>
 8014972:	2b07      	cmp	r3, #7
 8014974:	da09      	bge.n	801498a <tcpShutdown+0x1ce>
 8014976:	2b01      	cmp	r3, #1
 8014978:	d005      	beq.n	8014986 <tcpShutdown+0x1ca>
 801497a:	2b00      	cmp	r3, #0
 801497c:	dd16      	ble.n	80149ac <tcpShutdown+0x1f0>
 801497e:	3b02      	subs	r3, #2
 8014980:	2b02      	cmp	r3, #2
 8014982:	d813      	bhi.n	80149ac <tcpShutdown+0x1f0>
 8014984:	e001      	b.n	801498a <tcpShutdown+0x1ce>
      {
      //LISTEN state?
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8014986:	23cd      	movs	r3, #205	; 0xcd
 8014988:	e014      	b.n	80149b4 <tcpShutdown+0x1f8>
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Wait for a FIN to be received
         event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_SHUTDOWN, socket->timeout);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801498e:	461a      	mov	r2, r3
 8014990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f002 fd35 	bl	8017404 <tcpWaitForEvents>
 801499a:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_RX_SHUTDOWN)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149a2:	d005      	beq.n	80149b0 <tcpShutdown+0x1f4>
            return ERROR_TIMEOUT;
 80149a4:	23dc      	movs	r3, #220	; 0xdc
 80149a6:	e005      	b.n	80149b4 <tcpShutdown+0x1f8>
      //CLOSING, TIME-WAIT, CLOSE-WAIT, LAST-ACK or CLOSED state?
      default:
         //A FIN segment has already been received
         break;
      }
   }
 80149a8:	bf00      	nop
 80149aa:	e002      	b.n	80149b2 <tcpShutdown+0x1f6>
         break;
 80149ac:	bf00      	nop
 80149ae:	e000      	b.n	80149b2 <tcpShutdown+0x1f6>
         break;
 80149b0:	bf00      	nop

   //Successful operation
   return NO_ERROR;
 80149b2:	2300      	movs	r3, #0
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3710      	adds	r7, #16
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <tcpAbort>:
 * @param[in] socket Handle identifying the socket to close
 * @return Error code
 **/

error_t tcpAbort(Socket *socket)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
   error_t error;

   //Check current state
   switch(socket->state)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80149ca:	2b0a      	cmp	r3, #10
 80149cc:	d01d      	beq.n	8014a0a <tcpAbort+0x4e>
 80149ce:	2b0a      	cmp	r3, #10
 80149d0:	dc20      	bgt.n	8014a14 <tcpAbort+0x58>
 80149d2:	2b05      	cmp	r3, #5
 80149d4:	dc02      	bgt.n	80149dc <tcpAbort+0x20>
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	da03      	bge.n	80149e2 <tcpAbort+0x26>
 80149da:	e01b      	b.n	8014a14 <tcpAbort+0x58>
 80149dc:	3b07      	subs	r3, #7
 80149de:	2b01      	cmp	r3, #1
 80149e0:	d818      	bhi.n	8014a14 <tcpAbort+0x58>
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
   case TCP_STATE_FIN_WAIT_2:
   case TCP_STATE_CLOSE_WAIT:
      //Send a reset segment
      error = tcpSendResetSegment(socket, socket->sndNxt);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80149e6:	4619      	mov	r1, r3
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f001 f961 	bl	8015cb0 <tcpSendResetSegment>
 80149ee:	4603      	mov	r3, r0
 80149f0:	81fb      	strh	r3, [r7, #14]
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80149f2:	2100      	movs	r1, #0
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f002 fba7 	bl	8017148 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f001 ff44 	bl	8016888 <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2200      	movs	r2, #0
 8014a04:	605a      	str	r2, [r3, #4]
      //Return status code
      return error;
 8014a06:	89fb      	ldrh	r3, [r7, #14]
 8014a08:	e00f      	b.n	8014a2a <tcpAbort+0x6e>

   //TIME-WAIT state?
   case TCP_STATE_TIME_WAIT:
#if (TCP_2MSL_TIMER > 0)
      //The user doe not own the socket anymore...
      socket->ownedFlag = FALSE;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	661a      	str	r2, [r3, #96]	; 0x60
      //TCB will be deleted and socket will be closed
      //when the 2MSL timer will elapse
      return NO_ERROR;
 8014a10:	2300      	movs	r3, #0
 8014a12:	e00a      	b.n	8014a2a <tcpAbort+0x6e>
#endif

   //Any other state?
   default:
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8014a14:	2100      	movs	r1, #0
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f002 fb96 	bl	8017148 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f001 ff33 	bl	8016888 <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	605a      	str	r2, [r3, #4]
      //No error to report
      return NO_ERROR;
 8014a28:	2300      	movs	r3, #0
   }
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3710      	adds	r7, #16
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
	...

08014a34 <tcpGetState>:
 * @param[in] socket Handle identifying the socket
 * @return TCP FSM state
 **/

TcpState tcpGetState(Socket *socket)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b084      	sub	sp, #16
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
   TcpState state;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8014a3c:	4807      	ldr	r0, [pc, #28]	; (8014a5c <tcpGetState+0x28>)
 8014a3e:	f7ec fc11 	bl	8001264 <osAcquireMutex>

   //Get TCP FSM current state
   state = socket->state;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a48:	73fb      	strb	r3, [r7, #15]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8014a4a:	4804      	ldr	r0, [pc, #16]	; (8014a5c <tcpGetState+0x28>)
 8014a4c:	f7ec fc19 	bl	8001282 <osReleaseMutex>

   //Return current state
   return state;
 8014a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	200046f4 	.word	0x200046f4

08014a60 <tcpKillOldestConnection>:
 * @return Handle identifying the oldest TCP connection in the TIME-WAIT state.
 *   NULL is returned if no socket is currently in the TIME-WAIT state
 **/

Socket *tcpKillOldestConnection(void)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b084      	sub	sp, #16
 8014a64:	af00      	add	r7, sp, #0
   systime_t time;
   Socket *socket;
   Socket *oldestSocket;

   //Get current time
   time = osGetSystemTime();
 8014a66:	f7ec fc1b 	bl	80012a0 <osGetSystemTime>
 8014a6a:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest socket in the TIME-WAIT state
   oldestSocket = NULL;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	60bb      	str	r3, [r7, #8]

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8014a70:	2300      	movs	r3, #0
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	e026      	b.n	8014ac4 <tcpKillOldestConnection+0x64>
   {
      //Point to the current socket descriptor
      socket = &socketTable[i];
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8014a7c:	fb02 f303 	mul.w	r3, r2, r3
 8014a80:	4a1b      	ldr	r2, [pc, #108]	; (8014af0 <tcpKillOldestConnection+0x90>)
 8014a82:	4413      	add	r3, r2
 8014a84:	603b      	str	r3, [r7, #0]

      //TCP connection found?
      if(socket->type == SOCKET_TYPE_STREAM)
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d117      	bne.n	8014abe <tcpKillOldestConnection+0x5e>
      {
         //Check current state
         if(socket->state == TCP_STATE_TIME_WAIT)
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a94:	2b0a      	cmp	r3, #10
 8014a96:	d112      	bne.n	8014abe <tcpKillOldestConnection+0x5e>
         {
            //Keep track of the oldest socket in the TIME-WAIT state
            if(oldestSocket == NULL)
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d101      	bne.n	8014aa2 <tcpKillOldestConnection+0x42>
            {
               //Save socket handle
               oldestSocket = socket;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	60bb      	str	r3, [r7, #8]
            }
            if((time - socket->timeWaitTimer.startTime) >
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	1ad2      	subs	r2, r2, r3
               (time - oldestSocket->timeWaitTimer.startTime))
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014ab2:	6879      	ldr	r1, [r7, #4]
 8014ab4:	1acb      	subs	r3, r1, r3
            if((time - socket->timeWaitTimer.startTime) >
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d901      	bls.n	8014abe <tcpKillOldestConnection+0x5e>
            {
               //Save socket handle
               oldestSocket = socket;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b09      	cmp	r3, #9
 8014ac8:	d9d5      	bls.n	8014a76 <tcpKillOldestConnection+0x16>
         }
      }
   }

   //Any connection in the TIME-WAIT state?
   if(oldestSocket != NULL)
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d009      	beq.n	8014ae4 <tcpKillOldestConnection+0x84>
   {
      //Enter CLOSED state
      tcpChangeState(oldestSocket, TCP_STATE_CLOSED);
 8014ad0:	2100      	movs	r1, #0
 8014ad2:	68b8      	ldr	r0, [r7, #8]
 8014ad4:	f002 fb38 	bl	8017148 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(oldestSocket);
 8014ad8:	68b8      	ldr	r0, [r7, #8]
 8014ada:	f001 fed5 	bl	8016888 <tcpDeleteControlBlock>
      //Mark the socket as closed
      oldestSocket->type = SOCKET_TYPE_UNUSED;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	605a      	str	r2, [r3, #4]
   }

   //The oldest connection in the TIME-WAIT state can be reused
   //when the socket table runs out of space
   return oldestSocket;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	20005700 	.word	0x20005700

08014af4 <tcpProcessSegment>:
 *   the packet
 **/

void tcpProcessSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 8014af4:	b590      	push	{r4, r7, lr}
 8014af6:	b08d      	sub	sp, #52	; 0x34
 8014af8:	af02      	add	r7, sp, #8
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	60b9      	str	r1, [r7, #8]
 8014afe:	607a      	str	r2, [r7, #4]
 8014b00:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that is
   //addressed to a broadcast or multicast address (refer to RFC 1122, section
   //4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b0c      	cmp	r3, #12
 8014b08:	d110      	bne.n	8014b2c <tcpProcessSegment+0x38>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	689b      	ldr	r3, [r3, #8]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f7f5 f9d3 	bl	8009ebc <ipv4IsBroadcastAddr>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f040 81de 	bne.w	8014eda <tcpProcessSegment+0x3e6>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	689b      	ldr	r3, [r3, #8]
 8014b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b26:	2be0      	cmp	r3, #224	; 0xe0
 8014b28:	d10a      	bne.n	8014b40 <tcpProcessSegment+0x4c>
         return;
 8014b2a:	e1e5      	b.n	8014ef8 <tcpProcessSegment+0x404>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b28      	cmp	r3, #40	; 0x28
 8014b32:	f040 81d4 	bne.w	8014ede <tcpProcessSegment+0x3ea>
   {
      //Ensure the destination address is not a multicast address
      if(ipv6IsMulticastAddr(&pseudoHeader->ipv6Data.destAddr))
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	7d1b      	ldrb	r3, [r3, #20]
 8014b3a:	2bff      	cmp	r3, #255	; 0xff
 8014b3c:	f000 81d1 	beq.w	8014ee2 <tcpProcessSegment+0x3ee>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f7fb ff1c 	bl	801097e <netBufferGetLength>
 8014b46:	4602      	mov	r2, r0
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 8014b4e:	6839      	ldr	r1, [r7, #0]
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f7fb ffdc 	bl	8010b0e <netBufferAt>
 8014b56:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	f000 81c3 	beq.w	8014ee6 <tcpProcessSegment+0x3f2>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	2b13      	cmp	r3, #19
 8014b64:	f240 81c1 	bls.w	8014eea <tcpProcessSegment+0x3f6>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	7b1b      	ldrb	r3, [r3, #12]
 8014b6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b04      	cmp	r3, #4
 8014b74:	f240 81bb 	bls.w	8014eee <tcpProcessSegment+0x3fa>
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	7b1b      	ldrb	r3, [r3, #12]
 8014b7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	69ba      	ldr	r2, [r7, #24]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	f0c0 81b1 	bcc.w	8014eee <tcpProcessSegment+0x3fa>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	1d18      	adds	r0, r3, #4
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	6819      	ldr	r1, [r3, #0]
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	f7f3 ff42 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f040 81a5 	bne.w	8014ef2 <tcpProcessSegment+0x3fe>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8014bac:	2300      	movs	r3, #0
 8014bae:	627b      	str	r3, [r7, #36]	; 0x24
 8014bb0:	e09e      	b.n	8014cf0 <tcpProcessSegment+0x1fc>
   {
      //Point to the current socket
      socket = socketTable + i;
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8014bb8:	fb02 f303 	mul.w	r3, r2, r3
 8014bbc:	4aa5      	ldr	r2, [pc, #660]	; (8014e54 <tcpProcessSegment+0x360>)
 8014bbe:	4413      	add	r3, r2
 8014bc0:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 8014bc2:	6a3b      	ldr	r3, [r7, #32]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d17a      	bne.n	8014cc0 <tcpProcessSegment+0x1cc>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d004      	beq.n	8014bdc <tcpProcessSegment+0xe8>
 8014bd2:	6a3b      	ldr	r3, [r7, #32]
 8014bd4:	68db      	ldr	r3, [r3, #12]
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d173      	bne.n	8014cc4 <tcpProcessSegment+0x1d0>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(segment->destPort))
 8014bdc:	6a3b      	ldr	r3, [r7, #32]
 8014bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d071      	beq.n	8014cc8 <tcpProcessSegment+0x1d4>
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	885b      	ldrh	r3, [r3, #2]
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7ec f970 	bl	8000ed4 <swapInt16>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	429c      	cmp	r4, r3
 8014bf8:	d166      	bne.n	8014cc8 <tcpProcessSegment+0x1d4>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b0c      	cmp	r3, #12
 8014c00:	d11c      	bne.n	8014c3c <tcpProcessSegment+0x148>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8014c02:	6a3b      	ldr	r3, [r7, #32]
 8014c04:	691b      	ldr	r3, [r3, #16]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d009      	beq.n	8014c1e <tcpProcessSegment+0x12a>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8014c0a:	6a3b      	ldr	r3, [r7, #32]
 8014c0c:	691b      	ldr	r3, [r3, #16]
 8014c0e:	2b04      	cmp	r3, #4
 8014c10:	d15c      	bne.n	8014ccc <tcpProcessSegment+0x1d8>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8014c12:	6a3b      	ldr	r3, [r7, #32]
 8014c14:	695a      	ldr	r2, [r3, #20]
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d158      	bne.n	8014cd0 <tcpProcessSegment+0x1dc>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d036      	beq.n	8014c94 <tcpProcessSegment+0x1a0>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8014c26:	6a3b      	ldr	r3, [r7, #32]
 8014c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c2a:	2b04      	cmp	r3, #4
 8014c2c:	d152      	bne.n	8014cd4 <tcpProcessSegment+0x1e0>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8014c2e:	6a3b      	ldr	r3, [r7, #32]
 8014c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d02c      	beq.n	8014c94 <tcpProcessSegment+0x1a0>
               continue;
 8014c3a:	e056      	b.n	8014cea <tcpProcessSegment+0x1f6>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //IPv6 packet received?
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	2b28      	cmp	r3, #40	; 0x28
 8014c42:	d149      	bne.n	8014cd8 <tcpProcessSegment+0x1e4>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8014c44:	6a3b      	ldr	r3, [r7, #32]
 8014c46:	691b      	ldr	r3, [r3, #16]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00f      	beq.n	8014c6c <tcpProcessSegment+0x178>
         {
            //An IPv6 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv6Addr))
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	691b      	ldr	r3, [r3, #16]
 8014c50:	2b10      	cmp	r3, #16
 8014c52:	d143      	bne.n	8014cdc <tcpProcessSegment+0x1e8>
               continue;
            //Filter out non-matching addresses
            if(!ipv6CompAddr(&socket->localIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.destAddr))
 8014c54:	6a3b      	ldr	r3, [r7, #32]
 8014c56:	f103 0014 	add.w	r0, r3, #20
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	3314      	adds	r3, #20
 8014c5e:	2210      	movs	r2, #16
 8014c60:	4619      	mov	r1, r3
 8014c62:	f008 fdff 	bl	801d864 <memcmp>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d139      	bne.n	8014ce0 <tcpProcessSegment+0x1ec>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8014c6c:	6a3b      	ldr	r3, [r7, #32]
 8014c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00f      	beq.n	8014c94 <tcpProcessSegment+0x1a0>
         {
            //An IPv6 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv6Addr))
 8014c74:	6a3b      	ldr	r3, [r7, #32]
 8014c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c78:	2b10      	cmp	r3, #16
 8014c7a:	d133      	bne.n	8014ce4 <tcpProcessSegment+0x1f0>
               continue;
            //Filter out non-matching addresses
            if(!ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr))
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	3304      	adds	r3, #4
 8014c86:	2210      	movs	r2, #16
 8014c88:	4619      	mov	r1, r3
 8014c8a:	f008 fdeb 	bl	801d864 <memcmp>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d129      	bne.n	8014ce8 <tcpProcessSegment+0x1f4>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8014c94:	6a3b      	ldr	r3, [r7, #32]
 8014c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d104      	bne.n	8014ca8 <tcpProcessSegment+0x1b4>
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <tcpProcessSegment+0x1b4>
         passiveSocket = socket;
 8014ca4:	6a3b      	ldr	r3, [r7, #32]
 8014ca6:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 8014ca8:	6a3b      	ldr	r3, [r7, #32]
 8014caa:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7ec f90e 	bl	8000ed4 <swapInt16>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	429c      	cmp	r4, r3
 8014cbc:	d01d      	beq.n	8014cfa <tcpProcessSegment+0x206>
         continue;
 8014cbe:	e014      	b.n	8014cea <tcpProcessSegment+0x1f6>
         continue;
 8014cc0:	bf00      	nop
 8014cc2:	e012      	b.n	8014cea <tcpProcessSegment+0x1f6>
         continue;
 8014cc4:	bf00      	nop
 8014cc6:	e010      	b.n	8014cea <tcpProcessSegment+0x1f6>
         continue;
 8014cc8:	bf00      	nop
 8014cca:	e00e      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014ccc:	bf00      	nop
 8014cce:	e00c      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014cd0:	bf00      	nop
 8014cd2:	e00a      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014cd4:	bf00      	nop
 8014cd6:	e008      	b.n	8014cea <tcpProcessSegment+0x1f6>
         continue;
 8014cd8:	bf00      	nop
 8014cda:	e006      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014cdc:	bf00      	nop
 8014cde:	e004      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014ce0:	bf00      	nop
 8014ce2:	e002      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014ce4:	bf00      	nop
 8014ce6:	e000      	b.n	8014cea <tcpProcessSegment+0x1f6>
               continue;
 8014ce8:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8014cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cec:	3301      	adds	r3, #1
 8014cee:	627b      	str	r3, [r7, #36]	; 0x24
 8014cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf2:	2b09      	cmp	r3, #9
 8014cf4:	f67f af5d 	bls.w	8014bb2 <tcpProcessSegment+0xbe>
 8014cf8:	e000      	b.n	8014cfc <tcpProcessSegment+0x208>

      //A matching socket has been found
      break;
 8014cfa:	bf00      	nop
   }

   //If no matching socket has been found then try to use the first matching
   //socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfe:	2b09      	cmp	r3, #9
 8014d00:	d901      	bls.n	8014d06 <tcpProcessSegment+0x212>
      socket = passiveSocket;
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	7b1b      	ldrb	r3, [r3, #12]
 8014d0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	461a      	mov	r2, r3
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	4413      	add	r3, r2
 8014d18:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	7b1b      	ldrb	r3, [r3, #12]
 8014d1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014d22:	b2db      	uxtb	r3, r3
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	461a      	mov	r2, r3
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	1a9b      	subs	r3, r3, r2
 8014d2c:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 8014d2e:	6a3b      	ldr	r3, [r7, #32]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d106      	bne.n	8014d42 <tcpProcessSegment+0x24e>
   {
      tcpDumpHeader(segment, length, 0, 0);
 8014d34:	2300      	movs	r3, #0
 8014d36:	2200      	movs	r2, #0
 8014d38:	69b9      	ldr	r1, [r7, #24]
 8014d3a:	6978      	ldr	r0, [r7, #20]
 8014d3c:	f002 fcc4 	bl	80176c8 <tcpDumpHeader>
 8014d40:	e007      	b.n	8014d52 <tcpProcessSegment+0x25e>
   }
   else
   {
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 8014d42:	6a3b      	ldr	r3, [r7, #32]
 8014d44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014d46:	6a3b      	ldr	r3, [r7, #32]
 8014d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d4a:	69b9      	ldr	r1, [r7, #24]
 8014d4c:	6978      	ldr	r0, [r7, #20]
 8014d4e:	f002 fcbb 	bl	80176c8 <tcpDumpHeader>
   }

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ec f8bb 	bl	8000ed4 <swapInt16>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	461a      	mov	r2, r3
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	885b      	ldrh	r3, [r3, #2]
 8014d6a:	b29b      	uxth	r3, r3
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7ec f8b1 	bl	8000ed4 <swapInt16>
 8014d72:	4603      	mov	r3, r0
 8014d74:	461a      	mov	r2, r3
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7ec f8b6 	bl	8000ef0 <swapInt32>
 8014d84:	4602      	mov	r2, r0
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7ec f8ae 	bl	8000ef0 <swapInt32>
 8014d94:	4602      	mov	r2, r0
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	89db      	ldrh	r3, [r3, #14]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7ec f897 	bl	8000ed4 <swapInt16>
 8014da6:	4603      	mov	r3, r0
 8014da8:	461a      	mov	r2, r3
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	8a5b      	ldrh	r3, [r3, #18]
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	4618      	mov	r0, r3
 8014db6:	f7ec f88d 	bl	8000ed4 <swapInt16>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	825a      	strh	r2, [r3, #18]

   //Specified port unreachable?
   if(socket == NULL)
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d110      	bne.n	8014dea <tcpProcessSegment+0x2f6>
   {
      //An incoming segment not containing a RST causes a reset to be sent in
      //response
      if((segment->flags & TCP_FLAG_RST) == 0)
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	7b5b      	ldrb	r3, [r3, #13]
 8014dcc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	f003 0304 	and.w	r3, r3, #4
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f040 808d 	bne.w	8014ef6 <tcpProcessSegment+0x402>
      {
         tcpRejectSegment(interface, pseudoHeader, segment, length);
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	697a      	ldr	r2, [r7, #20]
 8014de0:	68b9      	ldr	r1, [r7, #8]
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f000 ff96 	bl	8015d14 <tcpRejectSegment>
      }

      //Return immediately
      return;
 8014de8:	e085      	b.n	8014ef6 <tcpProcessSegment+0x402>
   }

   //Check current state
   switch(socket->state)
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014df0:	2b0a      	cmp	r3, #10
 8014df2:	d86d      	bhi.n	8014ed0 <tcpProcessSegment+0x3dc>
 8014df4:	a201      	add	r2, pc, #4	; (adr r2, 8014dfc <tcpProcessSegment+0x308>)
 8014df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dfa:	bf00      	nop
 8014dfc:	08014e29 	.word	0x08014e29
 8014e00:	08014e37 	.word	0x08014e37
 8014e04:	08014e49 	.word	0x08014e49
 8014e08:	08014e59 	.word	0x08014e59
 8014e0c:	08014e6b 	.word	0x08014e6b
 8014e10:	08014e7d 	.word	0x08014e7d
 8014e14:	08014e89 	.word	0x08014e89
 8014e18:	08014e95 	.word	0x08014e95
 8014e1c:	08014ea7 	.word	0x08014ea7
 8014e20:	08014eb9 	.word	0x08014eb9
 8014e24:	08014ec5 	.word	0x08014ec5
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before the
      //process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	697a      	ldr	r2, [r7, #20]
 8014e2c:	68b9      	ldr	r1, [r7, #8]
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f000 f866 	bl	8014f00 <tcpStateClosed>
      break;
 8014e34:	e060      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	68ba      	ldr	r2, [r7, #8]
 8014e3e:	68f9      	ldr	r1, [r7, #12]
 8014e40:	6a38      	ldr	r0, [r7, #32]
 8014e42:	f000 f877 	bl	8014f34 <tcpStateListen>
      break;
 8014e46:	e057      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8014e48:	69ba      	ldr	r2, [r7, #24]
 8014e4a:	6979      	ldr	r1, [r7, #20]
 8014e4c:	6a38      	ldr	r0, [r7, #32]
 8014e4e:	f000 f95e 	bl	801510e <tcpStateSynSent>
      break;
 8014e52:	e051      	b.n	8014ef8 <tcpProcessSegment+0x404>
 8014e54:	20005700 	.word	0x20005700

   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own
      //SYN. It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	6979      	ldr	r1, [r7, #20]
 8014e62:	6a38      	ldr	r0, [r7, #32]
 8014e64:	f000 fa44 	bl	80152f0 <tcpStateSynReceived>
      break;
 8014e68:	e046      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	6979      	ldr	r1, [r7, #20]
 8014e74:	6a38      	ldr	r0, [r7, #32]
 8014e76:	f000 faa1 	bl	80153bc <tcpStateEstablished>
      break;
 8014e7a:	e03d      	b.n	8014ef8 <tcpProcessSegment+0x404>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 8014e7c:	69ba      	ldr	r2, [r7, #24]
 8014e7e:	6979      	ldr	r1, [r7, #20]
 8014e80:	6a38      	ldr	r0, [r7, #32]
 8014e82:	f000 fb14 	bl	80154ae <tcpStateCloseWait>
      break;
 8014e86:	e037      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 8014e88:	69ba      	ldr	r2, [r7, #24]
 8014e8a:	6979      	ldr	r1, [r7, #20]
 8014e8c:	6a38      	ldr	r0, [r7, #32]
 8014e8e:	f000 fb51 	bl	8015534 <tcpStateLastAck>
      break;
 8014e92:	e031      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	6979      	ldr	r1, [r7, #20]
 8014e9e:	6a38      	ldr	r0, [r7, #32]
 8014ea0:	f000 fb88 	bl	80155b4 <tcpStateFinWait1>
      break;
 8014ea4:	e028      	b.n	8014ef8 <tcpProcessSegment+0x404>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate
      //the connection and is now waiting for a matching FIN from the other
      //device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	6979      	ldr	r1, [r7, #20]
 8014eb0:	6a38      	ldr	r0, [r7, #32]
 8014eb2:	f000 fc12 	bl	80156da <tcpStateFinWait2>
      break;
 8014eb6:	e01f      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 8014eb8:	69ba      	ldr	r2, [r7, #24]
 8014eba:	6979      	ldr	r1, [r7, #20]
 8014ebc:	6a38      	ldr	r0, [r7, #32]
 8014ebe:	f000 fc82 	bl	80157c6 <tcpStateClosing>
      break;
 8014ec2:	e019      	b.n	8014ef8 <tcpProcessSegment+0x404>
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 8014ec4:	69ba      	ldr	r2, [r7, #24]
 8014ec6:	6979      	ldr	r1, [r7, #20]
 8014ec8:	6a38      	ldr	r0, [r7, #32]
 8014eca:	f000 fcc6 	bl	801585a <tcpStateTimeWait>
      break;
 8014ece:	e013      	b.n	8014ef8 <tcpProcessSegment+0x404>

   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	6a38      	ldr	r0, [r7, #32]
 8014ed4:	f002 f938 	bl	8017148 <tcpChangeState>
      //Silently discard incoming packet
      break;
 8014ed8:	e00e      	b.n	8014ef8 <tcpProcessSegment+0x404>
         return;
 8014eda:	bf00      	nop
 8014edc:	e00c      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014ede:	bf00      	nop
 8014ee0:	e00a      	b.n	8014ef8 <tcpProcessSegment+0x404>
         return;
 8014ee2:	bf00      	nop
 8014ee4:	e008      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014ee6:	bf00      	nop
 8014ee8:	e006      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014eea:	bf00      	nop
 8014eec:	e004      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014eee:	bf00      	nop
 8014ef0:	e002      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014ef2:	bf00      	nop
 8014ef4:	e000      	b.n	8014ef8 <tcpProcessSegment+0x404>
      return;
 8014ef6:	bf00      	nop
   }
}
 8014ef8:	372c      	adds	r7, #44	; 0x2c
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd90      	pop	{r4, r7, pc}
 8014efe:	bf00      	nop

08014f00 <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	607a      	str	r2, [r7, #4]
 8014f0c:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes a reset to be sent in
   //response
   if((segment->flags & TCP_FLAG_RST) == 0)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	7b5b      	ldrb	r3, [r3, #13]
 8014f12:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	f003 0304 	and.w	r3, r3, #4
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d105      	bne.n	8014f2c <tcpStateClosed+0x2c>
   {
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	68b9      	ldr	r1, [r7, #8]
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f000 fef4 	bl	8015d14 <tcpRejectSegment>
   }
}
 8014f2c:	bf00      	nop
 8014f2e:	3710      	adds	r7, #16
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8014f34:	b590      	push	{r4, r7, lr}
 8014f36:	b089      	sub	sp, #36	; 0x24
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	60b9      	str	r1, [r7, #8]
 8014f3e:	607a      	str	r2, [r7, #4]
 8014f40:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if((segment->flags & TCP_FLAG_RST) != 0)
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	7b5b      	ldrb	r3, [r3, #13]
 8014f46:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	f003 0304 	and.w	r3, r3, #4
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f040 80d2 	bne.w	80150fa <tcpStateListen+0x1c6>
      return;

   //Any acknowledgment is bad if it arrives on a connection still in the
   //LISTEN state
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	7b5b      	ldrb	r3, [r3, #13]
 8014f5a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	f003 0310 	and.w	r3, r3, #16
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d006      	beq.n	8014f76 <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8014f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f6a:	683a      	ldr	r2, [r7, #0]
 8014f6c:	6879      	ldr	r1, [r7, #4]
 8014f6e:	68b8      	ldr	r0, [r7, #8]
 8014f70:	f000 fed0 	bl	8015d14 <tcpRejectSegment>
      //Return immediately
      return;
 8014f74:	e0c8      	b.n	8015108 <tcpStateListen+0x1d4>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	7b5b      	ldrb	r3, [r3, #13]
 8014f7a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	f003 0302 	and.w	r3, r3, #2
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	f000 80bf 	beq.w	8015108 <tcpStateListen+0x1d4>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 8014f8a:	683a      	ldr	r2, [r7, #0]
 8014f8c:	6879      	ldr	r1, [r7, #4]
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f001 fab5 	bl	80164fe <tcpIsDuplicateSyn>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f040 80b1 	bne.w	80150fe <tcpStateListen+0x1ca>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d108      	bne.n	8014fb8 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 8014fa6:	203c      	movs	r0, #60	; 0x3c
 8014fa8:	f7fb fc7a 	bl	80108a0 <memPoolAlloc>
 8014fac:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	69ba      	ldr	r2, [r7, #24]
 8014fb2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8014fb6:	e02b      	b.n	8015010 <tcpStateListen+0xdc>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014fbe:	61bb      	str	r3, [r7, #24]
         firstQueueItem = socket->synQueue;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014fc6:	617b      	str	r3, [r7, #20]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 8014fc8:	2301      	movs	r3, #1
 8014fca:	61fb      	str	r3, [r7, #28]
 8014fcc:	e005      	b.n	8014fda <tcpStateListen+0xa6>
         {
            queueItem = queueItem->next;
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	61fb      	str	r3, [r7, #28]
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1f5      	bne.n	8014fce <tcpStateListen+0x9a>
         }

         //Check whether the SYN queue is full
         if(i >= socket->synQueueSize)
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8014fe8:	69fa      	ldr	r2, [r7, #28]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d307      	bcc.n	8014ffe <tcpStateListen+0xca>
         {
            //Remove the first item if the SYN queue runs out of space
            socket->synQueue = firstQueueItem->next;
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
            //Deallocate memory buffer
            memPoolFree(firstQueueItem);
 8014ff8:	6978      	ldr	r0, [r7, #20]
 8014ffa:	f7fb fc73 	bl	80108e4 <memPoolFree>
         }

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 8014ffe:	203c      	movs	r0, #60	; 0x3c
 8015000:	f7fb fc4e 	bl	80108a0 <memPoolAlloc>
 8015004:	4602      	mov	r2, r0
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d075      	beq.n	8015102 <tcpStateListen+0x1ce>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b0c      	cmp	r3, #12
 801501c:	d10e      	bne.n	801503c <tcpStateListen+0x108>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	2204      	movs	r2, #4
 8015022:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	685a      	ldr	r2, [r3, #4]
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	60da      	str	r2, [r3, #12]

         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	2204      	movs	r2, #4
 8015030:	621a      	str	r2, [r3, #32]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	689a      	ldr	r2, [r3, #8]
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	625a      	str	r2, [r3, #36]	; 0x24
 801503a:	e019      	b.n	8015070 <tcpStateListen+0x13c>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //IPv6 is currently used?
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2b28      	cmp	r3, #40	; 0x28
 8015042:	d160      	bne.n	8015106 <tcpStateListen+0x1d2>
      {
         //Save the source IPv6 address
         queueItem->srcAddr.length = sizeof(Ipv6Addr);
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	2210      	movs	r2, #16
 8015048:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 801504a:	69ba      	ldr	r2, [r7, #24]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f102 040c 	add.w	r4, r2, #12
 8015052:	3304      	adds	r3, #4
 8015054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

         //Save the destination IPv6 address
         queueItem->destAddr.length = sizeof(Ipv6Addr);
 801505a:	69bb      	ldr	r3, [r7, #24]
 801505c:	2210      	movs	r2, #16
 801505e:	621a      	str	r2, [r3, #32]
         queueItem->destAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
 8015060:	69ba      	ldr	r2, [r7, #24]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8015068:	3314      	adds	r3, #20
 801506a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801506c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 8015070:	69bb      	ldr	r3, [r7, #24]
 8015072:	2200      	movs	r2, #0
 8015074:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8015076:	69bb      	ldr	r3, [r7, #24]
 8015078:	68ba      	ldr	r2, [r7, #8]
 801507a:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	b29a      	uxth	r2, r3
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	839a      	strh	r2, [r3, #28]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	685a      	ldr	r2, [r3, #4]
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	635a      	str	r2, [r3, #52]	; 0x34
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015094:	871a      	strh	r2, [r3, #56]	; 0x38

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8015096:	2102      	movs	r1, #2
 8015098:	6838      	ldr	r0, [r7, #0]
 801509a:	f000 ffbe 	bl	801601a <tcpGetOption>
 801509e:	6138      	str	r0, [r7, #16]

      //Specified option found?
      if(option != NULL && option->length == 4)
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d025      	beq.n	80150f2 <tcpStateListen+0x1be>
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	785b      	ldrb	r3, [r3, #1]
 80150aa:	2b04      	cmp	r3, #4
 80150ac:	d121      	bne.n	80150f2 <tcpStateListen+0x1be>
      {
         //Retrieve MSS value
         osMemcpy(&queueItem->mss, option->value, 2);
 80150ae:	69bb      	ldr	r3, [r7, #24]
 80150b0:	3338      	adds	r3, #56	; 0x38
 80150b2:	693a      	ldr	r2, [r7, #16]
 80150b4:	3202      	adds	r2, #2
 80150b6:	8812      	ldrh	r2, [r2, #0]
 80150b8:	b292      	uxth	r2, r2
 80150ba:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7eb ff07 	bl	8000ed4 <swapInt16>
 80150c6:	4603      	mov	r3, r0
 80150c8:	461a      	mov	r2, r3
 80150ca:	69bb      	ldr	r3, [r7, #24]
 80150cc:	871a      	strh	r2, [r3, #56]	; 0x38

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80150d2:	f240 5296 	movw	r2, #1430	; 0x596
 80150d6:	4293      	cmp	r3, r2
 80150d8:	bf28      	it	cs
 80150da:	4613      	movcs	r3, r2
 80150dc:	b29a      	uxth	r2, r3
 80150de:	69bb      	ldr	r3, [r7, #24]
 80150e0:	871a      	strh	r2, [r3, #56]	; 0x38
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 80150e2:	69bb      	ldr	r3, [r7, #24]
 80150e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80150e6:	2b40      	cmp	r3, #64	; 0x40
 80150e8:	bf38      	it	cc
 80150ea:	2340      	movcc	r3, #64	; 0x40
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	871a      	strh	r2, [r3, #56]	; 0x38
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f002 f84e 	bl	8017194 <tcpUpdateEvents>
 80150f8:	e006      	b.n	8015108 <tcpStateListen+0x1d4>
      return;
 80150fa:	bf00      	nop
 80150fc:	e004      	b.n	8015108 <tcpStateListen+0x1d4>
         return;
 80150fe:	bf00      	nop
 8015100:	e002      	b.n	8015108 <tcpStateListen+0x1d4>
         return;
 8015102:	bf00      	nop
 8015104:	e000      	b.n	8015108 <tcpStateListen+0x1d4>
         return;
 8015106:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 8015108:	3724      	adds	r7, #36	; 0x24
 801510a:	46bd      	mov	sp, r7
 801510c:	bd90      	pop	{r4, r7, pc}

0801510e <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 801510e:	b580      	push	{r7, lr}
 8015110:	b088      	sub	sp, #32
 8015112:	af02      	add	r7, sp, #8
 8015114:	60f8      	str	r0, [r7, #12]
 8015116:	60b9      	str	r1, [r7, #8]
 8015118:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if((segment->flags & TCP_FLAG_ACK) != 0)
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	7b5b      	ldrb	r3, [r3, #13]
 801511e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015122:	b2db      	uxtb	r3, r3
 8015124:	f003 0310 	and.w	r3, r3, #16
 8015128:	2b00      	cmp	r3, #0
 801512a:	d016      	beq.n	801515a <tcpStateSynSent+0x4c>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	689a      	ldr	r2, [r3, #8]
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015134:	429a      	cmp	r2, r3
 8015136:	d010      	beq.n	801515a <tcpStateSynSent+0x4c>
      {
         //Send a reset segment unless the RST bit is set
         if((segment->flags & TCP_FLAG_RST) == 0)
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	7b5b      	ldrb	r3, [r3, #13]
 801513c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015140:	b2db      	uxtb	r3, r3
 8015142:	f003 0304 	and.w	r3, r3, #4
 8015146:	2b00      	cmp	r3, #0
 8015148:	f040 80cc 	bne.w	80152e4 <tcpStateSynSent+0x1d6>
         {
            tcpSendResetSegment(socket, segment->ackNum);
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	4619      	mov	r1, r3
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	f000 fdac 	bl	8015cb0 <tcpSendResetSegment>
         }

         //Drop the segment and return
         return;
 8015158:	e0c4      	b.n	80152e4 <tcpStateSynSent+0x1d6>
      }
   }

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	7b5b      	ldrb	r3, [r3, #13]
 801515e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015162:	b2db      	uxtb	r3, r3
 8015164:	f003 0304 	and.w	r3, r3, #4
 8015168:	2b00      	cmp	r3, #0
 801516a:	d00e      	beq.n	801518a <tcpStateSynSent+0x7c>
   {
      //Make sure the ACK is acceptable
      if((segment->flags & TCP_FLAG_ACK) != 0)
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	7b5b      	ldrb	r3, [r3, #13]
 8015170:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015174:	b2db      	uxtb	r3, r3
 8015176:	f003 0310 	and.w	r3, r3, #16
 801517a:	2b00      	cmp	r3, #0
 801517c:	f000 80b4 	beq.w	80152e8 <tcpStateSynSent+0x1da>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8015180:	2100      	movs	r1, #0
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f001 ffe0 	bl	8017148 <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8015188:	e0ae      	b.n	80152e8 <tcpStateSynSent+0x1da>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	7b5b      	ldrb	r3, [r3, #13]
 801518e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015192:	b2db      	uxtb	r3, r3
 8015194:	f003 0302 	and.w	r3, r3, #2
 8015198:	2b00      	cmp	r3, #0
 801519a:	f000 80a6 	beq.w	80152ea <tcpStateSynSent+0x1dc>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	685a      	ldr	r2, [r3, #4]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	675a      	str	r2, [r3, #116]	; 0x74
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	1c5a      	adds	r2, r3, #1
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if((segment->flags & TCP_FLAG_ACK) != 0)
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	7b5b      	ldrb	r3, [r3, #13]
 80151b6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	f003 0310 	and.w	r3, r3, #16
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d003      	beq.n	80151cc <tcpStateSynSent+0xbe>
      {
         socket->sndUna = segment->ackNum;
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	689a      	ldr	r2, [r3, #8]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	679a      	str	r2, [r3, #120]	; 0x78
      }

      //Compute retransmission timeout
      tcpComputeRto(socket);
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	f001 fd99 	bl	8016d04 <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 80151d2:	68f8      	ldr	r0, [r7, #12]
 80151d4:	f001 fb73 	bl	80168be <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 80151d8:	2102      	movs	r1, #2
 80151da:	68b8      	ldr	r0, [r7, #8]
 80151dc:	f000 ff1d 	bl	801601a <tcpGetOption>
 80151e0:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d02b      	beq.n	8015240 <tcpStateSynSent+0x132>
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	785b      	ldrb	r3, [r3, #1]
 80151ec:	2b04      	cmp	r3, #4
 80151ee:	d127      	bne.n	8015240 <tcpStateSynSent+0x132>
      {
         //Retrieve MSS value
         osMemcpy(&socket->smss, option->value, 2);
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	336c      	adds	r3, #108	; 0x6c
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	3202      	adds	r2, #2
 80151f8:	8812      	ldrh	r2, [r2, #0]
 80151fa:	b292      	uxth	r2, r2
 80151fc:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015204:	4618      	mov	r0, r3
 8015206:	f7eb fe65 	bl	8000ed4 <swapInt16>
 801520a:	4603      	mov	r3, r0
 801520c:	461a      	mov	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801521a:	f240 5296 	movw	r2, #1430	; 0x596
 801521e:	4293      	cmp	r3, r2
 8015220:	bf28      	it	cs
 8015222:	4613      	movcs	r3, r2
 8015224:	b29a      	uxth	r2, r3
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015232:	2b40      	cmp	r3, #64	; 0x40
 8015234:	bf38      	it	cc
 8015236:	2340      	movcc	r3, #64	; 0x40
 8015238:	b29a      	uxth	r2, r3
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801524c:	4619      	mov	r1, r3
 801524e:	460b      	mov	r3, r1
 8015250:	005b      	lsls	r3, r3, #1
 8015252:	440b      	add	r3, r1
 8015254:	4293      	cmp	r3, r2
 8015256:	bf28      	it	cs
 8015258:	4613      	movcs	r3, r2
 801525a:	b29a      	uxth	r2, r3
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801526a:	1ad3      	subs	r3, r2, r3
 801526c:	2b00      	cmp	r3, #0
 801526e:	dd27      	ble.n	80152c0 <tcpStateSynSent+0x1b2>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	89db      	ldrh	r3, [r3, #14]
 8015274:	b29a      	uxth	r2, r3
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
         socket->sndWl1 = segment->seqNum;
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	685a      	ldr	r2, [r3, #4]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         socket->sndWl2 = segment->ackNum;
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	689a      	ldr	r2, [r3, #8]
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	89db      	ldrh	r3, [r3, #14]
 8015294:	b29a      	uxth	r2, r3
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152a6:	2100      	movs	r1, #0
 80152a8:	9101      	str	r1, [sp, #4]
 80152aa:	2100      	movs	r1, #0
 80152ac:	9100      	str	r1, [sp, #0]
 80152ae:	2110      	movs	r1, #16
 80152b0:	68f8      	ldr	r0, [r7, #12]
 80152b2:	f000 fb33 	bl	801591c <tcpSendSegment>
            FALSE);

         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 80152b6:	2104      	movs	r1, #4
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f001 ff45 	bl	8017148 <tcpChangeState>
 80152be:	e014      	b.n	80152ea <tcpStateSynSent+0x1dc>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss,
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152ca:	2101      	movs	r1, #1
 80152cc:	9101      	str	r1, [sp, #4]
 80152ce:	2100      	movs	r1, #0
 80152d0:	9100      	str	r1, [sp, #0]
 80152d2:	2112      	movs	r1, #18
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f000 fb21 	bl	801591c <tcpSendSegment>
            socket->rcvNxt, 0, TRUE);

         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 80152da:	2103      	movs	r1, #3
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f001 ff33 	bl	8017148 <tcpChangeState>
 80152e2:	e002      	b.n	80152ea <tcpStateSynSent+0x1dc>
         return;
 80152e4:	bf00      	nop
 80152e6:	e000      	b.n	80152ea <tcpStateSynSent+0x1dc>
      return;
 80152e8:	bf00      	nop
      }
   }
}
 80152ea:	3718      	adds	r7, #24
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b086      	sub	sp, #24
 80152f4:	af02      	add	r7, sp, #8
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80152fe:	69ba      	ldr	r2, [r7, #24]
 8015300:	68b9      	ldr	r1, [r7, #8]
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f000 fef1 	bl	80160ea <tcpCheckSeqNum>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d14e      	bne.n	80153ac <tcpStateSynReceived+0xbc>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	7b5b      	ldrb	r3, [r3, #13]
 8015312:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f003 0304 	and.w	r3, r3, #4
 801531c:	2b00      	cmp	r3, #0
 801531e:	d004      	beq.n	801532a <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8015320:	2100      	movs	r1, #0
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f001 ff10 	bl	8017148 <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 8015328:	e045      	b.n	80153b6 <tcpStateSynReceived+0xc6>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 801532a:	69ba      	ldr	r2, [r7, #24]
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	68f8      	ldr	r0, [r7, #12]
 8015330:	f000 ff79 	bl	8016226 <tcpCheckSyn>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	d13a      	bne.n	80153b0 <tcpStateSynReceived+0xc0>
      return;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	7b5b      	ldrb	r3, [r3, #13]
 801533e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015342:	b2db      	uxtb	r3, r3
 8015344:	f003 0310 	and.w	r3, r3, #16
 8015348:	2b00      	cmp	r3, #0
 801534a:	d033      	beq.n	80153b4 <tcpStateSynReceived+0xc4>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	689a      	ldr	r2, [r3, #8]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015354:	429a      	cmp	r2, r3
 8015356:	d006      	beq.n	8015366 <tcpStateSynReceived+0x76>
   {
      //If the segment acknowledgment is not acceptable, form a reset segment
      //and send it
      tcpSendResetSegment(socket, segment->ackNum);
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	689b      	ldr	r3, [r3, #8]
 801535c:	4619      	mov	r1, r3
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	f000 fca6 	bl	8015cb0 <tcpSendResetSegment>

      //Drop the segment and return
      return;
 8015364:	e027      	b.n	80153b6 <tcpStateSynReceived+0xc6>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	89db      	ldrh	r3, [r3, #14]
 801536a:	b29a      	uxth	r2, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
   socket->sndWl1 = segment->seqNum;
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	685a      	ldr	r2, [r3, #4]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   socket->sndWl2 = segment->ackNum;
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	689a      	ldr	r2, [r3, #8]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	89db      	ldrh	r3, [r3, #14]
 801538a:	b29a      	uxth	r2, r3
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8015392:	2104      	movs	r1, #4
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f001 fed7 	bl	8017148 <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	687a      	ldr	r2, [r7, #4]
 80153a2:	68b9      	ldr	r1, [r7, #8]
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f000 f809 	bl	80153bc <tcpStateEstablished>
 80153aa:	e004      	b.n	80153b6 <tcpStateSynReceived+0xc6>
      return;
 80153ac:	bf00      	nop
 80153ae:	e002      	b.n	80153b6 <tcpStateSynReceived+0xc6>
      return;
 80153b0:	bf00      	nop
 80153b2:	e000      	b.n	80153b6 <tcpStateSynReceived+0xc6>
      return;
 80153b4:	bf00      	nop
}
 80153b6:	3710      	adds	r7, #16
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b088      	sub	sp, #32
 80153c0:	af02      	add	r7, sp, #8
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80153ce:	6a3a      	ldr	r2, [r7, #32]
 80153d0:	68b9      	ldr	r1, [r7, #8]
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f000 fe89 	bl	80160ea <tcpCheckSeqNum>
 80153d8:	4603      	mov	r3, r0
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d15f      	bne.n	801549e <tcpStateEstablished+0xe2>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	7b5b      	ldrb	r3, [r3, #13]
 80153e2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	f003 0304 	and.w	r3, r3, #4
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d004      	beq.n	80153fa <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80153f0:	2100      	movs	r1, #0
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f001 fea8 	bl	8017148 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80153f8:	e056      	b.n	80154a8 <tcpStateEstablished+0xec>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80153fa:	6a3a      	ldr	r2, [r7, #32]
 80153fc:	68b9      	ldr	r1, [r7, #8]
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f000 ff11 	bl	8016226 <tcpCheckSyn>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d14b      	bne.n	80154a2 <tcpStateEstablished+0xe6>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 801540a:	6a3a      	ldr	r2, [r7, #32]
 801540c:	68b9      	ldr	r1, [r7, #8]
 801540e:	68f8      	ldr	r0, [r7, #12]
 8015410:	f000 ff3d 	bl	801628e <tcpCheckAck>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d145      	bne.n	80154a6 <tcpStateEstablished+0xea>
      return;

   //Process the segment text
   if(length > 0)
 801541a:	6a3b      	ldr	r3, [r7, #32]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d007      	beq.n	8015430 <tcpStateEstablished+0x74>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8015420:	6a3b      	ldr	r3, [r7, #32]
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	68b9      	ldr	r1, [r7, #8]
 801542a:	68f8      	ldr	r0, [r7, #12]
 801542c:	f001 f99c 	bl	8016768 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	7b5b      	ldrb	r3, [r3, #13]
 8015434:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f003 0301 	and.w	r3, r3, #1
 801543e:	2b00      	cmp	r3, #0
 8015440:	d020      	beq.n	8015484 <tcpStateEstablished+0xc8>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	6859      	ldr	r1, [r3, #4]
 801544c:	6a3b      	ldr	r3, [r7, #32]
 801544e:	440b      	add	r3, r1
 8015450:	429a      	cmp	r2, r3
 8015452:	d117      	bne.n	8015484 <tcpStateEstablished+0xc8>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801545a:	1c5a      	adds	r2, r3, #1
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801546c:	2100      	movs	r1, #0
 801546e:	9101      	str	r1, [sp, #4]
 8015470:	2100      	movs	r1, #0
 8015472:	9100      	str	r1, [sp, #0]
 8015474:	2110      	movs	r1, #16
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f000 fa50 	bl	801591c <tcpSendSegment>
            FALSE);

         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 801547c:	2105      	movs	r1, #5
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f001 fe62 	bl	8017148 <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801548a:	2b00      	cmp	r3, #0
 801548c:	d002      	beq.n	8015494 <tcpStateEstablished+0xd8>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 801548e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015492:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce short segments (refer
   //to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8015494:	6979      	ldr	r1, [r7, #20]
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	f001 fd46 	bl	8016f28 <tcpNagleAlgo>
 801549c:	e004      	b.n	80154a8 <tcpStateEstablished+0xec>
      return;
 801549e:	bf00      	nop
 80154a0:	e002      	b.n	80154a8 <tcpStateEstablished+0xec>
      return;
 80154a2:	bf00      	nop
 80154a4:	e000      	b.n	80154a8 <tcpStateEstablished+0xec>
      return;
 80154a6:	bf00      	nop
}
 80154a8:	3718      	adds	r7, #24
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}

080154ae <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 80154ae:	b580      	push	{r7, lr}
 80154b0:	b086      	sub	sp, #24
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	60f8      	str	r0, [r7, #12]
 80154b6:	60b9      	str	r1, [r7, #8]
 80154b8:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 80154ba:	2300      	movs	r3, #0
 80154bc:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	68b9      	ldr	r1, [r7, #8]
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	f000 fe11 	bl	80160ea <tcpCheckSeqNum>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d12a      	bne.n	8015524 <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	7b5b      	ldrb	r3, [r3, #13]
 80154d2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	f003 0304 	and.w	r3, r3, #4
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d004      	beq.n	80154ea <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80154e0:	2100      	movs	r1, #0
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f001 fe30 	bl	8017148 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80154e8:	e021      	b.n	801552e <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	68b9      	ldr	r1, [r7, #8]
 80154ee:	68f8      	ldr	r0, [r7, #12]
 80154f0:	f000 fe99 	bl	8016226 <tcpCheckSyn>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d116      	bne.n	8015528 <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	68b9      	ldr	r1, [r7, #8]
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f000 fec5 	bl	801628e <tcpCheckAck>
 8015504:	4603      	mov	r3, r0
 8015506:	2b00      	cmp	r3, #0
 8015508:	d110      	bne.n	801552c <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015510:	2b00      	cmp	r3, #0
 8015512:	d002      	beq.n	801551a <tcpStateCloseWait+0x6c>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 8015514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015518:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 801551a:	6979      	ldr	r1, [r7, #20]
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f001 fd03 	bl	8016f28 <tcpNagleAlgo>
 8015522:	e004      	b.n	801552e <tcpStateCloseWait+0x80>
      return;
 8015524:	bf00      	nop
 8015526:	e002      	b.n	801552e <tcpStateCloseWait+0x80>
      return;
 8015528:	bf00      	nop
 801552a:	e000      	b.n	801552e <tcpStateCloseWait+0x80>
      return;
 801552c:	bf00      	nop
}
 801552e:	3718      	adds	r7, #24
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8015540:	687a      	ldr	r2, [r7, #4]
 8015542:	68b9      	ldr	r1, [r7, #8]
 8015544:	68f8      	ldr	r0, [r7, #12]
 8015546:	f000 fdd0 	bl	80160ea <tcpCheckSeqNum>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d129      	bne.n	80155a4 <tcpStateLastAck+0x70>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	7b5b      	ldrb	r3, [r3, #13]
 8015554:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015558:	b2db      	uxtb	r3, r3
 801555a:	f003 0304 	and.w	r3, r3, #4
 801555e:	2b00      	cmp	r3, #0
 8015560:	d004      	beq.n	801556c <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8015562:	2100      	movs	r1, #0
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f001 fdef 	bl	8017148 <tcpChangeState>
      //Return immediately
      return;
 801556a:	e020      	b.n	80155ae <tcpStateLastAck+0x7a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	68b9      	ldr	r1, [r7, #8]
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	f000 fe58 	bl	8016226 <tcpCheckSyn>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	d115      	bne.n	80155a8 <tcpStateLastAck+0x74>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	7b5b      	ldrb	r3, [r3, #13]
 8015580:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015584:	b2db      	uxtb	r3, r3
 8015586:	f003 0310 	and.w	r3, r3, #16
 801558a:	2b00      	cmp	r3, #0
 801558c:	d00e      	beq.n	80155ac <tcpStateLastAck+0x78>
      return;

   //The only thing that can arrive in this state is an acknowledgment of
   //our FIN
   if(segment->ackNum == socket->sndNxt)
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	689a      	ldr	r2, [r3, #8]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015596:	429a      	cmp	r2, r3
 8015598:	d109      	bne.n	80155ae <tcpStateLastAck+0x7a>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 801559a:	2100      	movs	r1, #0
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f001 fdd3 	bl	8017148 <tcpChangeState>
 80155a2:	e004      	b.n	80155ae <tcpStateLastAck+0x7a>
      return;
 80155a4:	bf00      	nop
 80155a6:	e002      	b.n	80155ae <tcpStateLastAck+0x7a>
      return;
 80155a8:	bf00      	nop
 80155aa:	e000      	b.n	80155ae <tcpStateLastAck+0x7a>
      return;
 80155ac:	bf00      	nop
   }
}
 80155ae:	3710      	adds	r7, #16
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b086      	sub	sp, #24
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80155c2:	69ba      	ldr	r2, [r7, #24]
 80155c4:	68b9      	ldr	r1, [r7, #8]
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	f000 fd8f 	bl	80160ea <tcpCheckSeqNum>
 80155cc:	4603      	mov	r3, r0
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d17b      	bne.n	80156ca <tcpStateFinWait1+0x116>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	7b5b      	ldrb	r3, [r3, #13]
 80155d6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	f003 0304 	and.w	r3, r3, #4
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d004      	beq.n	80155ee <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80155e4:	2100      	movs	r1, #0
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f001 fdae 	bl	8017148 <tcpChangeState>
      //Return immediately
      return;
 80155ec:	e072      	b.n	80156d4 <tcpStateFinWait1+0x120>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80155ee:	69ba      	ldr	r2, [r7, #24]
 80155f0:	68b9      	ldr	r1, [r7, #8]
 80155f2:	68f8      	ldr	r0, [r7, #12]
 80155f4:	f000 fe17 	bl	8016226 <tcpCheckSyn>
 80155f8:	4603      	mov	r3, r0
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d167      	bne.n	80156ce <tcpStateFinWait1+0x11a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80155fe:	69ba      	ldr	r2, [r7, #24]
 8015600:	68b9      	ldr	r1, [r7, #8]
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f000 fe43 	bl	801628e <tcpCheckAck>
 8015608:	4603      	mov	r3, r0
 801560a:	2b00      	cmp	r3, #0
 801560c:	d161      	bne.n	80156d2 <tcpStateFinWait1+0x11e>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	689a      	ldr	r2, [r3, #8]
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015616:	429a      	cmp	r2, r3
 8015618:	d10b      	bne.n	8015632 <tcpStateFinWait1+0x7e>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection from staying in
      //the FIN-WAIT-2 state forever
      netStartTimer(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015620:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8015624:	4618      	mov	r0, r3
 8015626:	f7fb ffa9 	bl	801157c <netStartTimer>

      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 801562a:	2108      	movs	r1, #8
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f001 fd8b 	bl	8017148 <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d007      	beq.n	8015648 <tcpStateFinWait1+0x94>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	68b9      	ldr	r1, [r7, #8]
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f001 f890 	bl	8016768 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	7b5b      	ldrb	r3, [r3, #13]
 801564c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015650:	b2db      	uxtb	r3, r3
 8015652:	f003 0301 	and.w	r3, r3, #1
 8015656:	2b00      	cmp	r3, #0
 8015658:	d03c      	beq.n	80156d4 <tcpStateFinWait1+0x120>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	6859      	ldr	r1, [r3, #4]
 8015664:	69bb      	ldr	r3, [r7, #24]
 8015666:	440b      	add	r3, r1
 8015668:	429a      	cmp	r2, r3
 801566a:	d133      	bne.n	80156d4 <tcpStateFinWait1+0x120>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015672:	1c5a      	adds	r2, r3, #1
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015684:	2100      	movs	r1, #0
 8015686:	9101      	str	r1, [sp, #4]
 8015688:	2100      	movs	r1, #0
 801568a:	9100      	str	r1, [sp, #0]
 801568c:	2110      	movs	r1, #16
 801568e:	68f8      	ldr	r0, [r7, #12]
 8015690:	f000 f944 	bl	801591c <tcpSendSegment>
            FALSE);

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	689a      	ldr	r2, [r3, #8]
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801569c:	429a      	cmp	r2, r3
 801569e:	d10f      	bne.n	80156c0 <tcpStateFinWait1+0x10c>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f001 f8f1 	bl	8016888 <tcpDeleteControlBlock>
            //Start the 2MSL timer
            netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80156ac:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7fb ff63 	bl	801157c <netStartTimer>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80156b6:	210a      	movs	r1, #10
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f001 fd45 	bl	8017148 <tcpChangeState>
 80156be:	e009      	b.n	80156d4 <tcpStateFinWait1+0x120>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 80156c0:	2109      	movs	r1, #9
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f001 fd40 	bl	8017148 <tcpChangeState>
 80156c8:	e004      	b.n	80156d4 <tcpStateFinWait1+0x120>
      return;
 80156ca:	bf00      	nop
 80156cc:	e002      	b.n	80156d4 <tcpStateFinWait1+0x120>
      return;
 80156ce:	bf00      	nop
 80156d0:	e000      	b.n	80156d4 <tcpStateFinWait1+0x120>
      return;
 80156d2:	bf00      	nop
         }
      }
   }
}
 80156d4:	3710      	adds	r7, #16
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80156da:	b580      	push	{r7, lr}
 80156dc:	b086      	sub	sp, #24
 80156de:	af02      	add	r7, sp, #8
 80156e0:	60f8      	str	r0, [r7, #12]
 80156e2:	60b9      	str	r1, [r7, #8]
 80156e4:	607a      	str	r2, [r7, #4]
 80156e6:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80156e8:	69ba      	ldr	r2, [r7, #24]
 80156ea:	68b9      	ldr	r1, [r7, #8]
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f000 fcfc 	bl	80160ea <tcpCheckSeqNum>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d15e      	bne.n	80157b6 <tcpStateFinWait2+0xdc>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	7b5b      	ldrb	r3, [r3, #13]
 80156fc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015700:	b2db      	uxtb	r3, r3
 8015702:	f003 0304 	and.w	r3, r3, #4
 8015706:	2b00      	cmp	r3, #0
 8015708:	d004      	beq.n	8015714 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 801570a:	2100      	movs	r1, #0
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f001 fd1b 	bl	8017148 <tcpChangeState>
      //Return immediately
      return;
 8015712:	e055      	b.n	80157c0 <tcpStateFinWait2+0xe6>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8015714:	69ba      	ldr	r2, [r7, #24]
 8015716:	68b9      	ldr	r1, [r7, #8]
 8015718:	68f8      	ldr	r0, [r7, #12]
 801571a:	f000 fd84 	bl	8016226 <tcpCheckSyn>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d14a      	bne.n	80157ba <tcpStateFinWait2+0xe0>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8015724:	69ba      	ldr	r2, [r7, #24]
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f000 fdb0 	bl	801628e <tcpCheckAck>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d144      	bne.n	80157be <tcpStateFinWait2+0xe4>
      return;

   //Process the segment text
   if(length > 0)
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d007      	beq.n	801574a <tcpStateFinWait2+0x70>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	68b9      	ldr	r1, [r7, #8]
 8015744:	68f8      	ldr	r0, [r7, #12]
 8015746:	f001 f80f 	bl	8016768 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	7b5b      	ldrb	r3, [r3, #13]
 801574e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015752:	b2db      	uxtb	r3, r3
 8015754:	f003 0301 	and.w	r3, r3, #1
 8015758:	2b00      	cmp	r3, #0
 801575a:	d031      	beq.n	80157c0 <tcpStateFinWait2+0xe6>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	6859      	ldr	r1, [r3, #4]
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	440b      	add	r3, r1
 801576a:	429a      	cmp	r2, r3
 801576c:	d128      	bne.n	80157c0 <tcpStateFinWait2+0xe6>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015774:	1c5a      	adds	r2, r3, #1
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015786:	2100      	movs	r1, #0
 8015788:	9101      	str	r1, [sp, #4]
 801578a:	2100      	movs	r1, #0
 801578c:	9100      	str	r1, [sp, #0]
 801578e:	2110      	movs	r1, #16
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f000 f8c3 	bl	801591c <tcpSendSegment>
            FALSE);

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f001 f876 	bl	8016888 <tcpDeleteControlBlock>
         //Start the 2MSL timer
         netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80157a2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7fb fee8 	bl	801157c <netStartTimer>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80157ac:	210a      	movs	r1, #10
 80157ae:	68f8      	ldr	r0, [r7, #12]
 80157b0:	f001 fcca 	bl	8017148 <tcpChangeState>
 80157b4:	e004      	b.n	80157c0 <tcpStateFinWait2+0xe6>
      return;
 80157b6:	bf00      	nop
 80157b8:	e002      	b.n	80157c0 <tcpStateFinWait2+0xe6>
      return;
 80157ba:	bf00      	nop
 80157bc:	e000      	b.n	80157c0 <tcpStateFinWait2+0xe6>
      return;
 80157be:	bf00      	nop
      }
   }
}
 80157c0:	3710      	adds	r7, #16
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}

080157c6 <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 80157c6:	b580      	push	{r7, lr}
 80157c8:	b084      	sub	sp, #16
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	60f8      	str	r0, [r7, #12]
 80157ce:	60b9      	str	r1, [r7, #8]
 80157d0:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	68b9      	ldr	r1, [r7, #8]
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f000 fc87 	bl	80160ea <tcpCheckSeqNum>
 80157dc:	4603      	mov	r3, r0
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d133      	bne.n	801584a <tcpStateClosing+0x84>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	7b5b      	ldrb	r3, [r3, #13]
 80157e6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	f003 0304 	and.w	r3, r3, #4
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d004      	beq.n	80157fe <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80157f4:	2100      	movs	r1, #0
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	f001 fca6 	bl	8017148 <tcpChangeState>
      //Return immediately
      return;
 80157fc:	e02a      	b.n	8015854 <tcpStateClosing+0x8e>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80157fe:	687a      	ldr	r2, [r7, #4]
 8015800:	68b9      	ldr	r1, [r7, #8]
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f000 fd0f 	bl	8016226 <tcpCheckSyn>
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	d11f      	bne.n	801584e <tcpStateClosing+0x88>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	68b9      	ldr	r1, [r7, #8]
 8015812:	68f8      	ldr	r0, [r7, #12]
 8015814:	f000 fd3b 	bl	801628e <tcpCheckAck>
 8015818:	4603      	mov	r3, r0
 801581a:	2b00      	cmp	r3, #0
 801581c:	d119      	bne.n	8015852 <tcpStateClosing+0x8c>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT state, otherwise
   //ignore the segment
   if(segment->ackNum == socket->sndNxt)
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	689a      	ldr	r2, [r3, #8]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015826:	429a      	cmp	r2, r3
 8015828:	d114      	bne.n	8015854 <tcpStateClosing+0x8e>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 801582a:	68f8      	ldr	r0, [r7, #12]
 801582c:	f001 f82c 	bl	8016888 <tcpDeleteControlBlock>
      //Start the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015836:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 801583a:	4618      	mov	r0, r3
 801583c:	f7fb fe9e 	bl	801157c <netStartTimer>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8015840:	210a      	movs	r1, #10
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	f001 fc80 	bl	8017148 <tcpChangeState>
 8015848:	e004      	b.n	8015854 <tcpStateClosing+0x8e>
      return;
 801584a:	bf00      	nop
 801584c:	e002      	b.n	8015854 <tcpStateClosing+0x8e>
      return;
 801584e:	bf00      	nop
 8015850:	e000      	b.n	8015854 <tcpStateClosing+0x8e>
      return;
 8015852:	bf00      	nop
   }
}
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b086      	sub	sp, #24
 801585e:	af02      	add	r7, sp, #8
 8015860:	60f8      	str	r0, [r7, #12]
 8015862:	60b9      	str	r1, [r7, #8]
 8015864:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	68b9      	ldr	r1, [r7, #8]
 801586a:	68f8      	ldr	r0, [r7, #12]
 801586c:	f000 fc3d 	bl	80160ea <tcpCheckSeqNum>
 8015870:	4603      	mov	r3, r0
 8015872:	2b00      	cmp	r3, #0
 8015874:	d147      	bne.n	8015906 <tcpStateTimeWait+0xac>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	7b5b      	ldrb	r3, [r3, #13]
 801587a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 801587e:	b2db      	uxtb	r3, r3
 8015880:	f003 0304 	and.w	r3, r3, #4
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00e      	beq.n	80158a6 <tcpStateTimeWait+0x4c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8015888:	2100      	movs	r1, #0
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f001 fc5c 	bl	8017148 <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015894:	2b00      	cmp	r3, #0
 8015896:	d138      	bne.n	801590a <tcpStateTimeWait+0xb0>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f000 fff5 	bl	8016888 <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2200      	movs	r2, #0
 80158a2:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 80158a4:	e031      	b.n	801590a <tcpStateTimeWait+0xb0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	68b9      	ldr	r1, [r7, #8]
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f000 fcbb 	bl	8016226 <tcpCheckSyn>
 80158b0:	4603      	mov	r3, r0
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d12b      	bne.n	801590e <tcpStateTimeWait+0xb4>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	7b5b      	ldrb	r3, [r3, #13]
 80158ba:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	f003 0310 	and.w	r3, r3, #16
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d024      	beq.n	8015912 <tcpStateTimeWait+0xb8>
      return;

   //The only thing that can arrive in this state is a retransmission of the
   //remote FIN. Acknowledge it and restart the 2 MSL timeout
   if((segment->flags & TCP_FLAG_FIN) != 0)
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	7b5b      	ldrb	r3, [r3, #13]
 80158cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	f003 0301 	and.w	r3, r3, #1
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d01c      	beq.n	8015914 <tcpStateTimeWait+0xba>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158e4:	2100      	movs	r1, #0
 80158e6:	9101      	str	r1, [sp, #4]
 80158e8:	2100      	movs	r1, #0
 80158ea:	9100      	str	r1, [sp, #0]
 80158ec:	2110      	movs	r1, #16
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f000 f814 	bl	801591c <tcpSendSegment>
         FALSE);

      //Restart the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80158fa:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80158fe:	4618      	mov	r0, r3
 8015900:	f7fb fe3c 	bl	801157c <netStartTimer>
 8015904:	e006      	b.n	8015914 <tcpStateTimeWait+0xba>
      return;
 8015906:	bf00      	nop
 8015908:	e004      	b.n	8015914 <tcpStateTimeWait+0xba>
      return;
 801590a:	bf00      	nop
 801590c:	e002      	b.n	8015914 <tcpStateTimeWait+0xba>
      return;
 801590e:	bf00      	nop
 8015910:	e000      	b.n	8015914 <tcpStateTimeWait+0xba>
      return;
 8015912:	bf00      	nop
   }
}
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
	...

0801591c <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 801591c:	b5b0      	push	{r4, r5, r7, lr}
 801591e:	b09e      	sub	sp, #120	; 0x78
 8015920:	af02      	add	r7, sp, #8
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	607a      	str	r2, [r7, #4]
 8015926:	603b      	str	r3, [r7, #0]
 8015928:	460b      	mov	r3, r1
 801592a:	72fb      	strb	r3, [r7, #11]
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8015932:	ba5b      	rev16	r3, r3
 8015934:	b29b      	uxth	r3, r3
 8015936:	827b      	strh	r3, [r7, #18]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 8015938:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801593c:	4619      	mov	r1, r3
 801593e:	203c      	movs	r0, #60	; 0x3c
 8015940:	f7f3 f899 	bl	8008a76 <ipAllocBuffer>
 8015944:	66b8      	str	r0, [r7, #104]	; 0x68
   //Failed to allocate memory?
   if(buffer == NULL)
 8015946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015948:	2b00      	cmp	r3, #0
 801594a:	d101      	bne.n	8015950 <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 801594c:	2364      	movs	r3, #100	; 0x64
 801594e:	e1a8      	b.n	8015ca2 <tcpSendSegment+0x386>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 8015950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015952:	4619      	mov	r1, r3
 8015954:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015956:	f7fb f8da 	bl	8010b0e <netBufferAt>
 801595a:	6678      	str	r0, [r7, #100]	; 0x64

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015960:	4618      	mov	r0, r3
 8015962:	f7eb fab7 	bl	8000ed4 <swapInt16>
 8015966:	4603      	mov	r3, r0
 8015968:	461a      	mov	r2, r3
 801596a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801596c:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8015972:	4618      	mov	r0, r3
 8015974:	f7eb faae 	bl	8000ed4 <swapInt16>
 8015978:	4603      	mov	r3, r0
 801597a:	461a      	mov	r2, r3
 801597c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801597e:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f7eb fab5 	bl	8000ef0 <swapInt32>
 8015986:	4602      	mov	r2, r0
 8015988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801598a:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 801598c:	7afb      	ldrb	r3, [r7, #11]
 801598e:	f003 0310 	and.w	r3, r3, #16
 8015992:	2b00      	cmp	r3, #0
 8015994:	d004      	beq.n	80159a0 <tcpSendSegment+0x84>
 8015996:	6838      	ldr	r0, [r7, #0]
 8015998:	f7eb faaa 	bl	8000ef0 <swapInt32>
 801599c:	4603      	mov	r3, r0
 801599e:	e000      	b.n	80159a2 <tcpSendSegment+0x86>
 80159a0:	2300      	movs	r3, #0
 80159a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80159a4:	6093      	str	r3, [r2, #8]
   segment->reserved1 = 0;
 80159a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80159a8:	7b13      	ldrb	r3, [r2, #12]
 80159aa:	f36f 0303 	bfc	r3, #0, #4
 80159ae:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 80159b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80159b2:	7b13      	ldrb	r3, [r2, #12]
 80159b4:	2105      	movs	r1, #5
 80159b6:	f361 1307 	bfi	r3, r1, #4, #4
 80159ba:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 80159bc:	7afb      	ldrb	r3, [r7, #11]
 80159be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159c2:	b2d9      	uxtb	r1, r3
 80159c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80159c6:	7b53      	ldrb	r3, [r2, #13]
 80159c8:	f361 0305 	bfi	r3, r1, #0, #6
 80159cc:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 80159ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80159d0:	7b53      	ldrb	r3, [r2, #13]
 80159d2:	f36f 1387 	bfc	r3, #6, #2
 80159d6:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80159de:	4618      	mov	r0, r3
 80159e0:	f7eb fa78 	bl	8000ed4 <swapInt16>
 80159e4:	4603      	mov	r3, r0
 80159e6:	461a      	mov	r2, r3
 80159e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159ea:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 80159ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159ee:	2200      	movs	r2, #0
 80159f0:	741a      	strb	r2, [r3, #16]
 80159f2:	2200      	movs	r2, #0
 80159f4:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 80159f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159f8:	2200      	movs	r2, #0
 80159fa:	749a      	strb	r2, [r3, #18]
 80159fc:	2200      	movs	r2, #0
 80159fe:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if((flags & TCP_FLAG_SYN) != 0)
 8015a00:	7afb      	ldrb	r3, [r7, #11]
 8015a02:	f003 0302 	and.w	r3, r3, #2
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d006      	beq.n	8015a18 <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 8015a0a:	f107 0212 	add.w	r2, r7, #18
 8015a0e:	2302      	movs	r3, #2
 8015a10:	2102      	movs	r1, #2
 8015a12:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015a14:	f000 fa9a 	bl	8015f4c <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 8015a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a1a:	7b1b      	ldrb	r3, [r3, #12]
 8015a1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	461a      	mov	r2, r3
 8015a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015a28:	4413      	add	r3, r2
 8015a2a:	4619      	mov	r1, r3
 8015a2c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015a2e:	f7fa ffc8 	bl	80109c2 <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 8015a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d013      	beq.n	8015a62 <tcpSendSegment+0x146>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8015a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	68f8      	ldr	r0, [r7, #12]
 8015a44:	f001 fd57 	bl	80174f6 <tcpReadTxBuffer>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      //Any error to report?
      if(error)
 8015a4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d005      	beq.n	8015a62 <tcpSendSegment+0x146>
      {
         //Clean up side effects
         netBufferFree(buffer);
 8015a56:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015a58:	f7fa ff82 	bl	8010960 <netBufferFree>
         //Exit immediately
         return error;
 8015a5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8015a60:	e11f      	b.n	8015ca2 <tcpSendSegment+0x386>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 8015a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a64:	7b1b      	ldrb	r3, [r3, #12]
 8015a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	009b      	lsls	r3, r3, #2
 8015a6e:	461a      	mov	r2, r3
 8015a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a74:	4413      	add	r3, r2
 8015a76:	65fb      	str	r3, [r7, #92]	; 0x5c

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a7c:	2b04      	cmp	r3, #4
 8015a7e:	d124      	bne.n	8015aca <tcpSendSegment+0x1ae>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8015a80:	230c      	movs	r3, #12
 8015a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	695b      	ldr	r3, [r3, #20]
 8015a88:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8e:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader.ipv4Data.reserved = 0;
 8015a90:	2300      	movs	r3, #0
 8015a92:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8015a96:	2306      	movs	r3, #6
 8015a98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      pseudoHeader.ipv4Data.length = htons(totalLength);
 8015a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7eb fa17 	bl	8000ed4 <swapInt16>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8015aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ab0:	1d18      	adds	r0, r3, #4
 8015ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ab4:	9300      	str	r3, [sp, #0]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015aba:	210c      	movs	r1, #12
 8015abc:	f7f2 ffb2 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ac6:	821a      	strh	r2, [r3, #16]
 8015ac8:	e039      	b.n	8015b3e <tcpSendSegment+0x222>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv6Addr))
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ace:	2b10      	cmp	r3, #16
 8015ad0:	d130      	bne.n	8015b34 <tcpSendSegment+0x218>
   {
      //Format IPv6 pseudo header
      pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 8015ad2:	2328      	movs	r3, #40	; 0x28
 8015ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pseudoHeader.ipv6Data.srcAddr = socket->localIpAddr.ipv6Addr;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8015adc:	3314      	adds	r3, #20
 8015ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.destAddr = socket->remoteIpAddr.ipv6Addr;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8015aea:	332c      	adds	r3, #44	; 0x2c
 8015aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.length = htonl(totalLength);
 8015af2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015af4:	f7eb f9fc 	bl	8000ef0 <swapInt32>
 8015af8:	4603      	mov	r3, r0
 8015afa:	653b      	str	r3, [r7, #80]	; 0x50
      pseudoHeader.ipv6Data.reserved[0] = 0;
 8015afc:	2300      	movs	r3, #0
 8015afe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      pseudoHeader.ipv6Data.reserved[1] = 0;
 8015b02:	2300      	movs	r3, #0
 8015b04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      pseudoHeader.ipv6Data.reserved[2] = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      pseudoHeader.ipv6Data.nextHeader = IPV6_TCP_HEADER;
 8015b0e:	2306      	movs	r3, #6
 8015b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv6Data,
 8015b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b1a:	1d18      	adds	r0, r3, #4
 8015b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b1e:	9300      	str	r3, [sp, #0]
 8015b20:	4613      	mov	r3, r2
 8015b22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b24:	2128      	movs	r1, #40	; 0x28
 8015b26:	f7f2 ff7d 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015b30:	821a      	strh	r2, [r3, #16]
 8015b32:	e004      	b.n	8015b3e <tcpSendSegment+0x222>
   else
#endif
   //Destination address is not valid?
   {
      //Free previously allocated memory
      netBufferFree(buffer);
 8015b34:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015b36:	f7fa ff13 	bl	8010960 <netBufferFree>
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
 8015b3a:	23e4      	movs	r3, #228	; 0xe4
 8015b3c:	e0b1      	b.n	8015ca2 <tcpSendSegment+0x386>
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 8015b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f000 8082 	beq.w	8015c4c <tcpSendSegment+0x330>
   {
      //Empty retransmission queue?
      if(socket->retransmitQueue == NULL)
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d108      	bne.n	8015b64 <tcpSendSegment+0x248>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 8015b52:	2074      	movs	r0, #116	; 0x74
 8015b54:	f7fa fea4 	bl	80108a0 <memPoolAlloc>
 8015b58:	66f8      	str	r0, [r7, #108]	; 0x6c
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015b5e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8015b62:	e014      	b.n	8015b8e <tcpSendSegment+0x272>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8015b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 8015b6c:	e002      	b.n	8015b74 <tcpSendSegment+0x258>
 8015b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d1f8      	bne.n	8015b6e <tcpSendSegment+0x252>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 8015b7c:	2074      	movs	r0, #116	; 0x74
 8015b7e:	f7fa fe8f 	bl	80108a0 <memPoolAlloc>
 8015b82:	4602      	mov	r2, r0
 8015b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b86:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8015b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8015b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d104      	bne.n	8015b9e <tcpSendSegment+0x282>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 8015b94:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015b96:	f7fa fee3 	bl	8010960 <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 8015b9a:	2364      	movs	r3, #100	; 0x64
 8015b9c:	e081      	b.n	8015ca2 <tcpSendSegment+0x386>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 8015b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 8015ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015baa:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 8015bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015bae:	2200      	movs	r2, #0
 8015bb0:	609a      	str	r2, [r3, #8]
      //Save TCP header
      osMemcpy(queueItem->header, segment, segment->dataOffset * 4);
 8015bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015bb4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015bba:	7b1b      	ldrb	r3, [r3, #12]
 8015bbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	009b      	lsls	r3, r3, #2
 8015bc4:	461a      	mov	r2, r3
 8015bc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015bc8:	f007 fe5a 	bl	801d880 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 8015bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015bce:	f103 040c 	add.w	r4, r3, #12
 8015bd2:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8015bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d116      	bne.n	8015c1e <tcpSendSegment+0x302>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 8015bf0:	f7eb fb56 	bl	80012a0 <osGetSystemTime>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 8015bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7eb f975 	bl	8000ef0 <swapInt32>
 8015c06:	4602      	mov	r2, r0
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	2201      	movs	r2, #1
 8015c12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
      }

      //Check whether the RTO timer is running or not
      if(!netTimerRunning(&socket->retransmitTimer))
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7fb fcca 	bl	80115be <netTimerRunning>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10d      	bne.n	8015c4c <tcpSendSegment+0x330>
      {
         //If the timer is not running, start it running so that it will expire
         //after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f503 72e8 	add.w	r2, r3, #464	; 0x1d0
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	4610      	mov	r0, r2
 8015c40:	f7fb fc9c 	bl	801157c <netStartTimer>

         //Reset retransmission counter
         socket->retransmitCount = 0;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2200      	movs	r2, #0
 8015c48:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c54:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8015c58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015c5a:	f001 fd35 	bl	80176c8 <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8015c5e:	4b13      	ldr	r3, [pc, #76]	; (8015cac <tcpSendSegment+0x390>)
 8015c60:	f107 0414 	add.w	r4, r7, #20
 8015c64:	461d      	mov	r5, r3
 8015c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015c6e:	e884 0003 	stmia.w	r4, {r0, r1}
   //Set the TTL value to be used
   ancillary.ttl = socket->ttl;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c78:	753b      	strb	r3, [r7, #20]
   ancillary.vmanPcp = socket->vmanPcp;
   ancillary.vmanDei = socket->vmanDei;
#endif

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset,
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	68d8      	ldr	r0, [r3, #12]
 8015c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c80:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8015c84:	f107 0314 	add.w	r3, r7, #20
 8015c88:	9300      	str	r3, [sp, #0]
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015c8e:	f7f2 fd69 	bl	8008764 <ipSendDatagram>
 8015c92:	4603      	mov	r3, r0
 8015c94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8015c98:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015c9a:	f7fa fe61 	bl	8010960 <netBufferFree>

   //Return error code
   return error;
 8015c9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3770      	adds	r7, #112	; 0x70
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8015caa:	bf00      	nop
 8015cac:	08025288 	.word	0x08025288

08015cb0 <tcpSendResetSegment>:
 * @param[in] seqNum Sequence number
 * @return Error code
 **/

error_t tcpSendResetSegment(Socket *socket, uint32_t seqNum)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b086      	sub	sp, #24
 8015cb4:	af02      	add	r7, sp, #8
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	81fb      	strh	r3, [r7, #14]

   //Check current state
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015cc4:	2b03      	cmp	r3, #3
 8015cc6:	d013      	beq.n	8015cf0 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_ESTABLISHED ||
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 8015cce:	2b04      	cmp	r3, #4
 8015cd0:	d00e      	beq.n	8015cf0 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
      socket->state == TCP_STATE_ESTABLISHED ||
 8015cd8:	2b07      	cmp	r3, #7
 8015cda:	d009      	beq.n	8015cf0 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8015ce2:	2b08      	cmp	r3, #8
 8015ce4:	d004      	beq.n	8015cf0 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 8015cec:	2b05      	cmp	r3, #5
 8015cee:	d10b      	bne.n	8015d08 <tcpSendResetSegment+0x58>
   {
      //Send a reset segment
      error = tcpSendSegment(socket, TCP_FLAG_RST, seqNum, 0, 0, FALSE);
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	9301      	str	r3, [sp, #4]
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	683a      	ldr	r2, [r7, #0]
 8015cfc:	2104      	movs	r1, #4
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff fe0c 	bl	801591c <tcpSendSegment>
 8015d04:	4603      	mov	r3, r0
 8015d06:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8015d08:	89fb      	ldrh	r3, [r7, #14]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3710      	adds	r7, #16
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
	...

08015d14 <tcpRejectSegment>:
 * @return Error code
 **/

error_t tcpRejectSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment, size_t length)
{
 8015d14:	b5b0      	push	{r4, r5, r7, lr}
 8015d16:	b09e      	sub	sp, #120	; 0x78
 8015d18:	af02      	add	r7, sp, #8
 8015d1a:	60f8      	str	r0, [r7, #12]
 8015d1c:	60b9      	str	r1, [r7, #8]
 8015d1e:	607a      	str	r2, [r7, #4]
 8015d20:	603b      	str	r3, [r7, #0]
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;
   NetTxAncillary ancillary;

   //Check whether the ACK bit is set
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	7b5b      	ldrb	r3, [r3, #13]
 8015d26:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	f003 0310 	and.w	r3, r3, #16
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d008      	beq.n	8015d46 <tcpRejectSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 8015d34:	2304      	movs	r3, #4
 8015d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      seqNum = segment->ackNum;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	66bb      	str	r3, [r7, #104]	; 0x68
      ackNum = 0;
 8015d40:	2300      	movs	r3, #0
 8015d42:	667b      	str	r3, [r7, #100]	; 0x64
 8015d44:	e021      	b.n	8015d8a <tcpRejectSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 8015d46:	2314      	movs	r3, #20
 8015d48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      seqNum = 0;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	66bb      	str	r3, [r7, #104]	; 0x68
      ackNum = segment->seqNum + length;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	683a      	ldr	r2, [r7, #0]
 8015d56:	4413      	add	r3, r2
 8015d58:	667b      	str	r3, [r7, #100]	; 0x64

      //Advance the acknowledgment number over the SYN or the FIN
      if((segment->flags & TCP_FLAG_SYN) != 0)
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	7b5b      	ldrb	r3, [r3, #13]
 8015d5e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	f003 0302 	and.w	r3, r3, #2
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d002      	beq.n	8015d72 <tcpRejectSegment+0x5e>
      {
         ackNum++;
 8015d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d6e:	3301      	adds	r3, #1
 8015d70:	667b      	str	r3, [r7, #100]	; 0x64
      }

      if((segment->flags & TCP_FLAG_FIN) != 0)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	7b5b      	ldrb	r3, [r3, #13]
 8015d76:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	f003 0301 	and.w	r3, r3, #1
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d002      	beq.n	8015d8a <tcpRejectSegment+0x76>
      {
         ackNum++;
 8015d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d86:	3301      	adds	r3, #1
 8015d88:	667b      	str	r3, [r7, #100]	; 0x64
      }
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 8015d8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015d8e:	4619      	mov	r1, r3
 8015d90:	2014      	movs	r0, #20
 8015d92:	f7f2 fe70 	bl	8008a76 <ipAllocBuffer>
 8015d96:	6638      	str	r0, [r7, #96]	; 0x60
   //Failed to allocate memory?
   if(buffer == NULL)
 8015d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d101      	bne.n	8015da2 <tcpRejectSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 8015d9e:	2364      	movs	r3, #100	; 0x64
 8015da0:	e0ce      	b.n	8015f40 <tcpRejectSegment+0x22c>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 8015da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015da4:	4619      	mov	r1, r3
 8015da6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015da8:	f7fa feb1 	bl	8010b0e <netBufferAt>
 8015dac:	65f8      	str	r0, [r7, #92]	; 0x5c

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	885b      	ldrh	r3, [r3, #2]
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7eb f88d 	bl	8000ed4 <swapInt16>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015dc0:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	881b      	ldrh	r3, [r3, #0]
 8015dc6:	b29b      	uxth	r3, r3
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7eb f883 	bl	8000ed4 <swapInt16>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015dd4:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 8015dd6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015dd8:	f7eb f88a 	bl	8000ef0 <swapInt32>
 8015ddc:	4602      	mov	r2, r0
 8015dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015de0:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 8015de2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015de4:	f7eb f884 	bl	8000ef0 <swapInt32>
 8015de8:	4602      	mov	r2, r0
 8015dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015dec:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 8015dee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015df0:	7b13      	ldrb	r3, [r2, #12]
 8015df2:	f36f 0303 	bfc	r3, #0, #4
 8015df6:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 8015df8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015dfa:	7b13      	ldrb	r3, [r2, #12]
 8015dfc:	2105      	movs	r1, #5
 8015dfe:	f361 1307 	bfi	r3, r1, #4, #4
 8015e02:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 8015e04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e0c:	b2d9      	uxtb	r1, r3
 8015e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e10:	7b53      	ldrb	r3, [r2, #13]
 8015e12:	f361 0305 	bfi	r3, r1, #0, #6
 8015e16:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 8015e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e1a:	7b53      	ldrb	r3, [r2, #13]
 8015e1c:	f36f 1387 	bfc	r3, #6, #2
 8015e20:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8015e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e24:	2200      	movs	r2, #0
 8015e26:	739a      	strb	r2, [r3, #14]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 8015e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e2e:	2200      	movs	r2, #0
 8015e30:	741a      	strb	r2, [r3, #16]
 8015e32:	2200      	movs	r2, #0
 8015e34:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 8015e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e38:	2200      	movs	r2, #0
 8015e3a:	749a      	strb	r2, [r3, #18]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	2b0c      	cmp	r3, #12
 8015e46:	d120      	bne.n	8015e8a <tcpRejectSegment+0x176>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 8015e48:	230c      	movs	r3, #12
 8015e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader2.ipv4Data.reserved = 0;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8015e5e:	2306      	movs	r3, #6
 8015e60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 8015e64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8015e68:	86fb      	strh	r3, [r7, #54]	; 0x36

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 8015e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e70:	1d18      	adds	r0, r3, #4
 8015e72:	2314      	movs	r3, #20
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	4613      	mov	r3, r2
 8015e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e7a:	210c      	movs	r1, #12
 8015e7c:	f7f2 fdd2 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8015e80:	4603      	mov	r3, r0
 8015e82:	461a      	mov	r2, r3
 8015e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e86:	821a      	strh	r2, [r3, #16]
 8015e88:	e037      	b.n	8015efa <tcpRejectSegment+0x1e6>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	2b28      	cmp	r3, #40	; 0x28
 8015e90:	d12e      	bne.n	8015ef0 <tcpRejectSegment+0x1dc>
   {
      //Format IPv6 pseudo header
      pseudoHeader2.length = sizeof(Ipv6PseudoHeader);
 8015e92:	2328      	movs	r3, #40	; 0x28
 8015e94:	62bb      	str	r3, [r7, #40]	; 0x28
      pseudoHeader2.ipv6Data.srcAddr = pseudoHeader->ipv6Data.destAddr;
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8015e9c:	3314      	adds	r3, #20
 8015e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      pseudoHeader2.ipv6Data.destAddr = pseudoHeader->ipv6Data.srcAddr;
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015eaa:	3304      	adds	r3, #4
 8015eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      pseudoHeader2.ipv6Data.length = HTONL(sizeof(TcpHeader));
 8015eb2:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8015eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      pseudoHeader2.ipv6Data.reserved[0] = 0;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      pseudoHeader2.ipv6Data.reserved[1] = 0;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
      pseudoHeader2.ipv6Data.reserved[2] = 0;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
      pseudoHeader2.ipv6Data.nextHeader = IPV6_TCP_HEADER;
 8015eca:	2306      	movs	r3, #6
 8015ecc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv6Data,
 8015ed0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ed6:	1d18      	adds	r0, r3, #4
 8015ed8:	2314      	movs	r3, #20
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	4613      	mov	r3, r2
 8015ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ee0:	2128      	movs	r1, #40	; 0x28
 8015ee2:	f7f2 fd9f 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	461a      	mov	r2, r3
 8015eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015eec:	821a      	strh	r2, [r3, #16]
 8015eee:	e004      	b.n	8015efa <tcpRejectSegment+0x1e6>
   else
#endif
   //Destination address is not valid?
   {
      //Free previously allocated memory
      netBufferFree(buffer);
 8015ef0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015ef2:	f7fa fd35 	bl	8010960 <netBufferFree>
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
 8015ef6:	23e4      	movs	r3, #228	; 0xe4
 8015ef8:	e022      	b.n	8015f40 <tcpRejectSegment+0x22c>
   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 8015efa:	2300      	movs	r3, #0
 8015efc:	2200      	movs	r2, #0
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015f02:	f001 fbe1 	bl	80176c8 <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8015f06:	4b10      	ldr	r3, [pc, #64]	; (8015f48 <tcpRejectSegment+0x234>)
 8015f08:	f107 0410 	add.w	r4, r7, #16
 8015f0c:	461d      	mov	r5, r3
 8015f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f16:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset,
 8015f1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f1c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8015f20:	f107 0310 	add.w	r3, r7, #16
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	4613      	mov	r3, r2
 8015f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f2a:	68f8      	ldr	r0, [r7, #12]
 8015f2c:	f7f2 fc1a 	bl	8008764 <ipSendDatagram>
 8015f30:	4603      	mov	r3, r0
 8015f32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8015f36:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015f38:	f7fa fd12 	bl	8010960 <netBufferFree>

   //Return error code
   return error;
 8015f3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3770      	adds	r7, #112	; 0x70
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bdb0      	pop	{r4, r5, r7, pc}
 8015f48:	08025288 	.word	0x08025288

08015f4c <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b088      	sub	sp, #32
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	607a      	str	r2, [r7, #4]
 8015f56:	461a      	mov	r2, r3
 8015f58:	460b      	mov	r3, r1
 8015f5a:	72fb      	strb	r3, [r7, #11]
 8015f5c:	4613      	mov	r3, r2
 8015f5e:	72bb      	strb	r3, [r7, #10]
   size_t paddingSize;
   TcpOption *option;

   //The option-length counts the two octets of option-kind and option-length
   //as well as the option-data octets (refer to RFC 793, section 3.1)
   length += sizeof(TcpOption);
 8015f60:	7abb      	ldrb	r3, [r7, #10]
 8015f62:	3302      	adds	r3, #2
 8015f64:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough room to add the option
   if((segment->dataOffset * 4 + length) <= TCP_MAX_HEADER_LENGTH)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	7b1b      	ldrb	r3, [r3, #12]
 8015f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	009a      	lsls	r2, r3, #2
 8015f72:	7abb      	ldrb	r3, [r7, #10]
 8015f74:	4413      	add	r3, r2
 8015f76:	2b3c      	cmp	r3, #60	; 0x3c
 8015f78:	dc48      	bgt.n	801600c <tcpAddOption+0xc0>
   {
      //Index of the first available byte
      i = (segment->dataOffset * 4) - sizeof(TcpHeader);
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	7b1b      	ldrb	r3, [r3, #12]
 8015f7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015f82:	b2db      	uxtb	r3, r3
 8015f84:	009b      	lsls	r3, r3, #2
 8015f86:	3b14      	subs	r3, #20
 8015f88:	61bb      	str	r3, [r7, #24]

      //Calculate the number of padding bytes
      paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 8015f8a:	7abb      	ldrb	r3, [r7, #10]
 8015f8c:	f003 0303 	and.w	r3, r3, #3
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d005      	beq.n	8015fa2 <tcpAddOption+0x56>
 8015f96:	7abb      	ldrb	r3, [r7, #10]
 8015f98:	f003 0303 	and.w	r3, r3, #3
 8015f9c:	f1c3 0304 	rsb	r3, r3, #4
 8015fa0:	e000      	b.n	8015fa4 <tcpAddOption+0x58>
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	617b      	str	r3, [r7, #20]

      //Write padding bytes
      while(paddingSize--)
 8015fa6:	e006      	b.n	8015fb6 <tcpAddOption+0x6a>
      {
         segment->options[i++] = TCP_OPTION_NOP;
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	1c5a      	adds	r2, r3, #1
 8015fac:	61ba      	str	r2, [r7, #24]
 8015fae:	68fa      	ldr	r2, [r7, #12]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	751a      	strb	r2, [r3, #20]
      while(paddingSize--)
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	1e5a      	subs	r2, r3, #1
 8015fba:	617a      	str	r2, [r7, #20]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d1f3      	bne.n	8015fa8 <tcpAddOption+0x5c>
      }

      //Point to the current location
      option = (TcpOption *) (segment->options + i);
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f103 0214 	add.w	r2, r3, #20
 8015fc6:	69bb      	ldr	r3, [r7, #24]
 8015fc8:	4413      	add	r3, r2
 8015fca:	613b      	str	r3, [r7, #16]

      //Format option
      option->kind = kind;
 8015fcc:	693b      	ldr	r3, [r7, #16]
 8015fce:	7afa      	ldrb	r2, [r7, #11]
 8015fd0:	701a      	strb	r2, [r3, #0]
      option->length = length;
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	7aba      	ldrb	r2, [r7, #10]
 8015fd6:	705a      	strb	r2, [r3, #1]
      osMemcpy(option->value, value, length - sizeof(TcpOption));
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	1c98      	adds	r0, r3, #2
 8015fdc:	7abb      	ldrb	r3, [r7, #10]
 8015fde:	3b02      	subs	r3, #2
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	6879      	ldr	r1, [r7, #4]
 8015fe4:	f007 fc4c 	bl	801d880 <memcpy>

      //Adjust index value
      i += length;
 8015fe8:	7abb      	ldrb	r3, [r7, #10]
 8015fea:	69ba      	ldr	r2, [r7, #24]
 8015fec:	4413      	add	r3, r2
 8015fee:	61bb      	str	r3, [r7, #24]

      //Update the length of the TCP header
      segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 8015ff0:	69bb      	ldr	r3, [r7, #24]
 8015ff2:	3314      	adds	r3, #20
 8015ff4:	089b      	lsrs	r3, r3, #2
 8015ff6:	f003 030f 	and.w	r3, r3, #15
 8015ffa:	b2d9      	uxtb	r1, r3
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	7b13      	ldrb	r3, [r2, #12]
 8016000:	f361 1307 	bfi	r3, r1, #4, #4
 8016004:	7313      	strb	r3, [r2, #12]

      //Successful processing
      error = NO_ERROR;
 8016006:	2300      	movs	r3, #0
 8016008:	83fb      	strh	r3, [r7, #30]
 801600a:	e001      	b.n	8016010 <tcpAddOption+0xc4>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 801600c:	2301      	movs	r3, #1
 801600e:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 8016010:	8bfb      	ldrh	r3, [r7, #30]
}
 8016012:	4618      	mov	r0, r3
 8016014:	3720      	adds	r7, #32
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 801601a:	b480      	push	{r7}
 801601c:	b087      	sub	sp, #28
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	460b      	mov	r3, r1
 8016024:	70fb      	strb	r3, [r7, #3]
   size_t i;
   size_t length;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset >= (sizeof(TcpHeader) / 4))
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	7b1b      	ldrb	r3, [r3, #12]
 801602a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801602e:	b2db      	uxtb	r3, r3
 8016030:	2b04      	cmp	r3, #4
 8016032:	d942      	bls.n	80160ba <tcpGetOption+0xa0>
   {
      //Compute the length of the options field
      length = (segment->dataOffset * 4) - sizeof(TcpHeader);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	7b1b      	ldrb	r3, [r3, #12]
 8016038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801603c:	b2db      	uxtb	r3, r3
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	3b14      	subs	r3, #20
 8016042:	613b      	str	r3, [r7, #16]

      //Point to the very first option
      i = 0;
 8016044:	2300      	movs	r3, #0
 8016046:	617b      	str	r3, [r7, #20]

      //Loop through the list of options
      while(i < length)
 8016048:	e02f      	b.n	80160aa <tcpGetOption+0x90>
      {
         //Point to the current option
         option = (TcpOption *) (segment->options + i);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f103 0214 	add.w	r2, r3, #20
 8016050:	697b      	ldr	r3, [r7, #20]
 8016052:	4413      	add	r3, r2
 8016054:	60fb      	str	r3, [r7, #12]

         //Check option code
         if(option->kind == TCP_OPTION_END)
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d02a      	beq.n	80160b4 <tcpGetOption+0x9a>
         {
            //This option code indicates the end of the option list
            break;
         }
         else if(option->kind == TCP_OPTION_NOP)
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d103      	bne.n	801606e <tcpGetOption+0x54>
         {
            //This option consists of a single octet
            i++;
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	3301      	adds	r3, #1
 801606a:	617b      	str	r3, [r7, #20]
 801606c:	e01d      	b.n	80160aa <tcpGetOption+0x90>
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	3301      	adds	r3, #1
 8016072:	693a      	ldr	r2, [r7, #16]
 8016074:	429a      	cmp	r2, r3
 8016076:	d91f      	bls.n	80160b8 <tcpGetOption+0x9e>
               break;

            //Check the length of the option
            if(option->length < sizeof(TcpOption) || (i + option->length) > length)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	785b      	ldrb	r3, [r3, #1]
 801607c:	2b01      	cmp	r3, #1
 801607e:	d91c      	bls.n	80160ba <tcpGetOption+0xa0>
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	785b      	ldrb	r3, [r3, #1]
 8016084:	461a      	mov	r2, r3
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	4413      	add	r3, r2
 801608a:	693a      	ldr	r2, [r7, #16]
 801608c:	429a      	cmp	r2, r3
 801608e:	d314      	bcc.n	80160ba <tcpGetOption+0xa0>
               break;

            //Matching option code?
            if(option->kind == kind)
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	78fa      	ldrb	r2, [r7, #3]
 8016096:	429a      	cmp	r2, r3
 8016098:	d101      	bne.n	801609e <tcpGetOption+0x84>
               return option;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	e00e      	b.n	80160bc <tcpGetOption+0xa2>

            //Jump to the next option
            i += option->length;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	785b      	ldrb	r3, [r3, #1]
 80160a2:	461a      	mov	r2, r3
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	4413      	add	r3, r2
 80160a8:	617b      	str	r3, [r7, #20]
      while(i < length)
 80160aa:	697a      	ldr	r2, [r7, #20]
 80160ac:	693b      	ldr	r3, [r7, #16]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d3cb      	bcc.n	801604a <tcpGetOption+0x30>
 80160b2:	e002      	b.n	80160ba <tcpGetOption+0xa0>
            break;
 80160b4:	bf00      	nop
 80160b6:	e000      	b.n	80160ba <tcpGetOption+0xa0>
               break;
 80160b8:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	4618      	mov	r0, r3
 80160be:	371c      	adds	r7, #28
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr

080160c8 <tcpGenerateInitialSeqNum>:
 * @return Value of the initial sequence number
 **/

uint32_t tcpGenerateInitialSeqNum(const IpAddr *localIpAddr,
   uint16_t localPort, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	607a      	str	r2, [r7, #4]
 80160d2:	461a      	mov	r2, r3
 80160d4:	460b      	mov	r3, r1
 80160d6:	817b      	strh	r3, [r7, #10]
 80160d8:	4613      	mov	r3, r2
 80160da:	813b      	strh	r3, [r7, #8]

   //Calculate ISN = M + F(localip, localport, remoteip, remoteport, secretkey)
   return isn + netGetSystemTickCount();
#else
   //Generate a random initial sequence number
   return netGetRand();
 80160dc:	f7fb fb34 	bl	8011748 <netGetRand>
 80160e0:	4603      	mov	r3, r0
#endif
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3710      	adds	r7, #16
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <tcpCheckSeqNum>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSeqNum(Socket *socket, TcpHeader *segment, size_t length)
{
 80160ea:	b580      	push	{r7, lr}
 80160ec:	b088      	sub	sp, #32
 80160ee:	af02      	add	r7, sp, #8
 80160f0:	60f8      	str	r0, [r7, #12]
 80160f2:	60b9      	str	r1, [r7, #8]
 80160f4:	607a      	str	r2, [r7, #4]
   bool_t acceptable;

   //Due to zero windows and zero length segments, we have four cases for the
   //acceptability of an incoming segment (refer to RFC 793, section 3.3)
   if(length == 0 && socket->rcvWnd == 0)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d111      	bne.n	8016120 <tcpCheckSeqNum+0x36>
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10c      	bne.n	8016120 <tcpCheckSeqNum+0x36>
   {
      //If both segment length and receive window are zero, then test if
      //SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	685a      	ldr	r2, [r3, #4]
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016110:	429a      	cmp	r2, r3
 8016112:	d102      	bne.n	801611a <tcpCheckSeqNum+0x30>
      {
         acceptable = TRUE;
 8016114:	2301      	movs	r3, #1
 8016116:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8016118:	e065      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 801611a:	2300      	movs	r3, #0
 801611c:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 801611e:	e062      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length == 0 && socket->rcvWnd != 0)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d11e      	bne.n	8016164 <tcpCheckSeqNum+0x7a>
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801612c:	2b00      	cmp	r3, #0
 801612e:	d019      	beq.n	8016164 <tcpCheckSeqNum+0x7a>
   {
      //If segment length is zero and receive window is non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	685a      	ldr	r2, [r3, #4]
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801613a:	1ad3      	subs	r3, r2, r3
 801613c:	2b00      	cmp	r3, #0
 801613e:	db0e      	blt.n	801615e <tcpCheckSeqNum+0x74>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	685a      	ldr	r2, [r3, #4]
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801614a:	68f9      	ldr	r1, [r7, #12]
 801614c:	f8b1 1096 	ldrh.w	r1, [r1, #150]	; 0x96
 8016150:	440b      	add	r3, r1
 8016152:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8016154:	2b00      	cmp	r3, #0
 8016156:	da02      	bge.n	801615e <tcpCheckSeqNum+0x74>
      {
         acceptable = TRUE;
 8016158:	2301      	movs	r3, #1
 801615a:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 801615c:	e043      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 801615e:	2300      	movs	r3, #0
 8016160:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8016162:	e040      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length != 0 && socket->rcvWnd == 0)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d007      	beq.n	801617a <tcpCheckSeqNum+0x90>
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8016170:	2b00      	cmp	r3, #0
 8016172:	d102      	bne.n	801617a <tcpCheckSeqNum+0x90>
   {
      //If segment length is non zero and receive window is zero, then the
      //sequence number is not acceptable
      acceptable = FALSE;
 8016174:	2300      	movs	r3, #0
 8016176:	617b      	str	r3, [r7, #20]
 8016178:	e035      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
   else
   {
      //If both segment length and receive window are non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND or
      //RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	685a      	ldr	r2, [r3, #4]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016184:	1ad3      	subs	r3, r2, r3
 8016186:	2b00      	cmp	r3, #0
 8016188:	db0e      	blt.n	80161a8 <tcpCheckSeqNum+0xbe>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	685a      	ldr	r2, [r3, #4]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016194:	68f9      	ldr	r1, [r7, #12]
 8016196:	f8b1 1096 	ldrh.w	r1, [r1, #150]	; 0x96
 801619a:	440b      	add	r3, r1
 801619c:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 801619e:	2b00      	cmp	r3, #0
 80161a0:	da02      	bge.n	80161a8 <tcpCheckSeqNum+0xbe>
      {
         acceptable = TRUE;
 80161a2:	2301      	movs	r3, #1
 80161a4:	617b      	str	r3, [r7, #20]
 80161a6:	e01e      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	685a      	ldr	r2, [r3, #4]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	441a      	add	r2, r3
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161b6:	1ad3      	subs	r3, r2, r3
 80161b8:	3b01      	subs	r3, #1
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	db11      	blt.n	80161e2 <tcpCheckSeqNum+0xf8>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	685a      	ldr	r2, [r3, #4]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	441a      	add	r2, r3
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161cc:	68f9      	ldr	r1, [r7, #12]
 80161ce:	f8b1 1096 	ldrh.w	r1, [r1, #150]	; 0x96
 80161d2:	440b      	add	r3, r1
 80161d4:	1ad3      	subs	r3, r2, r3
 80161d6:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 80161d8:	2b00      	cmp	r3, #0
 80161da:	da02      	bge.n	80161e2 <tcpCheckSeqNum+0xf8>
      {
         acceptable = TRUE;
 80161dc:	2301      	movs	r3, #1
 80161de:	617b      	str	r3, [r7, #20]
 80161e0:	e001      	b.n	80161e6 <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 80161e2:	2300      	movs	r3, #0
 80161e4:	617b      	str	r3, [r7, #20]
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d117      	bne.n	801621c <tcpCheckSeqNum+0x132>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment should
      //be sent in reply (unless the RST bit is set)
      if((segment->flags & TCP_FLAG_RST) == 0)
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	7b5b      	ldrb	r3, [r3, #13]
 80161f0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80161f4:	b2db      	uxtb	r3, r3
 80161f6:	f003 0304 	and.w	r3, r3, #4
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d10c      	bne.n	8016218 <tcpCheckSeqNum+0x12e>
      {
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016208:	2100      	movs	r1, #0
 801620a:	9101      	str	r1, [sp, #4]
 801620c:	2100      	movs	r1, #0
 801620e:	9100      	str	r1, [sp, #0]
 8016210:	2110      	movs	r1, #16
 8016212:	68f8      	ldr	r0, [r7, #12]
 8016214:	f7ff fb82 	bl	801591c <tcpSendSegment>
            0, FALSE);
      }

      //Return status code
      return ERROR_FAILURE;
 8016218:	2301      	movs	r3, #1
 801621a:	e000      	b.n	801621e <tcpCheckSeqNum+0x134>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 801621c:	2300      	movs	r3, #0
}
 801621e:	4618      	mov	r0, r3
 8016220:	3718      	adds	r7, #24
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 8016226:	b580      	push	{r7, lr}
 8016228:	b086      	sub	sp, #24
 801622a:	af02      	add	r7, sp, #8
 801622c:	60f8      	str	r0, [r7, #12]
 801622e:	60b9      	str	r1, [r7, #8]
 8016230:	607a      	str	r2, [r7, #4]
   //Check whether the SYN bit is set
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	7b5b      	ldrb	r3, [r3, #13]
 8016236:	f3c3 0305 	ubfx	r3, r3, #0, #6
 801623a:	b2db      	uxtb	r3, r3
 801623c:	f003 0302 	and.w	r3, r3, #2
 8016240:	2b00      	cmp	r3, #0
 8016242:	d01f      	beq.n	8016284 <tcpCheckSyn+0x5e>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if((segment->flags & TCP_FLAG_ACK) != 0)
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	7b5b      	ldrb	r3, [r3, #13]
 8016248:	f3c3 0305 	ubfx	r3, r3, #0, #6
 801624c:	b2db      	uxtb	r3, r3
 801624e:	f003 0310 	and.w	r3, r3, #16
 8016252:	2b00      	cmp	r3, #0
 8016254:	d006      	beq.n	8016264 <tcpCheckSyn+0x3e>
      {
         tcpSendResetSegment(socket, segment->ackNum);
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	689b      	ldr	r3, [r3, #8]
 801625a:	4619      	mov	r1, r3
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f7ff fd27 	bl	8015cb0 <tcpSendResetSegment>
 8016262:	e00d      	b.n	8016280 <tcpCheckSyn+0x5a>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	685a      	ldr	r2, [r3, #4]
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 801626c:	3301      	adds	r3, #1
 801626e:	2200      	movs	r2, #0
 8016270:	9201      	str	r2, [sp, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	9200      	str	r2, [sp, #0]
 8016276:	2200      	movs	r2, #0
 8016278:	2114      	movs	r1, #20
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f7ff fb4e 	bl	801591c <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 8016280:	2301      	movs	r3, #1
 8016282:	e000      	b.n	8016286 <tcpCheckSyn+0x60>
   }

   //No error to report
   return NO_ERROR;
 8016284:	2300      	movs	r3, #0
}
 8016286:	4618      	mov	r0, r3
 8016288:	3710      	adds	r7, #16
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}

0801628e <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 801628e:	b580      	push	{r7, lr}
 8016290:	b08c      	sub	sp, #48	; 0x30
 8016292:	af02      	add	r7, sp, #8
 8016294:	60f8      	str	r0, [r7, #12]
 8016296:	60b9      	str	r1, [r7, #8]
 8016298:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	7b5b      	ldrb	r3, [r3, #13]
 801629e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	f003 0310 	and.w	r3, r3, #16
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d101      	bne.n	80162b0 <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 80162ac:	2301      	movs	r3, #1
 80162ae:	e122      	b.n	80164f6 <tcpCheckAck+0x268>
      socket->keepAliveProbeCount = 0;
   }
#endif

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	689a      	ldr	r2, [r3, #8]
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162b8:	1ad3      	subs	r3, r2, r3
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	da01      	bge.n	80162c2 <tcpCheckAck+0x34>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 80162be:	2300      	movs	r3, #0
 80162c0:	e119      	b.n	80164f6 <tcpCheckAck+0x268>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	689a      	ldr	r2, [r3, #8]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	dd0e      	ble.n	80162ee <tcpCheckAck+0x60>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162da:	2100      	movs	r1, #0
 80162dc:	9101      	str	r1, [sp, #4]
 80162de:	2100      	movs	r1, #0
 80162e0:	9100      	str	r1, [sp, #0]
 80162e2:	2110      	movs	r1, #16
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f7ff fb19 	bl	801591c <tcpSendSegment>
         FALSE);

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 80162ea:	2301      	movs	r3, #1
 80162ec:	e103      	b.n	80164f6 <tcpCheckAck+0x268>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	68b9      	ldr	r1, [r7, #8]
 80162f2:	68f8      	ldr	r0, [r7, #12]
 80162f4:	f000 f96c 	bl	80165d0 <tcpIsDuplicateAck>
 80162f8:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 80162fa:	68b9      	ldr	r1, [r7, #8]
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f000 fc20 	bl	8016b42 <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801630a:	1ad3      	subs	r3, r2, r3
 801630c:	2b00      	cmp	r3, #0
 801630e:	dd77      	ble.n	8016400 <tcpCheckAck+0x172>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	689a      	ldr	r2, [r3, #8]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016324:	429a      	cmp	r2, r3
 8016326:	d102      	bne.n	801632e <tcpCheckAck+0xa0>
      {
         n--;
 8016328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632a:	3b01      	subs	r3, #1
 801632c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8016334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016336:	441a      	add	r2, r3
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	689a      	ldr	r2, [r3, #8]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	679a      	str	r2, [r3, #120]	; 0x78

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f000 fcdc 	bl	8016d04 <tcpComputeRto>
 801634c:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 801634e:	68f8      	ldr	r0, [r7, #12]
 8016350:	f000 fab5 	bl	80168be <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 801635a:	2b01      	cmp	r3, #1
 801635c:	d105      	bne.n	801636a <tcpCheckAck+0xdc>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 801635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016360:	68b9      	ldr	r1, [r7, #8]
 8016362:	68f8      	ldr	r0, [r7, #12]
 8016364:	f000 f99c 	bl	80166a0 <tcpFastRecovery>
 8016368:	e03c      	b.n	80163e4 <tcpCheckAck+0x156>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2200      	movs	r2, #0
 801636e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8016378:	2b02      	cmp	r3, #2
 801637a:	d103      	bne.n	8016384 <tcpCheckAck+0xf6>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 801637c:	68b9      	ldr	r1, [r7, #8]
 801637e:	68f8      	ldr	r0, [r7, #12]
 8016380:	f000 f9d5 	bl	801672e <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8016390:	429a      	cmp	r2, r3
 8016392:	d211      	bcs.n	80163b8 <tcpCheckAck+0x12a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80163a0:	4619      	mov	r1, r3
 80163a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a4:	428b      	cmp	r3, r1
 80163a6:	bf28      	it	cs
 80163a8:	460b      	movcs	r3, r1
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	4413      	add	r3, r2
 80163ae:	b29a      	uxth	r2, r3
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80163b6:	e015      	b.n	80163e4 <tcpCheckAck+0x156>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d012      	beq.n	80163e4 <tcpCheckAck+0x156>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80163ca:	4619      	mov	r1, r3
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80163d2:	428b      	cmp	r3, r1
 80163d4:	bf28      	it	cs
 80163d6:	460b      	movcs	r3, r1
 80163d8:	b29b      	uxth	r3, r3
 80163da:	4413      	add	r3, r2
 80163dc:	b29a      	uxth	r2, r3
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80163ea:	68fa      	ldr	r2, [r7, #12]
 80163ec:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 80163f0:	4293      	cmp	r3, r2
 80163f2:	bf28      	it	cs
 80163f4:	4613      	movcs	r3, r2
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80163fe:	e076      	b.n	80164ee <tcpCheckAck+0x260>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d007      	beq.n	8016416 <tcpCheckAck+0x188>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801640c:	1c5a      	adds	r2, r3, #1
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8016414:	e003      	b.n	801641e <tcpCheckAck+0x190>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2200      	movs	r2, #0
 801641a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d142      	bne.n	80164ae <tcpCheckAck+0x220>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 8016428:	2303      	movs	r3, #3
 801642a:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016434:	1ad3      	subs	r3, r2, r3
 8016436:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801643e:	2b00      	cmp	r3, #0
 8016440:	d00a      	beq.n	8016458 <tcpCheckAck+0x1ca>
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8016448:	4619      	mov	r1, r3
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016452:	1ad3      	subs	r3, r2, r3
 8016454:	4299      	cmp	r1, r3
 8016456:	d817      	bhi.n	8016488 <tcpCheckAck+0x1fa>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801645e:	461a      	mov	r2, r3
 8016460:	4613      	mov	r3, r2
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	4413      	add	r3, r2
 8016466:	461a      	mov	r2, r3
 8016468:	69bb      	ldr	r3, [r7, #24]
 801646a:	4293      	cmp	r3, r2
 801646c:	d802      	bhi.n	8016474 <tcpCheckAck+0x1e6>
            {
               thresh = 1;
 801646e:	2301      	movs	r3, #1
 8016470:	623b      	str	r3, [r7, #32]
 8016472:	e009      	b.n	8016488 <tcpCheckAck+0x1fa>
            }
            else if(ownd <= (4 * socket->smss))
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801647a:	009b      	lsls	r3, r3, #2
 801647c:	461a      	mov	r2, r3
 801647e:	69bb      	ldr	r3, [r7, #24]
 8016480:	4293      	cmp	r3, r2
 8016482:	d801      	bhi.n	8016488 <tcpCheckAck+0x1fa>
            {
               thresh = 2;
 8016484:	2302      	movs	r3, #2
 8016486:	623b      	str	r3, [r7, #32]
            {
            }
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801648e:	6a3a      	ldr	r2, [r7, #32]
 8016490:	429a      	cmp	r2, r3
 8016492:	d81f      	bhi.n	80164d4 <tcpCheckAck+0x246>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	689a      	ldr	r2, [r3, #8]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	3b01      	subs	r3, #1
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	dd16      	ble.n	80164d4 <tcpCheckAck+0x246>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	f000 f8c2 	bl	8016630 <tcpFastRetransmit>
 80164ac:	e012      	b.n	80164d4 <tcpCheckAck+0x246>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d10d      	bne.n	80164d4 <tcpCheckAck+0x246>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00a      	beq.n	80164d4 <tcpCheckAck+0x246>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80164ca:	4413      	add	r3, r2
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80164da:	68fa      	ldr	r2, [r7, #12]
 80164dc:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 80164e0:	4293      	cmp	r3, r2
 80164e2:	bf28      	it	cs
 80164e4:	4613      	movcs	r3, r2
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f000 fe50 	bl	8017194 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3728      	adds	r7, #40	; 0x28
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b086      	sub	sp, #24
 8016502:	af00      	add	r7, sp, #0
 8016504:	60f8      	str	r0, [r7, #12]
 8016506:	60b9      	str	r1, [r7, #8]
 8016508:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 801650a:	2300      	movs	r3, #0
 801650c:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8016514:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 8016516:	e053      	b.n	80165c0 <tcpIsDuplicateSyn+0xc2>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	689b      	ldr	r3, [r3, #8]
 801651c:	2b04      	cmp	r3, #4
 801651e:	d11d      	bne.n	801655c <tcpIsDuplicateSyn+0x5e>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	6a1b      	ldr	r3, [r3, #32]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8016524:	2b04      	cmp	r3, #4
 8016526:	d119      	bne.n	801655c <tcpIsDuplicateSyn+0x5e>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 801652c:	2b0c      	cmp	r3, #12
 801652e:	d115      	bne.n	801655c <tcpIsDuplicateSyn+0x5e>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	68da      	ldr	r2, [r3, #12]
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	429a      	cmp	r2, r3
 801653a:	d13d      	bne.n	80165b8 <tcpIsDuplicateSyn+0xba>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 801653c:	693b      	ldr	r3, [r7, #16]
 801653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8016544:	429a      	cmp	r2, r3
 8016546:	d137      	bne.n	80165b8 <tcpIsDuplicateSyn+0xba>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 8016548:	693b      	ldr	r3, [r7, #16]
 801654a:	8b9a      	ldrh	r2, [r3, #28]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	881b      	ldrh	r3, [r3, #0]
 8016550:	b29b      	uxth	r3, r3
 8016552:	429a      	cmp	r2, r3
 8016554:	d130      	bne.n	80165b8 <tcpIsDuplicateSyn+0xba>
            {
               //Duplicate SYN
               flag = TRUE;
 8016556:	2301      	movs	r3, #1
 8016558:	617b      	str	r3, [r7, #20]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 801655a:	e02d      	b.n	80165b8 <tcpIsDuplicateSyn+0xba>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //IPv6 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv6Addr) &&
 801655c:	693b      	ldr	r3, [r7, #16]
 801655e:	689b      	ldr	r3, [r3, #8]
 8016560:	2b10      	cmp	r3, #16
 8016562:	d12a      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
         queueItem->destAddr.length == sizeof(Ipv6Addr) &&
 8016564:	693b      	ldr	r3, [r7, #16]
 8016566:	6a1b      	ldr	r3, [r3, #32]
      if(queueItem->srcAddr.length == sizeof(Ipv6Addr) &&
 8016568:	2b10      	cmp	r3, #16
 801656a:	d126      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
         pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv6Addr) &&
 8016570:	2b28      	cmp	r3, #40	; 0x28
 8016572:	d122      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
      {
         //Check source and destination addresses
         if(ipv6CompAddr(&queueItem->srcAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr) &&
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	f103 000c 	add.w	r0, r3, #12
 801657a:	68bb      	ldr	r3, [r7, #8]
 801657c:	3304      	adds	r3, #4
 801657e:	2210      	movs	r2, #16
 8016580:	4619      	mov	r1, r3
 8016582:	f007 f96f 	bl	801d864 <memcmp>
 8016586:	4603      	mov	r3, r0
 8016588:	2b00      	cmp	r3, #0
 801658a:	d116      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
            ipv6CompAddr(&queueItem->destAddr.ipv6Addr, &pseudoHeader->ipv6Data.destAddr))
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	3314      	adds	r3, #20
 8016596:	2210      	movs	r2, #16
 8016598:	4619      	mov	r1, r3
 801659a:	f007 f963 	bl	801d864 <memcmp>
 801659e:	4603      	mov	r3, r0
         if(ipv6CompAddr(&queueItem->srcAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr) &&
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d10a      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	8b9a      	ldrh	r2, [r3, #28]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	881b      	ldrh	r3, [r3, #0]
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d103      	bne.n	80165ba <tcpIsDuplicateSyn+0xbc>
            {
               //Duplicate SYN
               flag = TRUE;
 80165b2:	2301      	movs	r3, #1
 80165b4:	617b      	str	r3, [r7, #20]
 80165b6:	e000      	b.n	80165ba <tcpIsDuplicateSyn+0xbc>
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 80165b8:	bf00      	nop
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d1a8      	bne.n	8016518 <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 80165c6:	697b      	ldr	r3, [r7, #20]
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3718      	adds	r7, #24
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b087      	sub	sp, #28
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 80165dc:	2300      	movs	r3, #0
 80165de:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d01b      	beq.n	8016622 <tcpIsDuplicateAck+0x52>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d118      	bne.n	8016622 <tcpIsDuplicateAck+0x52>
      {
         //The SYN and FIN bits are both off
         if((segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)) == 0)
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	7b5b      	ldrb	r3, [r3, #13]
 80165f4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	f003 0303 	and.w	r3, r3, #3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10f      	bne.n	8016622 <tcpIsDuplicateAck+0x52>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	689a      	ldr	r2, [r3, #8]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801660a:	429a      	cmp	r2, r3
 801660c:	d109      	bne.n	8016622 <tcpIsDuplicateAck+0x52>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	89db      	ldrh	r3, [r3, #14]
 8016612:	b29a      	uxth	r2, r3
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 801661a:	429a      	cmp	r2, r3
 801661c:	d101      	bne.n	8016622 <tcpIsDuplicateAck+0x52>
               {
                  //Duplicate ACK
                  flag = TRUE;
 801661e:	2301      	movs	r3, #1
 8016620:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 8016622:	697b      	ldr	r3, [r7, #20]
}
 8016624:	4618      	mov	r0, r3
 8016626:	371c      	adds	r7, #28
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr

08016630 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint32_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801664a:	005b      	lsls	r3, r3, #1
 801664c:	461a      	mov	r2, r3
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	085b      	lsrs	r3, r3, #1
 8016652:	4293      	cmp	r3, r2
 8016654:	bf38      	it	cc
 8016656:	4613      	movcc	r3, r2
 8016658:	b29a      	uxth	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016664:	1e5a      	subs	r2, r3, #1
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 fbcf 	bl	8016e10 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801667e:	4619      	mov	r1, r3
 8016680:	0049      	lsls	r1, r1, #1
 8016682:	440b      	add	r3, r1
 8016684:	b29b      	uxth	r3, r3
 8016686:	4413      	add	r3, r2
 8016688:	b29a      	uxth	r2, r3
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
#endif
}
 8016698:	bf00      	nop
 801669a:	3710      	adds	r7, #16
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b084      	sub	sp, #16
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	689a      	ldr	r2, [r3, #8]
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	dd0a      	ble.n	80166d2 <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 80166d0:	e029      	b.n	8016726 <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f000 fb9c 	bl	8016e10 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80166de:	461a      	mov	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d209      	bcs.n	80166fa <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	1ad3      	subs	r3, r2, r3
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      if(n >= socket->smss)
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016700:	461a      	mov	r2, r3
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4293      	cmp	r3, r2
 8016706:	d30a      	bcc.n	801671e <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016714:	4413      	add	r3, r2
 8016716:	b29a      	uxth	r2, r3
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	2201      	movs	r2, #1
 8016722:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8016726:	bf00      	nop
 8016728:	3710      	adds	r7, #16
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	689a      	ldr	r2, [r3, #8]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	2b00      	cmp	r3, #0
 8016746:	dd04      	ble.n	8016752 <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2200      	movs	r2, #0
 801674c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 8016750:	e006      	b.n	8016760 <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 fb5c 	bl	8016e10 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2202      	movs	r2, #2
 801675c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b088      	sub	sp, #32
 801676c:	af02      	add	r7, sp, #8
 801676e:	60f8      	str	r0, [r7, #12]
 8016770:	60b9      	str	r1, [r7, #8]
 8016772:	607a      	str	r2, [r7, #4]
 8016774:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	685a      	ldr	r2, [r3, #4]
 8016780:	6a3b      	ldr	r3, [r7, #32]
 8016782:	4413      	add	r3, r2
 8016784:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 8016786:	697a      	ldr	r2, [r7, #20]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801678e:	1ad3      	subs	r3, r2, r3
 8016790:	2b00      	cmp	r3, #0
 8016792:	da0b      	bge.n	80167ac <tcpProcessSegmentData+0x44>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	1ad3      	subs	r3, r2, r3
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	4413      	add	r3, r2
 80167a2:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167aa:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 80167ac:	693a      	ldr	r2, [r7, #16]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167b4:	68f9      	ldr	r1, [r7, #12]
 80167b6:	f8b1 1096 	ldrh.w	r1, [r1, #150]	; 0x96
 80167ba:	440b      	add	r3, r1
 80167bc:	1ad3      	subs	r3, r2, r3
 80167be:	2b00      	cmp	r3, #0
 80167c0:	dd07      	ble.n	80167d2 <tcpProcessSegmentData+0x6a>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167c8:	68fa      	ldr	r2, [r7, #12]
 80167ca:	f8b2 2096 	ldrh.w	r2, [r2, #150]	; 0x96
 80167ce:	4413      	add	r3, r2
 80167d0:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 80167d2:	6979      	ldr	r1, [r7, #20]
 80167d4:	693a      	ldr	r2, [r7, #16]
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	1ad3      	subs	r3, r2, r3
 80167da:	9300      	str	r3, [sp, #0]
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f000 fed6 	bl	8017592 <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 80167e6:	f107 0210 	add.w	r2, r7, #16
 80167ea:	f107 0314 	add.w	r3, r7, #20
 80167ee:	4619      	mov	r1, r3
 80167f0:	68f8      	ldr	r0, [r7, #12]
 80167f2:	f000 f91a 	bl	8016a2a <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 80167f6:	697a      	ldr	r2, [r7, #20]
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167fe:	1ad3      	subs	r3, r2, r3
 8016800:	2b00      	cmp	r3, #0
 8016802:	dd0d      	ble.n	8016820 <tcpProcessSegmentData+0xb8>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801680e:	2100      	movs	r1, #0
 8016810:	9101      	str	r1, [sp, #4]
 8016812:	2100      	movs	r1, #0
 8016814:	9100      	str	r1, [sp, #0]
 8016816:	2110      	movs	r1, #16
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f7ff f87f 	bl	801591c <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 801681e:	e02f      	b.n	8016880 <tcpProcessSegmentData+0x118>
      length = rightEdge - leftEdge;
 8016820:	693a      	ldr	r2, [r7, #16]
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801682e:	6a3b      	ldr	r3, [r7, #32]
 8016830:	441a      	add	r2, r3
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      socket->rcvUser += length;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 801683e:	6a3b      	ldr	r3, [r7, #32]
 8016840:	b29b      	uxth	r3, r3
 8016842:	4413      	add	r3, r2
 8016844:	b29a      	uxth	r2, r3
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
      socket->rcvWnd -= length;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8016852:	6a3b      	ldr	r3, [r7, #32]
 8016854:	b29b      	uxth	r3, r3
 8016856:	1ad3      	subs	r3, r2, r3
 8016858:	b29a      	uxth	r2, r3
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801686a:	2100      	movs	r1, #0
 801686c:	9101      	str	r1, [sp, #4]
 801686e:	2100      	movs	r1, #0
 8016870:	9100      	str	r1, [sp, #0]
 8016872:	2110      	movs	r1, #16
 8016874:	68f8      	ldr	r0, [r7, #12]
 8016876:	f7ff f851 	bl	801591c <tcpSendSegment>
      tcpUpdateEvents(socket);
 801687a:	68f8      	ldr	r0, [r7, #12]
 801687c:	f000 fc8a 	bl	8017194 <tcpUpdateEvents>
}
 8016880:	bf00      	nop
 8016882:	3718      	adds	r7, #24
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f000 f88c 	bl	80169ae <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f000 f8ab 	bl	80169f2 <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	33c4      	adds	r3, #196	; 0xc4
 80168a0:	2100      	movs	r1, #0
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7fa f88d 	bl	80109c2 <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80168ae:	2100      	movs	r1, #0
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7fa f886 	bl	80109c2 <netBufferSetLength>
}
 80168b6:	bf00      	nop
 80168b8:	3708      	adds	r7, #8
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}

080168be <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 80168be:	b590      	push	{r4, r7, lr}
 80168c0:	b087      	sub	sp, #28
 80168c2:	af00      	add	r7, sp, #0
 80168c4:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 80168c6:	2300      	movs	r3, #0
 80168c8:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80168d0:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 80168d2:	e05a      	b.n	801698a <tcpUpdateRetransmitQueue+0xcc>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	3338      	adds	r3, #56	; 0x38
 80168d8:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	7b5b      	ldrb	r3, [r3, #13]
 80168de:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	f003 0302 	and.w	r3, r3, #2
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d002      	beq.n	80168f2 <tcpUpdateRetransmitQueue+0x34>
      {
         length = 1;
 80168ec:	2301      	movs	r3, #1
 80168ee:	617b      	str	r3, [r7, #20]
 80168f0:	e010      	b.n	8016914 <tcpUpdateRetransmitQueue+0x56>
      }
      else if(header->flags & TCP_FLAG_FIN)
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	7b5b      	ldrb	r3, [r3, #13]
 80168f6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	f003 0301 	and.w	r3, r3, #1
 8016900:	2b00      	cmp	r3, #0
 8016902:	d004      	beq.n	801690e <tcpUpdateRetransmitQueue+0x50>
      {
         length = queueItem->length + 1;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	685b      	ldr	r3, [r3, #4]
 8016908:	3301      	adds	r3, #1
 801690a:	617b      	str	r3, [r7, #20]
 801690c:	e002      	b.n	8016914 <tcpUpdateRetransmitQueue+0x56>
      }
      else
      {
         length = queueItem->length;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	617b      	str	r3, [r7, #20]
      }

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	4618      	mov	r0, r3
 801691e:	f7ea fae7 	bl	8000ef0 <swapInt32>
 8016922:	4602      	mov	r2, r0
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	4413      	add	r3, r2
 8016928:	1ae3      	subs	r3, r4, r3
 801692a:	2b00      	cmp	r3, #0
 801692c:	db28      	blt.n	8016980 <tcpUpdateRetransmitQueue+0xc2>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10c      	bne.n	801694e <tcpUpdateRetransmitQueue+0x90>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	681a      	ldr	r2, [r3, #0]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            //The item can now be safely deleted
            memPoolFree(queueItem);
 801693e:	68f8      	ldr	r0, [r7, #12]
 8016940:	f7f9 ffd0 	bl	80108e4 <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 801694a:	60fb      	str	r3, [r7, #12]
 801694c:	e009      	b.n	8016962 <tcpUpdateRetransmitQueue+0xa4>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	681a      	ldr	r2, [r3, #0]
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 8016956:	68f8      	ldr	r0, [r7, #12]
 8016958:	f7f9 ffc4 	bl	80108e4 <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f503 72e8 	add.w	r2, r3, #464	; 0x1d0
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801696e:	4619      	mov	r1, r3
 8016970:	4610      	mov	r0, r2
 8016972:	f7fa fe03 	bl	801157c <netStartTimer>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2200      	movs	r2, #0
 801697a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 801697e:	e004      	b.n	801698a <tcpUpdateRetransmitQueue+0xcc>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d1a1      	bne.n	80168d4 <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8016996:	2b00      	cmp	r3, #0
 8016998:	d105      	bne.n	80169a6 <tcpUpdateRetransmitQueue+0xe8>
      netStopTimer(&socket->retransmitTimer);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7fa fdff 	bl	80115a4 <netStopTimer>
}
 80169a6:	bf00      	nop
 80169a8:	371c      	adds	r7, #28
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd90      	pop	{r4, r7, pc}

080169ae <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80169bc:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 80169be:	e007      	b.n	80169d0 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 80169c6:	68f8      	ldr	r0, [r7, #12]
 80169c8:	f7f9 ff8c 	bl	80108e4 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d1f4      	bne.n	80169c0 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2200      	movs	r2, #0
 80169da:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

   //Turn off the retransmission timer
   netStopTimer(&socket->retransmitTimer);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7fa fddd 	bl	80115a4 <netStopTimer>
}
 80169ea:	bf00      	nop
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b084      	sub	sp, #16
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8016a00:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 8016a02:	e007      	b.n	8016a14 <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	f7f9 ff6a 	bl	80108e4 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1f4      	bne.n	8016a04 <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
}
 8016a22:	bf00      	nop
 8016a24:	3710      	adds	r7, #16
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}

08016a2a <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 8016a2a:	b580      	push	{r7, lr}
 8016a2c:	b086      	sub	sp, #24
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	60f8      	str	r0, [r7, #12]
 8016a32:	60b9      	str	r1, [r7, #8]
 8016a34:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 8016a3a:	e04e      	b.n	8016ada <tcpUpdateSackBlocks+0xb0>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681a      	ldr	r2, [r3, #0]
 8016a40:	68f9      	ldr	r1, [r7, #12]
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	3344      	adds	r3, #68	; 0x44
 8016a46:	00db      	lsls	r3, r3, #3
 8016a48:	440b      	add	r3, r1
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	1ad3      	subs	r3, r2, r3
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	db40      	blt.n	8016ad4 <tcpUpdateSackBlocks+0xaa>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	681a      	ldr	r2, [r3, #0]
 8016a56:	68f9      	ldr	r1, [r7, #12]
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	3344      	adds	r3, #68	; 0x44
 8016a5c:	00db      	lsls	r3, r3, #3
 8016a5e:	440b      	add	r3, r1
 8016a60:	689b      	ldr	r3, [r3, #8]
 8016a62:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	dc35      	bgt.n	8016ad4 <tcpUpdateSackBlocks+0xaa>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	3344      	adds	r3, #68	; 0x44
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	4413      	add	r3, r2
 8016a72:	685a      	ldr	r2, [r3, #4]
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	bf28      	it	cs
 8016a7c:	461a      	movcs	r2, r3
 8016a7e:	68bb      	ldr	r3, [r7, #8]
 8016a80:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	3344      	adds	r3, #68	; 0x44
 8016a88:	00db      	lsls	r3, r3, #3
 8016a8a:	4413      	add	r3, r2
 8016a8c:	689a      	ldr	r2, [r3, #8]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	bf38      	it	cc
 8016a96:	461a      	movcc	r2, r3
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	601a      	str	r2, [r3, #0]

         //Delete current block
         osMemmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	18d0      	adds	r0, r2, r3
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	18d1      	adds	r1, r2, r3
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	f1c3 0303 	rsb	r3, r3, #3
 8016abc:	00db      	lsls	r3, r3, #3
 8016abe:	461a      	mov	r2, r3
 8016ac0:	f006 feec 	bl	801d89c <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8016aca:	1e5a      	subs	r2, r3, #1
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8016ad2:	e002      	b.n	8016ada <tcpUpdateSackBlocks+0xb0>
      }
      else
      {
         //Point to the next block
         i++;
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8016ae0:	697a      	ldr	r2, [r7, #20]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d3aa      	bcc.n	8016a3c <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 8016ae6:	68bb      	ldr	r3, [r7, #8]
 8016ae8:	681a      	ldr	r2, [r3, #0]
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016af0:	1ad3      	subs	r3, r2, r3
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	dd21      	ble.n	8016b3a <tcpUpdateSackBlocks+0x110>
   {
      //Make room for the new non-contiguous block
      osMemmove(socket->sackBlock + 1, socket->sackBlock,
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8016afc:	f103 0008 	add.w	r0, r3, #8
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8016b06:	2218      	movs	r2, #24
 8016b08:	4619      	mov	r1, r3
 8016b0a:	f006 fec7 	bl	801d89c <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
      socket->sackBlock[0].rightEdge = *rightEdge;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8016b28:	2b03      	cmp	r3, #3
 8016b2a:	d806      	bhi.n	8016b3a <tcpUpdateSackBlocks+0x110>
         socket->sackBlockCount++;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8016b32:	1c5a      	adds	r2, r3, #1
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
   }
}
 8016b3a:	bf00      	nop
 8016b3c:	3718      	adds	r7, #24
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b082      	sub	sp, #8
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
 8016b4a:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	685a      	ldr	r2, [r3, #4]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d12c      	bne.n	8016bb4 <tcpUpdateSendWindow+0x72>
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	689a      	ldr	r2, [r3, #8]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d125      	bne.n	8016bb4 <tcpUpdateSendWindow+0x72>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	89db      	ldrh	r3, [r3, #14]
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d968      	bls.n	8016c4a <tcpUpdateSendWindow+0x108>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	89db      	ldrh	r3, [r3, #14]
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
         socket->sndWl1 = segment->seqNum;
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	685a      	ldr	r2, [r3, #4]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         socket->sndWl2 = segment->ackNum;
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	689a      	ldr	r2, [r3, #8]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	89db      	ldrh	r3, [r3, #14]
 8016b9c:	b29a      	uxth	r2, r3
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	bf38      	it	cc
 8016ba8:	4613      	movcc	r3, r2
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      if(segment->window > socket->sndWnd)
 8016bb2:	e04a      	b.n	8016c4a <tcpUpdateSendWindow+0x108>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	685a      	ldr	r2, [r3, #4]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bbe:	1ad3      	subs	r3, r2, r3
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	db42      	blt.n	8016c4a <tcpUpdateSendWindow+0x108>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	689a      	ldr	r2, [r3, #8]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bce:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	db3a      	blt.n	8016c4a <tcpUpdateSendWindow+0x108>
   {
      //Check whether the remote host advertises a zero window
      if(segment->window == 0 && socket->sndWnd != 0)
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	89db      	ldrh	r3, [r3, #14]
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d117      	bne.n	8016c0e <tcpUpdateSendWindow+0xcc>
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d012      	beq.n	8016c0e <tcpUpdateSendWindow+0xcc>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2200      	movs	r2, #0
 8016bec:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016bf6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
         netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8016c06:	4619      	mov	r1, r3
 8016c08:	4610      	mov	r0, r2
 8016c0a:	f7fa fcb7 	bl	801157c <netStartTimer>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	89db      	ldrh	r3, [r3, #14]
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
      socket->sndWl1 = segment->seqNum;
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	685a      	ldr	r2, [r3, #4]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      socket->sndWl2 = segment->ackNum;
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	689a      	ldr	r2, [r3, #8]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	89db      	ldrh	r3, [r3, #14]
 8016c32:	b29a      	uxth	r2, r3
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	bf38      	it	cc
 8016c3e:	4613      	movcc	r3, r2
 8016c40:	b29a      	uxth	r2, r3
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   }
}
 8016c48:	e7ff      	b.n	8016c4a <tcpUpdateSendWindow+0x108>
 8016c4a:	bf00      	nop
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <tcpUpdateReceiveWindow>:
 * @brief Update receive window so as to avoid Silly Window Syndrome
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateReceiveWindow(Socket *socket)
{
 8016c52:	b580      	push	{r7, lr}
 8016c54:	b086      	sub	sp, #24
 8016c56:	af02      	add	r7, sp, #8
 8016c58:	6078      	str	r0, [r7, #4]
   uint16_t reduction;

   //Space available but not yet advertised
   reduction = socket->rxBufferSize - socket->rcvUser - socket->rcvWnd;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8016c60:	b29a      	uxth	r2, r3
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8016c68:	1ad3      	subs	r3, r2, r3
 8016c6a:	b29a      	uxth	r2, r3
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	81fb      	strh	r3, [r7, #14]

   //To avoid SWS, the receiver should not advertise small windows
   if((socket->rcvWnd + reduction) >= MIN(socket->rmss, socket->rxBufferSize / 2))
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8016c7c:	461a      	mov	r2, r3
 8016c7e:	89fb      	ldrh	r3, [r7, #14]
 8016c80:	4413      	add	r3, r2
 8016c82:	4619      	mov	r1, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8016c8a:	085b      	lsrs	r3, r3, #1
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
 8016c92:	4293      	cmp	r3, r2
 8016c94:	bf28      	it	cs
 8016c96:	4613      	movcs	r3, r2
 8016c98:	4299      	cmp	r1, r3
 8016c9a:	d32f      	bcc.n	8016cfc <tcpUpdateReceiveWindow+0xaa>
   {
      //Check whether a window update should be sent
      if(socket->rcvWnd < MIN(socket->rmss, socket->rxBufferSize / 2))
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8016caa:	085b      	lsrs	r3, r3, #1
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	bf28      	it	cs
 8016cb6:	4613      	movcs	r3, r2
 8016cb8:	4299      	cmp	r1, r3
 8016cba:	d216      	bcs.n	8016cea <tcpUpdateReceiveWindow+0x98>
         //Debug message
         TRACE_INFO("%s: TCP sending window update...\r\n",
            formatSystemTime(osGetSystemTime(), NULL));

         //Update the receive window
         socket->rcvWnd += reduction;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8016cc2:	89fb      	ldrh	r3, [r7, #14]
 8016cc4:	4413      	add	r3, r2
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
         //Send an ACK segment to advertise the new window size
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cd8:	2100      	movs	r1, #0
 8016cda:	9101      	str	r1, [sp, #4]
 8016cdc:	2100      	movs	r1, #0
 8016cde:	9100      	str	r1, [sp, #0]
 8016ce0:	2110      	movs	r1, #16
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f7fe fe1a 	bl	801591c <tcpSendSegment>
      {
         //The receive window can be updated
         socket->rcvWnd += reduction;
      }
   }
}
 8016ce8:	e008      	b.n	8016cfc <tcpUpdateReceiveWindow+0xaa>
         socket->rcvWnd += reduction;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8016cf0:	89fb      	ldrh	r3, [r7, #14]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
}
 8016cfc:	bf00      	nop
 8016cfe:	3710      	adds	r7, #16
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b086      	sub	sp, #24
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d075      	beq.n	8016e06 <tcpComputeRto+0x102>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016d24:	1ad3      	subs	r3, r2, r3
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	dd6d      	ble.n	8016e06 <tcpComputeRto+0x102>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 8016d2a:	f7ea fab9 	bl	80012a0 <osGetSystemTime>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d36:	1ad3      	subs	r3, r2, r3
 8016d38:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(socket->srtt == 0 && socket->rttvar == 0)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d10e      	bne.n	8016d62 <tcpComputeRto+0x5e>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d109      	bne.n	8016d62 <tcpComputeRto+0x5e>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	693a      	ldr	r2, [r7, #16]
 8016d52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            socket->rttvar = r / 2;
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	085a      	lsrs	r2, r3, #1
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8016d60:	e029      	b.n	8016db6 <tcpComputeRto+0xb2>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016d68:	693a      	ldr	r2, [r7, #16]
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d905      	bls.n	8016d7a <tcpComputeRto+0x76>
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016d74:	693a      	ldr	r2, [r7, #16]
 8016d76:	1ad3      	subs	r3, r2, r3
 8016d78:	e004      	b.n	8016d84 <tcpComputeRto+0x80>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	1ad3      	subs	r3, r2, r3
 8016d84:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	005b      	lsls	r3, r3, #1
 8016d90:	441a      	add	r2, r3
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	4413      	add	r3, r2
 8016d96:	089a      	lsrs	r2, r3, #2
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            socket->srtt = (7 * socket->srtt + r) / 8;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8016da4:	4613      	mov	r3, r2
 8016da6:	00db      	lsls	r3, r3, #3
 8016da8:	1a9a      	subs	r2, r3, r2
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	4413      	add	r3, r2
 8016dae:	08da      	lsrs	r2, r3, #3
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	441a      	add	r2, r3
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016dd6:	bf38      	it	cc
 8016dd8:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 8016ddc:	461a      	mov	r2, r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016dea:	f64e 2260 	movw	r2, #60000	; 0xea60
 8016dee:	429a      	cmp	r2, r3
 8016df0:	bf28      	it	cs
 8016df2:	461a      	movcs	r2, r3
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         //Set flag
         flag = TRUE;
 8016e02:	2301      	movs	r3, #1
 8016e04:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 8016e06:	697b      	ldr	r3, [r7, #20]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3718      	adds	r7, #24
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 8016e10:	b5b0      	push	{r4, r5, r7, lr}
 8016e12:	b090      	sub	sp, #64	; 0x40
 8016e14:	af02      	add	r7, sp, #8
 8016e16:	6078      	str	r0, [r7, #4]
   TcpQueueItem *queueItem;
   TcpHeader *header;
   NetTxAncillary ancillary;

   //Initialize error code
   error = NO_ERROR;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	86fb      	strh	r3, [r7, #54]	; 0x36
   //Total number of bytes that have been retransmitted
   length = 0;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	633b      	str	r3, [r7, #48]	; 0x30

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8016e26:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 8016e28:	e072      	b.n	8016f10 <tcpRetransmitSegment+0x100>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 8016e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e30:	4413      	add	r3, r2
 8016e32:	633b      	str	r3, [r7, #48]	; 0x30

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3e:	4293      	cmp	r3, r2
 8016e40:	d902      	bls.n	8016e48 <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8016e42:	2300      	movs	r3, #0
 8016e44:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 8016e46:	e068      	b.n	8016f1a <tcpRetransmitSegment+0x10a>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8016e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4a:	3338      	adds	r3, #56	; 0x38
 8016e4c:	62bb      	str	r3, [r7, #40]	; 0x28

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8016e4e:	f107 0320 	add.w	r3, r7, #32
 8016e52:	4619      	mov	r1, r3
 8016e54:	2000      	movs	r0, #0
 8016e56:	f7f1 fe0e 	bl	8008a76 <ipAllocBuffer>
 8016e5a:	6278      	str	r0, [r7, #36]	; 0x24
      //Failed to allocate memory?
      if(buffer == NULL)
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d102      	bne.n	8016e68 <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8016e62:	2364      	movs	r3, #100	; 0x64
 8016e64:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 8016e66:	e058      	b.n	8016f1a <tcpRetransmitSegment+0x10a>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 8016e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e6a:	7b1b      	ldrb	r3, [r3, #12]
 8016e6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	461a      	mov	r2, r3
 8016e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e7a:	f7f9 ffe0 	bl	8010e3e <netBufferAppend>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Any error to report?
         if(error)
 8016e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d137      	bne.n	8016ef8 <tcpRetransmitSegment+0xe8>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 8016e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7ea f82f 	bl	8000ef0 <swapInt32>
 8016e92:	4601      	mov	r1, r0
 8016e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fb2b 	bl	80174f6 <tcpReadTxBuffer>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	86fb      	strh	r3, [r7, #54]	; 0x36
            queueItem->length);
         //Any error to report?
         if(error)
 8016ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d128      	bne.n	8016efc <tcpRetransmitSegment+0xec>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	6859      	ldr	r1, [r3, #4]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eb8:	f000 fc06 	bl	80176c8 <tcpDumpHeader>

         //Additional options can be passed to the stack along with the packet
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8016ebc:	4b19      	ldr	r3, [pc, #100]	; (8016f24 <tcpRetransmitSegment+0x114>)
 8016ebe:	f107 0408 	add.w	r4, r7, #8
 8016ec2:	461d      	mov	r5, r3
 8016ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ec8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016ecc:	e884 0003 	stmia.w	r4, {r0, r1}
         //Set the TTL value to be used
         ancillary.ttl = socket->ttl;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ed6:	723b      	strb	r3, [r7, #8]
         ancillary.vmanPcp = socket->vmanPcp;
         ancillary.vmanDei = socket->vmanDei;
#endif
         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	68d8      	ldr	r0, [r3, #12]
 8016edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ede:	f103 010c 	add.w	r1, r3, #12
 8016ee2:	6a3a      	ldr	r2, [r7, #32]
 8016ee4:	f107 0308 	add.w	r3, r7, #8
 8016ee8:	9300      	str	r3, [sp, #0]
 8016eea:	4613      	mov	r3, r2
 8016eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016eee:	f7f1 fc39 	bl	8008764 <ipSendDatagram>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8016ef6:	e002      	b.n	8016efe <tcpRetransmitSegment+0xee>
            break;
 8016ef8:	bf00      	nop
 8016efa:	e000      	b.n	8016efe <tcpRetransmitSegment+0xee>
            break;
 8016efc:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 8016efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f00:	f7f9 fd2e 	bl	8010960 <netBufferFree>

      //Any error to report?
      if(error)
 8016f04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d106      	bne.n	8016f18 <tcpRetransmitSegment+0x108>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8016f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   while(queueItem != NULL)
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d189      	bne.n	8016e2a <tcpRetransmitSegment+0x1a>
 8016f16:	e000      	b.n	8016f1a <tcpRetransmitSegment+0x10a>
         break;
 8016f18:	bf00      	nop
   }

   //Return status code
   return error;
 8016f1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3738      	adds	r7, #56	; 0x38
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bdb0      	pop	{r4, r5, r7, pc}
 8016f24:	08025288 	.word	0x08025288

08016f28 <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b088      	sub	sp, #32
 8016f2c:	af02      	add	r7, sp, #8
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
   uint32_t n;
   uint32_t u;

   //The amount of data that can be sent at any given time is
   //limited by the receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	bf28      	it	cs
 8016f42:	4613      	movcs	r3, r2
 8016f44:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	4293      	cmp	r3, r2
 8016f52:	bf28      	it	cs
 8016f54:	4613      	movcs	r3, r2
 8016f56:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016f60:	1ad3      	subs	r3, r2, r3
 8016f62:	693a      	ldr	r2, [r7, #16]
 8016f64:	4413      	add	r3, r2
 8016f66:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when
   //the data to be sent increases in small increments
   while(socket->sndUser > 0)
 8016f68:	e0d8      	b.n	801711c <tcpNagleAlgo+0x1f4>
   {
      //The usable window size may become zero or negative,
      //preventing packet transmission
      if((int32_t) u <= 0)
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	f340 80dc 	ble.w	801712a <tcpNagleAlgo+0x202>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8016f78:	461a      	mov	r2, r3
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	bf28      	it	cs
 8016f80:	4613      	movcs	r3, r2
 8016f82:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	bf28      	it	cs
 8016f92:	4613      	movcs	r3, r2
 8016f94:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if((flags & SOCKET_FLAG_NO_DELAY) != 0)
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d019      	beq.n	8016fd4 <tcpNagleAlgo+0xac>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	f000 80c3 	beq.w	801712e <tcpNagleAlgo+0x206>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	9300      	str	r3, [sp, #0]
 8016fba:	460b      	mov	r3, r1
 8016fbc:	2118      	movs	r1, #24
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f7fe fcac 	bl	801591c <tcpSendSegment>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8016fc8:	89fb      	ldrh	r3, [r7, #14]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f000 8092 	beq.w	80170f4 <tcpNagleAlgo+0x1cc>
               return error;
 8016fd0:	89fb      	ldrh	r3, [r7, #14]
 8016fd2:	e0b5      	b.n	8017140 <tcpNagleAlgo+0x218>
         {
            //We are done...
            break;
         }
      }
      else if((flags & SOCKET_FLAG_DELAY) != 0)
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d022      	beq.n	8017024 <tcpNagleAlgo+0xfc>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	bf28      	it	cs
 8016fec:	4613      	movcs	r3, r2
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	f0c0 809c 	bcc.w	8017132 <tcpNagleAlgo+0x20a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8017004:	2301      	movs	r3, #1
 8017006:	9301      	str	r3, [sp, #4]
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	9300      	str	r3, [sp, #0]
 801700c:	460b      	mov	r3, r1
 801700e:	2118      	movs	r1, #24
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7fe fc83 	bl	801591c <tcpSendSegment>
 8017016:	4603      	mov	r3, r0
 8017018:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 801701a:	89fb      	ldrh	r3, [r7, #14]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d069      	beq.n	80170f4 <tcpNagleAlgo+0x1cc>
               return error;
 8017020:	89fb      	ldrh	r3, [r7, #14]
 8017022:	e08d      	b.n	8017140 <tcpNagleAlgo+0x218>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801702a:	461a      	mov	r2, r3
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	4293      	cmp	r3, r2
 8017030:	bf28      	it	cs
 8017032:	4613      	movcs	r3, r2
 8017034:	687a      	ldr	r2, [r7, #4]
 8017036:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 801703a:	4293      	cmp	r3, r2
 801703c:	d314      	bcc.n	8017068 <tcpNagleAlgo+0x140>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8017048:	2301      	movs	r3, #1
 801704a:	9301      	str	r3, [sp, #4]
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	9300      	str	r3, [sp, #0]
 8017050:	460b      	mov	r3, r1
 8017052:	2118      	movs	r1, #24
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f7fe fc61 	bl	801591c <tcpSendSegment>
 801705a:	4603      	mov	r3, r0
 801705c:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 801705e:	89fb      	ldrh	r3, [r7, #14]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d047      	beq.n	80170f4 <tcpNagleAlgo+0x1cc>
               return error;
 8017064:	89fb      	ldrh	r3, [r7, #14]
 8017066:	e06b      	b.n	8017140 <tcpNagleAlgo+0x218>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017070:	429a      	cmp	r2, r3
 8017072:	d11b      	bne.n	80170ac <tcpNagleAlgo+0x184>
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801707a:	461a      	mov	r2, r3
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	4293      	cmp	r3, r2
 8017080:	d314      	bcc.n	80170ac <tcpNagleAlgo+0x184>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801708c:	2301      	movs	r3, #1
 801708e:	9301      	str	r3, [sp, #4]
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	460b      	mov	r3, r1
 8017096:	2118      	movs	r1, #24
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7fe fc3f 	bl	801591c <tcpSendSegment>
 801709e:	4603      	mov	r3, r0
 80170a0:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80170a2:	89fb      	ldrh	r3, [r7, #14]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d025      	beq.n	80170f4 <tcpNagleAlgo+0x1cc>
               return error;
 80170a8:	89fb      	ldrh	r3, [r7, #14]
 80170aa:	e049      	b.n	8017140 <tcpNagleAlgo+0x218>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80170b2:	461a      	mov	r2, r3
 80170b4:	697b      	ldr	r3, [r7, #20]
 80170b6:	4293      	cmp	r3, r2
 80170b8:	bf28      	it	cs
 80170ba:	4613      	movcs	r3, r2
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80170c2:	0852      	lsrs	r2, r2, #1
 80170c4:	b292      	uxth	r2, r2
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d335      	bcc.n	8017136 <tcpNagleAlgo+0x20e>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80170d4:	2301      	movs	r3, #1
 80170d6:	9301      	str	r3, [sp, #4]
 80170d8:	693b      	ldr	r3, [r7, #16]
 80170da:	9300      	str	r3, [sp, #0]
 80170dc:	460b      	mov	r3, r1
 80170de:	2118      	movs	r1, #24
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f7fe fc1b 	bl	801591c <tcpSendSegment>
 80170e6:	4603      	mov	r3, r0
 80170e8:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80170ea:	89fb      	ldrh	r3, [r7, #14]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <tcpNagleAlgo+0x1cc>
               return error;
 80170f0:	89fb      	ldrh	r3, [r7, #14]
 80170f2:	e025      	b.n	8017140 <tcpNagleAlgo+0x218>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80170f8:	693b      	ldr	r3, [r7, #16]
 80170fa:	441a      	add	r2, r3
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	67da      	str	r2, [r3, #124]	; 0x7c
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	b29b      	uxth	r3, r3
 801710a:	1ad3      	subs	r3, r2, r3
 801710c:	b29a      	uxth	r2, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
      //Update the size of the usable window
      u -= n;
 8017114:	697a      	ldr	r2, [r7, #20]
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	1ad3      	subs	r3, r2, r3
 801711a:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8017122:	2b00      	cmp	r3, #0
 8017124:	f47f af21 	bne.w	8016f6a <tcpNagleAlgo+0x42>
 8017128:	e006      	b.n	8017138 <tcpNagleAlgo+0x210>
         break;
 801712a:	bf00      	nop
 801712c:	e004      	b.n	8017138 <tcpNagleAlgo+0x210>
            break;
 801712e:	bf00      	nop
 8017130:	e002      	b.n	8017138 <tcpNagleAlgo+0x210>
            break;
 8017132:	bf00      	nop
 8017134:	e000      	b.n	8017138 <tcpNagleAlgo+0x210>
            break;
 8017136:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f000 f82b 	bl	8017194 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 801713e:	2300      	movs	r3, #0
}
 8017140:	4618      	mov	r0, r3
 8017142:	3718      	adds	r7, #24
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}

08017148 <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	460b      	mov	r3, r1
 8017152:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8017154:	78fb      	ldrb	r3, [r7, #3]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d110      	bne.n	801717c <tcpChangeState+0x34>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017160:	2b06      	cmp	r3, #6
 8017162:	d004      	beq.n	801716e <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
      if(socket->state == TCP_STATE_LAST_ACK ||
 801716a:	2b0a      	cmp	r3, #10
 801716c:	d103      	bne.n	8017176 <tcpChangeState+0x2e>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	2201      	movs	r2, #1
 8017172:	665a      	str	r2, [r3, #100]	; 0x64
 8017174:	e002      	b.n	801717c <tcpChangeState+0x34>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2201      	movs	r2, #1
 801717a:	669a      	str	r2, [r3, #104]	; 0x68
      }
   }

   //Enter the desired state
   socket->state = newState;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	78fa      	ldrb	r2, [r7, #3]
 8017180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   //Update TCP related events
   tcpUpdateEvents(socket);
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f000 f805 	bl	8017194 <tcpUpdateEvents>
}
 801718a:	bf00      	nop
 801718c:	3708      	adds	r7, #8
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
	...

08017194 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2200      	movs	r2, #0
 80171a0:	655a      	str	r2, [r3, #84]	; 0x54

   //Check current TCP state
   switch(socket->state)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80171a8:	2b0a      	cmp	r3, #10
 80171aa:	d84d      	bhi.n	8017248 <tcpUpdateEvents+0xb4>
 80171ac:	a201      	add	r2, pc, #4	; (adr r2, 80171b4 <tcpUpdateEvents+0x20>)
 80171ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171b2:	bf00      	nop
 80171b4:	08017223 	.word	0x08017223
 80171b8:	08017249 	.word	0x08017249
 80171bc:	08017249 	.word	0x08017249
 80171c0:	08017249 	.word	0x08017249
 80171c4:	080171e1 	.word	0x080171e1
 80171c8:	08017209 	.word	0x08017209
 80171cc:	08017209 	.word	0x08017209
 80171d0:	080171e1 	.word	0x080171e1
 80171d4:	080171ef 	.word	0x080171ef
 80171d8:	08017209 	.word	0x08017209
 80171dc:	08017223 	.word	0x08017223
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171e4:	f043 0202 	orr.w	r2, r3, #2
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80171ec:	e02d      	b.n	801724a <tcpUpdateEvents+0xb6>

   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171f2:	f043 0202 	orr.w	r2, r3, #2
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017206:	e020      	b.n	801724a <tcpUpdateEvents+0xb6>

   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801720c:	f043 0202 	orr.w	r2, r3, #2
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017220:	e013      	b.n	801724a <tcpUpdateEvents+0xb6>

   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017226:	f043 0204 	orr.w	r2, r3, #4
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801723e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017246:	e000      	b.n	801724a <tcpUpdateEvents+0xb6>

   //Any other state
   default:
      break;
 8017248:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017250:	2b02      	cmp	r3, #2
 8017252:	d004      	beq.n	801725e <tcpUpdateEvents+0xca>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   if(socket->state == TCP_STATE_SYN_SENT ||
 801725a:	2b03      	cmp	r3, #3
 801725c:	d10c      	bne.n	8017278 <tcpUpdateEvents+0xe4>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017262:	f043 0210 	orr.w	r2, r3, #16
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801726e:	f043 0220 	orr.w	r2, r3, #32
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	655a      	str	r2, [r3, #84]	; 0x54
 8017276:	e050      	b.n	801731a <tcpUpdateEvents+0x186>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801727e:	2b04      	cmp	r3, #4
 8017280:	d004      	beq.n	801728c <tcpUpdateEvents+0xf8>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8017288:	2b05      	cmp	r3, #5
 801728a:	d12d      	bne.n	80172e8 <tcpUpdateEvents+0x154>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8017292:	461a      	mov	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017298:	441a      	add	r2, r3
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801729e:	1ad2      	subs	r2, r2, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d205      	bcs.n	80172b6 <tcpUpdateEvents+0x122>
      {
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172ae:	f043 0208 	orr.w	r2, r3, #8
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      //Check whether all the data in the send buffer has been transmitted
      if(socket->sndUser == 0)
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d12b      	bne.n	8017318 <tcpUpdateEvents+0x184>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172c4:	f043 0210 	orr.w	r2, r3, #16
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	655a      	str	r2, [r3, #84]	; 0x54

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80172d4:	1ad3      	subs	r3, r2, r3
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	db1e      	blt.n	8017318 <tcpUpdateEvents+0x184>
         {
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172de:	f043 0220 	orr.w	r2, r3, #32
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	655a      	str	r2, [r3, #84]	; 0x54
      if(socket->sndUser == 0)
 80172e6:	e017      	b.n	8017318 <tcpUpdateEvents+0x184>
         }
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80172ee:	2b01      	cmp	r3, #1
 80172f0:	d013      	beq.n	801731a <tcpUpdateEvents+0x186>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172f6:	f043 0208 	orr.w	r2, r3, #8
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017302:	f043 0210 	orr.w	r2, r3, #16
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	655a      	str	r2, [r3, #84]	; 0x54
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801730e:	f043 0220 	orr.w	r2, r3, #32
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	655a      	str	r2, [r3, #84]	; 0x54
 8017316:	e000      	b.n	801731a <tcpUpdateEvents+0x186>
      if(socket->sndUser == 0)
 8017318:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017320:	2b04      	cmp	r3, #4
 8017322:	d009      	beq.n	8017338 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 801732a:	2b07      	cmp	r3, #7
 801732c:	d004      	beq.n	8017338 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_2)
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8017334:	2b08      	cmp	r3, #8
 8017336:	d10b      	bne.n	8017350 <tcpUpdateEvents+0x1bc>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 801733e:	2b00      	cmp	r3, #0
 8017340:	d02d      	beq.n	801739e <tcpUpdateEvents+0x20a>
      {
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017346:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	655a      	str	r2, [r3, #84]	; 0x54
      if(socket->rcvUser > 0)
 801734e:	e026      	b.n	801739e <tcpUpdateEvents+0x20a>
      }
   }
   else if(socket->state == TCP_STATE_LISTEN)
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017356:	2b01      	cmp	r3, #1
 8017358:	d111      	bne.n	801737e <tcpUpdateEvents+0x1ea>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8017360:	2b00      	cmp	r3, #0
 8017362:	d01c      	beq.n	801739e <tcpUpdateEvents+0x20a>
      {
         socket->eventFlags |= SOCKET_EVENT_ACCEPT;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017368:	f043 0201 	orr.w	r2, r3, #1
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	655a      	str	r2, [r3, #84]	; 0x54
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	655a      	str	r2, [r3, #84]	; 0x54
 801737c:	e00f      	b.n	801739e <tcpUpdateEvents+0x20a>
      }
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017384:	2b02      	cmp	r3, #2
 8017386:	d00a      	beq.n	801739e <tcpUpdateEvents+0x20a>
      socket->state != TCP_STATE_SYN_RECEIVED)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   else if(socket->state != TCP_STATE_SYN_SENT &&
 801738e:	2b03      	cmp	r3, #3
 8017390:	d005      	beq.n	801739e <tcpUpdateEvents+0x20a>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017396:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	655a      	str	r2, [r3, #84]	; 0x54
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d011      	beq.n	80173ca <tcpUpdateEvents+0x236>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	68db      	ldr	r3, [r3, #12]
 80173aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d006      	beq.n	80173be <tcpUpdateEvents+0x22a>
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	655a      	str	r2, [r3, #84]	; 0x54
 80173bc:	e005      	b.n	80173ca <tcpUpdateEvents+0x236>
      }
      else
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	655a      	str	r2, [r3, #84]	; 0x54
      }
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173d2:	401a      	ands	r2, r3
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	655a      	str	r2, [r3, #84]	; 0x54

   //Any event to signal?
   if(socket->eventFlags)
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d00d      	beq.n	80173fc <tcpUpdateEvents+0x268>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	334c      	adds	r3, #76	; 0x4c
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7e9 fe96 	bl	8001116 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d004      	beq.n	80173fc <tcpUpdateEvents+0x268>
      {
         osSetEvent(socket->userEvent);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7e9 fe8d 	bl	8001116 <osSetEvent>
      }
   }
}
 80173fc:	bf00      	nop
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <tcpWaitForEvents>:
 * @param[in] timeout Maximum time to wait
 * @return Logic OR of all the TCP events that satisfied the wait
 **/

uint_t tcpWaitForEvents(Socket *socket, uint_t eventMask, systime_t timeout)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b084      	sub	sp, #16
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
   //Sanity check
   if(socket == NULL)
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d101      	bne.n	801741a <tcpWaitForEvents+0x16>
      return 0;
 8017416:	2300      	movs	r3, #0
 8017418:	e01c      	b.n	8017454 <tcpWaitForEvents+0x50>

   //Only one of the events listed here may complete the wait
   socket->eventMask = eventMask;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	68ba      	ldr	r2, [r7, #8]
 801741e:	651a      	str	r2, [r3, #80]	; 0x50
   //Update TCP related events
   tcpUpdateEvents(socket);
 8017420:	68f8      	ldr	r0, [r7, #12]
 8017422:	f7ff feb7 	bl	8017194 <tcpUpdateEvents>

   //No event is signaled?
   if(socket->eventFlags == 0)
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801742a:	2b00      	cmp	r3, #0
 801742c:	d110      	bne.n	8017450 <tcpWaitForEvents+0x4c>
   {
      //Reset the event object
      osResetEvent(&socket->event);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	334c      	adds	r3, #76	; 0x4c
 8017432:	4618      	mov	r0, r3
 8017434:	f7e9 fe7e 	bl	8001134 <osResetEvent>

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8017438:	4808      	ldr	r0, [pc, #32]	; (801745c <tcpWaitForEvents+0x58>)
 801743a:	f7e9 ff22 	bl	8001282 <osReleaseMutex>
      //Wait until an event is triggered
      osWaitForEvent(&socket->event, timeout);
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	334c      	adds	r3, #76	; 0x4c
 8017442:	6879      	ldr	r1, [r7, #4]
 8017444:	4618      	mov	r0, r3
 8017446:	f7e9 fe83 	bl	8001150 <osWaitForEvent>
      //Get exclusive access
      osAcquireMutex(&netMutex);
 801744a:	4804      	ldr	r0, [pc, #16]	; (801745c <tcpWaitForEvents+0x58>)
 801744c:	f7e9 ff0a 	bl	8001264 <osAcquireMutex>
   }

   //Return the list of TCP events that satisfied the wait
   return socket->eventFlags;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8017454:	4618      	mov	r0, r3
 8017456:	3710      	adds	r7, #16
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	200046f4 	.word	0x200046f4

08017460 <tcpWriteTxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteTxBuffer(Socket *socket, uint32_t seqNum,
   const uint8_t *data, size_t length)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b086      	sub	sp, #24
 8017464:	af00      	add	r7, sp, #0
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	607a      	str	r2, [r7, #4]
 801746c:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017472:	68ba      	ldr	r2, [r7, #8]
 8017474:	1ad3      	subs	r3, r2, r3
 8017476:	3b01      	subs	r3, #1
 8017478:	68fa      	ldr	r2, [r7, #12]
 801747a:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 801747e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017482:	fb02 f201 	mul.w	r2, r2, r1
 8017486:	1a9b      	subs	r3, r3, r2
 8017488:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 801748a:	697a      	ldr	r2, [r7, #20]
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	441a      	add	r2, r3
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8017496:	429a      	cmp	r2, r3
 8017498:	d808      	bhi.n	80174ac <tcpWriteTxBuffer+0x4c>
   {
      //Copy the payload
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	687a      	ldr	r2, [r7, #4]
 80174a4:	6979      	ldr	r1, [r7, #20]
 80174a6:	f7f9 fcfd 	bl	8010ea4 <netBufferWrite>
      //Wrap around to the beginning of the circular buffer
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
         data + socket->txBufferSize - offset,
         length - socket->txBufferSize + offset);
   }
}
 80174aa:	e020      	b.n	80174ee <tcpWriteTxBuffer+0x8e>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
         offset, data, socket->txBufferSize - offset);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	687a      	ldr	r2, [r7, #4]
 80174be:	6979      	ldr	r1, [r7, #20]
 80174c0:	f7f9 fcf0 	bl	8010ea4 <netBufferWrite>
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
         data + socket->txBufferSize - offset,
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80174d0:	697b      	ldr	r3, [r7, #20]
 80174d2:	1ad3      	subs	r3, r2, r3
 80174d4:	687a      	ldr	r2, [r7, #4]
 80174d6:	18d1      	adds	r1, r2, r3
         length - socket->txBufferSize + offset);
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80174de:	683a      	ldr	r2, [r7, #0]
 80174e0:	1ad2      	subs	r2, r2, r3
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	4413      	add	r3, r2
 80174e6:	460a      	mov	r2, r1
 80174e8:	2100      	movs	r1, #0
 80174ea:	f7f9 fcdb 	bl	8010ea4 <netBufferWrite>
}
 80174ee:	bf00      	nop
 80174f0:	3718      	adds	r7, #24
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}

080174f6 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 80174f6:	b580      	push	{r7, lr}
 80174f8:	b086      	sub	sp, #24
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	60f8      	str	r0, [r7, #12]
 80174fe:	60b9      	str	r1, [r7, #8]
 8017500:	607a      	str	r2, [r7, #4]
 8017502:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017508:	68ba      	ldr	r2, [r7, #8]
 801750a:	1ad3      	subs	r3, r2, r3
 801750c:	3b01      	subs	r3, #1
 801750e:	68fa      	ldr	r2, [r7, #12]
 8017510:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8017514:	fbb3 f1f2 	udiv	r1, r3, r2
 8017518:	fb02 f201 	mul.w	r2, r2, r1
 801751c:	1a9b      	subs	r3, r3, r2
 801751e:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8017520:	693a      	ldr	r2, [r7, #16]
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	441a      	add	r2, r3
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801752c:	429a      	cmp	r2, r3
 801752e:	d80a      	bhi.n	8017546 <tcpReadTxBuffer+0x50>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	693a      	ldr	r2, [r7, #16]
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f7f9 fb1a 	bl	8010b74 <netBufferConcat>
 8017540:	4603      	mov	r3, r0
 8017542:	82fb      	strh	r3, [r7, #22]
 8017544:	e020      	b.n	8017588 <tcpReadTxBuffer+0x92>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
         offset, socket->txBufferSize - offset);
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	1ad3      	subs	r3, r2, r3
 8017556:	693a      	ldr	r2, [r7, #16]
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f7f9 fb0b 	bl	8010b74 <netBufferConcat>
 801755e:	4603      	mov	r3, r0
 8017560:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8017562:	8afb      	ldrh	r3, [r7, #22]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10f      	bne.n	8017588 <tcpReadTxBuffer+0x92>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
            0, length - socket->txBufferSize + offset);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8017574:	683a      	ldr	r2, [r7, #0]
 8017576:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	4413      	add	r3, r2
 801757c:	2200      	movs	r2, #0
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f7f9 faf8 	bl	8010b74 <netBufferConcat>
 8017584:	4603      	mov	r3, r0
 8017586:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8017588:	8afb      	ldrh	r3, [r7, #22]
}
 801758a:	4618      	mov	r0, r3
 801758c:	3718      	adds	r7, #24
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b088      	sub	sp, #32
 8017596:	af02      	add	r7, sp, #8
 8017598:	60f8      	str	r0, [r7, #12]
 801759a:	60b9      	str	r1, [r7, #8]
 801759c:	607a      	str	r2, [r7, #4]
 801759e:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80175a4:	68ba      	ldr	r2, [r7, #8]
 80175a6:	1ad3      	subs	r3, r2, r3
 80175a8:	3b01      	subs	r3, #1
 80175aa:	68fa      	ldr	r2, [r7, #12]
 80175ac:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
 80175b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80175b4:	fb02 f201 	mul.w	r2, r2, r1
 80175b8:	1a9b      	subs	r3, r3, r2
 80175ba:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 80175bc:	697a      	ldr	r2, [r7, #20]
 80175be:	6a3b      	ldr	r3, [r7, #32]
 80175c0:	441a      	add	r2, r3
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d80a      	bhi.n	80175e2 <tcpWriteRxBuffer+0x50>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80175d2:	6a3b      	ldr	r3, [r7, #32]
 80175d4:	9300      	str	r3, [sp, #0]
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	687a      	ldr	r2, [r7, #4]
 80175da:	6979      	ldr	r1, [r7, #20]
 80175dc:	f7f9 fb65 	bl	8010caa <netBufferCopy>
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset,
         length - socket->rxBufferSize + offset);
   }
}
 80175e0:	e024      	b.n	801762c <tcpWriteRxBuffer+0x9a>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	f503 70a4 	add.w	r0, r3, #328	; 0x148
         offset, data, dataOffset, socket->rxBufferSize - offset);
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	1ad3      	subs	r3, r2, r3
 80175f2:	9300      	str	r3, [sp, #0]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	6979      	ldr	r1, [r7, #20]
 80175fa:	f7f9 fb56 	bl	8010caa <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f503 70a4 	add.w	r0, r3, #328	; 0x148
         dataOffset + socket->rxBufferSize - offset,
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	1ad1      	subs	r1, r2, r3
         length - socket->rxBufferSize + offset);
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8017618:	6a3a      	ldr	r2, [r7, #32]
 801761a:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	4413      	add	r3, r2
 8017620:	9300      	str	r3, [sp, #0]
 8017622:	460b      	mov	r3, r1
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	2100      	movs	r1, #0
 8017628:	f7f9 fb3f 	bl	8010caa <netBufferCopy>
}
 801762c:	bf00      	nop
 801762e:	3718      	adds	r7, #24
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}

08017634 <tcpReadRxBuffer>:
 * @param[in] length Number of data to read
 **/

void tcpReadRxBuffer(Socket *socket, uint32_t seqNum, uint8_t *data,
   size_t length)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b086      	sub	sp, #24
 8017638:	af00      	add	r7, sp, #0
 801763a:	60f8      	str	r0, [r7, #12]
 801763c:	60b9      	str	r1, [r7, #8]
 801763e:	607a      	str	r2, [r7, #4]
 8017640:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017646:	68ba      	ldr	r2, [r7, #8]
 8017648:	1ad3      	subs	r3, r2, r3
 801764a:	3b01      	subs	r3, #1
 801764c:	68fa      	ldr	r2, [r7, #12]
 801764e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
 8017652:	fbb3 f1f2 	udiv	r1, r3, r2
 8017656:	fb02 f201 	mul.w	r2, r2, r1
 801765a:	1a9b      	subs	r3, r3, r2
 801765c:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 801765e:	697a      	ldr	r2, [r7, #20]
 8017660:	683b      	ldr	r3, [r7, #0]
 8017662:	441a      	add	r2, r3
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801766a:	429a      	cmp	r2, r3
 801766c:	d808      	bhi.n	8017680 <tcpReadRxBuffer+0x4c>
   {
      //Copy the payload
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	697a      	ldr	r2, [r7, #20]
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f7f9 fc6c 	bl	8010f56 <netBufferRead>
      //Wrap around to the beginning of the circular buffer
      netBufferRead(data + socket->rxBufferSize - offset,
         (NetBuffer *) &socket->rxBuffer, 0,
         length - socket->rxBufferSize + offset);
   }
}
 801767e:	e01f      	b.n	80176c0 <tcpReadRxBuffer+0x8c>
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	f503 71a4 	add.w	r1, r3, #328	; 0x148
         offset, socket->rxBufferSize - offset);
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	1ad3      	subs	r3, r2, r3
 8017690:	697a      	ldr	r2, [r7, #20]
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f7f9 fc5f 	bl	8010f56 <netBufferRead>
      netBufferRead(data + socket->rxBufferSize - offset,
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	1ad3      	subs	r3, r2, r3
 80176a2:	687a      	ldr	r2, [r7, #4]
 80176a4:	18d0      	adds	r0, r2, r3
         (NetBuffer *) &socket->rxBuffer, 0,
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	f503 71a4 	add.w	r1, r3, #328	; 0x148
         length - socket->rxBufferSize + offset);
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80176b2:	683a      	ldr	r2, [r7, #0]
 80176b4:	1ad2      	subs	r2, r2, r3
      netBufferRead(data + socket->rxBufferSize - offset,
 80176b6:	697b      	ldr	r3, [r7, #20]
 80176b8:	4413      	add	r3, r2
 80176ba:	2200      	movs	r2, #0
 80176bc:	f7f9 fc4b 	bl	8010f56 <netBufferRead>
}
 80176c0:	bf00      	nop
 80176c2:	3718      	adds	r7, #24
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 80176c8:	b480      	push	{r7}
 80176ca:	b085      	sub	sp, #20
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	60f8      	str	r0, [r7, #12]
 80176d0:	60b9      	str	r1, [r7, #8]
 80176d2:	607a      	str	r2, [r7, #4]
 80176d4:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 80176d6:	bf00      	nop
 80176d8:	3714      	adds	r7, #20
 80176da:	46bd      	mov	sp, r7
 80176dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e0:	4770      	bx	lr
	...

080176e4 <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	af00      	add	r7, sp, #0
   uint_t i;
   Socket *socket;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80176ea:	2300      	movs	r3, #0
 80176ec:	607b      	str	r3, [r7, #4]
 80176ee:	e025      	b.n	801773c <tcpTick+0x58>
   {
      //Point to the current socket
      socket = &socketTable[i];
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f44f 7213 	mov.w	r2, #588	; 0x24c
 80176f6:	fb02 f303 	mul.w	r3, r2, r3
 80176fa:	4a14      	ldr	r2, [pc, #80]	; (801774c <tcpTick+0x68>)
 80176fc:	4413      	add	r3, r2
 80176fe:	603b      	str	r3, [r7, #0]

      //TCP socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	685b      	ldr	r3, [r3, #4]
 8017704:	2b01      	cmp	r3, #1
 8017706:	d116      	bne.n	8017736 <tcpTick+0x52>
      {
         //Check current TCP state
         if(socket->state != TCP_STATE_CLOSED)
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801770e:	2b00      	cmp	r3, #0
 8017710:	d011      	beq.n	8017736 <tcpTick+0x52>
         {
            //Check retransmission timer
            tcpCheckRetransmitTimer(socket);
 8017712:	6838      	ldr	r0, [r7, #0]
 8017714:	f000 f81c 	bl	8017750 <tcpCheckRetransmitTimer>
            //Check persist timer
            tcpCheckPersistTimer(socket);
 8017718:	6838      	ldr	r0, [r7, #0]
 801771a:	f000 f89e 	bl	801785a <tcpCheckPersistTimer>
            //Check TCP keep-alive timer
            tcpCheckKeepAliveTimer(socket);
 801771e:	6838      	ldr	r0, [r7, #0]
 8017720:	f000 f8f6 	bl	8017910 <tcpCheckKeepAliveTimer>
            //Check override timer
            tcpCheckOverrideTimer(socket);
 8017724:	6838      	ldr	r0, [r7, #0]
 8017726:	f000 f8fd 	bl	8017924 <tcpCheckOverrideTimer>
            //Check FIN-WAIT-2 timer
            tcpCheckFinWait2Timer(socket);
 801772a:	6838      	ldr	r0, [r7, #0]
 801772c:	f000 f98b 	bl	8017a46 <tcpCheckFinWait2Timer>
            //Check 2MSL timer
            tcpCheckTimeWaitTimer(socket);
 8017730:	6838      	ldr	r0, [r7, #0]
 8017732:	f000 f9a2 	bl	8017a7a <tcpCheckTimeWaitTimer>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	3301      	adds	r3, #1
 801773a:	607b      	str	r3, [r7, #4]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	2b09      	cmp	r3, #9
 8017740:	d9d6      	bls.n	80176f0 <tcpTick+0xc>
         }
      }
   }
}
 8017742:	bf00      	nop
 8017744:	bf00      	nop
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}
 801774c:	20005700 	.word	0x20005700

08017750 <tcpCheckRetransmitTimer>:
 * @brief Check retransmission timer
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckRetransmitTimer(Socket *socket)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801775e:	2b00      	cmp	r3, #0
 8017760:	d077      	beq.n	8017852 <tcpCheckRetransmitTimer+0x102>
   {
      //Any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8017768:	2b00      	cmp	r3, #0
 801776a:	d072      	beq.n	8017852 <tcpCheckRetransmitTimer+0x102>
      {
         //Retransmission timeout?
         if(netTimerExpired(&socket->retransmitTimer))
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8017772:	4618      	mov	r0, r3
 8017774:	f7f9 ff2f 	bl	80115d6 <netTimerExpired>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	d069      	beq.n	8017852 <tcpCheckRetransmitTimer+0x102>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(socket->retransmitCount == 0)
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8017784:	2b00      	cmp	r3, #0
 8017786:	d113      	bne.n	80177b0 <tcpCheckRetransmitTimer+0x60>
            {
               uint32_t flightSize;

               //Amount of data that has been sent but not yet acknowledged
               flightSize = socket->sndNxt - socket->sndUna;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	60fb      	str	r3, [r7, #12]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	461a      	mov	r2, r3
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	085b      	lsrs	r3, r3, #1
 80177a2:	4293      	cmp	r3, r2
 80177a4:	bf38      	it	cc
 80177a6:	4613      	movcc	r3, r2
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            }

            //Furthermore, upon a timeout cwnd must be set to no more than the
            //loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss,
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80177b6:	687a      	ldr	r2, [r7, #4]
 80177b8:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 80177bc:	4293      	cmp	r3, r2
 80177be:	bf28      	it	cs
 80177c0:	4613      	movcs	r3, r2
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
               socket->txBufferSize);

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177ce:	1e5a      	subs	r2, r3, #1
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	2202      	movs	r2, #2
 80177da:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
#endif
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80177e4:	2b04      	cmp	r3, #4
 80177e6:	d820      	bhi.n	801782a <tcpCheckRetransmitTimer+0xda>
                  socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been acknowledged
               //by the TCP receiver
               tcpRetransmitSegment(socket);
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f7ff fb11 	bl	8016e10 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80177f4:	005b      	lsls	r3, r3, #1
 80177f6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80177fa:	429a      	cmp	r2, r3
 80177fc:	bf28      	it	cs
 80177fe:	461a      	movcs	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
               //Restart retransmission timer
               netStartTimer(&socket->retransmitTimer, socket->rto);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f503 72e8 	add.w	r2, r3, #464	; 0x1d0
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017812:	4619      	mov	r1, r3
 8017814:	4610      	mov	r0, r2
 8017816:	f7f9 feb1 	bl	801157c <netStartTimer>
               //Increment retransmission counter
               socket->retransmitCount++;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 8017828:	e00f      	b.n	801784a <tcpCheckRetransmitTimer+0xfa>
            }
            else
            {
               //Send a reset segment
               tcpSendResetSegment(socket, socket->sndNxt);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801782e:	4619      	mov	r1, r3
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7fe fa3d 	bl	8015cb0 <tcpSendResetSegment>
               //Turn off the retransmission timer
               netStopTimer(&socket->retransmitTimer);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801783c:	4618      	mov	r0, r3
 801783e:	f7f9 feb1 	bl	80115a4 <netStopTimer>
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8017842:	2100      	movs	r1, #0
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f7ff fc7f 	bl	8017148 <tcpChangeState>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2200      	movs	r2, #0
 801784e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
      }
   }
}
 8017852:	bf00      	nop
 8017854:	3710      	adds	r7, #16
 8017856:	46bd      	mov	sp, r7
 8017858:	bd80      	pop	{r7, pc}

0801785a <tcpCheckPersistTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckPersistTimer(Socket *socket)
{
 801785a:	b580      	push	{r7, lr}
 801785c:	b084      	sub	sp, #16
 801785e:	af02      	add	r7, sp, #8
 8017860:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017868:	2b00      	cmp	r3, #0
 801786a:	d04d      	beq.n	8017908 <tcpCheckPersistTimer+0xae>
   {
      //Check whether the remote host advertises a window size of zero
      if(socket->sndWnd == 0 && socket->wndProbeInterval != 0)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8017872:	2b00      	cmp	r3, #0
 8017874:	d148      	bne.n	8017908 <tcpCheckPersistTimer+0xae>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 801787c:	2b00      	cmp	r3, #0
 801787e:	d043      	beq.n	8017908 <tcpCheckPersistTimer+0xae>
      {
         //Persist timer expired?
         if(netTimerExpired(&socket->persistTimer))
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8017886:	4618      	mov	r0, r3
 8017888:	f7f9 fea5 	bl	80115d6 <netTimerExpired>
 801788c:	4603      	mov	r3, r0
 801788e:	2b00      	cmp	r3, #0
 8017890:	d03a      	beq.n	8017908 <tcpCheckPersistTimer+0xae>
         {
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8017898:	2b04      	cmp	r3, #4
 801789a:	d82b      	bhi.n	80178f4 <tcpCheckPersistTimer+0x9a>
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less
               //than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndUna - 1,
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178a0:	1e5a      	subs	r2, r3, #1
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80178a8:	2100      	movs	r1, #0
 80178aa:	9101      	str	r1, [sp, #4]
 80178ac:	2100      	movs	r1, #0
 80178ae:	9100      	str	r1, [sp, #0]
 80178b0:	2110      	movs	r1, #16
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7fe f832 	bl	801591c <tcpSendSegment>
                  socket->rcvNxt, 0, FALSE);

               //The interval between successive probes should be increased
               //exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2,
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80178c4:	429a      	cmp	r2, r3
 80178c6:	bf28      	it	cs
 80178c8:	461a      	movcs	r2, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
                  TCP_MAX_PROBE_INTERVAL);

               //Restart the persist timer
               netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80178dc:	4619      	mov	r1, r3
 80178de:	4610      	mov	r0, r2
 80178e0:	f7f9 fe4c 	bl	801157c <netStartTimer>
               //Increment window probe counter
               socket->wndProbeCount++;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80178ea:	1c5a      	adds	r2, r3, #1
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
               tcpChangeState(socket, TCP_STATE_CLOSED);
            }
         }
      }
   }
}
 80178f2:	e009      	b.n	8017908 <tcpCheckPersistTimer+0xae>
               tcpSendResetSegment(socket, socket->sndNxt);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80178f8:	4619      	mov	r1, r3
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7fe f9d8 	bl	8015cb0 <tcpSendResetSegment>
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8017900:	2100      	movs	r1, #0
 8017902:	6878      	ldr	r0, [r7, #4]
 8017904:	f7ff fc20 	bl	8017148 <tcpChangeState>
}
 8017908:	bf00      	nop
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <tcpCheckKeepAliveTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckKeepAliveTimer(Socket *socket)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
            }
         }
      }
   }
#endif
}
 8017918:	bf00      	nop
 801791a:	370c      	adds	r7, #12
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <tcpCheckOverrideTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckOverrideTimer(Socket *socket)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b088      	sub	sp, #32
 8017928:	af02      	add	r7, sp, #8
 801792a:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t n;
   uint32_t u;

   //Check current TCP state
   if(socket->state == TCP_STATE_ESTABLISHED ||
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017932:	2b04      	cmp	r3, #4
 8017934:	d004      	beq.n	8017940 <tcpCheckOverrideTimer+0x1c>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 801793c:	2b05      	cmp	r3, #5
 801793e:	d17e      	bne.n	8017a3e <tcpCheckOverrideTimer+0x11a>
   {
      //Override timer expired?
      if(socket->sndUser && netTimerExpired(&socket->overrideTimer))
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8017946:	2b00      	cmp	r3, #0
 8017948:	d079      	beq.n	8017a3e <tcpCheckOverrideTimer+0x11a>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017950:	4618      	mov	r0, r3
 8017952:	f7f9 fe40 	bl	80115d6 <netTimerExpired>
 8017956:	4603      	mov	r3, r0
 8017958:	2b00      	cmp	r3, #0
 801795a:	d070      	beq.n	8017a3e <tcpCheckOverrideTimer+0x11a>
      {
         //The amount of data that can be sent at any given time is limited by
         //the receiver window and the congestion window
         n = MIN(socket->sndWnd, socket->txBufferSize);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8017962:	687a      	ldr	r2, [r7, #4]
 8017964:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8017968:	4293      	cmp	r3, r2
 801796a:	bf28      	it	cs
 801796c:	4613      	movcs	r3, r2
 801796e:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Check the congestion window
         n = MIN(n, socket->cwnd);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8017976:	461a      	mov	r2, r3
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	4293      	cmp	r3, r2
 801797c:	bf28      	it	cs
 801797e:	4613      	movcs	r3, r2
 8017980:	613b      	str	r3, [r7, #16]
#endif
         //Retrieve the size of the usable window
         u = n - (socket->sndNxt - socket->sndUna);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801798a:	1ad3      	subs	r3, r2, r3
 801798c:	693a      	ldr	r2, [r7, #16]
 801798e:	4413      	add	r3, r2
 8017990:	617b      	str	r3, [r7, #20]

         //Send as much data as possible
         while(socket->sndUser > 0)
 8017992:	e03b      	b.n	8017a0c <tcpCheckOverrideTimer+0xe8>
         {
            //The usable window size may become zero or negative, preventing
            //packet transmission
            if((int32_t) u <= 0)
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	2b00      	cmp	r3, #0
 8017998:	dd3e      	ble.n	8017a18 <tcpCheckOverrideTimer+0xf4>
               break;

            //Calculate the number of bytes to send at a time
            n = MIN(u, socket->sndUser);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80179a0:	461a      	mov	r2, r3
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	4293      	cmp	r3, r2
 80179a6:	bf28      	it	cs
 80179a8:	4613      	movcs	r3, r2
 80179aa:	613b      	str	r3, [r7, #16]
            n = MIN(n, socket->smss);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80179b2:	461a      	mov	r2, r3
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	4293      	cmp	r3, r2
 80179b8:	bf28      	it	cs
 80179ba:	4613      	movcs	r3, r2
 80179bc:	613b      	str	r3, [r7, #16]

            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80179c8:	2301      	movs	r3, #1
 80179ca:	9301      	str	r3, [sp, #4]
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	9300      	str	r3, [sp, #0]
 80179d0:	460b      	mov	r3, r1
 80179d2:	2118      	movs	r1, #24
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f7fd ffa1 	bl	801591c <tcpSendSegment>
 80179da:	4603      	mov	r3, r0
 80179dc:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80179de:	89fb      	ldrh	r3, [r7, #14]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d11b      	bne.n	8017a1c <tcpCheckOverrideTimer+0xf8>
               break;

            //Advance SND.NXT pointer
            socket->sndNxt += n;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	441a      	add	r2, r3
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	67da      	str	r2, [r3, #124]	; 0x7c
            //Adjust the number of bytes buffered but not yet sent
            socket->sndUser -= n;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	b29b      	uxth	r3, r3
 80179fa:	1ad3      	subs	r3, r2, r3
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
            //Update the size of the usable window
            u -= n;
 8017a04:	697a      	ldr	r2, [r7, #20]
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	1ad3      	subs	r3, r2, r3
 8017a0a:	617b      	str	r3, [r7, #20]
         while(socket->sndUser > 0)
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1be      	bne.n	8017994 <tcpCheckOverrideTimer+0x70>
 8017a16:	e002      	b.n	8017a1e <tcpCheckOverrideTimer+0xfa>
               break;
 8017a18:	bf00      	nop
 8017a1a:	e000      	b.n	8017a1e <tcpCheckOverrideTimer+0xfa>
               break;
 8017a1c:	bf00      	nop
         }

         //Check whether the transmitter can accept more data
         tcpUpdateEvents(socket);
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7ff fbb8 	bl	8017194 <tcpUpdateEvents>

         //Restart override timer if necessary
         if(socket->sndUser > 0)
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d007      	beq.n	8017a3e <tcpCheckOverrideTimer+0x11a>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017a34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f9 fd9f 	bl	801157c <netStartTimer>
         }
      }
   }
}
 8017a3e:	bf00      	nop
 8017a40:	3718      	adds	r7, #24
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}

08017a46 <tcpCheckFinWait2Timer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckFinWait2Timer(Socket *socket)
{
 8017a46:	b580      	push	{r7, lr}
 8017a48:	b082      	sub	sp, #8
 8017a4a:	af00      	add	r7, sp, #0
 8017a4c:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_FIN_WAIT_2)
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017a54:	2b08      	cmp	r3, #8
 8017a56:	d10c      	bne.n	8017a72 <tcpCheckFinWait2Timer+0x2c>
   {
      //FIN-WAIT-2 timer expired?
      if(netTimerExpired(&socket->finWait2Timer))
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7f9 fdb9 	bl	80115d6 <netTimerExpired>
 8017a64:	4603      	mov	r3, r0
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d003      	beq.n	8017a72 <tcpCheckFinWait2Timer+0x2c>
      {
         //Debug message
         TRACE_INFO("TCP FIN-WAIT-2 timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8017a6a:	2100      	movs	r1, #0
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7ff fb6b 	bl	8017148 <tcpChangeState>
      }
   }
}
 8017a72:	bf00      	nop
 8017a74:	3708      	adds	r7, #8
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}

08017a7a <tcpCheckTimeWaitTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckTimeWaitTimer(Socket *socket)
{
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b082      	sub	sp, #8
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_TIME_WAIT)
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017a88:	2b0a      	cmp	r3, #10
 8017a8a:	d116      	bne.n	8017aba <tcpCheckTimeWaitTimer+0x40>
   {
      //2MSL timer expired?
      if(netTimerExpired(&socket->timeWaitTimer))
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7f9 fd9f 	bl	80115d6 <netTimerExpired>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d00d      	beq.n	8017aba <tcpCheckTimeWaitTimer+0x40>
      {
         //Debug message
         TRACE_INFO("TCP 2MSL timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8017a9e:	2100      	movs	r1, #0
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f7ff fb51 	bl	8017148 <tcpChangeState>

         //Dispose the socket if the user does not have the ownership anymore
         if(!socket->ownedFlag)
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d105      	bne.n	8017aba <tcpCheckTimeWaitTimer+0x40>
         {
            //Delete the TCB
            tcpDeleteControlBlock(socket);
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f7fe feea 	bl	8016888 <tcpDeleteControlBlock>
            //Mark the socket as closed
            socket->type = SOCKET_TYPE_UNUSED;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	605a      	str	r2, [r3, #4]
         }
      }
   }
}
 8017aba:	bf00      	nop
 8017abc:	3708      	adds	r7, #8
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
	...

08017ac4 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 8017ac8:	4b09      	ldr	r3, [pc, #36]	; (8017af0 <udpInit+0x2c>)
 8017aca:	2200      	movs	r2, #0
 8017acc:	801a      	strh	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&udpCallbackMutex))
 8017ace:	4809      	ldr	r0, [pc, #36]	; (8017af4 <udpInit+0x30>)
 8017ad0:	f7e9 fbb3 	bl	800123a <osCreateMutex>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d101      	bne.n	8017ade <udpInit+0x1a>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8017ada:	2365      	movs	r3, #101	; 0x65
 8017adc:	e005      	b.n	8017aea <udpInit+0x26>
   }

   //Initialize callback table
   osMemset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 8017ade:	22a0      	movs	r2, #160	; 0xa0
 8017ae0:	2100      	movs	r1, #0
 8017ae2:	4805      	ldr	r0, [pc, #20]	; (8017af8 <udpInit+0x34>)
 8017ae4:	f005 fef4 	bl	801d8d0 <memset>

   //Successful initialization
   return NO_ERROR;
 8017ae8:	2300      	movs	r3, #0
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	bd80      	pop	{r7, pc}
 8017aee:	bf00      	nop
 8017af0:	200041b6 	.word	0x200041b6
 8017af4:	20006e9c 	.word	0x20006e9c
 8017af8:	20006dfc 	.word	0x20006dfc

08017afc <udpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t udpGetDynamicPort(void)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = udpDynamicPort;
 8017b02:	4b14      	ldr	r3, [pc, #80]	; (8017b54 <udpGetDynamicPort+0x58>)
 8017b04:	881b      	ldrh	r3, [r3, #0]
 8017b06:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8017b0e:	d303      	bcc.n	8017b18 <udpGetDynamicPort+0x1c>
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b16:	d307      	bcc.n	8017b28 <udpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8017b18:	f7f9 fe16 	bl	8011748 <netGetRand>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017b22:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8017b26:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	d806      	bhi.n	8017b40 <udpGetDynamicPort+0x44>
   {
      //Increment port number
      udpDynamicPort = port + 1;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	b29b      	uxth	r3, r3
 8017b36:	3301      	adds	r3, #1
 8017b38:	b29a      	uxth	r2, r3
 8017b3a:	4b06      	ldr	r3, [pc, #24]	; (8017b54 <udpGetDynamicPort+0x58>)
 8017b3c:	801a      	strh	r2, [r3, #0]
 8017b3e:	e003      	b.n	8017b48 <udpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8017b40:	4b04      	ldr	r3, [pc, #16]	; (8017b54 <udpGetDynamicPort+0x58>)
 8017b42:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017b46:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	b29b      	uxth	r3, r3
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3708      	adds	r7, #8
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	200041b6 	.word	0x200041b6

08017b58 <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 8017b58:	b590      	push	{r4, r7, lr}
 8017b5a:	b08f      	sub	sp, #60	; 0x3c
 8017b5c:	af02      	add	r7, sp, #8
 8017b5e:	60f8      	str	r0, [r7, #12]
 8017b60:	60b9      	str	r1, [r7, #8]
 8017b62:	607a      	str	r2, [r7, #4]
 8017b64:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7f8 ff09 	bl	801097e <netBufferGetLength>
 8017b6c:	4602      	mov	r2, r0
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	1ad3      	subs	r3, r2, r3
 8017b72:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 8017b74:	6a3b      	ldr	r3, [r7, #32]
 8017b76:	2b07      	cmp	r3, #7
 8017b78:	d801      	bhi.n	8017b7e <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 8017b7a:	23d4      	movs	r3, #212	; 0xd4
 8017b7c:	e189      	b.n	8017e92 <udpProcessDatagram+0x33a>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8017b7e:	6839      	ldr	r1, [r7, #0]
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7f8 ffc4 	bl	8010b0e <netBufferAt>
 8017b86:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 8017b88:	69fb      	ldr	r3, [r7, #28]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d101      	bne.n	8017b92 <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e17f      	b.n	8017e92 <udpProcessDatagram+0x33a>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8017b92:	69f8      	ldr	r0, [r7, #28]
 8017b94:	f000 fcce 	bl	8018534 <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	88db      	ldrh	r3, [r3, #6]
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d103      	bne.n	8017baa <udpProcessDatagram+0x52>
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2b28      	cmp	r3, #40	; 0x28
 8017ba8:	d10e      	bne.n	8017bc8 <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	1d18      	adds	r0, r3, #4
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	6819      	ldr	r1, [r3, #0]
 8017bb2:	6a3b      	ldr	r3, [r7, #32]
 8017bb4:	9300      	str	r3, [sp, #0]
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	687a      	ldr	r2, [r7, #4]
 8017bba:	f7f0 ff33 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d001      	beq.n	8017bc8 <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 8017bc4:	23d5      	movs	r3, #213	; 0xd5
 8017bc6:	e164      	b.n	8017e92 <udpProcessDatagram+0x33a>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8017bc8:	2300      	movs	r3, #0
 8017bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bcc:	e098      	b.n	8017d00 <udpProcessDatagram+0x1a8>
   {
      //Point to the current socket
      socket = socketTable + i;
 8017bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd0:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8017bd4:	fb02 f303 	mul.w	r3, r2, r3
 8017bd8:	4a81      	ldr	r2, [pc, #516]	; (8017de0 <udpProcessDatagram+0x288>)
 8017bda:	4413      	add	r3, r2
 8017bdc:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 8017bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be0:	685b      	ldr	r3, [r3, #4]
 8017be2:	2b02      	cmp	r3, #2
 8017be4:	d174      	bne.n	8017cd0 <udpProcessDatagram+0x178>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8017be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d004      	beq.n	8017bf8 <udpProcessDatagram+0xa0>
 8017bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	68fa      	ldr	r2, [r7, #12]
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d16d      	bne.n	8017cd4 <udpProcessDatagram+0x17c>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 8017bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d06b      	beq.n	8017cd8 <udpProcessDatagram+0x180>
 8017c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c02:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8017c04:	69fb      	ldr	r3, [r7, #28]
 8017c06:	885b      	ldrh	r3, [r3, #2]
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7e9 f962 	bl	8000ed4 <swapInt16>
 8017c10:	4603      	mov	r3, r0
 8017c12:	429c      	cmp	r4, r3
 8017c14:	d160      	bne.n	8017cd8 <udpProcessDatagram+0x180>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8017c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c18:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d00a      	beq.n	8017c34 <udpProcessDatagram+0xdc>
 8017c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c20:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8017c22:	69fb      	ldr	r3, [r7, #28]
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f7e9 f953 	bl	8000ed4 <swapInt16>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	429c      	cmp	r4, r3
 8017c32:	d153      	bne.n	8017cdc <udpProcessDatagram+0x184>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b0c      	cmp	r3, #12
 8017c3a:	d11c      	bne.n	8017c76 <udpProcessDatagram+0x11e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8017c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3e:	691b      	ldr	r3, [r3, #16]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d009      	beq.n	8017c58 <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8017c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c46:	691b      	ldr	r3, [r3, #16]
 8017c48:	2b04      	cmp	r3, #4
 8017c4a:	d149      	bne.n	8017ce0 <udpProcessDatagram+0x188>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8017c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4e:	695a      	ldr	r2, [r3, #20]
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	689b      	ldr	r3, [r3, #8]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d145      	bne.n	8017ce4 <udpProcessDatagram+0x18c>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8017c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d054      	beq.n	8017d0a <udpProcessDatagram+0x1b2>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8017c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c64:	2b04      	cmp	r3, #4
 8017c66:	d13f      	bne.n	8017ce8 <udpProcessDatagram+0x190>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8017c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d04a      	beq.n	8017d0a <udpProcessDatagram+0x1b2>
               continue;
 8017c74:	e041      	b.n	8017cfa <udpProcessDatagram+0x1a2>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //IPv6 packet received?
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2b28      	cmp	r3, #40	; 0x28
 8017c7c:	d136      	bne.n	8017cec <udpProcessDatagram+0x194>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8017c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c80:	691b      	ldr	r3, [r3, #16]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d00f      	beq.n	8017ca6 <udpProcessDatagram+0x14e>
         {
            //An IPv6 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv6Addr))
 8017c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c88:	691b      	ldr	r3, [r3, #16]
 8017c8a:	2b10      	cmp	r3, #16
 8017c8c:	d130      	bne.n	8017cf0 <udpProcessDatagram+0x198>
               continue;
            //Filter out non-matching addresses
            if(!ipv6CompAddr(&socket->localIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.destAddr))
 8017c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c90:	f103 0014 	add.w	r0, r3, #20
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	3314      	adds	r3, #20
 8017c98:	2210      	movs	r2, #16
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	f005 fde2 	bl	801d864 <memcmp>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d126      	bne.n	8017cf4 <udpProcessDatagram+0x19c>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8017ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d02d      	beq.n	8017d0a <udpProcessDatagram+0x1b2>
         {
            //An IPv6 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv6Addr))
 8017cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cb2:	2b10      	cmp	r3, #16
 8017cb4:	d120      	bne.n	8017cf8 <udpProcessDatagram+0x1a0>
               continue;
            //Filter out non-matching addresses
            if(!ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr))
 8017cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	3304      	adds	r3, #4
 8017cc0:	2210      	movs	r2, #16
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	f005 fdce 	bl	801d864 <memcmp>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d01d      	beq.n	8017d0a <udpProcessDatagram+0x1b2>
               continue;
 8017cce:	e014      	b.n	8017cfa <udpProcessDatagram+0x1a2>
         continue;
 8017cd0:	bf00      	nop
 8017cd2:	e012      	b.n	8017cfa <udpProcessDatagram+0x1a2>
         continue;
 8017cd4:	bf00      	nop
 8017cd6:	e010      	b.n	8017cfa <udpProcessDatagram+0x1a2>
         continue;
 8017cd8:	bf00      	nop
 8017cda:	e00e      	b.n	8017cfa <udpProcessDatagram+0x1a2>
         continue;
 8017cdc:	bf00      	nop
 8017cde:	e00c      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017ce0:	bf00      	nop
 8017ce2:	e00a      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017ce4:	bf00      	nop
 8017ce6:	e008      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017ce8:	bf00      	nop
 8017cea:	e006      	b.n	8017cfa <udpProcessDatagram+0x1a2>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 8017cec:	bf00      	nop
 8017cee:	e004      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017cf0:	bf00      	nop
 8017cf2:	e002      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017cf4:	bf00      	nop
 8017cf6:	e000      	b.n	8017cfa <udpProcessDatagram+0x1a2>
               continue;
 8017cf8:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8017cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	2b09      	cmp	r3, #9
 8017d04:	f67f af63 	bls.w	8017bce <udpProcessDatagram+0x76>
 8017d08:	e000      	b.n	8017d0c <udpProcessDatagram+0x1b4>
      }

      //The current socket meets all the criteria
      break;
 8017d0a:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	3308      	adds	r3, #8
 8017d10:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	3b08      	subs	r3, #8
 8017d16:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8017d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1a:	2b09      	cmp	r3, #9
 8017d1c:	d90d      	bls.n	8017d3a <udpProcessDatagram+0x1e2>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer,
 8017d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d20:	9301      	str	r3, [sp, #4]
 8017d22:	683b      	ldr	r3, [r7, #0]
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	69fa      	ldr	r2, [r7, #28]
 8017d2a:	68b9      	ldr	r1, [r7, #8]
 8017d2c:	68f8      	ldr	r0, [r7, #12]
 8017d2e:	f000 fba5 	bl	801847c <udpInvokeRxCallback>
 8017d32:	4603      	mov	r3, r0
 8017d34:	82fb      	strh	r3, [r7, #22]
         offset, ancillary);
      //Return status code
      return error;
 8017d36:	8afb      	ldrh	r3, [r7, #22]
 8017d38:	e0ab      	b.n	8017e92 <udpProcessDatagram+0x33a>
   }

   //Empty receive queue?
   if(socket->receiveQueue == NULL)
 8017d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d118      	bne.n	8017d76 <udpProcessDatagram+0x21e>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8017d44:	6a3b      	ldr	r3, [r7, #32]
 8017d46:	334c      	adds	r3, #76	; 0x4c
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f7f8 fdd6 	bl	80108fa <netBufferAlloc>
 8017d4e:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8017d50:	69bb      	ldr	r3, [r7, #24]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d00c      	beq.n	8017d70 <udpProcessDatagram+0x218>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 8017d56:	2100      	movs	r1, #0
 8017d58:	69b8      	ldr	r0, [r7, #24]
 8017d5a:	f7f8 fed8 	bl	8010b0e <netBufferAt>
 8017d5e:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8017d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d62:	69ba      	ldr	r2, [r7, #24]
 8017d64:	635a      	str	r2, [r3, #52]	; 0x34
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d6a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8017d6e:	e031      	b.n	8017dd4 <udpProcessDatagram+0x27c>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8017d70:	2300      	movs	r3, #0
 8017d72:	627b      	str	r3, [r7, #36]	; 0x24
 8017d74:	e02e      	b.n	8017dd4 <udpProcessDatagram+0x27c>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 8017d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d78:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8017d7c:	627b      	str	r3, [r7, #36]	; 0x24

      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 8017d7e:	2301      	movs	r3, #1
 8017d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d82:	e005      	b.n	8017d90 <udpProcessDatagram+0x238>
      {
         queueItem = queueItem->next;
 8017d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 8017d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d1f5      	bne.n	8017d84 <udpProcessDatagram+0x22c>
      }

      //Check whether the receive queue is full
      if(i >= UDP_RX_QUEUE_SIZE)
 8017d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9a:	2b03      	cmp	r3, #3
 8017d9c:	d901      	bls.n	8017da2 <udpProcessDatagram+0x24a>
         //though no errors had been detected
         MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
         IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

         //Report an error
         return ERROR_RECEIVE_QUEUE_FULL;
 8017d9e:	23db      	movs	r3, #219	; 0xdb
 8017da0:	e077      	b.n	8017e92 <udpProcessDatagram+0x33a>
      }

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8017da2:	6a3b      	ldr	r3, [r7, #32]
 8017da4:	334c      	adds	r3, #76	; 0x4c
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7f8 fda7 	bl	80108fa <netBufferAlloc>
 8017dac:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8017dae:	69bb      	ldr	r3, [r7, #24]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d00d      	beq.n	8017dd0 <udpProcessDatagram+0x278>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8017db4:	2100      	movs	r1, #0
 8017db6:	69b8      	ldr	r0, [r7, #24]
 8017db8:	f7f8 fea9 	bl	8010b0e <netBufferAt>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc0:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8017dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8017dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dca:	69ba      	ldr	r2, [r7, #24]
 8017dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8017dce:	e001      	b.n	8017dd4 <udpProcessDatagram+0x27c>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Not enough resources to properly handle the packet?
   if(queueItem == NULL)
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d104      	bne.n	8017de4 <udpProcessDatagram+0x28c>
      //though no errors had been detected
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

      //Report an error
      return ERROR_OUT_OF_MEMORY;
 8017dda:	2364      	movs	r3, #100	; 0x64
 8017ddc:	e059      	b.n	8017e92 <udpProcessDatagram+0x33a>
 8017dde:	bf00      	nop
 8017de0:	20005700 	.word	0x20005700
   }

   //Initialize next field
   queueItem->next = NULL;
 8017de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de6:	2200      	movs	r2, #0
 8017de8:	601a      	str	r2, [r3, #0]
   //Network interface where the packet was received
   queueItem->interface = interface;
 8017dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dec:	68fa      	ldr	r2, [r7, #12]
 8017dee:	605a      	str	r2, [r3, #4]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 8017df0:	69fb      	ldr	r3, [r7, #28]
 8017df2:	881b      	ldrh	r3, [r3, #0]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7e9 f86c 	bl	8000ed4 <swapInt16>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	461a      	mov	r2, r3
 8017e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e02:	839a      	strh	r2, [r3, #28]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	2b0c      	cmp	r3, #12
 8017e0a:	d10d      	bne.n	8017e28 <udpProcessDatagram+0x2d0>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 8017e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0e:	2204      	movs	r2, #4
 8017e10:	609a      	str	r2, [r3, #8]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	685a      	ldr	r2, [r3, #4]
 8017e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e18:	60da      	str	r2, [r3, #12]

      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 8017e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1c:	2204      	movs	r2, #4
 8017e1e:	621a      	str	r2, [r3, #32]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	689a      	ldr	r2, [r3, #8]
 8017e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e26:	625a      	str	r2, [r3, #36]	; 0x24
   }
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 remote address?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b28      	cmp	r3, #40	; 0x28
 8017e2e:	d115      	bne.n	8017e5c <udpProcessDatagram+0x304>
   {
      //Save the source IPv6 address
      queueItem->srcIpAddr.length = sizeof(Ipv6Addr);
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	2210      	movs	r2, #16
 8017e34:	609a      	str	r2, [r3, #8]
      queueItem->srcIpAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 8017e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	f102 040c 	add.w	r4, r2, #12
 8017e3e:	3304      	adds	r3, #4
 8017e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Save the destination IPv6 address
      queueItem->destIpAddr.length = sizeof(Ipv6Addr);
 8017e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e48:	2210      	movs	r2, #16
 8017e4a:	621a      	str	r2, [r3, #32]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
 8017e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e4e:	68bb      	ldr	r3, [r7, #8]
 8017e50:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8017e54:	3314      	adds	r3, #20
 8017e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5e:	224c      	movs	r2, #76	; 0x4c
 8017e60:	639a      	str	r2, [r3, #56]	; 0x38
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 8017e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e68:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8017e6a:	6a3b      	ldr	r3, [r7, #32]
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	687a      	ldr	r2, [r7, #4]
 8017e72:	f7f8 ff1a 	bl	8010caa <netBufferCopy>

   //Additional options can be passed to the stack along with the packet
   queueItem->ancillary = *ancillary;
 8017e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e7a:	333c      	adds	r3, #60	; 0x3c
 8017e7c:	4614      	mov	r4, r2
 8017e7e:	6820      	ldr	r0, [r4, #0]
 8017e80:	6861      	ldr	r1, [r4, #4]
 8017e82:	68a2      	ldr	r2, [r4, #8]
 8017e84:	c307      	stmia	r3!, {r0, r1, r2}
 8017e86:	7b22      	ldrb	r2, [r4, #12]
 8017e88:	701a      	strb	r2, [r3, #0]

   //Notify user that data is available
   udpUpdateEvents(socket);
 8017e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e8c:	f000 fa3c 	bl	8018308 <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8017e90:	2300      	movs	r3, #0
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3734      	adds	r7, #52	; 0x34
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd90      	pop	{r4, r7, pc}
 8017e9a:	bf00      	nop

08017e9c <udpSendDatagram>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t udpSendDatagram(Socket *socket, const SocketMsg *message, uint_t flags)
{
 8017e9c:	b5b0      	push	{r4, r5, r7, lr}
 8017e9e:	b092      	sub	sp, #72	; 0x48
 8017ea0:	af04      	add	r7, sp, #16
 8017ea2:	60f8      	str	r0, [r7, #12]
 8017ea4:	60b9      	str	r1, [r7, #8]
 8017ea6:	607a      	str	r2, [r7, #4]
   NetBuffer *buffer;
   NetInterface *interface;
   NetTxAncillary ancillary;

   //Select the relevant network interface
   if(message->interface != NULL)
 8017ea8:	68bb      	ldr	r3, [r7, #8]
 8017eaa:	691b      	ldr	r3, [r3, #16]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d003      	beq.n	8017eb8 <udpSendDatagram+0x1c>
   {
      interface = message->interface;
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	691b      	ldr	r3, [r3, #16]
 8017eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8017eb6:	e002      	b.n	8017ebe <udpSendDatagram+0x22>
   }
   else
   {
      interface = socket->interface;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	68db      	ldr	r3, [r3, #12]
 8017ebc:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Allocate a memory buffer to hold the UDP datagram
   buffer = udpAllocBuffer(0, &offset);
 8017ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	2000      	movs	r0, #0
 8017ec6:	f000 fa03 	bl	80182d0 <udpAllocBuffer>
 8017eca:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Failed to allocate buffer?
   if(buffer == NULL)
 8017ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d101      	bne.n	8017ed6 <udpSendDatagram+0x3a>
      return ERROR_OUT_OF_MEMORY;
 8017ed2:	2364      	movs	r3, #100	; 0x64
 8017ed4:	e065      	b.n	8017fa2 <udpSendDatagram+0x106>

   //Copy data payload
   error = netBufferAppend(buffer, message->data, message->length);
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	6819      	ldr	r1, [r3, #0]
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	689b      	ldr	r3, [r3, #8]
 8017ede:	461a      	mov	r2, r3
 8017ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ee2:	f7f8 ffac 	bl	8010e3e <netBufferAppend>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Successful processing?
   if(!error)
 8017eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d154      	bne.n	8017f9a <udpSendDatagram+0xfe>
   {
      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8017ef0:	4b2e      	ldr	r3, [pc, #184]	; (8017fac <udpSendDatagram+0x110>)
 8017ef2:	f107 0410 	add.w	r4, r7, #16
 8017ef6:	461d      	mov	r5, r3
 8017ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017efc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017f00:	e884 0003 	stmia.w	r4, {r0, r1}

      //Set the TTL value to be used
      if(message->ttl != 0)
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	7b1b      	ldrb	r3, [r3, #12]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d003      	beq.n	8017f14 <udpSendDatagram+0x78>
      {
         ancillary.ttl = message->ttl;
 8017f0c:	68bb      	ldr	r3, [r7, #8]
 8017f0e:	7b1b      	ldrb	r3, [r3, #12]
 8017f10:	743b      	strb	r3, [r7, #16]
 8017f12:	e010      	b.n	8017f36 <udpSendDatagram+0x9a>
      }
      else if(ipIsMulticastAddr(&message->destIpAddr))
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	332c      	adds	r3, #44	; 0x2c
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7f0 fc51 	bl	80087c0 <ipIsMulticastAddr>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d004      	beq.n	8017f2e <udpSendDatagram+0x92>
      {
         ancillary.ttl = socket->multicastTtl;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f2a:	743b      	strb	r3, [r7, #16]
 8017f2c:	e003      	b.n	8017f36 <udpSendDatagram+0x9a>
      }
      else
      {
         ancillary.ttl = socket->ttl;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f34:	743b      	strb	r3, [r7, #16]
      }

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      if((flags & SOCKET_FLAG_DONT_ROUTE) != 0)
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d001      	beq.n	8017f44 <udpSendDatagram+0xa8>
      {
         ancillary.dontRoute = TRUE;
 8017f40:	2301      	movs	r3, #1
 8017f42:	617b      	str	r3, [r7, #20]
      ancillary.dscp = socket->dscp;
#endif

#if (ETH_SUPPORT == ENABLED)
      //Set source and destination MAC addresses
      ancillary.srcMacAddr = message->srcMacAddr;
 8017f44:	68ba      	ldr	r2, [r7, #8]
 8017f46:	f107 031c 	add.w	r3, r7, #28
 8017f4a:	3242      	adds	r2, #66	; 0x42
 8017f4c:	6810      	ldr	r0, [r2, #0]
 8017f4e:	6018      	str	r0, [r3, #0]
 8017f50:	8892      	ldrh	r2, [r2, #4]
 8017f52:	809a      	strh	r2, [r3, #4]
      ancillary.destMacAddr = message->destMacAddr;
 8017f54:	68ba      	ldr	r2, [r7, #8]
 8017f56:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8017f5a:	3248      	adds	r2, #72	; 0x48
 8017f5c:	6810      	ldr	r0, [r2, #0]
 8017f5e:	6018      	str	r0, [r3, #0]
 8017f60:	8892      	ldrh	r2, [r2, #4]
 8017f62:	809a      	strh	r2, [r3, #4]
      //Unique identifier for hardware time stamping
      ancillary.timestampId = message->timestampId;
#endif

      //Send UDP datagram
      error = udpSendBuffer(interface, &message->srcIpAddr, socket->localPort,
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	f103 0014 	add.w	r0, r3, #20
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8017f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f7c:	f107 0110 	add.w	r1, r7, #16
 8017f80:	9103      	str	r1, [sp, #12]
 8017f82:	9202      	str	r2, [sp, #8]
 8017f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f86:	9201      	str	r2, [sp, #4]
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	462b      	mov	r3, r5
 8017f8c:	4622      	mov	r2, r4
 8017f8e:	4601      	mov	r1, r0
 8017f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f92:	f000 f80d 	bl	8017fb0 <udpSendBuffer>
 8017f96:	4603      	mov	r3, r0
 8017f98:	86fb      	strh	r3, [r7, #54]	; 0x36
         &message->destIpAddr, message->destPort, buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 8017f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017f9c:	f7f8 fce0 	bl	8010960 <netBufferFree>

   //Return status code
   return error;
 8017fa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	3738      	adds	r7, #56	; 0x38
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8017faa:	bf00      	nop
 8017fac:	08025288 	.word	0x08025288

08017fb0 <udpSendBuffer>:
 **/

error_t udpSendBuffer(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8017fb0:	b590      	push	{r4, r7, lr}
 8017fb2:	b097      	sub	sp, #92	; 0x5c
 8017fb4:	af02      	add	r7, sp, #8
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	603b      	str	r3, [r7, #0]
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 8017fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017fc2:	3b08      	subs	r3, #8
 8017fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 8017fc6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017fc8:	f7f8 fcd9 	bl	801097e <netBufferGetLength>
 8017fcc:	4602      	mov	r2, r0
 8017fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017fd0:	1ad3      	subs	r3, r2, r3
 8017fd2:	64fb      	str	r3, [r7, #76]	; 0x4c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8017fd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017fd6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017fd8:	f7f8 fd99 	bl	8010b0e <netBufferAt>
 8017fdc:	64b8      	str	r0, [r7, #72]	; 0x48
   //Sanity check
   if(header == NULL)
 8017fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d101      	bne.n	8017fe8 <udpSendBuffer+0x38>
      return ERROR_FAILURE;
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	e0de      	b.n	80181a6 <udpSendBuffer+0x1f6>

   //Format UDP header
   header->srcPort = htons(srcPort);
 8017fe8:	88fb      	ldrh	r3, [r7, #6]
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7e8 ff72 	bl	8000ed4 <swapInt16>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ff6:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 8017ff8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7e8 ff69 	bl	8000ed4 <swapInt16>
 8018002:	4603      	mov	r3, r0
 8018004:	461a      	mov	r2, r3
 8018006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018008:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 801800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801800c:	b29b      	uxth	r3, r3
 801800e:	4618      	mov	r0, r3
 8018010:	f7e8 ff60 	bl	8000ed4 <swapInt16>
 8018014:	4603      	mov	r3, r0
 8018016:	461a      	mov	r2, r3
 8018018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801801a:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 801801c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801801e:	2200      	movs	r2, #0
 8018020:	719a      	strb	r2, [r3, #6]
 8018022:	2200      	movs	r2, #0
 8018024:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	2b04      	cmp	r3, #4
 801802c:	d14c      	bne.n	80180c8 <udpSendBuffer+0x118>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d007      	beq.n	8018044 <udpSendBuffer+0x94>
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	2b04      	cmp	r3, #4
 801803a:	d103      	bne.n	8018044 <udpSendBuffer+0x94>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	685b      	ldr	r3, [r3, #4]
 8018040:	61fb      	str	r3, [r7, #28]
 8018042:	e020      	b.n	8018086 <udpSendBuffer+0xd6>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	6859      	ldr	r1, [r3, #4]
 8018048:	f107 0214 	add.w	r2, r7, #20
 801804c:	f107 030c 	add.w	r3, r7, #12
 8018050:	4618      	mov	r0, r3
 8018052:	f7f1 fdc3 	bl	8009bdc <ipv4SelectSourceAddr>
 8018056:	4603      	mov	r3, r0
 8018058:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            &ipAddr);

         //Check status code
         if(!error)
 801805c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018060:	2b00      	cmp	r3, #0
 8018062:	d102      	bne.n	801806a <udpSendBuffer+0xba>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 8018064:	697b      	ldr	r3, [r7, #20]
 8018066:	61fb      	str	r3, [r7, #28]
 8018068:	e00d      	b.n	8018086 <udpSendBuffer+0xd6>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018072:	d105      	bne.n	8018080 <udpSendBuffer+0xd0>
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d002      	beq.n	8018080 <udpSendBuffer+0xd0>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 801807a:	2300      	movs	r3, #0
 801807c:	61fb      	str	r3, [r7, #28]
 801807e:	e002      	b.n	8018086 <udpSendBuffer+0xd6>
            }
            else
            {
               //Source address selection failed
               return error;
 8018080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018084:	e08f      	b.n	80181a6 <udpSendBuffer+0x1f6>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8018086:	230c      	movs	r3, #12
 8018088:	61bb      	str	r3, [r7, #24]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	685b      	ldr	r3, [r3, #4]
 801808e:	623b      	str	r3, [r7, #32]
      pseudoHeader.ipv4Data.reserved = 0;
 8018090:	2300      	movs	r3, #0
 8018092:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 8018096:	2311      	movs	r3, #17
 8018098:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      pseudoHeader.ipv4Data.length = htons(length);
 801809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801809e:	b29b      	uxth	r3, r3
 80180a0:	4618      	mov	r0, r3
 80180a2:	f7e8 ff17 	bl	8000ed4 <swapInt16>
 80180a6:	4603      	mov	r3, r0
 80180a8:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 80180aa:	f107 0318 	add.w	r3, r7, #24
 80180ae:	1d18      	adds	r0, r3, #4
 80180b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80180b8:	210c      	movs	r1, #12
 80180ba:	f7f0 fcb3 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 80180be:	4603      	mov	r3, r0
 80180c0:	461a      	mov	r2, r3
 80180c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180c4:	80da      	strh	r2, [r3, #6]
 80180c6:	e051      	b.n	801816c <udpSendBuffer+0x1bc>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(destIpAddr->length == sizeof(Ipv6Addr))
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	2b10      	cmp	r3, #16
 80180ce:	d14b      	bne.n	8018168 <udpSendBuffer+0x1b8>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv6Addr))
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00b      	beq.n	80180ee <udpSendBuffer+0x13e>
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	2b10      	cmp	r3, #16
 80180dc:	d107      	bne.n	80180ee <udpSendBuffer+0x13e>
      {
         //Copy the source IP address
         pseudoHeader.ipv6Data.srcAddr = srcIpAddr->ipv6Addr;
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	f107 041c 	add.w	r4, r7, #28
 80180e4:	3304      	adds	r3, #4
 80180e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80180ec:	e013      	b.n	8018116 <udpSendBuffer+0x166>
      }
      else
      {
         //Select the source IPv6 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv6SelectSourceAddr(&interface, &destIpAddr->ipv6Addr,
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	1d19      	adds	r1, r3, #4
 80180f2:	f107 0318 	add.w	r3, r7, #24
 80180f6:	1d1a      	adds	r2, r3, #4
 80180f8:	f107 030c 	add.w	r3, r7, #12
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7f3 ffc9 	bl	800c094 <ipv6SelectSourceAddr>
 8018102:	4603      	mov	r3, r0
 8018104:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            &pseudoHeader.ipv6Data.srcAddr);
         //Any error to report?
         if(error)
 8018108:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801810c:	2b00      	cmp	r3, #0
 801810e:	d002      	beq.n	8018116 <udpSendBuffer+0x166>
            return error;
 8018110:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018114:	e047      	b.n	80181a6 <udpSendBuffer+0x1f6>
      }

      //Format IPv6 pseudo header
      pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 8018116:	2328      	movs	r3, #40	; 0x28
 8018118:	61bb      	str	r3, [r7, #24]
      pseudoHeader.ipv6Data.destAddr = destIpAddr->ipv6Addr;
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8018120:	3304      	adds	r3, #4
 8018122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.length = htonl(length);
 8018128:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801812a:	f7e8 fee1 	bl	8000ef0 <swapInt32>
 801812e:	4603      	mov	r3, r0
 8018130:	63fb      	str	r3, [r7, #60]	; 0x3c
      pseudoHeader.ipv6Data.reserved[0] = 0;
 8018132:	2300      	movs	r3, #0
 8018134:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      pseudoHeader.ipv6Data.reserved[1] = 0;
 8018138:	2300      	movs	r3, #0
 801813a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      pseudoHeader.ipv6Data.reserved[2] = 0;
 801813e:	2300      	movs	r3, #0
 8018140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      pseudoHeader.ipv6Data.nextHeader = IPV6_UDP_HEADER;
 8018144:	2311      	movs	r3, #17
 8018146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv6Data,
 801814a:	f107 0318 	add.w	r3, r7, #24
 801814e:	1d18      	adds	r0, r3, #4
 8018150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018152:	9300      	str	r3, [sp, #0]
 8018154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018156:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018158:	2128      	movs	r1, #40	; 0x28
 801815a:	f7f0 fc63 	bl	8008a24 <ipCalcUpperLayerChecksumEx>
 801815e:	4603      	mov	r3, r0
 8018160:	461a      	mov	r2, r3
 8018162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018164:	80da      	strh	r2, [r3, #6]
 8018166:	e001      	b.n	801816c <udpSendBuffer+0x1bc>
   else
#endif
   //Invalid destination address?
   {
      //An internal error has occurred
      return ERROR_FAILURE;
 8018168:	2301      	movs	r3, #1
 801816a:	e01c      	b.n	80181a6 <udpSendBuffer+0x1f6>
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 801816c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801816e:	88db      	ldrh	r3, [r3, #6]
 8018170:	b29b      	uxth	r3, r3
 8018172:	2b00      	cmp	r3, #0
 8018174:	d106      	bne.n	8018184 <udpSendBuffer+0x1d4>
   {
      header->checksum = 0xFFFF;
 8018176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018178:	f04f 32ff 	mov.w	r2, #4294967295
 801817c:	719a      	strb	r2, [r3, #6]
 801817e:	f04f 32ff 	mov.w	r2, #4294967295
 8018182:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8018184:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8018186:	f000 f9d5 	bl	8018534 <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, ancillary);
 801818a:	68f8      	ldr	r0, [r7, #12]
 801818c:	f107 0118 	add.w	r1, r7, #24
 8018190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018192:	9300      	str	r3, [sp, #0]
 8018194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018196:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018198:	f7f0 fae4 	bl	8008764 <ipSendDatagram>
 801819c:	4603      	mov	r3, r0
 801819e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Return status code
   return error;
 80181a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	3754      	adds	r7, #84	; 0x54
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd90      	pop	{r4, r7, pc}
	...

080181b0 <udpReceiveDatagram>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t udpReceiveDatagram(Socket *socket, SocketMsg *message, uint_t flags)
{
 80181b0:	b5b0      	push	{r4, r5, r7, lr}
 80181b2:	b086      	sub	sp, #24
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	607a      	str	r2, [r7, #4]
   error_t error;
   SocketQueueItem *queueItem;

   //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
   if((flags & SOCKET_FLAG_DONT_WAIT) == 0)
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d11b      	bne.n	80181fe <udpReceiveDatagram+0x4e>
   {
      //Check whether the receive queue is empty
      if(socket->receiveQueue == NULL)
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d116      	bne.n	80181fe <udpReceiveDatagram+0x4e>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	2280      	movs	r2, #128	; 0x80
 80181d4:	651a      	str	r2, [r3, #80]	; 0x50

         //Reset the event object
         osResetEvent(&socket->event);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	334c      	adds	r3, #76	; 0x4c
 80181da:	4618      	mov	r0, r3
 80181dc:	f7e8 ffaa 	bl	8001134 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 80181e0:	483a      	ldr	r0, [pc, #232]	; (80182cc <udpReceiveDatagram+0x11c>)
 80181e2:	f7e9 f84e 	bl	8001282 <osReleaseMutex>
         //Wait until an event is triggered
         osWaitForEvent(&socket->event, socket->timeout);
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181f0:	4619      	mov	r1, r3
 80181f2:	4610      	mov	r0, r2
 80181f4:	f7e8 ffac 	bl	8001150 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 80181f8:	4834      	ldr	r0, [pc, #208]	; (80182cc <udpReceiveDatagram+0x11c>)
 80181fa:	f7e9 f833 	bl	8001264 <osAcquireMutex>
      }
   }

   //Any datagram received?
   if(socket->receiveQueue != NULL)
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8018204:	2b00      	cmp	r3, #0
 8018206:	d056      	beq.n	80182b6 <udpReceiveDatagram+0x106>
   {
      //Point to the first item in the receive queue
      queueItem = socket->receiveQueue;
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 801820e:	613b      	str	r3, [r7, #16]

      //Copy data to user buffer
      message->length = netBufferRead(message->data, queueItem->buffer,
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	6818      	ldr	r0, [r3, #0]
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	685b      	ldr	r3, [r3, #4]
 8018220:	f7f8 fe99 	bl	8010f56 <netBufferRead>
 8018224:	4602      	mov	r2, r0
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	609a      	str	r2, [r3, #8]
         queueItem->offset, message->size);

      //Network interface where the packet was received
      message->interface = queueItem->interface;
 801822a:	693b      	ldr	r3, [r7, #16]
 801822c:	685a      	ldr	r2, [r3, #4]
 801822e:	68bb      	ldr	r3, [r7, #8]
 8018230:	611a      	str	r2, [r3, #16]
      //Save the source IP address
      message->srcIpAddr = queueItem->srcIpAddr;
 8018232:	68ba      	ldr	r2, [r7, #8]
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	f102 0414 	add.w	r4, r2, #20
 801823a:	f103 0508 	add.w	r5, r3, #8
 801823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018242:	682b      	ldr	r3, [r5, #0]
 8018244:	6023      	str	r3, [r4, #0]
      //Save the source port number
      message->srcPort = queueItem->srcPort;
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	8b9a      	ldrh	r2, [r3, #28]
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	851a      	strh	r2, [r3, #40]	; 0x28
      //Save the destination IP address
      message->destIpAddr = queueItem->destIpAddr;
 801824e:	68ba      	ldr	r2, [r7, #8]
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	f102 042c 	add.w	r4, r2, #44	; 0x2c
 8018256:	f103 0520 	add.w	r5, r3, #32
 801825a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801825c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801825e:	682b      	ldr	r3, [r5, #0]
 8018260:	6023      	str	r3, [r4, #0]

      //Save TTL value
      message->ttl = queueItem->ancillary.ttl;
 8018262:	693b      	ldr	r3, [r7, #16]
 8018264:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	731a      	strb	r2, [r3, #12]

#if (ETH_SUPPORT == ENABLED)
      //Save source and destination MAC addresses
      message->srcMacAddr = queueItem->ancillary.srcMacAddr;
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	693a      	ldr	r2, [r7, #16]
 8018270:	3342      	adds	r3, #66	; 0x42
 8018272:	323d      	adds	r2, #61	; 0x3d
 8018274:	6811      	ldr	r1, [r2, #0]
 8018276:	6019      	str	r1, [r3, #0]
 8018278:	8892      	ldrh	r2, [r2, #4]
 801827a:	809a      	strh	r2, [r3, #4]
      message->destMacAddr = queueItem->ancillary.destMacAddr;
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	693a      	ldr	r2, [r7, #16]
 8018280:	3348      	adds	r3, #72	; 0x48
 8018282:	3243      	adds	r2, #67	; 0x43
 8018284:	6810      	ldr	r0, [r2, #0]
 8018286:	6018      	str	r0, [r3, #0]
 8018288:	8892      	ldrh	r2, [r2, #4]
 801828a:	809a      	strh	r2, [r3, #4]
      message->timestamp = queueItem->ancillary.timestamp;
#endif

      //If the SOCKET_FLAG_PEEK flag is set, the data is copied into the
      //buffer but is not removed from the input queue
      if((flags & SOCKET_FLAG_PEEK) == 0)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018292:	2b00      	cmp	r3, #0
 8018294:	d109      	bne.n	80182aa <udpReceiveDatagram+0xfa>
      {
         //Remove the item from the receive queue
         socket->receiveQueue = queueItem->next;
 8018296:	693b      	ldr	r3, [r7, #16]
 8018298:	681a      	ldr	r2, [r3, #0]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

         //Deallocate memory buffer
         netBufferFree(queueItem->buffer);
 80182a0:	693b      	ldr	r3, [r7, #16]
 80182a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7f8 fb5b 	bl	8010960 <netBufferFree>
      }

      //Update the state of events
      udpUpdateEvents(socket);
 80182aa:	68f8      	ldr	r0, [r7, #12]
 80182ac:	f000 f82c 	bl	8018308 <udpUpdateEvents>

      //Successful read operation
      error = NO_ERROR;
 80182b0:	2300      	movs	r3, #0
 80182b2:	82fb      	strh	r3, [r7, #22]
 80182b4:	e004      	b.n	80182c0 <udpReceiveDatagram+0x110>
   }
   else
   {
      //Total number of data that have been received
      message->length = 0;
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	2200      	movs	r2, #0
 80182ba:	609a      	str	r2, [r3, #8]

      //Report a timeout error
      error = ERROR_TIMEOUT;
 80182bc:	23dc      	movs	r3, #220	; 0xdc
 80182be:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80182c0:	8afb      	ldrh	r3, [r7, #22]
}
 80182c2:	4618      	mov	r0, r3
 80182c4:	3718      	adds	r7, #24
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bdb0      	pop	{r4, r5, r7, pc}
 80182ca:	bf00      	nop
 80182cc:	200046f4 	.word	0x200046f4

080182d0 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	3308      	adds	r3, #8
 80182de:	6839      	ldr	r1, [r7, #0]
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7f0 fbc8 	bl	8008a76 <ipAllocBuffer>
 80182e6:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d101      	bne.n	80182f2 <udpAllocBuffer+0x22>
      return NULL;
 80182ee:	2300      	movs	r3, #0
 80182f0:	e006      	b.n	8018300 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	f103 0208 	add.w	r2, r3, #8
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 80182fe:	68fb      	ldr	r3, [r7, #12]
}
 8018300:	4618      	mov	r0, r3
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2200      	movs	r2, #0
 8018314:	655a      	str	r2, [r3, #84]	; 0x54

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 801831c:	2b00      	cmp	r3, #0
 801831e:	d005      	beq.n	801832c <udpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	655a      	str	r2, [r3, #84]	; 0x54

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	68db      	ldr	r3, [r3, #12]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d011      	beq.n	8018358 <udpUpdateEvents+0x50>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	68db      	ldr	r3, [r3, #12]
 8018338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801833a:	2b00      	cmp	r3, #0
 801833c:	d006      	beq.n	801834c <udpUpdateEvents+0x44>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	655a      	str	r2, [r3, #84]	; 0x54
 801834a:	e005      	b.n	8018358 <udpUpdateEvents+0x50>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	655a      	str	r2, [r3, #84]	; 0x54
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018360:	401a      	ands	r2, r3
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	655a      	str	r2, [r3, #84]	; 0x54

   //Any event to signal?
   if(socket->eventFlags)
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801836a:	2b00      	cmp	r3, #0
 801836c:	d00d      	beq.n	801838a <udpUpdateEvents+0x82>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	334c      	adds	r3, #76	; 0x4c
 8018372:	4618      	mov	r0, r3
 8018374:	f7e8 fecf 	bl	8001116 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801837c:	2b00      	cmp	r3, #0
 801837e:	d004      	beq.n	801838a <udpUpdateEvents+0x82>
      {
         osSetEvent(socket->userEvent);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018384:	4618      	mov	r0, r3
 8018386:	f7e8 fec6 	bl	8001116 <osSetEvent>
      }
   }
}
 801838a:	bf00      	nop
 801838c:	3708      	adds	r7, #8
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
	...

08018394 <udpAttachRxCallback>:
 * @return Error code
 **/

error_t udpAttachRxCallback(NetInterface *interface, uint16_t port,
   UdpRxCallback callback, void *param)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b086      	sub	sp, #24
 8018398:	af00      	add	r7, sp, #0
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	607a      	str	r2, [r7, #4]
 801839e:	603b      	str	r3, [r7, #0]
 80183a0:	460b      	mov	r3, r1
 80183a2:	817b      	strh	r3, [r7, #10]
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 80183a4:	4817      	ldr	r0, [pc, #92]	; (8018404 <udpAttachRxCallback+0x70>)
 80183a6:	f7e8 ff5d 	bl	8001264 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80183aa:	2300      	movs	r3, #0
 80183ac:	617b      	str	r3, [r7, #20]
 80183ae:	e018      	b.n	80183e2 <udpAttachRxCallback+0x4e>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	011b      	lsls	r3, r3, #4
 80183b4:	4a14      	ldr	r2, [pc, #80]	; (8018408 <udpAttachRxCallback+0x74>)
 80183b6:	4413      	add	r3, r2
 80183b8:	613b      	str	r3, [r7, #16]

      //Check whether the entry is currently in use
      if(entry->callback == NULL)
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	689b      	ldr	r3, [r3, #8]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d10c      	bne.n	80183dc <udpAttachRxCallback+0x48>
      {
         //Create a new entry
         entry->interface = interface;
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	68fa      	ldr	r2, [r7, #12]
 80183c6:	601a      	str	r2, [r3, #0]
         entry->port = port;
 80183c8:	693b      	ldr	r3, [r7, #16]
 80183ca:	897a      	ldrh	r2, [r7, #10]
 80183cc:	809a      	strh	r2, [r3, #4]
         entry->callback = callback;
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	687a      	ldr	r2, [r7, #4]
 80183d2:	609a      	str	r2, [r3, #8]
         entry->param = param;
 80183d4:	693b      	ldr	r3, [r7, #16]
 80183d6:	683a      	ldr	r2, [r7, #0]
 80183d8:	60da      	str	r2, [r3, #12]
         //We are done
         break;
 80183da:	e005      	b.n	80183e8 <udpAttachRxCallback+0x54>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	3301      	adds	r3, #1
 80183e0:	617b      	str	r3, [r7, #20]
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	2b09      	cmp	r3, #9
 80183e6:	d9e3      	bls.n	80183b0 <udpAttachRxCallback+0x1c>
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 80183e8:	4806      	ldr	r0, [pc, #24]	; (8018404 <udpAttachRxCallback+0x70>)
 80183ea:	f7e8 ff4a 	bl	8001282 <osReleaseMutex>

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 80183ee:	697b      	ldr	r3, [r7, #20]
 80183f0:	2b09      	cmp	r3, #9
 80183f2:	d901      	bls.n	80183f8 <udpAttachRxCallback+0x64>
      return ERROR_OUT_OF_RESOURCES;
 80183f4:	2365      	movs	r3, #101	; 0x65
 80183f6:	e000      	b.n	80183fa <udpAttachRxCallback+0x66>

   //Successful processing
   return NO_ERROR;
 80183f8:	2300      	movs	r3, #0
}
 80183fa:	4618      	mov	r0, r3
 80183fc:	3718      	adds	r7, #24
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	20006e9c 	.word	0x20006e9c
 8018408:	20006dfc 	.word	0x20006dfc

0801840c <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b086      	sub	sp, #24
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 8018418:	2301      	movs	r3, #1
 801841a:	82fb      	strh	r3, [r7, #22]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 801841c:	4815      	ldr	r0, [pc, #84]	; (8018474 <udpDetachRxCallback+0x68>)
 801841e:	f7e8 ff21 	bl	8001264 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8018422:	2300      	movs	r3, #0
 8018424:	613b      	str	r3, [r7, #16]
 8018426:	e01a      	b.n	801845e <udpDetachRxCallback+0x52>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	011b      	lsls	r3, r3, #4
 801842c:	4a12      	ldr	r2, [pc, #72]	; (8018478 <udpDetachRxCallback+0x6c>)
 801842e:	4413      	add	r3, r2
 8018430:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	689b      	ldr	r3, [r3, #8]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d00e      	beq.n	8018458 <udpDetachRxCallback+0x4c>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	889b      	ldrh	r3, [r3, #4]
 801843e:	887a      	ldrh	r2, [r7, #2]
 8018440:	429a      	cmp	r2, r3
 8018442:	d109      	bne.n	8018458 <udpDetachRxCallback+0x4c>
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	687a      	ldr	r2, [r7, #4]
 801844a:	429a      	cmp	r2, r3
 801844c:	d104      	bne.n	8018458 <udpDetachRxCallback+0x4c>
         {
            //Unregister user callback
            entry->callback = NULL;
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	2200      	movs	r2, #0
 8018452:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 8018454:	2300      	movs	r3, #0
 8018456:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	3301      	adds	r3, #1
 801845c:	613b      	str	r3, [r7, #16]
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	2b09      	cmp	r3, #9
 8018462:	d9e1      	bls.n	8018428 <udpDetachRxCallback+0x1c>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8018464:	4803      	ldr	r0, [pc, #12]	; (8018474 <udpDetachRxCallback+0x68>)
 8018466:	f7e8 ff0c 	bl	8001282 <osReleaseMutex>

   //Return status code
   return error;
 801846a:	8afb      	ldrh	r3, [r7, #22]
}
 801846c:	4618      	mov	r0, r3
 801846e:	3718      	adds	r7, #24
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}
 8018474:	20006e9c 	.word	0x20006e9c
 8018478:	20006dfc 	.word	0x20006dfc

0801847c <udpInvokeRxCallback>:
 **/

error_t udpInvokeRxCallback(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *header,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 801847c:	b590      	push	{r4, r7, lr}
 801847e:	b08d      	sub	sp, #52	; 0x34
 8018480:	af04      	add	r7, sp, #16
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
 8018488:	603b      	str	r3, [r7, #0]
   uint_t i;
   void *param;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 801848a:	23d2      	movs	r3, #210	; 0xd2
 801848c:	83fb      	strh	r3, [r7, #30]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 801848e:	4827      	ldr	r0, [pc, #156]	; (801852c <udpInvokeRxCallback+0xb0>)
 8018490:	f7e8 fee8 	bl	8001264 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8018494:	2300      	movs	r3, #0
 8018496:	61bb      	str	r3, [r7, #24]
 8018498:	e03d      	b.n	8018516 <udpInvokeRxCallback+0x9a>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 801849a:	69bb      	ldr	r3, [r7, #24]
 801849c:	011b      	lsls	r3, r3, #4
 801849e:	4a24      	ldr	r2, [pc, #144]	; (8018530 <udpInvokeRxCallback+0xb4>)
 80184a0:	4413      	add	r3, r2
 80184a2:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 80184a4:	697b      	ldr	r3, [r7, #20]
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d031      	beq.n	8018510 <udpInvokeRxCallback+0x94>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d004      	beq.n	80184be <udpInvokeRxCallback+0x42>
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	68fa      	ldr	r2, [r7, #12]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d128      	bne.n	8018510 <udpInvokeRxCallback+0x94>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	889c      	ldrh	r4, [r3, #4]
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	885b      	ldrh	r3, [r3, #2]
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	4618      	mov	r0, r3
 80184ca:	f7e8 fd03 	bl	8000ed4 <swapInt16>
 80184ce:	4603      	mov	r3, r0
 80184d0:	429c      	cmp	r4, r3
 80184d2:	d11d      	bne.n	8018510 <udpInvokeRxCallback+0x94>
            {
               //Retrieve callback parameter
               param = entry->param;
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	613b      	str	r3, [r7, #16]

               //Release mutex to prevent any deadlock
               if(param == NULL)
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d102      	bne.n	80184e6 <udpInvokeRxCallback+0x6a>
                  osReleaseMutex(&udpCallbackMutex);
 80184e0:	4812      	ldr	r0, [pc, #72]	; (801852c <udpInvokeRxCallback+0xb0>)
 80184e2:	f7e8 fece 	bl	8001282 <osReleaseMutex>

               //Invoke user callback function
               entry->callback(interface, pseudoHeader, header, buffer, offset,
 80184e6:	697b      	ldr	r3, [r7, #20]
 80184e8:	689c      	ldr	r4, [r3, #8]
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	9302      	str	r3, [sp, #8]
 80184ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f0:	9301      	str	r3, [sp, #4]
 80184f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f4:	9300      	str	r3, [sp, #0]
 80184f6:	683b      	ldr	r3, [r7, #0]
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	68b9      	ldr	r1, [r7, #8]
 80184fc:	68f8      	ldr	r0, [r7, #12]
 80184fe:	47a0      	blx	r4
                  ancillary, param);

               //Acquire mutex
               if(param == NULL)
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d102      	bne.n	801850c <udpInvokeRxCallback+0x90>
                  osAcquireMutex(&udpCallbackMutex);
 8018506:	4809      	ldr	r0, [pc, #36]	; (801852c <udpInvokeRxCallback+0xb0>)
 8018508:	f7e8 feac 	bl	8001264 <osAcquireMutex>

               //A matching entry has been found
               error = NO_ERROR;
 801850c:	2300      	movs	r3, #0
 801850e:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8018510:	69bb      	ldr	r3, [r7, #24]
 8018512:	3301      	adds	r3, #1
 8018514:	61bb      	str	r3, [r7, #24]
 8018516:	69bb      	ldr	r3, [r7, #24]
 8018518:	2b09      	cmp	r3, #9
 801851a:	d9be      	bls.n	801849a <udpInvokeRxCallback+0x1e>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 801851c:	4803      	ldr	r0, [pc, #12]	; (801852c <udpInvokeRxCallback+0xb0>)
 801851e:	f7e8 feb0 	bl	8001282 <osReleaseMutex>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 8018522:	8bfb      	ldrh	r3, [r7, #30]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3724      	adds	r7, #36	; 0x24
 8018528:	46bd      	mov	sp, r7
 801852a:	bd90      	pop	{r4, r7, pc}
 801852c:	20006e9c 	.word	0x20006e9c
 8018530:	20006dfc 	.word	0x20006dfc

08018534 <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 8018534:	b480      	push	{r7}
 8018536:	b083      	sub	sp, #12
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 801853c:	bf00      	nop
 801853e:	370c      	adds	r7, #12
 8018540:	46bd      	mov	sp, r7
 8018542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018546:	4770      	bx	lr

08018548 <debugInit>:
 * @brief Debug UART initialization
 * @param[in] baudrate UART baudrate
 **/

void debugInit(uint32_t baudrate)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b08a      	sub	sp, #40	; 0x28
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
   GPIO_InitTypeDef GPIO_InitStructure;

   //Enable GPIOD clock
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8018550:	2300      	movs	r3, #0
 8018552:	613b      	str	r3, [r7, #16]
 8018554:	4b2b      	ldr	r3, [pc, #172]	; (8018604 <debugInit+0xbc>)
 8018556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018558:	4a2a      	ldr	r2, [pc, #168]	; (8018604 <debugInit+0xbc>)
 801855a:	f043 0308 	orr.w	r3, r3, #8
 801855e:	6313      	str	r3, [r2, #48]	; 0x30
 8018560:	4b28      	ldr	r3, [pc, #160]	; (8018604 <debugInit+0xbc>)
 8018562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018564:	f003 0308 	and.w	r3, r3, #8
 8018568:	613b      	str	r3, [r7, #16]
 801856a:	693b      	ldr	r3, [r7, #16]
   //Enable USART3 clock
   __HAL_RCC_USART3_CLK_ENABLE();
 801856c:	2300      	movs	r3, #0
 801856e:	60fb      	str	r3, [r7, #12]
 8018570:	4b24      	ldr	r3, [pc, #144]	; (8018604 <debugInit+0xbc>)
 8018572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018574:	4a23      	ldr	r2, [pc, #140]	; (8018604 <debugInit+0xbc>)
 8018576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801857a:	6413      	str	r3, [r2, #64]	; 0x40
 801857c:	4b21      	ldr	r3, [pc, #132]	; (8018604 <debugInit+0xbc>)
 801857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018584:	60fb      	str	r3, [r7, #12]
 8018586:	68fb      	ldr	r3, [r7, #12]

   //Configure USART3_TX (PD8)
   GPIO_InitStructure.Pin = GPIO_PIN_8;
 8018588:	f44f 7380 	mov.w	r3, #256	; 0x100
 801858c:	617b      	str	r3, [r7, #20]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801858e:	2302      	movs	r3, #2
 8018590:	61bb      	str	r3, [r7, #24]
   GPIO_InitStructure.Pull = GPIO_PULLUP;
 8018592:	2301      	movs	r3, #1
 8018594:	61fb      	str	r3, [r7, #28]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8018596:	2301      	movs	r3, #1
 8018598:	623b      	str	r3, [r7, #32]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART3;
 801859a:	2307      	movs	r3, #7
 801859c:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 801859e:	f107 0314 	add.w	r3, r7, #20
 80185a2:	4619      	mov	r1, r3
 80185a4:	4818      	ldr	r0, [pc, #96]	; (8018608 <debugInit+0xc0>)
 80185a6:	f003 f89b 	bl	801b6e0 <HAL_GPIO_Init>

   //Configure USART3_RX (PD9)
   GPIO_InitStructure.Pin = GPIO_PIN_9;
 80185aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80185ae:	617b      	str	r3, [r7, #20]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80185b0:	2302      	movs	r3, #2
 80185b2:	61bb      	str	r3, [r7, #24]
   GPIO_InitStructure.Pull = GPIO_PULLUP;
 80185b4:	2301      	movs	r3, #1
 80185b6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80185b8:	2301      	movs	r3, #1
 80185ba:	623b      	str	r3, [r7, #32]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART3;
 80185bc:	2307      	movs	r3, #7
 80185be:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80185c0:	f107 0314 	add.w	r3, r7, #20
 80185c4:	4619      	mov	r1, r3
 80185c6:	4810      	ldr	r0, [pc, #64]	; (8018608 <debugInit+0xc0>)
 80185c8:	f003 f88a 	bl	801b6e0 <HAL_GPIO_Init>

   //Configure USART3
   UART_Handle.Instance = USART3;
 80185cc:	4b0f      	ldr	r3, [pc, #60]	; (801860c <debugInit+0xc4>)
 80185ce:	4a10      	ldr	r2, [pc, #64]	; (8018610 <debugInit+0xc8>)
 80185d0:	601a      	str	r2, [r3, #0]
   UART_Handle.Init.BaudRate = baudrate;
 80185d2:	4a0e      	ldr	r2, [pc, #56]	; (801860c <debugInit+0xc4>)
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	6053      	str	r3, [r2, #4]
   UART_Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80185d8:	4b0c      	ldr	r3, [pc, #48]	; (801860c <debugInit+0xc4>)
 80185da:	2200      	movs	r2, #0
 80185dc:	609a      	str	r2, [r3, #8]
   UART_Handle.Init.StopBits = UART_STOPBITS_1;
 80185de:	4b0b      	ldr	r3, [pc, #44]	; (801860c <debugInit+0xc4>)
 80185e0:	2200      	movs	r2, #0
 80185e2:	60da      	str	r2, [r3, #12]
   UART_Handle.Init.Parity = UART_PARITY_NONE;
 80185e4:	4b09      	ldr	r3, [pc, #36]	; (801860c <debugInit+0xc4>)
 80185e6:	2200      	movs	r2, #0
 80185e8:	611a      	str	r2, [r3, #16]
   UART_Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80185ea:	4b08      	ldr	r3, [pc, #32]	; (801860c <debugInit+0xc4>)
 80185ec:	2200      	movs	r2, #0
 80185ee:	619a      	str	r2, [r3, #24]
   UART_Handle.Init.Mode = UART_MODE_TX_RX;
 80185f0:	4b06      	ldr	r3, [pc, #24]	; (801860c <debugInit+0xc4>)
 80185f2:	220c      	movs	r2, #12
 80185f4:	615a      	str	r2, [r3, #20]
   HAL_UART_Init(&UART_Handle);
 80185f6:	4805      	ldr	r0, [pc, #20]	; (801860c <debugInit+0xc4>)
 80185f8:	f003 fef4 	bl	801c3e4 <HAL_UART_Init>
}
 80185fc:	bf00      	nop
 80185fe:	3728      	adds	r7, #40	; 0x28
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	40023800 	.word	0x40023800
 8018608:	40020c00 	.word	0x40020c00
 801860c:	200041b8 	.word	0x200041b8
 8018610:	40004800 	.word	0x40004800

08018614 <fputc>:
 * @return On success, the character written is returned. If a writing
 *   error occurs, EOF is returned
 **/

int_t fputc(int_t c, FILE *stream)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b084      	sub	sp, #16
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
   //Standard output or error output?
   if(stream == stdout || stream == stderr)
 801861e:	4b0f      	ldr	r3, [pc, #60]	; (801865c <fputc+0x48>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	689b      	ldr	r3, [r3, #8]
 8018624:	683a      	ldr	r2, [r7, #0]
 8018626:	429a      	cmp	r2, r3
 8018628:	d005      	beq.n	8018636 <fputc+0x22>
 801862a:	4b0c      	ldr	r3, [pc, #48]	; (801865c <fputc+0x48>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	68db      	ldr	r3, [r3, #12]
 8018630:	683a      	ldr	r2, [r7, #0]
 8018632:	429a      	cmp	r2, r3
 8018634:	d10c      	bne.n	8018650 <fputc+0x3c>
   {
      //Character to be written
      uint8_t ch = c;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	b2db      	uxtb	r3, r3
 801863a:	73fb      	strb	r3, [r7, #15]

      //Transmit data
      HAL_UART_Transmit(&UART_Handle, &ch, 1, HAL_MAX_DELAY);
 801863c:	f107 010f 	add.w	r1, r7, #15
 8018640:	f04f 33ff 	mov.w	r3, #4294967295
 8018644:	2201      	movs	r2, #1
 8018646:	4806      	ldr	r0, [pc, #24]	; (8018660 <fputc+0x4c>)
 8018648:	f003 ff23 	bl	801c492 <HAL_UART_Transmit>

      //On success, the character written is returned
      return c;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	e001      	b.n	8018654 <fputc+0x40>
   }
   //Unknown output?
   else
   {
      //If a writing error occurs, EOF is returned
      return EOF;
 8018650:	f04f 33ff 	mov.w	r3, #4294967295
   }
}
 8018654:	4618      	mov	r0, r3
 8018656:	3710      	adds	r7, #16
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}
 801865c:	20000044 	.word	0x20000044
 8018660:	200041b8 	.word	0x200041b8

08018664 <httpServerRequestCallback>:
 * @return Error code
 **/

error_t httpServerRequestCallback(HttpConnection *connection,
   const char_t *uri)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b0a8      	sub	sp, #160	; 0xa0
 8018668:	af02      	add	r7, sp, #8
 801866a:	6078      	str	r0, [r7, #4]
 801866c:	6039      	str	r1, [r7, #0]
   uint8_t buffer[128];
   size_t received;
   size_t n;

   //Initialize variables
   received = 0;
 801866e:	2300      	movs	r3, #0
 8018670:	60fb      	str	r3, [r7, #12]
   error = NO_ERROR;
 8018672:	2300      	movs	r3, #0
 8018674:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
   
   //Manage application data request
   if(!strcasecmp(uri, "/data.json"))
 8018678:	49c0      	ldr	r1, [pc, #768]	; (801897c <httpServerRequestCallback+0x318>)
 801867a:	6838      	ldr	r0, [r7, #0]
 801867c:	f005 fb12 	bl	801dca4 <strcasecmp>
 8018680:	4603      	mov	r3, r0
 8018682:	2b00      	cmp	r3, #0
 8018684:	d150      	bne.n	8018728 <httpServerRequestCallback+0xc4>
   {
      //Format json response
      n = sprintf((char_t*) buffer, 
 8018686:	f107 0010 	add.w	r0, r7, #16
 801868a:	2301      	movs	r3, #1
 801868c:	9300      	str	r3, [sp, #0]
 801868e:	4bbc      	ldr	r3, [pc, #752]	; (8018980 <httpServerRequestCallback+0x31c>)
 8018690:	4abc      	ldr	r2, [pc, #752]	; (8018984 <httpServerRequestCallback+0x320>)
 8018692:	49bd      	ldr	r1, [pc, #756]	; (8018988 <httpServerRequestCallback+0x324>)
 8018694:	f005 fae6 	bl	801dc64 <sprintf>
 8018698:	4603      	mov	r3, r0
 801869a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
         1
#endif
      );
      
      //Format HTTP response header
      connection->response.version = connection->request.version;
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	699a      	ldr	r2, [r3, #24]
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
      connection->response.statusCode = 200;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	22c8      	movs	r2, #200	; 0xc8
 80186ac:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
      connection->response.keepAlive = connection->request.keepAlive;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
      connection->response.noCache = TRUE;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2201      	movs	r2, #1
 80186c0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
      connection->response.contentLength = n;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80186ca:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      
      //Send the header to the client
      error = httpWriteHeader(connection);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7ed fff0 	bl	80066b4 <httpWriteHeader>
 80186d4:	4603      	mov	r3, r0
 80186d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
      //Any error to report?
      if(error)
 80186da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d002      	beq.n	80186e8 <httpServerRequestCallback+0x84>
         return error;
 80186e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80186e6:	e18e      	b.n	8018a06 <httpServerRequestCallback+0x3a2>
      
      //Send the response data to the client
      error = httpWriteStream(connection, buffer, n);
 80186e8:	f107 0310 	add.w	r3, r7, #16
 80186ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80186f0:	4619      	mov	r1, r3
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f7ee f8c8 	bl	8006888 <httpWriteStream>
 80186f8:	4603      	mov	r3, r0
 80186fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
      //Any error to report?
      if(error)
 80186fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018702:	2b00      	cmp	r3, #0
 8018704:	d002      	beq.n	801870c <httpServerRequestCallback+0xa8>
         return error;
 8018706:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801870a:	e17c      	b.n	8018a06 <httpServerRequestCallback+0x3a2>
      
      //Properly close output stream
      error = httpCloseStream(connection);
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f7ee f91f 	bl	8006950 <httpCloseStream>
 8018712:	4603      	mov	r3, r0
 8018714:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
      //Any error to report?
      if(error)
 8018718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801871c:	2b00      	cmp	r3, #0
 801871e:	f000 8170 	beq.w	8018a02 <httpServerRequestCallback+0x39e>
         return error;
 8018722:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018726:	e16e      	b.n	8018a06 <httpServerRequestCallback+0x3a2>
   }
   //Manage new firmware request
   else if(!strcasecmp(uri, "/upload/binary"))
 8018728:	4998      	ldr	r1, [pc, #608]	; (801898c <httpServerRequestCallback+0x328>)
 801872a:	6838      	ldr	r0, [r7, #0]
 801872c:	f005 faba 	bl	801dca4 <strcasecmp>
 8018730:	4603      	mov	r3, r0
 8018732:	2b00      	cmp	r3, #0
 8018734:	f040 8165 	bne.w	8018a02 <httpServerRequestCallback+0x39e>
   {
      //Get exclusive access
      osAcquireMutex(&iapMutex);
 8018738:	4895      	ldr	r0, [pc, #596]	; (8018990 <httpServerRequestCallback+0x32c>)
 801873a:	f7e8 fd93 	bl	8001264 <osAcquireMutex>
      
      //Debug message
      TRACE_INFO("Updating firmware...\r\n");
 801873e:	f7e8 fcac 	bl	800109a <osSuspendAllTasks>
 8018742:	4b94      	ldr	r3, [pc, #592]	; (8018994 <httpServerRequestCallback+0x330>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	68db      	ldr	r3, [r3, #12]
 8018748:	2216      	movs	r2, #22
 801874a:	2101      	movs	r1, #1
 801874c:	4892      	ldr	r0, [pc, #584]	; (8018998 <httpServerRequestCallback+0x334>)
 801874e:	f004 fe01 	bl	801d354 <fwrite>
 8018752:	f7e8 fcad 	bl	80010b0 <osResumeAllTasks>
      {
         //Start of exception handling block
         do
         {
            //Get default IAP settings
            iapGetDefaultSettings(&iapSettings);
 8018756:	4891      	ldr	r0, [pc, #580]	; (801899c <httpServerRequestCallback+0x338>)
 8018758:	f7e9 fa1f 	bl	8001b9a <iapGetDefaultSettings>
            iapSettings.cipherMode        = IAP_SETTING_CIPHER_MODE;
            iapSettings.cipherKey         = IAP_SETTING_CIPHER_KEY;
            iapSettings.cipherKeyLen      = IAP_SETTING_CIHPER_KEY_LEN;
#else
            //User IAP settings configuration
            iapSettings.integrityAlgo     = IAP_SETTING_INTEGRITY_ALGO;
 801875c:	4b8f      	ldr	r3, [pc, #572]	; (801899c <httpServerRequestCallback+0x338>)
 801875e:	4a90      	ldr	r2, [pc, #576]	; (80189a0 <httpServerRequestCallback+0x33c>)
 8018760:	601a      	str	r2, [r3, #0]
#endif
         
            //Initialize IAP Application context
            error = iapInit(&iapContext, &iapSettings);
 8018762:	498e      	ldr	r1, [pc, #568]	; (801899c <httpServerRequestCallback+0x338>)
 8018764:	488f      	ldr	r0, [pc, #572]	; (80189a4 <httpServerRequestCallback+0x340>)
 8018766:	f7e9 fa25 	bl	8001bb4 <iapInit>
 801876a:	4603      	mov	r3, r0
 801876c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            //Is any error?
            if(error)
 8018770:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018774:	2b00      	cmp	r3, #0
 8018776:	d00c      	beq.n	8018792 <httpServerRequestCallback+0x12e>
            {
               TRACE_ERROR("Failed to initialize IAP!\r\n");
 8018778:	f7e8 fc8f 	bl	800109a <osSuspendAllTasks>
 801877c:	4b85      	ldr	r3, [pc, #532]	; (8018994 <httpServerRequestCallback+0x330>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	221b      	movs	r2, #27
 8018784:	2101      	movs	r1, #1
 8018786:	4888      	ldr	r0, [pc, #544]	; (80189a8 <httpServerRequestCallback+0x344>)
 8018788:	f004 fde4 	bl	801d354 <fwrite>
 801878c:	f7e8 fc90 	bl	80010b0 <osResumeAllTasks>
               break;
 8018790:	e0c1      	b.n	8018916 <httpServerRequestCallback+0x2b2>
            }
         
            //Debug message
            TRACE_INFO("Receiving firmware image...\r\n");
 8018792:	f7e8 fc82 	bl	800109a <osSuspendAllTasks>
 8018796:	4b7f      	ldr	r3, [pc, #508]	; (8018994 <httpServerRequestCallback+0x330>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	68db      	ldr	r3, [r3, #12]
 801879c:	221d      	movs	r2, #29
 801879e:	2101      	movs	r1, #1
 80187a0:	4882      	ldr	r0, [pc, #520]	; (80189ac <httpServerRequestCallback+0x348>)
 80187a2:	f004 fdd7 	bl	801d354 <fwrite>
 80187a6:	f7e8 fc83 	bl	80010b0 <osResumeAllTasks>
            
            //Process HTTP request body
            while(1)
            {
               //Read the HTTP request body until buffer is full or end of stream
               error = httpReadStream(connection, buffer, sizeof(buffer), 
 80187aa:	f107 030c 	add.w	r3, r7, #12
 80187ae:	f107 0110 	add.w	r1, r7, #16
 80187b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80187b6:	9200      	str	r2, [sp, #0]
 80187b8:	2280      	movs	r2, #128	; 0x80
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f7ed ffb4 	bl	8006728 <httpReadStream>
 80187c0:	4603      	mov	r3, r0
 80187c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                  &received, HTTP_FLAG_WAIT_ALL);
               //End of stream detected?
               if(error)
 80187c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d11a      	bne.n	8018804 <httpServerRequestCallback+0x1a0>
                  break;
              
               //Write received bytes in flash
               error = iapUpdate(&iapContext, (uint8_t*) buffer, received);
 80187ce:	68fa      	ldr	r2, [r7, #12]
 80187d0:	f107 0310 	add.w	r3, r7, #16
 80187d4:	4619      	mov	r1, r3
 80187d6:	4873      	ldr	r0, [pc, #460]	; (80189a4 <httpServerRequestCallback+0x340>)
 80187d8:	f7e9 fa46 	bl	8001c68 <iapUpdate>
 80187dc:	4603      	mov	r3, r0
 80187de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
               //Is any error?
               if(error)
 80187e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d0df      	beq.n	80187aa <httpServerRequestCallback+0x146>
               {
                  //Debug message
                  TRACE_ERROR("Failed to update firmware!\r\n");
 80187ea:	f7e8 fc56 	bl	800109a <osSuspendAllTasks>
 80187ee:	4b69      	ldr	r3, [pc, #420]	; (8018994 <httpServerRequestCallback+0x330>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	221c      	movs	r2, #28
 80187f6:	2101      	movs	r1, #1
 80187f8:	486d      	ldr	r0, [pc, #436]	; (80189b0 <httpServerRequestCallback+0x34c>)
 80187fa:	f004 fdab 	bl	801d354 <fwrite>
 80187fe:	f7e8 fc57 	bl	80010b0 <osResumeAllTasks>
                  break;
 8018802:	e000      	b.n	8018806 <httpServerRequestCallback+0x1a2>
                  break;
 8018804:	bf00      	nop
               }
            }
            
            //Propagate exception if necessary
            if(error != ERROR_END_OF_STREAM)
 8018806:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801880a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801880e:	d00c      	beq.n	801882a <httpServerRequestCallback+0x1c6>
            {
               //Debug message
               TRACE_ERROR("Firmware image reception failed!\r\n");
 8018810:	f7e8 fc43 	bl	800109a <osSuspendAllTasks>
 8018814:	4b5f      	ldr	r3, [pc, #380]	; (8018994 <httpServerRequestCallback+0x330>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	68db      	ldr	r3, [r3, #12]
 801881a:	2222      	movs	r2, #34	; 0x22
 801881c:	2101      	movs	r1, #1
 801881e:	4865      	ldr	r0, [pc, #404]	; (80189b4 <httpServerRequestCallback+0x350>)
 8018820:	f004 fd98 	bl	801d354 <fwrite>
 8018824:	f7e8 fc44 	bl	80010b0 <osResumeAllTasks>
               break;
 8018828:	e075      	b.n	8018916 <httpServerRequestCallback+0x2b2>
            }
            else
               error = NO_ERROR;
 801882a:	2300      	movs	r3, #0
 801882c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                 
            //Check application firmware validity
            error = iapFinalize(&iapContext);
 8018830:	485c      	ldr	r0, [pc, #368]	; (80189a4 <httpServerRequestCallback+0x340>)
 8018832:	f7e9 fb09 	bl	8001e48 <iapFinalize>
 8018836:	4603      	mov	r3, r0
 8018838:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            //Is application is invalid?
            if(error)
 801883c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018840:	2b00      	cmp	r3, #0
 8018842:	d00c      	beq.n	801885e <httpServerRequestCallback+0x1fa>
            {
               //Debug message
               TRACE_ERROR("Failed to finalize firmware image update!\r\n");
 8018844:	f7e8 fc29 	bl	800109a <osSuspendAllTasks>
 8018848:	4b52      	ldr	r3, [pc, #328]	; (8018994 <httpServerRequestCallback+0x330>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	68db      	ldr	r3, [r3, #12]
 801884e:	222b      	movs	r2, #43	; 0x2b
 8018850:	2101      	movs	r1, #1
 8018852:	4859      	ldr	r0, [pc, #356]	; (80189b8 <httpServerRequestCallback+0x354>)
 8018854:	f004 fd7e 	bl	801d354 <fwrite>
 8018858:	f7e8 fc2a 	bl	80010b0 <osResumeAllTasks>
               break;
 801885c:	e05b      	b.n	8018916 <httpServerRequestCallback+0x2b2>

            //Start of exception handling block
            do
            {
               //Format HTTP response header
               connection->response.version = connection->request.version;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	699a      	ldr	r2, [r3, #24]
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
               connection->response.statusCode = 200;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	22c8      	movs	r2, #200	; 0xc8
 801886c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
               connection->response.keepAlive = connection->request.keepAlive;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
               connection->response.noCache = TRUE;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2201      	movs	r2, #1
 8018880:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
               connection->response.contentLength = 0;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2200      	movs	r2, #0
 8018888:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

               //Send the header to the client
               error = httpWriteHeader(connection);
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f7ed ff11 	bl	80066b4 <httpWriteHeader>
 8018892:	4603      	mov	r3, r0
 8018894:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
               //Any error to report?
               if(error)
 8018898:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801889c:	2b00      	cmp	r3, #0
 801889e:	d00c      	beq.n	80188ba <httpServerRequestCallback+0x256>
               {
                  //Debug message
                  TRACE_ERROR("Sending HTTP response response failed!\r\n");
 80188a0:	f7e8 fbfb 	bl	800109a <osSuspendAllTasks>
 80188a4:	4b3b      	ldr	r3, [pc, #236]	; (8018994 <httpServerRequestCallback+0x330>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	2228      	movs	r2, #40	; 0x28
 80188ac:	2101      	movs	r1, #1
 80188ae:	4843      	ldr	r0, [pc, #268]	; (80189bc <httpServerRequestCallback+0x358>)
 80188b0:	f004 fd50 	bl	801d354 <fwrite>
 80188b4:	f7e8 fbfc 	bl	80010b0 <osResumeAllTasks>
                  break;
 80188b8:	e016      	b.n	80188e8 <httpServerRequestCallback+0x284>
               }
               
               //Properly close output stream
               error = httpCloseStream(connection);
 80188ba:	6878      	ldr	r0, [r7, #4]
 80188bc:	f7ee f848 	bl	8006950 <httpCloseStream>
 80188c0:	4603      	mov	r3, r0
 80188c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
               //Any error to report?
               if(error)
 80188c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d00c      	beq.n	80188e8 <httpServerRequestCallback+0x284>
               {
                  //Debug message
                  TRACE_ERROR("Closing HTTP output stream failed!\r\n");
 80188ce:	f7e8 fbe4 	bl	800109a <osSuspendAllTasks>
 80188d2:	4b30      	ldr	r3, [pc, #192]	; (8018994 <httpServerRequestCallback+0x330>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	2224      	movs	r2, #36	; 0x24
 80188da:	2101      	movs	r1, #1
 80188dc:	4838      	ldr	r0, [pc, #224]	; (80189c0 <httpServerRequestCallback+0x35c>)
 80188de:	f004 fd39 	bl	801d354 <fwrite>
 80188e2:	f7e8 fbe5 	bl	80010b0 <osResumeAllTasks>
                  break;
 80188e6:	bf00      	nop
               }
               //End of exception handling block
            }while(0);
            
            //Perform flash swap bank then reboot
            error = iapReboot(&iapContext);
 80188e8:	482e      	ldr	r0, [pc, #184]	; (80189a4 <httpServerRequestCallback+0x340>)
 80188ea:	f7e9 fb23 	bl	8001f34 <iapReboot>
 80188ee:	4603      	mov	r3, r0
 80188f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            //Is any error?
            if(error)
 80188f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d00c      	beq.n	8018916 <httpServerRequestCallback+0x2b2>
            {
               //Debug message
               TRACE_ERROR("Failed to reboot!\r\n");
 80188fc:	f7e8 fbcd 	bl	800109a <osSuspendAllTasks>
 8018900:	4b24      	ldr	r3, [pc, #144]	; (8018994 <httpServerRequestCallback+0x330>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	68db      	ldr	r3, [r3, #12]
 8018906:	2213      	movs	r2, #19
 8018908:	2101      	movs	r1, #1
 801890a:	482e      	ldr	r0, [pc, #184]	; (80189c4 <httpServerRequestCallback+0x360>)
 801890c:	f004 fd22 	bl	801d354 <fwrite>
 8018910:	f7e8 fbce 	bl	80010b0 <osResumeAllTasks>
               break;
 8018914:	bf00      	nop
            
            //End of exception handling block
         }while(0);
      
         //Is any error?
         if(error)
 8018916:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801891a:	2b00      	cmp	r3, #0
 801891c:	d06b      	beq.n	80189f6 <httpServerRequestCallback+0x392>
         {
            //Format HTTP response header
            connection->response.version = connection->request.version;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	699a      	ldr	r2, [r3, #24]
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
            connection->response.statusCode = 400;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801892e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            connection->response.keepAlive = connection->request.keepAlive;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
            connection->response.noCache = TRUE;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2201      	movs	r2, #1
 8018942:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
            connection->response.contentLength = 0;
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	2200      	movs	r2, #0
 801894a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
            
            //Send the header to the client
            error = httpWriteHeader(connection);
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f7ed feb0 	bl	80066b4 <httpWriteHeader>
 8018954:	4603      	mov	r3, r0
 8018956:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            //Any error to report?
            if(error)
 801895a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801895e:	2b00      	cmp	r3, #0
 8018960:	d032      	beq.n	80189c8 <httpServerRequestCallback+0x364>
            {
               //Debug message
               TRACE_ERROR("Sending HTTP response response failed!\r\n");
 8018962:	f7e8 fb9a 	bl	800109a <osSuspendAllTasks>
 8018966:	4b0b      	ldr	r3, [pc, #44]	; (8018994 <httpServerRequestCallback+0x330>)
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	2228      	movs	r2, #40	; 0x28
 801896e:	2101      	movs	r1, #1
 8018970:	4812      	ldr	r0, [pc, #72]	; (80189bc <httpServerRequestCallback+0x358>)
 8018972:	f004 fcef 	bl	801d354 <fwrite>
 8018976:	f7e8 fb9b 	bl	80010b0 <osResumeAllTasks>
               break;
 801897a:	e03c      	b.n	80189f6 <httpServerRequestCallback+0x392>
 801897c:	08025614 	.word	0x08025614
 8018980:	08025620 	.word	0x08025620
 8018984:	08025628 	.word	0x08025628
 8018988:	08025630 	.word	0x08025630
 801898c:	0802566c 	.word	0x0802566c
 8018990:	2000aa3c 	.word	0x2000aa3c
 8018994:	20000044 	.word	0x20000044
 8018998:	0802567c 	.word	0x0802567c
 801899c:	20007324 	.word	0x20007324
 80189a0:	08023974 	.word	0x08023974
 80189a4:	20006ea0 	.word	0x20006ea0
 80189a8:	08025694 	.word	0x08025694
 80189ac:	080256b0 	.word	0x080256b0
 80189b0:	080256d0 	.word	0x080256d0
 80189b4:	080256f0 	.word	0x080256f0
 80189b8:	08025714 	.word	0x08025714
 80189bc:	08025740 	.word	0x08025740
 80189c0:	0802576c 	.word	0x0802576c
 80189c4:	08025794 	.word	0x08025794
            }
            
            //Properly close output stream
            error = httpCloseStream(connection);
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f7ed ffc1 	bl	8006950 <httpCloseStream>
 80189ce:	4603      	mov	r3, r0
 80189d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            //Any error to report?
            if(error)
 80189d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d00c      	beq.n	80189f6 <httpServerRequestCallback+0x392>
            {
               //Debug message
               TRACE_ERROR("Closing HTTP output stream failed!\r\n");
 80189dc:	f7e8 fb5d 	bl	800109a <osSuspendAllTasks>
 80189e0:	4b0b      	ldr	r3, [pc, #44]	; (8018a10 <httpServerRequestCallback+0x3ac>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	2224      	movs	r2, #36	; 0x24
 80189e8:	2101      	movs	r1, #1
 80189ea:	480a      	ldr	r0, [pc, #40]	; (8018a14 <httpServerRequestCallback+0x3b0>)
 80189ec:	f004 fcb2 	bl	801d354 <fwrite>
 80189f0:	f7e8 fb5e 	bl	80010b0 <osResumeAllTasks>
               break;
 80189f4:	bf00      	nop
         
         //End of exception handling block
      }while(0);
      
      //Release exclusive access
      osReleaseMutex(&iapMutex);
 80189f6:	4808      	ldr	r0, [pc, #32]	; (8018a18 <httpServerRequestCallback+0x3b4>)
 80189f8:	f7e8 fc43 	bl	8001282 <osReleaseMutex>
      
      //Return status code
      return error;
 80189fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018a00:	e001      	b.n	8018a06 <httpServerRequestCallback+0x3a2>
   {
      //For sanity
   }
   
   //Not implemented
   return ERROR_NOT_FOUND;
 8018a02:	f44f 7387 	mov.w	r3, #270	; 0x10e
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3798      	adds	r7, #152	; 0x98
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	20000044 	.word	0x20000044
 8018a14:	0802576c 	.word	0x0802576c
 8018a18:	2000aa3c 	.word	0x2000aa3c

08018a1c <httpServerUriNotFoundCallback>:
 * @return Error code
 **/

error_t httpServerUriNotFoundCallback(HttpConnection *connection,
   const char_t *uri)
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	b083      	sub	sp, #12
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
 8018a24:	6039      	str	r1, [r7, #0]
   //Not implemented
   return ERROR_NOT_FOUND;
 8018a26:	f44f 7387 	mov.w	r3, #270	; 0x10e
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	370c      	adds	r7, #12
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a34:	4770      	bx	lr
	...

08018a38 <SystemClock_Config>:
/**
 * @brief System clock configuration
 **/

void SystemClock_Config(void)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b094      	sub	sp, #80	; 0x50
 8018a3c:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8018a3e:	f107 0320 	add.w	r3, r7, #32
 8018a42:	2230      	movs	r2, #48	; 0x30
 8018a44:	2100      	movs	r1, #0
 8018a46:	4618      	mov	r0, r3
 8018a48:	f004 ff42 	bl	801d8d0 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8018a4c:	f107 030c 	add.w	r3, r7, #12
 8018a50:	2200      	movs	r2, #0
 8018a52:	601a      	str	r2, [r3, #0]
 8018a54:	605a      	str	r2, [r3, #4]
 8018a56:	609a      	str	r2, [r3, #8]
 8018a58:	60da      	str	r2, [r3, #12]
 8018a5a:	611a      	str	r2, [r3, #16]

   //Enable Power Control clock
   __HAL_RCC_PWR_CLK_ENABLE();
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	60bb      	str	r3, [r7, #8]
 8018a60:	4b25      	ldr	r3, [pc, #148]	; (8018af8 <SystemClock_Config+0xc0>)
 8018a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a64:	4a24      	ldr	r2, [pc, #144]	; (8018af8 <SystemClock_Config+0xc0>)
 8018a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8018a6c:	4b22      	ldr	r3, [pc, #136]	; (8018af8 <SystemClock_Config+0xc0>)
 8018a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018a74:	60bb      	str	r3, [r7, #8]
 8018a76:	68bb      	ldr	r3, [r7, #8]

   //The voltage scaling allows optimizing the power consumption when the
   //device is clocked below the maximum system frequency
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8018a78:	2300      	movs	r3, #0
 8018a7a:	607b      	str	r3, [r7, #4]
 8018a7c:	4b1f      	ldr	r3, [pc, #124]	; (8018afc <SystemClock_Config+0xc4>)
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	4a1e      	ldr	r2, [pc, #120]	; (8018afc <SystemClock_Config+0xc4>)
 8018a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8018a86:	6013      	str	r3, [r2, #0]
 8018a88:	4b1c      	ldr	r3, [pc, #112]	; (8018afc <SystemClock_Config+0xc4>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8018a90:	607b      	str	r3, [r7, #4]
 8018a92:	687b      	ldr	r3, [r7, #4]

   //Enable HSE Oscillator and activate PLL with HSE as source
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8018a94:	2301      	movs	r3, #1
 8018a96:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8018a98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8018a9c:	627b      	str	r3, [r7, #36]	; 0x24
   RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018aa2:	2302      	movs	r3, #2
 8018aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8018aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLM = 8;
 8018aac:	2308      	movs	r3, #8
 8018aae:	643b      	str	r3, [r7, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLN = 360;
 8018ab0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8018ab4:	647b      	str	r3, [r7, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8018ab6:	2302      	movs	r3, #2
 8018ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLQ = 7;
 8018aba:	2307      	movs	r3, #7
 8018abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8018abe:	f107 0320 	add.w	r3, r7, #32
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f003 f822 	bl	801bb0c <HAL_RCC_OscConfig>

   //Enable overdrive mode
   HAL_PWREx_EnableOverDrive();
 8018ac8:	f002 ffd0 	bl	801ba6c <HAL_PWREx_EnableOverDrive>

   //Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
   //clocks dividers
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8018acc:	230f      	movs	r3, #15
 8018ace:	60fb      	str	r3, [r7, #12]
      RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018ad0:	2302      	movs	r3, #2
 8018ad2:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8018ad8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8018adc:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8018ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ae2:	61fb      	str	r3, [r7, #28]
   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8018ae4:	f107 030c 	add.w	r3, r7, #12
 8018ae8:	2105      	movs	r1, #5
 8018aea:	4618      	mov	r0, r3
 8018aec:	f003 fa7e 	bl	801bfec <HAL_RCC_ClockConfig>
}
 8018af0:	bf00      	nop
 8018af2:	3750      	adds	r7, #80	; 0x50
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	40023800 	.word	0x40023800
 8018afc:	40007000 	.word	0x40007000

08018b00 <ledTask>:
 * @brief LED task
 * @param[in] param Unused parameter
 **/

void ledTask(void *param)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b082      	sub	sp, #8
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
   //Endless loop
   while(1)
   {
      BSP_LED_On(LED1);
 8018b08:	2000      	movs	r0, #0
 8018b0a:	f001 ff57 	bl	801a9bc <BSP_LED_On>
      osDelayTask(100);
 8018b0e:	2064      	movs	r0, #100	; 0x64
 8018b10:	f7e8 fab8 	bl	8001084 <osDelayTask>
      BSP_LED_Off(LED1);
 8018b14:	2000      	movs	r0, #0
 8018b16:	f001 ff6b 	bl	801a9f0 <BSP_LED_Off>
      osDelayTask(900);
 8018b1a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018b1e:	f7e8 fab1 	bl	8001084 <osDelayTask>
      BSP_LED_On(LED1);
 8018b22:	e7f1      	b.n	8018b08 <ledTask+0x8>

08018b24 <main>:
 * @brief Main entry point
 * @return Unused value
 **/

int_t main(void)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b088      	sub	sp, #32
 8018b28:	af02      	add	r7, sp, #8
#if (APP_USE_SLAAC == DISABLED)
   Ipv6Addr ipv6Addr;
#endif

   //HAL library initialization
   HAL_Init();
 8018b2a:	f001 ffd1 	bl	801aad0 <HAL_Init>
   //Configure the system clock
   SystemClock_Config();
 8018b2e:	f7ff ff83 	bl	8018a38 <SystemClock_Config>

   //Initialize kernel
   osInitKernel();
 8018b32:	f7e8 fa79 	bl	8001028 <osInitKernel>
   //Configure debug UART
   debugInit(9600);
 8018b36:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8018b3a:	f7ff fd05 	bl	8018548 <debugInit>

   //Start-up message
   TRACE_INFO("\r\n");
 8018b3e:	f7e8 faac 	bl	800109a <osSuspendAllTasks>
 8018b42:	4bb3      	ldr	r3, [pc, #716]	; (8018e10 <main+0x2ec>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	68db      	ldr	r3, [r3, #12]
 8018b48:	2202      	movs	r2, #2
 8018b4a:	2101      	movs	r1, #1
 8018b4c:	48b1      	ldr	r0, [pc, #708]	; (8018e14 <main+0x2f0>)
 8018b4e:	f004 fc01 	bl	801d354 <fwrite>
 8018b52:	f7e8 faad 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("*****************************************\r\n");
 8018b56:	f7e8 faa0 	bl	800109a <osSuspendAllTasks>
 8018b5a:	4bad      	ldr	r3, [pc, #692]	; (8018e10 <main+0x2ec>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	68db      	ldr	r3, [r3, #12]
 8018b60:	222b      	movs	r2, #43	; 0x2b
 8018b62:	2101      	movs	r1, #1
 8018b64:	48ac      	ldr	r0, [pc, #688]	; (8018e18 <main+0x2f4>)
 8018b66:	f004 fbf5 	bl	801d354 <fwrite>
 8018b6a:	f7e8 faa1 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("*** CycloneBOOT IAP HTTP Server Demo ****\r\n");
 8018b6e:	f7e8 fa94 	bl	800109a <osSuspendAllTasks>
 8018b72:	4ba7      	ldr	r3, [pc, #668]	; (8018e10 <main+0x2ec>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	68db      	ldr	r3, [r3, #12]
 8018b78:	222b      	movs	r2, #43	; 0x2b
 8018b7a:	2101      	movs	r1, #1
 8018b7c:	48a7      	ldr	r0, [pc, #668]	; (8018e1c <main+0x2f8>)
 8018b7e:	f004 fbe9 	bl	801d354 <fwrite>
 8018b82:	f7e8 fa95 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("*****************************************\r\n");
 8018b86:	f7e8 fa88 	bl	800109a <osSuspendAllTasks>
 8018b8a:	4ba1      	ldr	r3, [pc, #644]	; (8018e10 <main+0x2ec>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	222b      	movs	r2, #43	; 0x2b
 8018b92:	2101      	movs	r1, #1
 8018b94:	48a0      	ldr	r0, [pc, #640]	; (8018e18 <main+0x2f4>)
 8018b96:	f004 fbdd 	bl	801d354 <fwrite>
 8018b9a:	f7e8 fa89 	bl	80010b0 <osResumeAllTasks>
#if defined(IAP_SCENARIO_1)
   TRACE_INFO("IAP mode: Simple APP + Integrity\r\n");
 8018b9e:	f7e8 fa7c 	bl	800109a <osSuspendAllTasks>
 8018ba2:	4b9b      	ldr	r3, [pc, #620]	; (8018e10 <main+0x2ec>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	2222      	movs	r2, #34	; 0x22
 8018baa:	2101      	movs	r1, #1
 8018bac:	489c      	ldr	r0, [pc, #624]	; (8018e20 <main+0x2fc>)
 8018bae:	f004 fbd1 	bl	801d354 <fwrite>
 8018bb2:	f7e8 fa7d 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("IAP mode: Cipher APP + Authentification\r\n");
#elif defined(IAP_SCENARIO_3)
   TRACE_INFO("IAP mode: Cipher APP + Signature\r\n");
#else
   #endif
   TRACE_INFO("Version: %s\r\n", APP_VERSION_STRING);
 8018bb6:	f7e8 fa70 	bl	800109a <osSuspendAllTasks>
 8018bba:	4b95      	ldr	r3, [pc, #596]	; (8018e10 <main+0x2ec>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	68db      	ldr	r3, [r3, #12]
 8018bc0:	4a98      	ldr	r2, [pc, #608]	; (8018e24 <main+0x300>)
 8018bc2:	4999      	ldr	r1, [pc, #612]	; (8018e28 <main+0x304>)
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f004 f9dd 	bl	801cf84 <fprintf>
 8018bca:	f7e8 fa71 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("Copyright: 2010-2019 Oryx Embedded SARL\r\n");
 8018bce:	f7e8 fa64 	bl	800109a <osSuspendAllTasks>
 8018bd2:	4b8f      	ldr	r3, [pc, #572]	; (8018e10 <main+0x2ec>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	68db      	ldr	r3, [r3, #12]
 8018bd8:	2229      	movs	r2, #41	; 0x29
 8018bda:	2101      	movs	r1, #1
 8018bdc:	4893      	ldr	r0, [pc, #588]	; (8018e2c <main+0x308>)
 8018bde:	f004 fbb9 	bl	801d354 <fwrite>
 8018be2:	f7e8 fa65 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("Compiled: %s %s\r\n", __DATE__, __TIME__);
 8018be6:	f7e8 fa58 	bl	800109a <osSuspendAllTasks>
 8018bea:	4b89      	ldr	r3, [pc, #548]	; (8018e10 <main+0x2ec>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	68d8      	ldr	r0, [r3, #12]
 8018bf0:	4b8f      	ldr	r3, [pc, #572]	; (8018e30 <main+0x30c>)
 8018bf2:	4a90      	ldr	r2, [pc, #576]	; (8018e34 <main+0x310>)
 8018bf4:	4990      	ldr	r1, [pc, #576]	; (8018e38 <main+0x314>)
 8018bf6:	f004 f9c5 	bl	801cf84 <fprintf>
 8018bfa:	f7e8 fa59 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("Target: STM32F429\r\n");
 8018bfe:	f7e8 fa4c 	bl	800109a <osSuspendAllTasks>
 8018c02:	4b83      	ldr	r3, [pc, #524]	; (8018e10 <main+0x2ec>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	68db      	ldr	r3, [r3, #12]
 8018c08:	2213      	movs	r2, #19
 8018c0a:	2101      	movs	r1, #1
 8018c0c:	488b      	ldr	r0, [pc, #556]	; (8018e3c <main+0x318>)
 8018c0e:	f004 fba1 	bl	801d354 <fwrite>
 8018c12:	f7e8 fa4d 	bl	80010b0 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 8018c16:	f7e8 fa40 	bl	800109a <osSuspendAllTasks>
 8018c1a:	4b7d      	ldr	r3, [pc, #500]	; (8018e10 <main+0x2ec>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	68db      	ldr	r3, [r3, #12]
 8018c20:	2202      	movs	r2, #2
 8018c22:	2101      	movs	r1, #1
 8018c24:	487b      	ldr	r0, [pc, #492]	; (8018e14 <main+0x2f0>)
 8018c26:	f004 fb95 	bl	801d354 <fwrite>
 8018c2a:	f7e8 fa41 	bl	80010b0 <osResumeAllTasks>

   //LED configuration
   BSP_LED_Init(LED1);
 8018c2e:	2000      	movs	r0, #0
 8018c30:	f001 fe74 	bl	801a91c <BSP_LED_Init>
   BSP_LED_Init(LED2);
 8018c34:	2001      	movs	r0, #1
 8018c36:	f001 fe71 	bl	801a91c <BSP_LED_Init>
   BSP_LED_Init(LED3);
 8018c3a:	2002      	movs	r0, #2
 8018c3c:	f001 fe6e 	bl	801a91c <BSP_LED_Init>

   //Clear LEDs
   BSP_LED_Off(LED1);
 8018c40:	2000      	movs	r0, #0
 8018c42:	f001 fed5 	bl	801a9f0 <BSP_LED_Off>
   BSP_LED_Off(LED2);
 8018c46:	2001      	movs	r0, #1
 8018c48:	f001 fed2 	bl	801a9f0 <BSP_LED_Off>
   BSP_LED_Off(LED3);
 8018c4c:	2002      	movs	r0, #2
 8018c4e:	f001 fecf 	bl	801a9f0 <BSP_LED_Off>

   //Initialize user button
   BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8018c52:	2100      	movs	r1, #0
 8018c54:	2000      	movs	r0, #0
 8018c56:	f001 fee5 	bl	801aa24 <BSP_PB_Init>

   //TCP/IP stack initialization
   error = netInit();
 8018c5a:	f7f7 fb1d 	bl	8010298 <netInit>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8018c62:	8afb      	ldrh	r3, [r7, #22]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d00b      	beq.n	8018c80 <main+0x15c>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize TCP/IP stack!\r\n");
 8018c68:	f7e8 fa17 	bl	800109a <osSuspendAllTasks>
 8018c6c:	4b68      	ldr	r3, [pc, #416]	; (8018e10 <main+0x2ec>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	68db      	ldr	r3, [r3, #12]
 8018c72:	2224      	movs	r2, #36	; 0x24
 8018c74:	2101      	movs	r1, #1
 8018c76:	4872      	ldr	r0, [pc, #456]	; (8018e40 <main+0x31c>)
 8018c78:	f004 fb6c 	bl	801d354 <fwrite>
 8018c7c:	f7e8 fa18 	bl	80010b0 <osResumeAllTasks>
   }

   //Configure the first Ethernet interface
   interface = &netInterface[0];
 8018c80:	4b70      	ldr	r3, [pc, #448]	; (8018e44 <main+0x320>)
 8018c82:	613b      	str	r3, [r7, #16]

   //Set interface name
   netSetInterfaceName(interface, APP_IF_NAME);
 8018c84:	4970      	ldr	r1, [pc, #448]	; (8018e48 <main+0x324>)
 8018c86:	6938      	ldr	r0, [r7, #16]
 8018c88:	f7f7 fc04 	bl	8010494 <netSetInterfaceName>
   //Set host name
   netSetHostname(interface, APP_HOST_NAME);
 8018c8c:	496f      	ldr	r1, [pc, #444]	; (8018e4c <main+0x328>)
 8018c8e:	6938      	ldr	r0, [r7, #16]
 8018c90:	f7f7 fc22 	bl	80104d8 <netSetHostname>
   //Set host MAC address
   macStringToAddr(APP_MAC_ADDR, &macAddr);
 8018c94:	1d3b      	adds	r3, r7, #4
 8018c96:	4619      	mov	r1, r3
 8018c98:	486d      	ldr	r0, [pc, #436]	; (8018e50 <main+0x32c>)
 8018c9a:	f7ec ff43 	bl	8005b24 <macStringToAddr>
   netSetMacAddr(interface, &macAddr);
 8018c9e:	1d3b      	adds	r3, r7, #4
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	6938      	ldr	r0, [r7, #16]
 8018ca4:	f7f7 fbce 	bl	8010444 <netSetMacAddr>
   //Select the relevant network adapter
   netSetDriver(interface, &stm32f4xxEthDriver);
 8018ca8:	496a      	ldr	r1, [pc, #424]	; (8018e54 <main+0x330>)
 8018caa:	6938      	ldr	r0, [r7, #16]
 8018cac:	f7f7 fc36 	bl	801051c <netSetDriver>
   netSetPhyDriver(interface, &lan8742PhyDriver);
 8018cb0:	4969      	ldr	r1, [pc, #420]	; (8018e58 <main+0x334>)
 8018cb2:	6938      	ldr	r0, [r7, #16]
 8018cb4:	f7f7 fc50 	bl	8010558 <netSetPhyDriver>

   //Initialize network interface
   error = netConfigInterface(interface);
 8018cb8:	6938      	ldr	r0, [r7, #16]
 8018cba:	f7f7 fc6b 	bl	8010594 <netConfigInterface>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8018cc2:	8afb      	ldrh	r3, [r7, #22]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d00c      	beq.n	8018ce2 <main+0x1be>
   {
      //Debug message
      TRACE_ERROR("Failed to configure interface %s!\r\n", interface->name);
 8018cc8:	f7e8 f9e7 	bl	800109a <osSuspendAllTasks>
 8018ccc:	4b50      	ldr	r3, [pc, #320]	; (8018e10 <main+0x2ec>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	68d8      	ldr	r0, [r3, #12]
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	3310      	adds	r3, #16
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4960      	ldr	r1, [pc, #384]	; (8018e5c <main+0x338>)
 8018cda:	f004 f953 	bl	801cf84 <fprintf>
 8018cde:	f7e8 f9e7 	bl	80010b0 <osResumeAllTasks>
   }

#if (IPV4_SUPPORT == ENABLED)
#if (APP_USE_DHCP_CLIENT == ENABLED)
   //Get default settings
   dhcpClientGetDefaultSettings(&dhcpClientSettings);
 8018ce2:	485f      	ldr	r0, [pc, #380]	; (8018e60 <main+0x33c>)
 8018ce4:	f7ea fcca 	bl	800367c <dhcpClientGetDefaultSettings>
   //Set the network interface to be configured by DHCP
   dhcpClientSettings.interface = interface;
 8018ce8:	4a5d      	ldr	r2, [pc, #372]	; (8018e60 <main+0x33c>)
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	6013      	str	r3, [r2, #0]
   //Disable rapid commit option
   dhcpClientSettings.rapidCommit = FALSE;
 8018cee:	4b5c      	ldr	r3, [pc, #368]	; (8018e60 <main+0x33c>)
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	625a      	str	r2, [r3, #36]	; 0x24

   //DHCP client initialization
   error = dhcpClientInit(&dhcpClientContext, &dhcpClientSettings);
 8018cf4:	495a      	ldr	r1, [pc, #360]	; (8018e60 <main+0x33c>)
 8018cf6:	485b      	ldr	r0, [pc, #364]	; (8018e64 <main+0x340>)
 8018cf8:	f7ea fce6 	bl	80036c8 <dhcpClientInit>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	82fb      	strh	r3, [r7, #22]
   //Failed to initialize DHCP client?
   if(error)
 8018d00:	8afb      	ldrh	r3, [r7, #22]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d00b      	beq.n	8018d1e <main+0x1fa>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize DHCP client!\r\n");
 8018d06:	f7e8 f9c8 	bl	800109a <osSuspendAllTasks>
 8018d0a:	4b41      	ldr	r3, [pc, #260]	; (8018e10 <main+0x2ec>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	2223      	movs	r2, #35	; 0x23
 8018d12:	2101      	movs	r1, #1
 8018d14:	4854      	ldr	r0, [pc, #336]	; (8018e68 <main+0x344>)
 8018d16:	f004 fb1d 	bl	801d354 <fwrite>
 8018d1a:	f7e8 f9c9 	bl	80010b0 <osResumeAllTasks>
   }

   //Start DHCP client
   error = dhcpClientStart(&dhcpClientContext);
 8018d1e:	4851      	ldr	r0, [pc, #324]	; (8018e64 <main+0x340>)
 8018d20:	f7ea fd48 	bl	80037b4 <dhcpClientStart>
 8018d24:	4603      	mov	r3, r0
 8018d26:	82fb      	strh	r3, [r7, #22]
   //Failed to start DHCP client?
   if(error)
 8018d28:	8afb      	ldrh	r3, [r7, #22]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d00b      	beq.n	8018d46 <main+0x222>
   {
      //Debug message
      TRACE_ERROR("Failed to start DHCP client!\r\n");
 8018d2e:	f7e8 f9b4 	bl	800109a <osSuspendAllTasks>
 8018d32:	4b37      	ldr	r3, [pc, #220]	; (8018e10 <main+0x2ec>)
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	68db      	ldr	r3, [r3, #12]
 8018d38:	221e      	movs	r2, #30
 8018d3a:	2101      	movs	r1, #1
 8018d3c:	484b      	ldr	r0, [pc, #300]	; (8018e6c <main+0x348>)
 8018d3e:	f004 fb09 	bl	801d354 <fwrite>
 8018d42:	f7e8 f9b5 	bl	80010b0 <osResumeAllTasks>
#endif

#if (IPV6_SUPPORT == ENABLED)
#if (APP_USE_SLAAC == ENABLED)
   //Get default settings
   slaacGetDefaultSettings(&slaacSettings);
 8018d46:	484a      	ldr	r0, [pc, #296]	; (8018e70 <main+0x34c>)
 8018d48:	f7f8 ffac 	bl	8011ca4 <slaacGetDefaultSettings>
   //Set the network interface to be configured
   slaacSettings.interface = interface;
 8018d4c:	4a48      	ldr	r2, [pc, #288]	; (8018e70 <main+0x34c>)
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	6013      	str	r3, [r2, #0]

   //SLAAC initialization
   error = slaacInit(&slaacContext, &slaacSettings);
 8018d52:	4947      	ldr	r1, [pc, #284]	; (8018e70 <main+0x34c>)
 8018d54:	4847      	ldr	r0, [pc, #284]	; (8018e74 <main+0x350>)
 8018d56:	f7f8 ffbb 	bl	8011cd0 <slaacInit>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	82fb      	strh	r3, [r7, #22]
   //Failed to initialize SLAAC?
   if(error)
 8018d5e:	8afb      	ldrh	r3, [r7, #22]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d00b      	beq.n	8018d7c <main+0x258>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize SLAAC!\r\n");
 8018d64:	f7e8 f999 	bl	800109a <osSuspendAllTasks>
 8018d68:	4b29      	ldr	r3, [pc, #164]	; (8018e10 <main+0x2ec>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	68db      	ldr	r3, [r3, #12]
 8018d6e:	221d      	movs	r2, #29
 8018d70:	2101      	movs	r1, #1
 8018d72:	4841      	ldr	r0, [pc, #260]	; (8018e78 <main+0x354>)
 8018d74:	f004 faee 	bl	801d354 <fwrite>
 8018d78:	f7e8 f99a 	bl	80010b0 <osResumeAllTasks>
   }

   //Start IPv6 address autoconfiguration process
   error = slaacStart(&slaacContext);
 8018d7c:	483d      	ldr	r0, [pc, #244]	; (8018e74 <main+0x350>)
 8018d7e:	f7f8 ffe5 	bl	8011d4c <slaacStart>
 8018d82:	4603      	mov	r3, r0
 8018d84:	82fb      	strh	r3, [r7, #22]
   //Failed to start SLAAC process?
   if(error)
 8018d86:	8afb      	ldrh	r3, [r7, #22]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d00b      	beq.n	8018da4 <main+0x280>
   {
      //Debug message
      TRACE_ERROR("Failed to start SLAAC!\r\n");
 8018d8c:	f7e8 f985 	bl	800109a <osSuspendAllTasks>
 8018d90:	4b1f      	ldr	r3, [pc, #124]	; (8018e10 <main+0x2ec>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	68db      	ldr	r3, [r3, #12]
 8018d96:	2218      	movs	r2, #24
 8018d98:	2101      	movs	r1, #1
 8018d9a:	4838      	ldr	r0, [pc, #224]	; (8018e7c <main+0x358>)
 8018d9c:	f004 fada 	bl	801d354 <fwrite>
 8018da0:	f7e8 f986 	bl	80010b0 <osResumeAllTasks>
   ipv6SetDnsServer(interface, 1, &ipv6Addr);
#endif
#endif

   //Get default settings
   httpServerGetDefaultSettings(&httpServerSettings);
 8018da4:	4836      	ldr	r0, [pc, #216]	; (8018e80 <main+0x35c>)
 8018da6:	f7ed f96d 	bl	8006084 <httpServerGetDefaultSettings>
   //Bind HTTP server to the desired interface
   httpServerSettings.interface = &netInterface[0];
 8018daa:	4b35      	ldr	r3, [pc, #212]	; (8018e80 <main+0x35c>)
 8018dac:	4a25      	ldr	r2, [pc, #148]	; (8018e44 <main+0x320>)
 8018dae:	601a      	str	r2, [r3, #0]
   //Listen to port 80
   httpServerSettings.port = HTTP_PORT;
 8018db0:	4b33      	ldr	r3, [pc, #204]	; (8018e80 <main+0x35c>)
 8018db2:	2250      	movs	r2, #80	; 0x50
 8018db4:	809a      	strh	r2, [r3, #4]
   //Client connections
   httpServerSettings.maxConnections = APP_HTTP_MAX_CONNECTIONS;
 8018db6:	4b32      	ldr	r3, [pc, #200]	; (8018e80 <main+0x35c>)
 8018db8:	2208      	movs	r2, #8
 8018dba:	60da      	str	r2, [r3, #12]
   httpServerSettings.connections = httpConnections;
 8018dbc:	4b30      	ldr	r3, [pc, #192]	; (8018e80 <main+0x35c>)
 8018dbe:	4a31      	ldr	r2, [pc, #196]	; (8018e84 <main+0x360>)
 8018dc0:	611a      	str	r2, [r3, #16]
   //Specify the server's root directory
   strcpy(httpServerSettings.rootDirectory, "/www/");
 8018dc2:	4b31      	ldr	r3, [pc, #196]	; (8018e88 <main+0x364>)
 8018dc4:	4a31      	ldr	r2, [pc, #196]	; (8018e8c <main+0x368>)
 8018dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018dca:	6018      	str	r0, [r3, #0]
 8018dcc:	3304      	adds	r3, #4
 8018dce:	8019      	strh	r1, [r3, #0]
   //Set default home page
   strcpy(httpServerSettings.defaultDocument, "index.html");
 8018dd0:	4b2f      	ldr	r3, [pc, #188]	; (8018e90 <main+0x36c>)
 8018dd2:	4a30      	ldr	r2, [pc, #192]	; (8018e94 <main+0x370>)
 8018dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8018dd6:	c303      	stmia	r3!, {r0, r1}
 8018dd8:	801a      	strh	r2, [r3, #0]
 8018dda:	3302      	adds	r3, #2
 8018ddc:	0c12      	lsrs	r2, r2, #16
 8018dde:	701a      	strb	r2, [r3, #0]
   
   //Callback functions
   httpServerSettings.requestCallback = httpServerRequestCallback;
 8018de0:	4b27      	ldr	r3, [pc, #156]	; (8018e80 <main+0x35c>)
 8018de2:	4a2d      	ldr	r2, [pc, #180]	; (8018e98 <main+0x374>)
 8018de4:	659a      	str	r2, [r3, #88]	; 0x58
   httpServerSettings.uriNotFoundCallback = httpServerUriNotFoundCallback;
 8018de6:	4b26      	ldr	r3, [pc, #152]	; (8018e80 <main+0x35c>)
 8018de8:	4a2c      	ldr	r2, [pc, #176]	; (8018e9c <main+0x378>)
 8018dea:	65da      	str	r2, [r3, #92]	; 0x5c

   //HTTP server initialization
   error = httpServerInit(&httpServerContext, &httpServerSettings);
 8018dec:	4924      	ldr	r1, [pc, #144]	; (8018e80 <main+0x35c>)
 8018dee:	482c      	ldr	r0, [pc, #176]	; (8018ea0 <main+0x37c>)
 8018df0:	f7ed f980 	bl	80060f4 <httpServerInit>
 8018df4:	4603      	mov	r3, r0
 8018df6:	82fb      	strh	r3, [r7, #22]
   //Failed to initialize HTTP server?
   if(error)
 8018df8:	8afb      	ldrh	r3, [r7, #22]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d057      	beq.n	8018eae <main+0x38a>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize HTTP server!\r\n");
 8018dfe:	f7e8 f94c 	bl	800109a <osSuspendAllTasks>
 8018e02:	4b03      	ldr	r3, [pc, #12]	; (8018e10 <main+0x2ec>)
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	68db      	ldr	r3, [r3, #12]
 8018e08:	2223      	movs	r2, #35	; 0x23
 8018e0a:	2101      	movs	r1, #1
 8018e0c:	e04a      	b.n	8018ea4 <main+0x380>
 8018e0e:	bf00      	nop
 8018e10:	20000044 	.word	0x20000044
 8018e14:	080257c0 	.word	0x080257c0
 8018e18:	080257c4 	.word	0x080257c4
 8018e1c:	080257f0 	.word	0x080257f0
 8018e20:	0802581c 	.word	0x0802581c
 8018e24:	08025840 	.word	0x08025840
 8018e28:	08025848 	.word	0x08025848
 8018e2c:	08025858 	.word	0x08025858
 8018e30:	08025884 	.word	0x08025884
 8018e34:	08025890 	.word	0x08025890
 8018e38:	0802589c 	.word	0x0802589c
 8018e3c:	080258b0 	.word	0x080258b0
 8018e40:	080258c4 	.word	0x080258c4
 8018e44:	20004744 	.word	0x20004744
 8018e48:	080258ec 	.word	0x080258ec
 8018e4c:	080258f4 	.word	0x080258f4
 8018e50:	08025908 	.word	0x08025908
 8018e54:	080255ac 	.word	0x080255ac
 8018e58:	08024c94 	.word	0x08024c94
 8018e5c:	0802591c 	.word	0x0802591c
 8018e60:	2000a998 	.word	0x2000a998
 8018e64:	2000a8a0 	.word	0x2000a8a0
 8018e68:	08025940 	.word	0x08025940
 8018e6c:	08025964 	.word	0x08025964
 8018e70:	2000a988 	.word	0x2000a988
 8018e74:	2000a888 	.word	0x2000a888
 8018e78:	08025984 	.word	0x08025984
 8018e7c:	080259a4 	.word	0x080259a4
 8018e80:	2000a9d4 	.word	0x2000a9d4
 8018e84:	20007328 	.word	0x20007328
 8018e88:	2000a9e8 	.word	0x2000a9e8
 8018e8c:	080259c0 	.word	0x080259c0
 8018e90:	2000aa08 	.word	0x2000aa08
 8018e94:	080259c8 	.word	0x080259c8
 8018e98:	08018665 	.word	0x08018665
 8018e9c:	08018a1d 	.word	0x08018a1d
 8018ea0:	2000a918 	.word	0x2000a918
 8018ea4:	4824      	ldr	r0, [pc, #144]	; (8018f38 <main+0x414>)
 8018ea6:	f004 fa55 	bl	801d354 <fwrite>
 8018eaa:	f7e8 f901 	bl	80010b0 <osResumeAllTasks>
   }

   //Start HTTP server
   error = httpServerStart(&httpServerContext);
 8018eae:	4823      	ldr	r0, [pc, #140]	; (8018f3c <main+0x418>)
 8018eb0:	f7ed f9da 	bl	8006268 <httpServerStart>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	82fb      	strh	r3, [r7, #22]
   //Failed to start HTTP server?
   if(error)
 8018eb8:	8afb      	ldrh	r3, [r7, #22]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d00b      	beq.n	8018ed6 <main+0x3b2>
   {
      //Debug message
      TRACE_ERROR("Failed to start HTTP server!\r\n");
 8018ebe:	f7e8 f8ec 	bl	800109a <osSuspendAllTasks>
 8018ec2:	4b1f      	ldr	r3, [pc, #124]	; (8018f40 <main+0x41c>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	68db      	ldr	r3, [r3, #12]
 8018ec8:	221e      	movs	r2, #30
 8018eca:	2101      	movs	r1, #1
 8018ecc:	481d      	ldr	r0, [pc, #116]	; (8018f44 <main+0x420>)
 8018ece:	f004 fa41 	bl	801d354 <fwrite>
 8018ed2:	f7e8 f8ed 	bl	80010b0 <osResumeAllTasks>
      return error;
   }
#endif
   
   //Create IAP mutex
   if(!osCreateMutex(&iapMutex))
 8018ed6:	481c      	ldr	r0, [pc, #112]	; (8018f48 <main+0x424>)
 8018ed8:	f7e8 f9af 	bl	800123a <osCreateMutex>
 8018edc:	4603      	mov	r3, r0
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d10b      	bne.n	8018efa <main+0x3d6>
   {
      //Debug message
      TRACE_ERROR("Failed to create IAP mutex!\r\n");
 8018ee2:	f7e8 f8da 	bl	800109a <osSuspendAllTasks>
 8018ee6:	4b16      	ldr	r3, [pc, #88]	; (8018f40 <main+0x41c>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	68db      	ldr	r3, [r3, #12]
 8018eec:	221d      	movs	r2, #29
 8018eee:	2101      	movs	r1, #1
 8018ef0:	4816      	ldr	r0, [pc, #88]	; (8018f4c <main+0x428>)
 8018ef2:	f004 fa2f 	bl	801d354 <fwrite>
 8018ef6:	f7e8 f8db 	bl	80010b0 <osResumeAllTasks>
   }

   //Create a task to blink the LED
   task = osCreateTask("LED", ledTask, NULL, 200, OS_TASK_PRIORITY_NORMAL);
 8018efa:	2301      	movs	r3, #1
 8018efc:	9300      	str	r3, [sp, #0]
 8018efe:	23c8      	movs	r3, #200	; 0xc8
 8018f00:	2200      	movs	r2, #0
 8018f02:	4913      	ldr	r1, [pc, #76]	; (8018f50 <main+0x42c>)
 8018f04:	4813      	ldr	r0, [pc, #76]	; (8018f54 <main+0x430>)
 8018f06:	f7e8 f89c 	bl	8001042 <osCreateTask>
 8018f0a:	60f8      	str	r0, [r7, #12]
   //Failed to create the task?
   if(task == OS_INVALID_HANDLE)
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d10b      	bne.n	8018f2a <main+0x406>
   {
      //Debug message
      TRACE_ERROR("Failed to create task!\r\n");
 8018f12:	f7e8 f8c2 	bl	800109a <osSuspendAllTasks>
 8018f16:	4b0a      	ldr	r3, [pc, #40]	; (8018f40 <main+0x41c>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	68db      	ldr	r3, [r3, #12]
 8018f1c:	2218      	movs	r2, #24
 8018f1e:	2101      	movs	r1, #1
 8018f20:	480d      	ldr	r0, [pc, #52]	; (8018f58 <main+0x434>)
 8018f22:	f004 fa17 	bl	801d354 <fwrite>
 8018f26:	f7e8 f8c3 	bl	80010b0 <osResumeAllTasks>
   }
   
   //Start the execution of tasks
   osStartKernel();
 8018f2a:	f7e8 f884 	bl	8001036 <osStartKernel>

   //This function should never return
   return 0;
 8018f2e:	2300      	movs	r3, #0
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	3718      	adds	r7, #24
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd80      	pop	{r7, pc}
 8018f38:	080259d4 	.word	0x080259d4
 8018f3c:	2000a918 	.word	0x2000a918
 8018f40:	20000044 	.word	0x20000044
 8018f44:	080259f8 	.word	0x080259f8
 8018f48:	2000aa3c 	.word	0x2000aa3c
 8018f4c:	08025a18 	.word	0x08025a18
 8018f50:	08018b01 	.word	0x08018b01
 8018f54:	08025a38 	.word	0x08025a38
 8018f58:	08025a3c 	.word	0x08025a3c

08018f5c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8018f5c:	b480      	push	{r7}
 8018f5e:	af00      	add	r7, sp, #0
}
 8018f60:	bf00      	nop
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr

08018f6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8018f6a:	b480      	push	{r7}
 8018f6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8018f6e:	e7fe      	b.n	8018f6e <HardFault_Handler+0x4>

08018f70 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8018f70:	b480      	push	{r7}
 8018f72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8018f74:	e7fe      	b.n	8018f74 <MemManage_Handler+0x4>

08018f76 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8018f76:	b480      	push	{r7}
 8018f78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8018f7a:	e7fe      	b.n	8018f7a <BusFault_Handler+0x4>

08018f7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8018f7c:	b480      	push	{r7}
 8018f7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8018f80:	e7fe      	b.n	8018f80 <UsageFault_Handler+0x4>

08018f82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8018f82:	b480      	push	{r7}
 8018f84:	af00      	add	r7, sp, #0
}
 8018f86:	bf00      	nop
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8e:	4770      	bx	lr

08018f90 <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	af00      	add	r7, sp, #0
   HAL_IncTick();
 8018f94:	f001 fdf6 	bl	801ab84 <HAL_IncTick>

   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8018f98:	f001 fae0 	bl	801a55c <xTaskGetSchedulerState>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d001      	beq.n	8018fa6 <SysTick_Handler+0x16>
   {
      xPortSysTickHandler();
 8018fa2:	f000 fa21 	bl	80193e8 <xPortSysTickHandler>
   }
}
 8018fa6:	bf00      	nop
 8018fa8:	bd80      	pop	{r7, pc}
	...

08018fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018fac:	b480      	push	{r7}
 8018fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018fb0:	4b16      	ldr	r3, [pc, #88]	; (801900c <SystemInit+0x60>)
 8018fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018fb6:	4a15      	ldr	r2, [pc, #84]	; (801900c <SystemInit+0x60>)
 8018fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8018fc0:	4b13      	ldr	r3, [pc, #76]	; (8019010 <SystemInit+0x64>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4a12      	ldr	r2, [pc, #72]	; (8019010 <SystemInit+0x64>)
 8018fc6:	f043 0301 	orr.w	r3, r3, #1
 8018fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8018fcc:	4b10      	ldr	r3, [pc, #64]	; (8019010 <SystemInit+0x64>)
 8018fce:	2200      	movs	r2, #0
 8018fd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8018fd2:	4b0f      	ldr	r3, [pc, #60]	; (8019010 <SystemInit+0x64>)
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	4a0e      	ldr	r2, [pc, #56]	; (8019010 <SystemInit+0x64>)
 8018fd8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8018fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018fe0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8018fe2:	4b0b      	ldr	r3, [pc, #44]	; (8019010 <SystemInit+0x64>)
 8018fe4:	4a0b      	ldr	r2, [pc, #44]	; (8019014 <SystemInit+0x68>)
 8018fe6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8018fe8:	4b09      	ldr	r3, [pc, #36]	; (8019010 <SystemInit+0x64>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4a08      	ldr	r2, [pc, #32]	; (8019010 <SystemInit+0x64>)
 8018fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8018ff4:	4b06      	ldr	r3, [pc, #24]	; (8019010 <SystemInit+0x64>)
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  //SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018ffa:	4b04      	ldr	r3, [pc, #16]	; (801900c <SystemInit+0x60>)
 8018ffc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8019000:	609a      	str	r2, [r3, #8]
#endif
}
 8019002:	bf00      	nop
 8019004:	46bd      	mov	sp, r7
 8019006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900a:	4770      	bx	lr
 801900c:	e000ed00 	.word	0xe000ed00
 8019010:	40023800 	.word	0x40023800
 8019014:	24003010 	.word	0x24003010

08019018 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b084      	sub	sp, #16
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8019020:	f000 ff7a 	bl	8019f18 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f004 f9cb 	bl	801d3c0 <malloc>
 801902a:	4603      	mov	r3, r0
 801902c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801902e:	f000 ff81 	bl	8019f34 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8019032:	68fb      	ldr	r3, [r7, #12]
}
 8019034:	4618      	mov	r0, r3
 8019036:	3710      	adds	r7, #16
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b082      	sub	sp, #8
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
	if( pv )
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d006      	beq.n	8019058 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 801904a:	f000 ff65 	bl	8019f18 <vTaskSuspendAll>
		{
			free( pv );
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f004 f9be 	bl	801d3d0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8019054:	f000 ff6e 	bl	8019f34 <xTaskResumeAll>
	}
}
 8019058:	bf00      	nop
 801905a:	3708      	adds	r7, #8
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}

08019060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019060:	b480      	push	{r7}
 8019062:	b083      	sub	sp, #12
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f103 0208 	add.w	r2, r3, #8
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	f04f 32ff 	mov.w	r2, #4294967295
 8019078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f103 0208 	add.w	r2, r3, #8
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f103 0208 	add.w	r2, r3, #8
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2200      	movs	r2, #0
 8019092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019094:	bf00      	nop
 8019096:	370c      	adds	r7, #12
 8019098:	46bd      	mov	sp, r7
 801909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801909e:	4770      	bx	lr

080190a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80190a0:	b480      	push	{r7}
 80190a2:	b083      	sub	sp, #12
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2200      	movs	r2, #0
 80190ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80190ae:	bf00      	nop
 80190b0:	370c      	adds	r7, #12
 80190b2:	46bd      	mov	sp, r7
 80190b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80190ba:	b480      	push	{r7}
 80190bc:	b085      	sub	sp, #20
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
 80190c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	685b      	ldr	r3, [r3, #4]
 80190c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	68fa      	ldr	r2, [r7, #12]
 80190ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	689a      	ldr	r2, [r3, #8]
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	683a      	ldr	r2, [r7, #0]
 80190de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	683a      	ldr	r2, [r7, #0]
 80190e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	1c5a      	adds	r2, r3, #1
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	601a      	str	r2, [r3, #0]
}
 80190f6:	bf00      	nop
 80190f8:	3714      	adds	r7, #20
 80190fa:	46bd      	mov	sp, r7
 80190fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019100:	4770      	bx	lr

08019102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019102:	b480      	push	{r7}
 8019104:	b085      	sub	sp, #20
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
 801910a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019112:	68bb      	ldr	r3, [r7, #8]
 8019114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019118:	d103      	bne.n	8019122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	691b      	ldr	r3, [r3, #16]
 801911e:	60fb      	str	r3, [r7, #12]
 8019120:	e00c      	b.n	801913c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	3308      	adds	r3, #8
 8019126:	60fb      	str	r3, [r7, #12]
 8019128:	e002      	b.n	8019130 <vListInsert+0x2e>
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	60fb      	str	r3, [r7, #12]
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	68ba      	ldr	r2, [r7, #8]
 8019138:	429a      	cmp	r2, r3
 801913a:	d2f6      	bcs.n	801912a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	685a      	ldr	r2, [r3, #4]
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	683a      	ldr	r2, [r7, #0]
 801914a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	68fa      	ldr	r2, [r7, #12]
 8019150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	683a      	ldr	r2, [r7, #0]
 8019156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	687a      	ldr	r2, [r7, #4]
 801915c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	1c5a      	adds	r2, r3, #1
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	601a      	str	r2, [r3, #0]
}
 8019168:	bf00      	nop
 801916a:	3714      	adds	r7, #20
 801916c:	46bd      	mov	sp, r7
 801916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019172:	4770      	bx	lr

08019174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019174:	b480      	push	{r7}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	691b      	ldr	r3, [r3, #16]
 8019180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	687a      	ldr	r2, [r7, #4]
 8019188:	6892      	ldr	r2, [r2, #8]
 801918a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	689b      	ldr	r3, [r3, #8]
 8019190:	687a      	ldr	r2, [r7, #4]
 8019192:	6852      	ldr	r2, [r2, #4]
 8019194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	687a      	ldr	r2, [r7, #4]
 801919c:	429a      	cmp	r2, r3
 801919e:	d103      	bne.n	80191a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	689a      	ldr	r2, [r3, #8]
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2200      	movs	r2, #0
 80191ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	1e5a      	subs	r2, r3, #1
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
}
 80191bc:	4618      	mov	r0, r3
 80191be:	3714      	adds	r7, #20
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr

080191c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80191c8:	b480      	push	{r7}
 80191ca:	b085      	sub	sp, #20
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	60f8      	str	r0, [r7, #12]
 80191d0:	60b9      	str	r1, [r7, #8]
 80191d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	3b04      	subs	r3, #4
 80191d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80191e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	3b04      	subs	r3, #4
 80191e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80191e8:	68bb      	ldr	r3, [r7, #8]
 80191ea:	f023 0201 	bic.w	r2, r3, #1
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	3b04      	subs	r3, #4
 80191f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80191f8:	4a0c      	ldr	r2, [pc, #48]	; (801922c <pxPortInitialiseStack+0x64>)
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	3b14      	subs	r3, #20
 8019202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	3b04      	subs	r3, #4
 801920e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f06f 0202 	mvn.w	r2, #2
 8019216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	3b20      	subs	r3, #32
 801921c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801921e:	68fb      	ldr	r3, [r7, #12]
}
 8019220:	4618      	mov	r0, r3
 8019222:	3714      	adds	r7, #20
 8019224:	46bd      	mov	sp, r7
 8019226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922a:	4770      	bx	lr
 801922c:	08019231 	.word	0x08019231

08019230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019230:	b480      	push	{r7}
 8019232:	b083      	sub	sp, #12
 8019234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801923a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 801923e:	f383 8811 	msr	BASEPRI, r3
 8019242:	f3bf 8f6f 	isb	sy
 8019246:	f3bf 8f4f 	dsb	sy
 801924a:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801924c:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801924e:	bf00      	nop
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d0fc      	beq.n	8019250 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019256:	bf00      	nop
 8019258:	bf00      	nop
 801925a:	370c      	adds	r7, #12
 801925c:	46bd      	mov	sp, r7
 801925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019262:	4770      	bx	lr
	...

08019270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019270:	4b07      	ldr	r3, [pc, #28]	; (8019290 <pxCurrentTCBConst2>)
 8019272:	6819      	ldr	r1, [r3, #0]
 8019274:	6808      	ldr	r0, [r1, #0]
 8019276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927a:	f380 8809 	msr	PSP, r0
 801927e:	f3bf 8f6f 	isb	sy
 8019282:	f04f 0000 	mov.w	r0, #0
 8019286:	f380 8811 	msr	BASEPRI, r0
 801928a:	4770      	bx	lr
 801928c:	f3af 8000 	nop.w

08019290 <pxCurrentTCBConst2>:
 8019290:	200041f8 	.word	0x200041f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019294:	bf00      	nop
 8019296:	bf00      	nop

08019298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019298:	4808      	ldr	r0, [pc, #32]	; (80192bc <prvPortStartFirstTask+0x24>)
 801929a:	6800      	ldr	r0, [r0, #0]
 801929c:	6800      	ldr	r0, [r0, #0]
 801929e:	f380 8808 	msr	MSP, r0
 80192a2:	f04f 0000 	mov.w	r0, #0
 80192a6:	f380 8814 	msr	CONTROL, r0
 80192aa:	b662      	cpsie	i
 80192ac:	b661      	cpsie	f
 80192ae:	f3bf 8f4f 	dsb	sy
 80192b2:	f3bf 8f6f 	isb	sy
 80192b6:	df00      	svc	0
 80192b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80192ba:	bf00      	nop
 80192bc:	e000ed08 	.word	0xe000ed08

080192c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80192c4:	4b10      	ldr	r3, [pc, #64]	; (8019308 <xPortStartScheduler+0x48>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	4a0f      	ldr	r2, [pc, #60]	; (8019308 <xPortStartScheduler+0x48>)
 80192ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80192ce:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80192d0:	4b0d      	ldr	r3, [pc, #52]	; (8019308 <xPortStartScheduler+0x48>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4a0c      	ldr	r2, [pc, #48]	; (8019308 <xPortStartScheduler+0x48>)
 80192d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80192da:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80192dc:	f000 f8a6 	bl	801942c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80192e0:	4b0a      	ldr	r3, [pc, #40]	; (801930c <xPortStartScheduler+0x4c>)
 80192e2:	2200      	movs	r2, #0
 80192e4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80192e6:	f000 f8c5 	bl	8019474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80192ea:	4b09      	ldr	r3, [pc, #36]	; (8019310 <xPortStartScheduler+0x50>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	4a08      	ldr	r2, [pc, #32]	; (8019310 <xPortStartScheduler+0x50>)
 80192f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80192f4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80192f6:	f7ff ffcf 	bl	8019298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80192fa:	f000 ff61 	bl	801a1c0 <vTaskSwitchContext>
	prvTaskExitError();
 80192fe:	f7ff ff97 	bl	8019230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019302:	2300      	movs	r3, #0
}
 8019304:	4618      	mov	r0, r3
 8019306:	bd80      	pop	{r7, pc}
 8019308:	e000ed20 	.word	0xe000ed20
 801930c:	20000028 	.word	0x20000028
 8019310:	e000ef34 	.word	0xe000ef34

08019314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019314:	b480      	push	{r7}
 8019316:	b083      	sub	sp, #12
 8019318:	af00      	add	r7, sp, #0
	__asm volatile
 801931a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 801931e:	f383 8811 	msr	BASEPRI, r3
 8019322:	f3bf 8f6f 	isb	sy
 8019326:	f3bf 8f4f 	dsb	sy
 801932a:	607b      	str	r3, [r7, #4]
}
 801932c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801932e:	4b05      	ldr	r3, [pc, #20]	; (8019344 <vPortEnterCritical+0x30>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	3301      	adds	r3, #1
 8019334:	4a03      	ldr	r2, [pc, #12]	; (8019344 <vPortEnterCritical+0x30>)
 8019336:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8019338:	bf00      	nop
 801933a:	370c      	adds	r7, #12
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr
 8019344:	20000028 	.word	0x20000028

08019348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019348:	b480      	push	{r7}
 801934a:	b083      	sub	sp, #12
 801934c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 801934e:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <vPortExitCritical+0x30>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	3b01      	subs	r3, #1
 8019354:	4a08      	ldr	r2, [pc, #32]	; (8019378 <vPortExitCritical+0x30>)
 8019356:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019358:	4b07      	ldr	r3, [pc, #28]	; (8019378 <vPortExitCritical+0x30>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d105      	bne.n	801936c <vPortExitCritical+0x24>
 8019360:	2300      	movs	r3, #0
 8019362:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801936a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801936c:	bf00      	nop
 801936e:	370c      	adds	r7, #12
 8019370:	46bd      	mov	sp, r7
 8019372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019376:	4770      	bx	lr
 8019378:	20000028 	.word	0x20000028
 801937c:	00000000 	.word	0x00000000

08019380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019380:	f3ef 8009 	mrs	r0, PSP
 8019384:	f3bf 8f6f 	isb	sy
 8019388:	4b15      	ldr	r3, [pc, #84]	; (80193e0 <pxCurrentTCBConst>)
 801938a:	681a      	ldr	r2, [r3, #0]
 801938c:	f01e 0f10 	tst.w	lr, #16
 8019390:	bf08      	it	eq
 8019392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801939a:	6010      	str	r0, [r2, #0]
 801939c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80193a0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80193a4:	f380 8811 	msr	BASEPRI, r0
 80193a8:	f3bf 8f4f 	dsb	sy
 80193ac:	f3bf 8f6f 	isb	sy
 80193b0:	f000 ff06 	bl	801a1c0 <vTaskSwitchContext>
 80193b4:	f04f 0000 	mov.w	r0, #0
 80193b8:	f380 8811 	msr	BASEPRI, r0
 80193bc:	bc09      	pop	{r0, r3}
 80193be:	6819      	ldr	r1, [r3, #0]
 80193c0:	6808      	ldr	r0, [r1, #0]
 80193c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c6:	f01e 0f10 	tst.w	lr, #16
 80193ca:	bf08      	it	eq
 80193cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80193d0:	f380 8809 	msr	PSP, r0
 80193d4:	f3bf 8f6f 	isb	sy
 80193d8:	4770      	bx	lr
 80193da:	bf00      	nop
 80193dc:	f3af 8000 	nop.w

080193e0 <pxCurrentTCBConst>:
 80193e0:	200041f8 	.word	0x200041f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80193e4:	bf00      	nop
 80193e6:	bf00      	nop

080193e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
	__asm volatile
 80193ee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80193f2:	f383 8811 	msr	BASEPRI, r3
 80193f6:	f3bf 8f6f 	isb	sy
 80193fa:	f3bf 8f4f 	dsb	sy
 80193fe:	607b      	str	r3, [r7, #4]
}
 8019400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019402:	f000 fe35 	bl	801a070 <xTaskIncrementTick>
 8019406:	4603      	mov	r3, r0
 8019408:	2b00      	cmp	r3, #0
 801940a:	d003      	beq.n	8019414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801940c:	4b06      	ldr	r3, [pc, #24]	; (8019428 <xPortSysTickHandler+0x40>)
 801940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019412:	601a      	str	r2, [r3, #0]
 8019414:	2300      	movs	r3, #0
 8019416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	f383 8811 	msr	BASEPRI, r3
}
 801941e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019420:	bf00      	nop
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	e000ed04 	.word	0xe000ed04

0801942c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801942c:	b480      	push	{r7}
 801942e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019430:	4b0b      	ldr	r3, [pc, #44]	; (8019460 <vPortSetupTimerInterrupt+0x34>)
 8019432:	2200      	movs	r2, #0
 8019434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019436:	4b0b      	ldr	r3, [pc, #44]	; (8019464 <vPortSetupTimerInterrupt+0x38>)
 8019438:	2200      	movs	r2, #0
 801943a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801943c:	4b0a      	ldr	r3, [pc, #40]	; (8019468 <vPortSetupTimerInterrupt+0x3c>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4a0a      	ldr	r2, [pc, #40]	; (801946c <vPortSetupTimerInterrupt+0x40>)
 8019442:	fba2 2303 	umull	r2, r3, r2, r3
 8019446:	099b      	lsrs	r3, r3, #6
 8019448:	4a09      	ldr	r2, [pc, #36]	; (8019470 <vPortSetupTimerInterrupt+0x44>)
 801944a:	3b01      	subs	r3, #1
 801944c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801944e:	4b04      	ldr	r3, [pc, #16]	; (8019460 <vPortSetupTimerInterrupt+0x34>)
 8019450:	2207      	movs	r2, #7
 8019452:	601a      	str	r2, [r3, #0]
}
 8019454:	bf00      	nop
 8019456:	46bd      	mov	sp, r7
 8019458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945c:	4770      	bx	lr
 801945e:	bf00      	nop
 8019460:	e000e010 	.word	0xe000e010
 8019464:	e000e018 	.word	0xe000e018
 8019468:	20000024 	.word	0x20000024
 801946c:	10624dd3 	.word	0x10624dd3
 8019470:	e000e014 	.word	0xe000e014

08019474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019484 <vPortEnableVFP+0x10>
 8019478:	6801      	ldr	r1, [r0, #0]
 801947a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801947e:	6001      	str	r1, [r0, #0]
 8019480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019482:	bf00      	nop
 8019484:	e000ed88 	.word	0xe000ed88

08019488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b084      	sub	sp, #16
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8019496:	f7ff ff3d 	bl	8019314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	681a      	ldr	r2, [r3, #0]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194a2:	68f9      	ldr	r1, [r7, #12]
 80194a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80194a6:	fb01 f303 	mul.w	r3, r1, r3
 80194aa:	441a      	add	r2, r3
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	2200      	movs	r2, #0
 80194b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	681a      	ldr	r2, [r3, #0]
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	681a      	ldr	r2, [r3, #0]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194c6:	3b01      	subs	r3, #1
 80194c8:	68f9      	ldr	r1, [r7, #12]
 80194ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80194cc:	fb01 f303 	mul.w	r3, r1, r3
 80194d0:	441a      	add	r2, r3
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	22ff      	movs	r2, #255	; 0xff
 80194da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	22ff      	movs	r2, #255	; 0xff
 80194e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80194e6:	683b      	ldr	r3, [r7, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d114      	bne.n	8019516 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	691b      	ldr	r3, [r3, #16]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d01a      	beq.n	801952a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	3310      	adds	r3, #16
 80194f8:	4618      	mov	r0, r3
 80194fa:	f000 febd 	bl	801a278 <xTaskRemoveFromEventList>
 80194fe:	4603      	mov	r3, r0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d012      	beq.n	801952a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019504:	4b0c      	ldr	r3, [pc, #48]	; (8019538 <xQueueGenericReset+0xb0>)
 8019506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801950a:	601a      	str	r2, [r3, #0]
 801950c:	f3bf 8f4f 	dsb	sy
 8019510:	f3bf 8f6f 	isb	sy
 8019514:	e009      	b.n	801952a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	3310      	adds	r3, #16
 801951a:	4618      	mov	r0, r3
 801951c:	f7ff fda0 	bl	8019060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	3324      	adds	r3, #36	; 0x24
 8019524:	4618      	mov	r0, r3
 8019526:	f7ff fd9b 	bl	8019060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801952a:	f7ff ff0d 	bl	8019348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801952e:	2301      	movs	r3, #1
}
 8019530:	4618      	mov	r0, r3
 8019532:	3710      	adds	r7, #16
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}
 8019538:	e000ed04 	.word	0xe000ed04

0801953c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801953c:	b580      	push	{r7, lr}
 801953e:	b08a      	sub	sp, #40	; 0x28
 8019540:	af02      	add	r7, sp, #8
 8019542:	60f8      	str	r0, [r7, #12]
 8019544:	60b9      	str	r1, [r7, #8]
 8019546:	4613      	mov	r3, r2
 8019548:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	68ba      	ldr	r2, [r7, #8]
 801954e:	fb02 f303 	mul.w	r3, r2, r3
 8019552:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019554:	69fb      	ldr	r3, [r7, #28]
 8019556:	3348      	adds	r3, #72	; 0x48
 8019558:	4618      	mov	r0, r3
 801955a:	f7ff fd5d 	bl	8019018 <pvPortMalloc>
 801955e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019560:	69bb      	ldr	r3, [r7, #24]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d00d      	beq.n	8019582 <xQueueGenericCreate+0x46>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	3348      	adds	r3, #72	; 0x48
 801956e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019570:	79fa      	ldrb	r2, [r7, #7]
 8019572:	69bb      	ldr	r3, [r7, #24]
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	4613      	mov	r3, r2
 8019578:	697a      	ldr	r2, [r7, #20]
 801957a:	68b9      	ldr	r1, [r7, #8]
 801957c:	68f8      	ldr	r0, [r7, #12]
 801957e:	f000 f805 	bl	801958c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019582:	69bb      	ldr	r3, [r7, #24]
	}
 8019584:	4618      	mov	r0, r3
 8019586:	3720      	adds	r7, #32
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}

0801958c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b084      	sub	sp, #16
 8019590:	af00      	add	r7, sp, #0
 8019592:	60f8      	str	r0, [r7, #12]
 8019594:	60b9      	str	r1, [r7, #8]
 8019596:	607a      	str	r2, [r7, #4]
 8019598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	2b00      	cmp	r3, #0
 801959e:	d103      	bne.n	80195a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80195a0:	69bb      	ldr	r3, [r7, #24]
 80195a2:	69ba      	ldr	r2, [r7, #24]
 80195a4:	601a      	str	r2, [r3, #0]
 80195a6:	e002      	b.n	80195ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80195a8:	69bb      	ldr	r3, [r7, #24]
 80195aa:	687a      	ldr	r2, [r7, #4]
 80195ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80195ae:	69bb      	ldr	r3, [r7, #24]
 80195b0:	68fa      	ldr	r2, [r7, #12]
 80195b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80195b4:	69bb      	ldr	r3, [r7, #24]
 80195b6:	68ba      	ldr	r2, [r7, #8]
 80195b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80195ba:	2101      	movs	r1, #1
 80195bc:	69b8      	ldr	r0, [r7, #24]
 80195be:	f7ff ff63 	bl	8019488 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80195c2:	bf00      	nop
 80195c4:	3710      	adds	r7, #16
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}

080195ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80195ca:	b580      	push	{r7, lr}
 80195cc:	b082      	sub	sp, #8
 80195ce:	af00      	add	r7, sp, #0
 80195d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d00e      	beq.n	80195f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	2200      	movs	r2, #0
 80195dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2200      	movs	r2, #0
 80195e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2200      	movs	r2, #0
 80195e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80195ea:	2300      	movs	r3, #0
 80195ec:	2200      	movs	r2, #0
 80195ee:	2100      	movs	r1, #0
 80195f0:	6878      	ldr	r0, [r7, #4]
 80195f2:	f000 f833 	bl	801965c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80195f6:	bf00      	nop
 80195f8:	3708      	adds	r7, #8
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}

080195fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80195fe:	b580      	push	{r7, lr}
 8019600:	b086      	sub	sp, #24
 8019602:	af00      	add	r7, sp, #0
 8019604:	4603      	mov	r3, r0
 8019606:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019608:	2301      	movs	r3, #1
 801960a:	617b      	str	r3, [r7, #20]
 801960c:	2300      	movs	r3, #0
 801960e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019610:	79fb      	ldrb	r3, [r7, #7]
 8019612:	461a      	mov	r2, r3
 8019614:	6939      	ldr	r1, [r7, #16]
 8019616:	6978      	ldr	r0, [r7, #20]
 8019618:	f7ff ff90 	bl	801953c <xQueueGenericCreate>
 801961c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801961e:	68f8      	ldr	r0, [r7, #12]
 8019620:	f7ff ffd3 	bl	80195ca <prvInitialiseMutex>

		return xNewQueue;
 8019624:	68fb      	ldr	r3, [r7, #12]
	}
 8019626:	4618      	mov	r0, r3
 8019628:	3718      	adds	r7, #24
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}

0801962e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801962e:	b580      	push	{r7, lr}
 8019630:	b084      	sub	sp, #16
 8019632:	af00      	add	r7, sp, #0
 8019634:	6078      	str	r0, [r7, #4]
 8019636:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019638:	2202      	movs	r2, #2
 801963a:	2100      	movs	r1, #0
 801963c:	6878      	ldr	r0, [r7, #4]
 801963e:	f7ff ff7d 	bl	801953c <xQueueGenericCreate>
 8019642:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d002      	beq.n	8019650 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	683a      	ldr	r2, [r7, #0]
 801964e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019650:	68fb      	ldr	r3, [r7, #12]
	}
 8019652:	4618      	mov	r0, r3
 8019654:	3710      	adds	r7, #16
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}
	...

0801965c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b08a      	sub	sp, #40	; 0x28
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	60b9      	str	r1, [r7, #8]
 8019666:	607a      	str	r2, [r7, #4]
 8019668:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801966a:	2300      	movs	r3, #0
 801966c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019672:	f7ff fe4f 	bl	8019314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019676:	6a3b      	ldr	r3, [r7, #32]
 8019678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801967a:	6a3b      	ldr	r3, [r7, #32]
 801967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801967e:	429a      	cmp	r2, r3
 8019680:	d302      	bcc.n	8019688 <xQueueGenericSend+0x2c>
 8019682:	683b      	ldr	r3, [r7, #0]
 8019684:	2b02      	cmp	r3, #2
 8019686:	d129      	bne.n	80196dc <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019688:	683a      	ldr	r2, [r7, #0]
 801968a:	68b9      	ldr	r1, [r7, #8]
 801968c:	6a38      	ldr	r0, [r7, #32]
 801968e:	f000 f9d0 	bl	8019a32 <prvCopyDataToQueue>
 8019692:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019694:	6a3b      	ldr	r3, [r7, #32]
 8019696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019698:	2b00      	cmp	r3, #0
 801969a:	d010      	beq.n	80196be <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801969c:	6a3b      	ldr	r3, [r7, #32]
 801969e:	3324      	adds	r3, #36	; 0x24
 80196a0:	4618      	mov	r0, r3
 80196a2:	f000 fde9 	bl	801a278 <xTaskRemoveFromEventList>
 80196a6:	4603      	mov	r3, r0
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d013      	beq.n	80196d4 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80196ac:	4b3f      	ldr	r3, [pc, #252]	; (80197ac <xQueueGenericSend+0x150>)
 80196ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196b2:	601a      	str	r2, [r3, #0]
 80196b4:	f3bf 8f4f 	dsb	sy
 80196b8:	f3bf 8f6f 	isb	sy
 80196bc:	e00a      	b.n	80196d4 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80196be:	69fb      	ldr	r3, [r7, #28]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d007      	beq.n	80196d4 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80196c4:	4b39      	ldr	r3, [pc, #228]	; (80197ac <xQueueGenericSend+0x150>)
 80196c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196ca:	601a      	str	r2, [r3, #0]
 80196cc:	f3bf 8f4f 	dsb	sy
 80196d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80196d4:	f7ff fe38 	bl	8019348 <vPortExitCritical>
				return pdPASS;
 80196d8:	2301      	movs	r3, #1
 80196da:	e063      	b.n	80197a4 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d103      	bne.n	80196ea <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80196e2:	f7ff fe31 	bl	8019348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80196e6:	2300      	movs	r3, #0
 80196e8:	e05c      	b.n	80197a4 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80196ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d106      	bne.n	80196fe <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80196f0:	f107 0314 	add.w	r3, r7, #20
 80196f4:	4618      	mov	r0, r3
 80196f6:	f000 fe13 	bl	801a320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80196fa:	2301      	movs	r3, #1
 80196fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80196fe:	f7ff fe23 	bl	8019348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019702:	f000 fc09 	bl	8019f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019706:	f7ff fe05 	bl	8019314 <vPortEnterCritical>
 801970a:	6a3b      	ldr	r3, [r7, #32]
 801970c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019710:	b25b      	sxtb	r3, r3
 8019712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019716:	d103      	bne.n	8019720 <xQueueGenericSend+0xc4>
 8019718:	6a3b      	ldr	r3, [r7, #32]
 801971a:	2200      	movs	r2, #0
 801971c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019720:	6a3b      	ldr	r3, [r7, #32]
 8019722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019726:	b25b      	sxtb	r3, r3
 8019728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801972c:	d103      	bne.n	8019736 <xQueueGenericSend+0xda>
 801972e:	6a3b      	ldr	r3, [r7, #32]
 8019730:	2200      	movs	r2, #0
 8019732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019736:	f7ff fe07 	bl	8019348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801973a:	1d3a      	adds	r2, r7, #4
 801973c:	f107 0314 	add.w	r3, r7, #20
 8019740:	4611      	mov	r1, r2
 8019742:	4618      	mov	r0, r3
 8019744:	f000 fe02 	bl	801a34c <xTaskCheckForTimeOut>
 8019748:	4603      	mov	r3, r0
 801974a:	2b00      	cmp	r3, #0
 801974c:	d124      	bne.n	8019798 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801974e:	6a38      	ldr	r0, [r7, #32]
 8019750:	f000 fa41 	bl	8019bd6 <prvIsQueueFull>
 8019754:	4603      	mov	r3, r0
 8019756:	2b00      	cmp	r3, #0
 8019758:	d018      	beq.n	801978c <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801975a:	6a3b      	ldr	r3, [r7, #32]
 801975c:	3310      	adds	r3, #16
 801975e:	687a      	ldr	r2, [r7, #4]
 8019760:	4611      	mov	r1, r2
 8019762:	4618      	mov	r0, r3
 8019764:	f000 fd72 	bl	801a24c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019768:	6a38      	ldr	r0, [r7, #32]
 801976a:	f000 f9cc 	bl	8019b06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801976e:	f000 fbe1 	bl	8019f34 <xTaskResumeAll>
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	f47f af7c 	bne.w	8019672 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 801977a:	4b0c      	ldr	r3, [pc, #48]	; (80197ac <xQueueGenericSend+0x150>)
 801977c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019780:	601a      	str	r2, [r3, #0]
 8019782:	f3bf 8f4f 	dsb	sy
 8019786:	f3bf 8f6f 	isb	sy
 801978a:	e772      	b.n	8019672 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801978c:	6a38      	ldr	r0, [r7, #32]
 801978e:	f000 f9ba 	bl	8019b06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019792:	f000 fbcf 	bl	8019f34 <xTaskResumeAll>
 8019796:	e76c      	b.n	8019672 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019798:	6a38      	ldr	r0, [r7, #32]
 801979a:	f000 f9b4 	bl	8019b06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801979e:	f000 fbc9 	bl	8019f34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80197a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	3728      	adds	r7, #40	; 0x28
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	e000ed04 	.word	0xe000ed04

080197b0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b08a      	sub	sp, #40	; 0x28
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	623b      	str	r3, [r7, #32]
	__asm volatile
 80197be:	f3ef 8211 	mrs	r2, BASEPRI
 80197c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80197c6:	f383 8811 	msr	BASEPRI, r3
 80197ca:	f3bf 8f6f 	isb	sy
 80197ce:	f3bf 8f4f 	dsb	sy
 80197d2:	613a      	str	r2, [r7, #16]
 80197d4:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80197d6:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80197d8:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80197da:	6a3b      	ldr	r3, [r7, #32]
 80197dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197de:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80197e0:	6a3b      	ldr	r3, [r7, #32]
 80197e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197e4:	69ba      	ldr	r2, [r7, #24]
 80197e6:	429a      	cmp	r2, r3
 80197e8:	d229      	bcs.n	801983e <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80197ea:	6a3b      	ldr	r3, [r7, #32]
 80197ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80197f0:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80197f2:	69bb      	ldr	r3, [r7, #24]
 80197f4:	1c5a      	adds	r2, r3, #1
 80197f6:	6a3b      	ldr	r3, [r7, #32]
 80197f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80197fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80197fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019802:	d112      	bne.n	801982a <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019804:	6a3b      	ldr	r3, [r7, #32]
 8019806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019808:	2b00      	cmp	r3, #0
 801980a:	d015      	beq.n	8019838 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801980c:	6a3b      	ldr	r3, [r7, #32]
 801980e:	3324      	adds	r3, #36	; 0x24
 8019810:	4618      	mov	r0, r3
 8019812:	f000 fd31 	bl	801a278 <xTaskRemoveFromEventList>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	d00d      	beq.n	8019838 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d00a      	beq.n	8019838 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	2201      	movs	r2, #1
 8019826:	601a      	str	r2, [r3, #0]
 8019828:	e006      	b.n	8019838 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801982a:	7dfb      	ldrb	r3, [r7, #23]
 801982c:	3301      	adds	r3, #1
 801982e:	b2db      	uxtb	r3, r3
 8019830:	b25a      	sxtb	r2, r3
 8019832:	6a3b      	ldr	r3, [r7, #32]
 8019834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019838:	2301      	movs	r3, #1
 801983a:	627b      	str	r3, [r7, #36]	; 0x24
 801983c:	e001      	b.n	8019842 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801983e:	2300      	movs	r3, #0
 8019840:	627b      	str	r3, [r7, #36]	; 0x24
 8019842:	69fb      	ldr	r3, [r7, #28]
 8019844:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	f383 8811 	msr	BASEPRI, r3
}
 801984c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019850:	4618      	mov	r0, r3
 8019852:	3728      	adds	r7, #40	; 0x28
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}

08019858 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b08a      	sub	sp, #40	; 0x28
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019862:	2300      	movs	r3, #0
 8019864:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801986a:	2300      	movs	r3, #0
 801986c:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801986e:	f7ff fd51 	bl	8019314 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019872:	69fb      	ldr	r3, [r7, #28]
 8019874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019876:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019878:	69bb      	ldr	r3, [r7, #24]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d024      	beq.n	80198c8 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801987e:	69bb      	ldr	r3, [r7, #24]
 8019880:	1e5a      	subs	r2, r3, #1
 8019882:	69fb      	ldr	r3, [r7, #28]
 8019884:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019886:	69fb      	ldr	r3, [r7, #28]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d104      	bne.n	8019898 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801988e:	f000 ffcb 	bl	801a828 <pvTaskIncrementMutexHeldCount>
 8019892:	4602      	mov	r2, r0
 8019894:	69fb      	ldr	r3, [r7, #28]
 8019896:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019898:	69fb      	ldr	r3, [r7, #28]
 801989a:	691b      	ldr	r3, [r3, #16]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d00f      	beq.n	80198c0 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	3310      	adds	r3, #16
 80198a4:	4618      	mov	r0, r3
 80198a6:	f000 fce7 	bl	801a278 <xTaskRemoveFromEventList>
 80198aa:	4603      	mov	r3, r0
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d007      	beq.n	80198c0 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80198b0:	4b4c      	ldr	r3, [pc, #304]	; (80199e4 <xQueueSemaphoreTake+0x18c>)
 80198b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80198b6:	601a      	str	r2, [r3, #0]
 80198b8:	f3bf 8f4f 	dsb	sy
 80198bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80198c0:	f7ff fd42 	bl	8019348 <vPortExitCritical>
				return pdPASS;
 80198c4:	2301      	movs	r3, #1
 80198c6:	e089      	b.n	80199dc <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d103      	bne.n	80198d6 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80198ce:	f7ff fd3b 	bl	8019348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80198d2:	2300      	movs	r3, #0
 80198d4:	e082      	b.n	80199dc <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 80198d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d106      	bne.n	80198ea <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80198dc:	f107 030c 	add.w	r3, r7, #12
 80198e0:	4618      	mov	r0, r3
 80198e2:	f000 fd1d 	bl	801a320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80198e6:	2301      	movs	r3, #1
 80198e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80198ea:	f7ff fd2d 	bl	8019348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80198ee:	f000 fb13 	bl	8019f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80198f2:	f7ff fd0f 	bl	8019314 <vPortEnterCritical>
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80198fc:	b25b      	sxtb	r3, r3
 80198fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019902:	d103      	bne.n	801990c <xQueueSemaphoreTake+0xb4>
 8019904:	69fb      	ldr	r3, [r7, #28]
 8019906:	2200      	movs	r2, #0
 8019908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019912:	b25b      	sxtb	r3, r3
 8019914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019918:	d103      	bne.n	8019922 <xQueueSemaphoreTake+0xca>
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	2200      	movs	r2, #0
 801991e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019922:	f7ff fd11 	bl	8019348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019926:	463a      	mov	r2, r7
 8019928:	f107 030c 	add.w	r3, r7, #12
 801992c:	4611      	mov	r1, r2
 801992e:	4618      	mov	r0, r3
 8019930:	f000 fd0c 	bl	801a34c <xTaskCheckForTimeOut>
 8019934:	4603      	mov	r3, r0
 8019936:	2b00      	cmp	r3, #0
 8019938:	d132      	bne.n	80199a0 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801993a:	69f8      	ldr	r0, [r7, #28]
 801993c:	f000 f935 	bl	8019baa <prvIsQueueEmpty>
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d026      	beq.n	8019994 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019946:	69fb      	ldr	r3, [r7, #28]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d109      	bne.n	8019962 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 801994e:	f7ff fce1 	bl	8019314 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019952:	69fb      	ldr	r3, [r7, #28]
 8019954:	689b      	ldr	r3, [r3, #8]
 8019956:	4618      	mov	r0, r3
 8019958:	f000 fe1e 	bl	801a598 <xTaskPriorityInherit>
 801995c:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 801995e:	f7ff fcf3 	bl	8019348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	3324      	adds	r3, #36	; 0x24
 8019966:	683a      	ldr	r2, [r7, #0]
 8019968:	4611      	mov	r1, r2
 801996a:	4618      	mov	r0, r3
 801996c:	f000 fc6e 	bl	801a24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019970:	69f8      	ldr	r0, [r7, #28]
 8019972:	f000 f8c8 	bl	8019b06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019976:	f000 fadd 	bl	8019f34 <xTaskResumeAll>
 801997a:	4603      	mov	r3, r0
 801997c:	2b00      	cmp	r3, #0
 801997e:	f47f af76 	bne.w	801986e <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8019982:	4b18      	ldr	r3, [pc, #96]	; (80199e4 <xQueueSemaphoreTake+0x18c>)
 8019984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019988:	601a      	str	r2, [r3, #0]
 801998a:	f3bf 8f4f 	dsb	sy
 801998e:	f3bf 8f6f 	isb	sy
 8019992:	e76c      	b.n	801986e <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019994:	69f8      	ldr	r0, [r7, #28]
 8019996:	f000 f8b6 	bl	8019b06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801999a:	f000 facb 	bl	8019f34 <xTaskResumeAll>
 801999e:	e766      	b.n	801986e <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80199a0:	69f8      	ldr	r0, [r7, #28]
 80199a2:	f000 f8b0 	bl	8019b06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80199a6:	f000 fac5 	bl	8019f34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80199aa:	69f8      	ldr	r0, [r7, #28]
 80199ac:	f000 f8fd 	bl	8019baa <prvIsQueueEmpty>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	f43f af5b 	beq.w	801986e <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80199b8:	6a3b      	ldr	r3, [r7, #32]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d00d      	beq.n	80199da <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80199be:	f7ff fca9 	bl	8019314 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80199c2:	69f8      	ldr	r0, [r7, #28]
 80199c4:	f000 f81d 	bl	8019a02 <prvGetDisinheritPriorityAfterTimeout>
 80199c8:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80199ca:	69fb      	ldr	r3, [r7, #28]
 80199cc:	689b      	ldr	r3, [r3, #8]
 80199ce:	6979      	ldr	r1, [r7, #20]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f000 febb 	bl	801a74c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80199d6:	f7ff fcb7 	bl	8019348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80199da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80199dc:	4618      	mov	r0, r3
 80199de:	3728      	adds	r7, #40	; 0x28
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}
 80199e4:	e000ed04 	.word	0xe000ed04

080199e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b084      	sub	sp, #16
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	60fb      	str	r3, [r7, #12]

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80199f4:	68f8      	ldr	r0, [r7, #12]
 80199f6:	f7ff fb21 	bl	801903c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80199fa:	bf00      	nop
 80199fc:	3710      	adds	r7, #16
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd80      	pop	{r7, pc}

08019a02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019a02:	b480      	push	{r7}
 8019a04:	b085      	sub	sp, #20
 8019a06:	af00      	add	r7, sp, #0
 8019a08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d006      	beq.n	8019a20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	f1c3 0305 	rsb	r3, r3, #5
 8019a1c:	60fb      	str	r3, [r7, #12]
 8019a1e:	e001      	b.n	8019a24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019a20:	2300      	movs	r3, #0
 8019a22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019a24:	68fb      	ldr	r3, [r7, #12]
	}
 8019a26:	4618      	mov	r0, r3
 8019a28:	3714      	adds	r7, #20
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a30:	4770      	bx	lr

08019a32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019a32:	b580      	push	{r7, lr}
 8019a34:	b086      	sub	sp, #24
 8019a36:	af00      	add	r7, sp, #0
 8019a38:	60f8      	str	r0, [r7, #12]
 8019a3a:	60b9      	str	r1, [r7, #8]
 8019a3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d10d      	bne.n	8019a6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d14d      	bne.n	8019af4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	689b      	ldr	r3, [r3, #8]
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f000 fe11 	bl	801a684 <xTaskPriorityDisinherit>
 8019a62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	2200      	movs	r2, #0
 8019a68:	609a      	str	r2, [r3, #8]
 8019a6a:	e043      	b.n	8019af4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d119      	bne.n	8019aa6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	6858      	ldr	r0, [r3, #4]
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a7a:	461a      	mov	r2, r3
 8019a7c:	68b9      	ldr	r1, [r7, #8]
 8019a7e:	f003 feff 	bl	801d880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	685a      	ldr	r2, [r3, #4]
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a8a:	441a      	add	r2, r3
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	685a      	ldr	r2, [r3, #4]
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	689b      	ldr	r3, [r3, #8]
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	d32b      	bcc.n	8019af4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681a      	ldr	r2, [r3, #0]
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	605a      	str	r2, [r3, #4]
 8019aa4:	e026      	b.n	8019af4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	68d8      	ldr	r0, [r3, #12]
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019aae:	461a      	mov	r2, r3
 8019ab0:	68b9      	ldr	r1, [r7, #8]
 8019ab2:	f003 fee5 	bl	801d880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	68da      	ldr	r2, [r3, #12]
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019abe:	425b      	negs	r3, r3
 8019ac0:	441a      	add	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	68da      	ldr	r2, [r3, #12]
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d207      	bcs.n	8019ae2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	689a      	ldr	r2, [r3, #8]
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ada:	425b      	negs	r3, r3
 8019adc:	441a      	add	r2, r3
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	2b02      	cmp	r3, #2
 8019ae6:	d105      	bne.n	8019af4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019ae8:	693b      	ldr	r3, [r7, #16]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d002      	beq.n	8019af4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019aee:	693b      	ldr	r3, [r7, #16]
 8019af0:	3b01      	subs	r3, #1
 8019af2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019af4:	693b      	ldr	r3, [r7, #16]
 8019af6:	1c5a      	adds	r2, r3, #1
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019afc:	697b      	ldr	r3, [r7, #20]
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3718      	adds	r7, #24
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}

08019b06 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019b06:	b580      	push	{r7, lr}
 8019b08:	b084      	sub	sp, #16
 8019b0a:	af00      	add	r7, sp, #0
 8019b0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019b0e:	f7ff fc01 	bl	8019314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019b18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019b1a:	e011      	b.n	8019b40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d012      	beq.n	8019b4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	3324      	adds	r3, #36	; 0x24
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f000 fba5 	bl	801a278 <xTaskRemoveFromEventList>
 8019b2e:	4603      	mov	r3, r0
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d001      	beq.n	8019b38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019b34:	f000 fc50 	bl	801a3d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019b38:	7bfb      	ldrb	r3, [r7, #15]
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	dce9      	bgt.n	8019b1c <prvUnlockQueue+0x16>
 8019b48:	e000      	b.n	8019b4c <prvUnlockQueue+0x46>
					break;
 8019b4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	22ff      	movs	r2, #255	; 0xff
 8019b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019b54:	f7ff fbf8 	bl	8019348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019b58:	f7ff fbdc 	bl	8019314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019b62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019b64:	e011      	b.n	8019b8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	691b      	ldr	r3, [r3, #16]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d012      	beq.n	8019b94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	3310      	adds	r3, #16
 8019b72:	4618      	mov	r0, r3
 8019b74:	f000 fb80 	bl	801a278 <xTaskRemoveFromEventList>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d001      	beq.n	8019b82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019b7e:	f000 fc2b 	bl	801a3d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019b82:	7bbb      	ldrb	r3, [r7, #14]
 8019b84:	3b01      	subs	r3, #1
 8019b86:	b2db      	uxtb	r3, r3
 8019b88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	dce9      	bgt.n	8019b66 <prvUnlockQueue+0x60>
 8019b92:	e000      	b.n	8019b96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019b94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	22ff      	movs	r2, #255	; 0xff
 8019b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019b9e:	f7ff fbd3 	bl	8019348 <vPortExitCritical>
}
 8019ba2:	bf00      	nop
 8019ba4:	3710      	adds	r7, #16
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}

08019baa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019baa:	b580      	push	{r7, lr}
 8019bac:	b084      	sub	sp, #16
 8019bae:	af00      	add	r7, sp, #0
 8019bb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019bb2:	f7ff fbaf 	bl	8019314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d102      	bne.n	8019bc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	60fb      	str	r3, [r7, #12]
 8019bc2:	e001      	b.n	8019bc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019bc8:	f7ff fbbe 	bl	8019348 <vPortExitCritical>

	return xReturn;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3710      	adds	r7, #16
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}

08019bd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019bd6:	b580      	push	{r7, lr}
 8019bd8:	b084      	sub	sp, #16
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019bde:	f7ff fb99 	bl	8019314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d102      	bne.n	8019bf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019bee:	2301      	movs	r3, #1
 8019bf0:	60fb      	str	r3, [r7, #12]
 8019bf2:	e001      	b.n	8019bf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019bf8:	f7ff fba6 	bl	8019348 <vPortExitCritical>

	return xReturn;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3710      	adds	r7, #16
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}

08019c06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019c06:	b580      	push	{r7, lr}
 8019c08:	b08c      	sub	sp, #48	; 0x30
 8019c0a:	af04      	add	r7, sp, #16
 8019c0c:	60f8      	str	r0, [r7, #12]
 8019c0e:	60b9      	str	r1, [r7, #8]
 8019c10:	603b      	str	r3, [r7, #0]
 8019c12:	4613      	mov	r3, r2
 8019c14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019c16:	88fb      	ldrh	r3, [r7, #6]
 8019c18:	009b      	lsls	r3, r3, #2
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f7ff f9fc 	bl	8019018 <pvPortMalloc>
 8019c20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d00e      	beq.n	8019c46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019c28:	2058      	movs	r0, #88	; 0x58
 8019c2a:	f7ff f9f5 	bl	8019018 <pvPortMalloc>
 8019c2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019c30:	69fb      	ldr	r3, [r7, #28]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d003      	beq.n	8019c3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019c36:	69fb      	ldr	r3, [r7, #28]
 8019c38:	697a      	ldr	r2, [r7, #20]
 8019c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8019c3c:	e005      	b.n	8019c4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019c3e:	6978      	ldr	r0, [r7, #20]
 8019c40:	f7ff f9fc 	bl	801903c <vPortFree>
 8019c44:	e001      	b.n	8019c4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019c46:	2300      	movs	r3, #0
 8019c48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019c4a:	69fb      	ldr	r3, [r7, #28]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d013      	beq.n	8019c78 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019c50:	88fa      	ldrh	r2, [r7, #6]
 8019c52:	2300      	movs	r3, #0
 8019c54:	9303      	str	r3, [sp, #12]
 8019c56:	69fb      	ldr	r3, [r7, #28]
 8019c58:	9302      	str	r3, [sp, #8]
 8019c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c5c:	9301      	str	r3, [sp, #4]
 8019c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c60:	9300      	str	r3, [sp, #0]
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	68b9      	ldr	r1, [r7, #8]
 8019c66:	68f8      	ldr	r0, [r7, #12]
 8019c68:	f000 f80e 	bl	8019c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019c6c:	69f8      	ldr	r0, [r7, #28]
 8019c6e:	f000 f88d 	bl	8019d8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019c72:	2301      	movs	r3, #1
 8019c74:	61bb      	str	r3, [r7, #24]
 8019c76:	e002      	b.n	8019c7e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019c78:	f04f 33ff 	mov.w	r3, #4294967295
 8019c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3720      	adds	r7, #32
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}

08019c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b086      	sub	sp, #24
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
 8019c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	009b      	lsls	r3, r3, #2
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	21a5      	movs	r1, #165	; 0xa5
 8019ca2:	f003 fe15 	bl	801d8d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019cb0:	3b01      	subs	r3, #1
 8019cb2:	009b      	lsls	r3, r3, #2
 8019cb4:	4413      	add	r3, r2
 8019cb6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	f023 0307 	bic.w	r3, r3, #7
 8019cbe:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d01f      	beq.n	8019d06 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	617b      	str	r3, [r7, #20]
 8019cca:	e012      	b.n	8019cf2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	697b      	ldr	r3, [r7, #20]
 8019cd0:	4413      	add	r3, r2
 8019cd2:	7819      	ldrb	r1, [r3, #0]
 8019cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	4413      	add	r3, r2
 8019cda:	3334      	adds	r3, #52	; 0x34
 8019cdc:	460a      	mov	r2, r1
 8019cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019ce0:	68ba      	ldr	r2, [r7, #8]
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	4413      	add	r3, r2
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d006      	beq.n	8019cfa <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019cec:	697b      	ldr	r3, [r7, #20]
 8019cee:	3301      	adds	r3, #1
 8019cf0:	617b      	str	r3, [r7, #20]
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	2b0f      	cmp	r3, #15
 8019cf6:	d9e9      	bls.n	8019ccc <prvInitialiseNewTask+0x44>
 8019cf8:	e000      	b.n	8019cfc <prvInitialiseNewTask+0x74>
			{
				break;
 8019cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cfe:	2200      	movs	r2, #0
 8019d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019d04:	e003      	b.n	8019d0e <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d08:	2200      	movs	r2, #0
 8019d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019d0e:	6a3b      	ldr	r3, [r7, #32]
 8019d10:	2b04      	cmp	r3, #4
 8019d12:	d901      	bls.n	8019d18 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019d14:	2304      	movs	r3, #4
 8019d16:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d1a:	6a3a      	ldr	r2, [r7, #32]
 8019d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d20:	6a3a      	ldr	r2, [r7, #32]
 8019d22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d26:	2200      	movs	r2, #0
 8019d28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d2c:	3304      	adds	r3, #4
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7ff f9b6 	bl	80190a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d36:	3318      	adds	r3, #24
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f7ff f9b1 	bl	80190a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d44:	6a3b      	ldr	r3, [r7, #32]
 8019d46:	f1c3 0205 	rsb	r2, r3, #5
 8019d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d56:	2200      	movs	r2, #0
 8019d58:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d62:	2200      	movs	r2, #0
 8019d64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019d68:	683a      	ldr	r2, [r7, #0]
 8019d6a:	68f9      	ldr	r1, [r7, #12]
 8019d6c:	6938      	ldr	r0, [r7, #16]
 8019d6e:	f7ff fa2b 	bl	80191c8 <pxPortInitialiseStack>
 8019d72:	4602      	mov	r2, r0
 8019d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d002      	beq.n	8019d84 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d84:	bf00      	nop
 8019d86:	3718      	adds	r7, #24
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}

08019d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019d8c:	b580      	push	{r7, lr}
 8019d8e:	b082      	sub	sp, #8
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019d94:	f7ff fabe 	bl	8019314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019d98:	4b2a      	ldr	r3, [pc, #168]	; (8019e44 <prvAddNewTaskToReadyList+0xb8>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	4a29      	ldr	r2, [pc, #164]	; (8019e44 <prvAddNewTaskToReadyList+0xb8>)
 8019da0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019da2:	4b29      	ldr	r3, [pc, #164]	; (8019e48 <prvAddNewTaskToReadyList+0xbc>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d109      	bne.n	8019dbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019daa:	4a27      	ldr	r2, [pc, #156]	; (8019e48 <prvAddNewTaskToReadyList+0xbc>)
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019db0:	4b24      	ldr	r3, [pc, #144]	; (8019e44 <prvAddNewTaskToReadyList+0xb8>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	2b01      	cmp	r3, #1
 8019db6:	d110      	bne.n	8019dda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019db8:	f000 fb32 	bl	801a420 <prvInitialiseTaskLists>
 8019dbc:	e00d      	b.n	8019dda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019dbe:	4b23      	ldr	r3, [pc, #140]	; (8019e4c <prvAddNewTaskToReadyList+0xc0>)
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d109      	bne.n	8019dda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019dc6:	4b20      	ldr	r3, [pc, #128]	; (8019e48 <prvAddNewTaskToReadyList+0xbc>)
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dd0:	429a      	cmp	r2, r3
 8019dd2:	d802      	bhi.n	8019dda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019dd4:	4a1c      	ldr	r2, [pc, #112]	; (8019e48 <prvAddNewTaskToReadyList+0xbc>)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019dda:	4b1d      	ldr	r3, [pc, #116]	; (8019e50 <prvAddNewTaskToReadyList+0xc4>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	3301      	adds	r3, #1
 8019de0:	4a1b      	ldr	r2, [pc, #108]	; (8019e50 <prvAddNewTaskToReadyList+0xc4>)
 8019de2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019de8:	2201      	movs	r2, #1
 8019dea:	409a      	lsls	r2, r3
 8019dec:	4b19      	ldr	r3, [pc, #100]	; (8019e54 <prvAddNewTaskToReadyList+0xc8>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4313      	orrs	r3, r2
 8019df2:	4a18      	ldr	r2, [pc, #96]	; (8019e54 <prvAddNewTaskToReadyList+0xc8>)
 8019df4:	6013      	str	r3, [r2, #0]
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dfa:	4613      	mov	r3, r2
 8019dfc:	009b      	lsls	r3, r3, #2
 8019dfe:	4413      	add	r3, r2
 8019e00:	009b      	lsls	r3, r3, #2
 8019e02:	4a15      	ldr	r2, [pc, #84]	; (8019e58 <prvAddNewTaskToReadyList+0xcc>)
 8019e04:	441a      	add	r2, r3
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	3304      	adds	r3, #4
 8019e0a:	4619      	mov	r1, r3
 8019e0c:	4610      	mov	r0, r2
 8019e0e:	f7ff f954 	bl	80190ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019e12:	f7ff fa99 	bl	8019348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019e16:	4b0d      	ldr	r3, [pc, #52]	; (8019e4c <prvAddNewTaskToReadyList+0xc0>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d00e      	beq.n	8019e3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019e1e:	4b0a      	ldr	r3, [pc, #40]	; (8019e48 <prvAddNewTaskToReadyList+0xbc>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d207      	bcs.n	8019e3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019e2c:	4b0b      	ldr	r3, [pc, #44]	; (8019e5c <prvAddNewTaskToReadyList+0xd0>)
 8019e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e32:	601a      	str	r2, [r3, #0]
 8019e34:	f3bf 8f4f 	dsb	sy
 8019e38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019e3c:	bf00      	nop
 8019e3e:	3708      	adds	r7, #8
 8019e40:	46bd      	mov	sp, r7
 8019e42:	bd80      	pop	{r7, pc}
 8019e44:	200042d0 	.word	0x200042d0
 8019e48:	200041f8 	.word	0x200041f8
 8019e4c:	200042dc 	.word	0x200042dc
 8019e50:	200042ec 	.word	0x200042ec
 8019e54:	200042d8 	.word	0x200042d8
 8019e58:	200041fc 	.word	0x200041fc
 8019e5c:	e000ed04 	.word	0xe000ed04

08019e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b084      	sub	sp, #16
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d008      	beq.n	8019e84 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8019e72:	f000 f851 	bl	8019f18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019e76:	2100      	movs	r1, #0
 8019e78:	6878      	ldr	r0, [r7, #4]
 8019e7a:	f000 fce9 	bl	801a850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019e7e:	f000 f859 	bl	8019f34 <xTaskResumeAll>
 8019e82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d107      	bne.n	8019e9a <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8019e8a:	4b06      	ldr	r3, [pc, #24]	; (8019ea4 <vTaskDelay+0x44>)
 8019e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e90:	601a      	str	r2, [r3, #0]
 8019e92:	f3bf 8f4f 	dsb	sy
 8019e96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e9a:	bf00      	nop
 8019e9c:	3710      	adds	r7, #16
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	bd80      	pop	{r7, pc}
 8019ea2:	bf00      	nop
 8019ea4:	e000ed04 	.word	0xe000ed04

08019ea8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b084      	sub	sp, #16
 8019eac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8019eae:	4b14      	ldr	r3, [pc, #80]	; (8019f00 <vTaskStartScheduler+0x58>)
 8019eb0:	9301      	str	r3, [sp, #4]
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	9300      	str	r3, [sp, #0]
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8019ebc:	4911      	ldr	r1, [pc, #68]	; (8019f04 <vTaskStartScheduler+0x5c>)
 8019ebe:	4812      	ldr	r0, [pc, #72]	; (8019f08 <vTaskStartScheduler+0x60>)
 8019ec0:	f7ff fea1 	bl	8019c06 <xTaskCreate>
 8019ec4:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2b01      	cmp	r3, #1
 8019eca:	d115      	bne.n	8019ef8 <vTaskStartScheduler+0x50>
	__asm volatile
 8019ecc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8019ed0:	f383 8811 	msr	BASEPRI, r3
 8019ed4:	f3bf 8f6f 	isb	sy
 8019ed8:	f3bf 8f4f 	dsb	sy
 8019edc:	603b      	str	r3, [r7, #0]
}
 8019ede:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019ee0:	4b0a      	ldr	r3, [pc, #40]	; (8019f0c <vTaskStartScheduler+0x64>)
 8019ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ee6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019ee8:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <vTaskStartScheduler+0x68>)
 8019eea:	2201      	movs	r2, #1
 8019eec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019eee:	4b09      	ldr	r3, [pc, #36]	; (8019f14 <vTaskStartScheduler+0x6c>)
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019ef4:	f7ff f9e4 	bl	80192c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019ef8:	bf00      	nop
 8019efa:	3708      	adds	r7, #8
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd80      	pop	{r7, pc}
 8019f00:	200042f4 	.word	0x200042f4
 8019f04:	08040478 	.word	0x08040478
 8019f08:	0801a3f1 	.word	0x0801a3f1
 8019f0c:	200042f0 	.word	0x200042f0
 8019f10:	200042dc 	.word	0x200042dc
 8019f14:	200042d4 	.word	0x200042d4

08019f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019f18:	b480      	push	{r7}
 8019f1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019f1c:	4b04      	ldr	r3, [pc, #16]	; (8019f30 <vTaskSuspendAll+0x18>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	3301      	adds	r3, #1
 8019f22:	4a03      	ldr	r2, [pc, #12]	; (8019f30 <vTaskSuspendAll+0x18>)
 8019f24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019f26:	bf00      	nop
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f2e:	4770      	bx	lr
 8019f30:	200042f8 	.word	0x200042f8

08019f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019f42:	f7ff f9e7 	bl	8019314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019f46:	4b39      	ldr	r3, [pc, #228]	; (801a02c <xTaskResumeAll+0xf8>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	3b01      	subs	r3, #1
 8019f4c:	4a37      	ldr	r2, [pc, #220]	; (801a02c <xTaskResumeAll+0xf8>)
 8019f4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019f50:	4b36      	ldr	r3, [pc, #216]	; (801a02c <xTaskResumeAll+0xf8>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d161      	bne.n	801a01c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019f58:	4b35      	ldr	r3, [pc, #212]	; (801a030 <xTaskResumeAll+0xfc>)
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d05d      	beq.n	801a01c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019f60:	e02e      	b.n	8019fc0 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f62:	4b34      	ldr	r3, [pc, #208]	; (801a034 <xTaskResumeAll+0x100>)
 8019f64:	68db      	ldr	r3, [r3, #12]
 8019f66:	68db      	ldr	r3, [r3, #12]
 8019f68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	3318      	adds	r3, #24
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7ff f900 	bl	8019174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	3304      	adds	r3, #4
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7ff f8fb 	bl	8019174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f82:	2201      	movs	r2, #1
 8019f84:	409a      	lsls	r2, r3
 8019f86:	4b2c      	ldr	r3, [pc, #176]	; (801a038 <xTaskResumeAll+0x104>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	4313      	orrs	r3, r2
 8019f8c:	4a2a      	ldr	r2, [pc, #168]	; (801a038 <xTaskResumeAll+0x104>)
 8019f8e:	6013      	str	r3, [r2, #0]
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f94:	4613      	mov	r3, r2
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	4413      	add	r3, r2
 8019f9a:	009b      	lsls	r3, r3, #2
 8019f9c:	4a27      	ldr	r2, [pc, #156]	; (801a03c <xTaskResumeAll+0x108>)
 8019f9e:	441a      	add	r2, r3
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	3304      	adds	r3, #4
 8019fa4:	4619      	mov	r1, r3
 8019fa6:	4610      	mov	r0, r2
 8019fa8:	f7ff f887 	bl	80190ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fb0:	4b23      	ldr	r3, [pc, #140]	; (801a040 <xTaskResumeAll+0x10c>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	d302      	bcc.n	8019fc0 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8019fba:	4b22      	ldr	r3, [pc, #136]	; (801a044 <xTaskResumeAll+0x110>)
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019fc0:	4b1c      	ldr	r3, [pc, #112]	; (801a034 <xTaskResumeAll+0x100>)
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d1cc      	bne.n	8019f62 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d001      	beq.n	8019fd2 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019fce:	f000 faa5 	bl	801a51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019fd2:	4b1d      	ldr	r3, [pc, #116]	; (801a048 <xTaskResumeAll+0x114>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d010      	beq.n	801a000 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019fde:	f000 f847 	bl	801a070 <xTaskIncrementTick>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d002      	beq.n	8019fee <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8019fe8:	4b16      	ldr	r3, [pc, #88]	; (801a044 <xTaskResumeAll+0x110>)
 8019fea:	2201      	movs	r2, #1
 8019fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	3b01      	subs	r3, #1
 8019ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d1f1      	bne.n	8019fde <xTaskResumeAll+0xaa>

						xPendedTicks = 0;
 8019ffa:	4b13      	ldr	r3, [pc, #76]	; (801a048 <xTaskResumeAll+0x114>)
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a000:	4b10      	ldr	r3, [pc, #64]	; (801a044 <xTaskResumeAll+0x110>)
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d009      	beq.n	801a01c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a008:	2301      	movs	r3, #1
 801a00a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a00c:	4b0f      	ldr	r3, [pc, #60]	; (801a04c <xTaskResumeAll+0x118>)
 801a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a012:	601a      	str	r2, [r3, #0]
 801a014:	f3bf 8f4f 	dsb	sy
 801a018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a01c:	f7ff f994 	bl	8019348 <vPortExitCritical>

	return xAlreadyYielded;
 801a020:	68bb      	ldr	r3, [r7, #8]
}
 801a022:	4618      	mov	r0, r3
 801a024:	3710      	adds	r7, #16
 801a026:	46bd      	mov	sp, r7
 801a028:	bd80      	pop	{r7, pc}
 801a02a:	bf00      	nop
 801a02c:	200042f8 	.word	0x200042f8
 801a030:	200042d0 	.word	0x200042d0
 801a034:	20004290 	.word	0x20004290
 801a038:	200042d8 	.word	0x200042d8
 801a03c:	200041fc 	.word	0x200041fc
 801a040:	200041f8 	.word	0x200041f8
 801a044:	200042e4 	.word	0x200042e4
 801a048:	200042e0 	.word	0x200042e0
 801a04c:	e000ed04 	.word	0xe000ed04

0801a050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a050:	b480      	push	{r7}
 801a052:	b083      	sub	sp, #12
 801a054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a056:	4b05      	ldr	r3, [pc, #20]	; (801a06c <xTaskGetTickCount+0x1c>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a05c:	687b      	ldr	r3, [r7, #4]
}
 801a05e:	4618      	mov	r0, r3
 801a060:	370c      	adds	r7, #12
 801a062:	46bd      	mov	sp, r7
 801a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a068:	4770      	bx	lr
 801a06a:	bf00      	nop
 801a06c:	200042d4 	.word	0x200042d4

0801a070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b086      	sub	sp, #24
 801a074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a076:	2300      	movs	r3, #0
 801a078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a07a:	4b46      	ldr	r3, [pc, #280]	; (801a194 <xTaskIncrementTick+0x124>)
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d17d      	bne.n	801a17e <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a082:	4b45      	ldr	r3, [pc, #276]	; (801a198 <xTaskIncrementTick+0x128>)
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	3301      	adds	r3, #1
 801a088:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a08a:	4a43      	ldr	r2, [pc, #268]	; (801a198 <xTaskIncrementTick+0x128>)
 801a08c:	693b      	ldr	r3, [r7, #16]
 801a08e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d110      	bne.n	801a0b8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 801a096:	4b41      	ldr	r3, [pc, #260]	; (801a19c <xTaskIncrementTick+0x12c>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	60fb      	str	r3, [r7, #12]
 801a09c:	4b40      	ldr	r3, [pc, #256]	; (801a1a0 <xTaskIncrementTick+0x130>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a3e      	ldr	r2, [pc, #248]	; (801a19c <xTaskIncrementTick+0x12c>)
 801a0a2:	6013      	str	r3, [r2, #0]
 801a0a4:	4a3e      	ldr	r2, [pc, #248]	; (801a1a0 <xTaskIncrementTick+0x130>)
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	6013      	str	r3, [r2, #0]
 801a0aa:	4b3e      	ldr	r3, [pc, #248]	; (801a1a4 <xTaskIncrementTick+0x134>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	3301      	adds	r3, #1
 801a0b0:	4a3c      	ldr	r2, [pc, #240]	; (801a1a4 <xTaskIncrementTick+0x134>)
 801a0b2:	6013      	str	r3, [r2, #0]
 801a0b4:	f000 fa32 	bl	801a51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a0b8:	4b3b      	ldr	r3, [pc, #236]	; (801a1a8 <xTaskIncrementTick+0x138>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	693a      	ldr	r2, [r7, #16]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d348      	bcc.n	801a154 <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a0c2:	4b36      	ldr	r3, [pc, #216]	; (801a19c <xTaskIncrementTick+0x12c>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d104      	bne.n	801a0d6 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0cc:	4b36      	ldr	r3, [pc, #216]	; (801a1a8 <xTaskIncrementTick+0x138>)
 801a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 801a0d2:	601a      	str	r2, [r3, #0]
					break;
 801a0d4:	e03e      	b.n	801a154 <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a0d6:	4b31      	ldr	r3, [pc, #196]	; (801a19c <xTaskIncrementTick+0x12c>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	68db      	ldr	r3, [r3, #12]
 801a0dc:	68db      	ldr	r3, [r3, #12]
 801a0de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a0e6:	693a      	ldr	r2, [r7, #16]
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d203      	bcs.n	801a0f6 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a0ee:	4a2e      	ldr	r2, [pc, #184]	; (801a1a8 <xTaskIncrementTick+0x138>)
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a0f4:	e02e      	b.n	801a154 <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	3304      	adds	r3, #4
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7ff f83a 	bl	8019174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a104:	2b00      	cmp	r3, #0
 801a106:	d004      	beq.n	801a112 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a108:	68bb      	ldr	r3, [r7, #8]
 801a10a:	3318      	adds	r3, #24
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7ff f831 	bl	8019174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a116:	2201      	movs	r2, #1
 801a118:	409a      	lsls	r2, r3
 801a11a:	4b24      	ldr	r3, [pc, #144]	; (801a1ac <xTaskIncrementTick+0x13c>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	4313      	orrs	r3, r2
 801a120:	4a22      	ldr	r2, [pc, #136]	; (801a1ac <xTaskIncrementTick+0x13c>)
 801a122:	6013      	str	r3, [r2, #0]
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a128:	4613      	mov	r3, r2
 801a12a:	009b      	lsls	r3, r3, #2
 801a12c:	4413      	add	r3, r2
 801a12e:	009b      	lsls	r3, r3, #2
 801a130:	4a1f      	ldr	r2, [pc, #124]	; (801a1b0 <xTaskIncrementTick+0x140>)
 801a132:	441a      	add	r2, r3
 801a134:	68bb      	ldr	r3, [r7, #8]
 801a136:	3304      	adds	r3, #4
 801a138:	4619      	mov	r1, r3
 801a13a:	4610      	mov	r0, r2
 801a13c:	f7fe ffbd 	bl	80190ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a144:	4b1b      	ldr	r3, [pc, #108]	; (801a1b4 <xTaskIncrementTick+0x144>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a14a:	429a      	cmp	r2, r3
 801a14c:	d3b9      	bcc.n	801a0c2 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 801a14e:	2301      	movs	r3, #1
 801a150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a152:	e7b6      	b.n	801a0c2 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a154:	4b17      	ldr	r3, [pc, #92]	; (801a1b4 <xTaskIncrementTick+0x144>)
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a15a:	4915      	ldr	r1, [pc, #84]	; (801a1b0 <xTaskIncrementTick+0x140>)
 801a15c:	4613      	mov	r3, r2
 801a15e:	009b      	lsls	r3, r3, #2
 801a160:	4413      	add	r3, r2
 801a162:	009b      	lsls	r3, r3, #2
 801a164:	440b      	add	r3, r1
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	2b01      	cmp	r3, #1
 801a16a:	d901      	bls.n	801a170 <xTaskIncrementTick+0x100>
			{
				xSwitchRequired = pdTRUE;
 801a16c:	2301      	movs	r3, #1
 801a16e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a170:	4b11      	ldr	r3, [pc, #68]	; (801a1b8 <xTaskIncrementTick+0x148>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d007      	beq.n	801a188 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 801a178:	2301      	movs	r3, #1
 801a17a:	617b      	str	r3, [r7, #20]
 801a17c:	e004      	b.n	801a188 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a17e:	4b0f      	ldr	r3, [pc, #60]	; (801a1bc <xTaskIncrementTick+0x14c>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	3301      	adds	r3, #1
 801a184:	4a0d      	ldr	r2, [pc, #52]	; (801a1bc <xTaskIncrementTick+0x14c>)
 801a186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a188:	697b      	ldr	r3, [r7, #20]
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3718      	adds	r7, #24
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}
 801a192:	bf00      	nop
 801a194:	200042f8 	.word	0x200042f8
 801a198:	200042d4 	.word	0x200042d4
 801a19c:	20004288 	.word	0x20004288
 801a1a0:	2000428c 	.word	0x2000428c
 801a1a4:	200042e8 	.word	0x200042e8
 801a1a8:	200042f0 	.word	0x200042f0
 801a1ac:	200042d8 	.word	0x200042d8
 801a1b0:	200041fc 	.word	0x200041fc
 801a1b4:	200041f8 	.word	0x200041f8
 801a1b8:	200042e4 	.word	0x200042e4
 801a1bc:	200042e0 	.word	0x200042e0

0801a1c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a1c0:	b480      	push	{r7}
 801a1c2:	b085      	sub	sp, #20
 801a1c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a1c6:	4b1c      	ldr	r3, [pc, #112]	; (801a238 <vTaskSwitchContext+0x78>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d003      	beq.n	801a1d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a1ce:	4b1b      	ldr	r3, [pc, #108]	; (801a23c <vTaskSwitchContext+0x7c>)
 801a1d0:	2201      	movs	r2, #1
 801a1d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a1d4:	e02a      	b.n	801a22c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 801a1d6:	4b19      	ldr	r3, [pc, #100]	; (801a23c <vTaskSwitchContext+0x7c>)
 801a1d8:	2200      	movs	r2, #0
 801a1da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1dc:	4b18      	ldr	r3, [pc, #96]	; (801a240 <vTaskSwitchContext+0x80>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	fab3 f383 	clz	r3, r3
 801a1e8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 801a1ea:	78fb      	ldrb	r3, [r7, #3]
 801a1ec:	f1c3 031f 	rsb	r3, r3, #31
 801a1f0:	60fb      	str	r3, [r7, #12]
 801a1f2:	68fa      	ldr	r2, [r7, #12]
 801a1f4:	4613      	mov	r3, r2
 801a1f6:	009b      	lsls	r3, r3, #2
 801a1f8:	4413      	add	r3, r2
 801a1fa:	009b      	lsls	r3, r3, #2
 801a1fc:	4a11      	ldr	r2, [pc, #68]	; (801a244 <vTaskSwitchContext+0x84>)
 801a1fe:	4413      	add	r3, r2
 801a200:	60bb      	str	r3, [r7, #8]
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	685b      	ldr	r3, [r3, #4]
 801a206:	685a      	ldr	r2, [r3, #4]
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	605a      	str	r2, [r3, #4]
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	685a      	ldr	r2, [r3, #4]
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	3308      	adds	r3, #8
 801a214:	429a      	cmp	r2, r3
 801a216:	d104      	bne.n	801a222 <vTaskSwitchContext+0x62>
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	685a      	ldr	r2, [r3, #4]
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	605a      	str	r2, [r3, #4]
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	68db      	ldr	r3, [r3, #12]
 801a228:	4a07      	ldr	r2, [pc, #28]	; (801a248 <vTaskSwitchContext+0x88>)
 801a22a:	6013      	str	r3, [r2, #0]
}
 801a22c:	bf00      	nop
 801a22e:	3714      	adds	r7, #20
 801a230:	46bd      	mov	sp, r7
 801a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a236:	4770      	bx	lr
 801a238:	200042f8 	.word	0x200042f8
 801a23c:	200042e4 	.word	0x200042e4
 801a240:	200042d8 	.word	0x200042d8
 801a244:	200041fc 	.word	0x200041fc
 801a248:	200041f8 	.word	0x200041f8

0801a24c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b082      	sub	sp, #8
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a256:	4b07      	ldr	r3, [pc, #28]	; (801a274 <vTaskPlaceOnEventList+0x28>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	3318      	adds	r3, #24
 801a25c:	4619      	mov	r1, r3
 801a25e:	6878      	ldr	r0, [r7, #4]
 801a260:	f7fe ff4f 	bl	8019102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a264:	2101      	movs	r1, #1
 801a266:	6838      	ldr	r0, [r7, #0]
 801a268:	f000 faf2 	bl	801a850 <prvAddCurrentTaskToDelayedList>
}
 801a26c:	bf00      	nop
 801a26e:	3708      	adds	r7, #8
 801a270:	46bd      	mov	sp, r7
 801a272:	bd80      	pop	{r7, pc}
 801a274:	200041f8 	.word	0x200041f8

0801a278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b084      	sub	sp, #16
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	68db      	ldr	r3, [r3, #12]
 801a284:	68db      	ldr	r3, [r3, #12]
 801a286:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	3318      	adds	r3, #24
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7fe ff71 	bl	8019174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a292:	4b1d      	ldr	r3, [pc, #116]	; (801a308 <xTaskRemoveFromEventList+0x90>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d11c      	bne.n	801a2d4 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	3304      	adds	r3, #4
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f7fe ff68 	bl	8019174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a2a4:	68bb      	ldr	r3, [r7, #8]
 801a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2a8:	2201      	movs	r2, #1
 801a2aa:	409a      	lsls	r2, r3
 801a2ac:	4b17      	ldr	r3, [pc, #92]	; (801a30c <xTaskRemoveFromEventList+0x94>)
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	4313      	orrs	r3, r2
 801a2b2:	4a16      	ldr	r2, [pc, #88]	; (801a30c <xTaskRemoveFromEventList+0x94>)
 801a2b4:	6013      	str	r3, [r2, #0]
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2ba:	4613      	mov	r3, r2
 801a2bc:	009b      	lsls	r3, r3, #2
 801a2be:	4413      	add	r3, r2
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	4a13      	ldr	r2, [pc, #76]	; (801a310 <xTaskRemoveFromEventList+0x98>)
 801a2c4:	441a      	add	r2, r3
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	3304      	adds	r3, #4
 801a2ca:	4619      	mov	r1, r3
 801a2cc:	4610      	mov	r0, r2
 801a2ce:	f7fe fef4 	bl	80190ba <vListInsertEnd>
 801a2d2:	e005      	b.n	801a2e0 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	3318      	adds	r3, #24
 801a2d8:	4619      	mov	r1, r3
 801a2da:	480e      	ldr	r0, [pc, #56]	; (801a314 <xTaskRemoveFromEventList+0x9c>)
 801a2dc:	f7fe feed 	bl	80190ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2e4:	4b0c      	ldr	r3, [pc, #48]	; (801a318 <xTaskRemoveFromEventList+0xa0>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2ea:	429a      	cmp	r2, r3
 801a2ec:	d905      	bls.n	801a2fa <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a2f2:	4b0a      	ldr	r3, [pc, #40]	; (801a31c <xTaskRemoveFromEventList+0xa4>)
 801a2f4:	2201      	movs	r2, #1
 801a2f6:	601a      	str	r2, [r3, #0]
 801a2f8:	e001      	b.n	801a2fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
}
 801a300:	4618      	mov	r0, r3
 801a302:	3710      	adds	r7, #16
 801a304:	46bd      	mov	sp, r7
 801a306:	bd80      	pop	{r7, pc}
 801a308:	200042f8 	.word	0x200042f8
 801a30c:	200042d8 	.word	0x200042d8
 801a310:	200041fc 	.word	0x200041fc
 801a314:	20004290 	.word	0x20004290
 801a318:	200041f8 	.word	0x200041f8
 801a31c:	200042e4 	.word	0x200042e4

0801a320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a320:	b480      	push	{r7}
 801a322:	b083      	sub	sp, #12
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a328:	4b06      	ldr	r3, [pc, #24]	; (801a344 <vTaskInternalSetTimeOutState+0x24>)
 801a32a:	681a      	ldr	r2, [r3, #0]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a330:	4b05      	ldr	r3, [pc, #20]	; (801a348 <vTaskInternalSetTimeOutState+0x28>)
 801a332:	681a      	ldr	r2, [r3, #0]
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	605a      	str	r2, [r3, #4]
}
 801a338:	bf00      	nop
 801a33a:	370c      	adds	r7, #12
 801a33c:	46bd      	mov	sp, r7
 801a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a342:	4770      	bx	lr
 801a344:	200042e8 	.word	0x200042e8
 801a348:	200042d4 	.word	0x200042d4

0801a34c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b086      	sub	sp, #24
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
 801a354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 801a356:	f7fe ffdd 	bl	8019314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a35a:	4b1d      	ldr	r3, [pc, #116]	; (801a3d0 <xTaskCheckForTimeOut+0x84>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	685b      	ldr	r3, [r3, #4]
 801a364:	693a      	ldr	r2, [r7, #16]
 801a366:	1ad3      	subs	r3, r2, r3
 801a368:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a372:	d102      	bne.n	801a37a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a374:	2300      	movs	r3, #0
 801a376:	617b      	str	r3, [r7, #20]
 801a378:	e023      	b.n	801a3c2 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681a      	ldr	r2, [r3, #0]
 801a37e:	4b15      	ldr	r3, [pc, #84]	; (801a3d4 <xTaskCheckForTimeOut+0x88>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	429a      	cmp	r2, r3
 801a384:	d007      	beq.n	801a396 <xTaskCheckForTimeOut+0x4a>
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	693a      	ldr	r2, [r7, #16]
 801a38c:	429a      	cmp	r2, r3
 801a38e:	d302      	bcc.n	801a396 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a390:	2301      	movs	r3, #1
 801a392:	617b      	str	r3, [r7, #20]
 801a394:	e015      	b.n	801a3c2 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	68fa      	ldr	r2, [r7, #12]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	d20b      	bcs.n	801a3b8 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	1ad2      	subs	r2, r2, r3
 801a3a8:	683b      	ldr	r3, [r7, #0]
 801a3aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a3ac:	6878      	ldr	r0, [r7, #4]
 801a3ae:	f7ff ffb7 	bl	801a320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	617b      	str	r3, [r7, #20]
 801a3b6:	e004      	b.n	801a3c2 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 801a3b8:	683b      	ldr	r3, [r7, #0]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a3be:	2301      	movs	r3, #1
 801a3c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801a3c2:	f7fe ffc1 	bl	8019348 <vPortExitCritical>

	return xReturn;
 801a3c6:	697b      	ldr	r3, [r7, #20]
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	3718      	adds	r7, #24
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	200042d4 	.word	0x200042d4
 801a3d4:	200042e8 	.word	0x200042e8

0801a3d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a3d8:	b480      	push	{r7}
 801a3da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a3dc:	4b03      	ldr	r3, [pc, #12]	; (801a3ec <vTaskMissedYield+0x14>)
 801a3de:	2201      	movs	r2, #1
 801a3e0:	601a      	str	r2, [r3, #0]
}
 801a3e2:	bf00      	nop
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ea:	4770      	bx	lr
 801a3ec:	200042e4 	.word	0x200042e4

0801a3f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b082      	sub	sp, #8
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a3f8:	f000 f852 	bl	801a4a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a3fc:	4b06      	ldr	r3, [pc, #24]	; (801a418 <prvIdleTask+0x28>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2b01      	cmp	r3, #1
 801a402:	d9f9      	bls.n	801a3f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a404:	4b05      	ldr	r3, [pc, #20]	; (801a41c <prvIdleTask+0x2c>)
 801a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a40a:	601a      	str	r2, [r3, #0]
 801a40c:	f3bf 8f4f 	dsb	sy
 801a410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a414:	e7f0      	b.n	801a3f8 <prvIdleTask+0x8>
 801a416:	bf00      	nop
 801a418:	200041fc 	.word	0x200041fc
 801a41c:	e000ed04 	.word	0xe000ed04

0801a420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a426:	2300      	movs	r3, #0
 801a428:	607b      	str	r3, [r7, #4]
 801a42a:	e00c      	b.n	801a446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a42c:	687a      	ldr	r2, [r7, #4]
 801a42e:	4613      	mov	r3, r2
 801a430:	009b      	lsls	r3, r3, #2
 801a432:	4413      	add	r3, r2
 801a434:	009b      	lsls	r3, r3, #2
 801a436:	4a12      	ldr	r2, [pc, #72]	; (801a480 <prvInitialiseTaskLists+0x60>)
 801a438:	4413      	add	r3, r2
 801a43a:	4618      	mov	r0, r3
 801a43c:	f7fe fe10 	bl	8019060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	3301      	adds	r3, #1
 801a444:	607b      	str	r3, [r7, #4]
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2b04      	cmp	r3, #4
 801a44a:	d9ef      	bls.n	801a42c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a44c:	480d      	ldr	r0, [pc, #52]	; (801a484 <prvInitialiseTaskLists+0x64>)
 801a44e:	f7fe fe07 	bl	8019060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a452:	480d      	ldr	r0, [pc, #52]	; (801a488 <prvInitialiseTaskLists+0x68>)
 801a454:	f7fe fe04 	bl	8019060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a458:	480c      	ldr	r0, [pc, #48]	; (801a48c <prvInitialiseTaskLists+0x6c>)
 801a45a:	f7fe fe01 	bl	8019060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a45e:	480c      	ldr	r0, [pc, #48]	; (801a490 <prvInitialiseTaskLists+0x70>)
 801a460:	f7fe fdfe 	bl	8019060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a464:	480b      	ldr	r0, [pc, #44]	; (801a494 <prvInitialiseTaskLists+0x74>)
 801a466:	f7fe fdfb 	bl	8019060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a46a:	4b0b      	ldr	r3, [pc, #44]	; (801a498 <prvInitialiseTaskLists+0x78>)
 801a46c:	4a05      	ldr	r2, [pc, #20]	; (801a484 <prvInitialiseTaskLists+0x64>)
 801a46e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a470:	4b0a      	ldr	r3, [pc, #40]	; (801a49c <prvInitialiseTaskLists+0x7c>)
 801a472:	4a05      	ldr	r2, [pc, #20]	; (801a488 <prvInitialiseTaskLists+0x68>)
 801a474:	601a      	str	r2, [r3, #0]
}
 801a476:	bf00      	nop
 801a478:	3708      	adds	r7, #8
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
 801a47e:	bf00      	nop
 801a480:	200041fc 	.word	0x200041fc
 801a484:	20004260 	.word	0x20004260
 801a488:	20004274 	.word	0x20004274
 801a48c:	20004290 	.word	0x20004290
 801a490:	200042a4 	.word	0x200042a4
 801a494:	200042bc 	.word	0x200042bc
 801a498:	20004288 	.word	0x20004288
 801a49c:	2000428c 	.word	0x2000428c

0801a4a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b082      	sub	sp, #8
 801a4a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a4a6:	e019      	b.n	801a4dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a4a8:	f7fe ff34 	bl	8019314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4ac:	4b10      	ldr	r3, [pc, #64]	; (801a4f0 <prvCheckTasksWaitingTermination+0x50>)
 801a4ae:	68db      	ldr	r3, [r3, #12]
 801a4b0:	68db      	ldr	r3, [r3, #12]
 801a4b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	3304      	adds	r3, #4
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f7fe fe5b 	bl	8019174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a4be:	4b0d      	ldr	r3, [pc, #52]	; (801a4f4 <prvCheckTasksWaitingTermination+0x54>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	3b01      	subs	r3, #1
 801a4c4:	4a0b      	ldr	r2, [pc, #44]	; (801a4f4 <prvCheckTasksWaitingTermination+0x54>)
 801a4c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a4c8:	4b0b      	ldr	r3, [pc, #44]	; (801a4f8 <prvCheckTasksWaitingTermination+0x58>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	3b01      	subs	r3, #1
 801a4ce:	4a0a      	ldr	r2, [pc, #40]	; (801a4f8 <prvCheckTasksWaitingTermination+0x58>)
 801a4d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a4d2:	f7fe ff39 	bl	8019348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a4d6:	6878      	ldr	r0, [r7, #4]
 801a4d8:	f000 f810 	bl	801a4fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a4dc:	4b06      	ldr	r3, [pc, #24]	; (801a4f8 <prvCheckTasksWaitingTermination+0x58>)
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d1e1      	bne.n	801a4a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a4e4:	bf00      	nop
 801a4e6:	bf00      	nop
 801a4e8:	3708      	adds	r7, #8
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bd80      	pop	{r7, pc}
 801a4ee:	bf00      	nop
 801a4f0:	200042a4 	.word	0x200042a4
 801a4f4:	200042d0 	.word	0x200042d0
 801a4f8:	200042b8 	.word	0x200042b8

0801a4fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a508:	4618      	mov	r0, r3
 801a50a:	f7fe fd97 	bl	801903c <vPortFree>
			vPortFree( pxTCB );
 801a50e:	6878      	ldr	r0, [r7, #4]
 801a510:	f7fe fd94 	bl	801903c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a514:	bf00      	nop
 801a516:	3708      	adds	r7, #8
 801a518:	46bd      	mov	sp, r7
 801a51a:	bd80      	pop	{r7, pc}

0801a51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a51c:	b480      	push	{r7}
 801a51e:	b083      	sub	sp, #12
 801a520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a522:	4b0c      	ldr	r3, [pc, #48]	; (801a554 <prvResetNextTaskUnblockTime+0x38>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d104      	bne.n	801a536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a52c:	4b0a      	ldr	r3, [pc, #40]	; (801a558 <prvResetNextTaskUnblockTime+0x3c>)
 801a52e:	f04f 32ff 	mov.w	r2, #4294967295
 801a532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a534:	e008      	b.n	801a548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a536:	4b07      	ldr	r3, [pc, #28]	; (801a554 <prvResetNextTaskUnblockTime+0x38>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	68db      	ldr	r3, [r3, #12]
 801a53c:	68db      	ldr	r3, [r3, #12]
 801a53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	685b      	ldr	r3, [r3, #4]
 801a544:	4a04      	ldr	r2, [pc, #16]	; (801a558 <prvResetNextTaskUnblockTime+0x3c>)
 801a546:	6013      	str	r3, [r2, #0]
}
 801a548:	bf00      	nop
 801a54a:	370c      	adds	r7, #12
 801a54c:	46bd      	mov	sp, r7
 801a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a552:	4770      	bx	lr
 801a554:	20004288 	.word	0x20004288
 801a558:	200042f0 	.word	0x200042f0

0801a55c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a55c:	b480      	push	{r7}
 801a55e:	b083      	sub	sp, #12
 801a560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a562:	4b0b      	ldr	r3, [pc, #44]	; (801a590 <xTaskGetSchedulerState+0x34>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d102      	bne.n	801a570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a56a:	2301      	movs	r3, #1
 801a56c:	607b      	str	r3, [r7, #4]
 801a56e:	e008      	b.n	801a582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a570:	4b08      	ldr	r3, [pc, #32]	; (801a594 <xTaskGetSchedulerState+0x38>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d102      	bne.n	801a57e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a578:	2302      	movs	r3, #2
 801a57a:	607b      	str	r3, [r7, #4]
 801a57c:	e001      	b.n	801a582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a57e:	2300      	movs	r3, #0
 801a580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a582:	687b      	ldr	r3, [r7, #4]
	}
 801a584:	4618      	mov	r0, r3
 801a586:	370c      	adds	r7, #12
 801a588:	46bd      	mov	sp, r7
 801a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58e:	4770      	bx	lr
 801a590:	200042dc 	.word	0x200042dc
 801a594:	200042f8 	.word	0x200042f8

0801a598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d05e      	beq.n	801a66c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a5ae:	68bb      	ldr	r3, [r7, #8]
 801a5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5b2:	4b31      	ldr	r3, [pc, #196]	; (801a678 <xTaskPriorityInherit+0xe0>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d24e      	bcs.n	801a65a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	699b      	ldr	r3, [r3, #24]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	db06      	blt.n	801a5d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a5c4:	4b2c      	ldr	r3, [pc, #176]	; (801a678 <xTaskPriorityInherit+0xe0>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5ca:	f1c3 0205 	rsb	r2, r3, #5
 801a5ce:	68bb      	ldr	r3, [r7, #8]
 801a5d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	6959      	ldr	r1, [r3, #20]
 801a5d6:	68bb      	ldr	r3, [r7, #8]
 801a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5da:	4613      	mov	r3, r2
 801a5dc:	009b      	lsls	r3, r3, #2
 801a5de:	4413      	add	r3, r2
 801a5e0:	009b      	lsls	r3, r3, #2
 801a5e2:	4a26      	ldr	r2, [pc, #152]	; (801a67c <xTaskPriorityInherit+0xe4>)
 801a5e4:	4413      	add	r3, r2
 801a5e6:	4299      	cmp	r1, r3
 801a5e8:	d12f      	bne.n	801a64a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	3304      	adds	r3, #4
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f7fe fdc0 	bl	8019174 <uxListRemove>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d10a      	bne.n	801a610 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801a5fa:	68bb      	ldr	r3, [r7, #8]
 801a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5fe:	2201      	movs	r2, #1
 801a600:	fa02 f303 	lsl.w	r3, r2, r3
 801a604:	43da      	mvns	r2, r3
 801a606:	4b1e      	ldr	r3, [pc, #120]	; (801a680 <xTaskPriorityInherit+0xe8>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	4013      	ands	r3, r2
 801a60c:	4a1c      	ldr	r2, [pc, #112]	; (801a680 <xTaskPriorityInherit+0xe8>)
 801a60e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a610:	4b19      	ldr	r3, [pc, #100]	; (801a678 <xTaskPriorityInherit+0xe0>)
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a61e:	2201      	movs	r2, #1
 801a620:	409a      	lsls	r2, r3
 801a622:	4b17      	ldr	r3, [pc, #92]	; (801a680 <xTaskPriorityInherit+0xe8>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	4313      	orrs	r3, r2
 801a628:	4a15      	ldr	r2, [pc, #84]	; (801a680 <xTaskPriorityInherit+0xe8>)
 801a62a:	6013      	str	r3, [r2, #0]
 801a62c:	68bb      	ldr	r3, [r7, #8]
 801a62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a630:	4613      	mov	r3, r2
 801a632:	009b      	lsls	r3, r3, #2
 801a634:	4413      	add	r3, r2
 801a636:	009b      	lsls	r3, r3, #2
 801a638:	4a10      	ldr	r2, [pc, #64]	; (801a67c <xTaskPriorityInherit+0xe4>)
 801a63a:	441a      	add	r2, r3
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	3304      	adds	r3, #4
 801a640:	4619      	mov	r1, r3
 801a642:	4610      	mov	r0, r2
 801a644:	f7fe fd39 	bl	80190ba <vListInsertEnd>
 801a648:	e004      	b.n	801a654 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a64a:	4b0b      	ldr	r3, [pc, #44]	; (801a678 <xTaskPriorityInherit+0xe0>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a650:	68bb      	ldr	r3, [r7, #8]
 801a652:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a654:	2301      	movs	r3, #1
 801a656:	60fb      	str	r3, [r7, #12]
 801a658:	e008      	b.n	801a66c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a65a:	68bb      	ldr	r3, [r7, #8]
 801a65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a65e:	4b06      	ldr	r3, [pc, #24]	; (801a678 <xTaskPriorityInherit+0xe0>)
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a664:	429a      	cmp	r2, r3
 801a666:	d201      	bcs.n	801a66c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a668:	2301      	movs	r3, #1
 801a66a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a66c:	68fb      	ldr	r3, [r7, #12]
	}
 801a66e:	4618      	mov	r0, r3
 801a670:	3710      	adds	r7, #16
 801a672:	46bd      	mov	sp, r7
 801a674:	bd80      	pop	{r7, pc}
 801a676:	bf00      	nop
 801a678:	200041f8 	.word	0x200041f8
 801a67c:	200041fc 	.word	0x200041fc
 801a680:	200042d8 	.word	0x200042d8

0801a684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a684:	b580      	push	{r7, lr}
 801a686:	b084      	sub	sp, #16
 801a688:	af00      	add	r7, sp, #0
 801a68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a690:	2300      	movs	r3, #0
 801a692:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d04f      	beq.n	801a73a <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 801a69a:	68bb      	ldr	r3, [r7, #8]
 801a69c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a69e:	1e5a      	subs	r2, r3, #1
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	d044      	beq.n	801a73a <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d140      	bne.n	801a73a <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	3304      	adds	r3, #4
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f7fe fd59 	bl	8019174 <uxListRemove>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d115      	bne.n	801a6f4 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6cc:	491d      	ldr	r1, [pc, #116]	; (801a744 <xTaskPriorityDisinherit+0xc0>)
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	009b      	lsls	r3, r3, #2
 801a6d2:	4413      	add	r3, r2
 801a6d4:	009b      	lsls	r3, r3, #2
 801a6d6:	440b      	add	r3, r1
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d10a      	bne.n	801a6f4 <xTaskPriorityDisinherit+0x70>
 801a6de:	68bb      	ldr	r3, [r7, #8]
 801a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e2:	2201      	movs	r2, #1
 801a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 801a6e8:	43da      	mvns	r2, r3
 801a6ea:	4b17      	ldr	r3, [pc, #92]	; (801a748 <xTaskPriorityDisinherit+0xc4>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	4013      	ands	r3, r2
 801a6f0:	4a15      	ldr	r2, [pc, #84]	; (801a748 <xTaskPriorityDisinherit+0xc4>)
 801a6f2:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a6f4:	68bb      	ldr	r3, [r7, #8]
 801a6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a6fc:	68bb      	ldr	r3, [r7, #8]
 801a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a700:	f1c3 0205 	rsb	r2, r3, #5
 801a704:	68bb      	ldr	r3, [r7, #8]
 801a706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70c:	2201      	movs	r2, #1
 801a70e:	409a      	lsls	r2, r3
 801a710:	4b0d      	ldr	r3, [pc, #52]	; (801a748 <xTaskPriorityDisinherit+0xc4>)
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	4313      	orrs	r3, r2
 801a716:	4a0c      	ldr	r2, [pc, #48]	; (801a748 <xTaskPriorityDisinherit+0xc4>)
 801a718:	6013      	str	r3, [r2, #0]
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a71e:	4613      	mov	r3, r2
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	4413      	add	r3, r2
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	4a07      	ldr	r2, [pc, #28]	; (801a744 <xTaskPriorityDisinherit+0xc0>)
 801a728:	441a      	add	r2, r3
 801a72a:	68bb      	ldr	r3, [r7, #8]
 801a72c:	3304      	adds	r3, #4
 801a72e:	4619      	mov	r1, r3
 801a730:	4610      	mov	r0, r2
 801a732:	f7fe fcc2 	bl	80190ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a736:	2301      	movs	r3, #1
 801a738:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a73a:	68fb      	ldr	r3, [r7, #12]
	}
 801a73c:	4618      	mov	r0, r3
 801a73e:	3710      	adds	r7, #16
 801a740:	46bd      	mov	sp, r7
 801a742:	bd80      	pop	{r7, pc}
 801a744:	200041fc 	.word	0x200041fc
 801a748:	200042d8 	.word	0x200042d8

0801a74c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b086      	sub	sp, #24
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a75a:	2301      	movs	r3, #1
 801a75c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d058      	beq.n	801a816 <vTaskPriorityDisinheritAfterTimeout+0xca>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a768:	683a      	ldr	r2, [r7, #0]
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d902      	bls.n	801a774 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	617b      	str	r3, [r7, #20]
 801a772:	e002      	b.n	801a77a <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a774:	693b      	ldr	r3, [r7, #16]
 801a776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a778:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a77e:	697a      	ldr	r2, [r7, #20]
 801a780:	429a      	cmp	r2, r3
 801a782:	d048      	beq.n	801a816 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a784:	693b      	ldr	r3, [r7, #16]
 801a786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a788:	68fa      	ldr	r2, [r7, #12]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d143      	bne.n	801a816 <vTaskPriorityDisinheritAfterTimeout+0xca>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a78e:	693b      	ldr	r3, [r7, #16]
 801a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a792:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	697a      	ldr	r2, [r7, #20]
 801a798:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a79a:	693b      	ldr	r3, [r7, #16]
 801a79c:	699b      	ldr	r3, [r3, #24]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	db04      	blt.n	801a7ac <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	f1c3 0205 	rsb	r2, r3, #5
 801a7a8:	693b      	ldr	r3, [r7, #16]
 801a7aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a7ac:	693b      	ldr	r3, [r7, #16]
 801a7ae:	6959      	ldr	r1, [r3, #20]
 801a7b0:	68ba      	ldr	r2, [r7, #8]
 801a7b2:	4613      	mov	r3, r2
 801a7b4:	009b      	lsls	r3, r3, #2
 801a7b6:	4413      	add	r3, r2
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	4a19      	ldr	r2, [pc, #100]	; (801a820 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801a7bc:	4413      	add	r3, r2
 801a7be:	4299      	cmp	r1, r3
 801a7c0:	d129      	bne.n	801a816 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a7c2:	693b      	ldr	r3, [r7, #16]
 801a7c4:	3304      	adds	r3, #4
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7fe fcd4 	bl	8019174 <uxListRemove>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d10a      	bne.n	801a7e8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801a7d2:	693b      	ldr	r3, [r7, #16]
 801a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7d6:	2201      	movs	r2, #1
 801a7d8:	fa02 f303 	lsl.w	r3, r2, r3
 801a7dc:	43da      	mvns	r2, r3
 801a7de:	4b11      	ldr	r3, [pc, #68]	; (801a824 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	4013      	ands	r3, r2
 801a7e4:	4a0f      	ldr	r2, [pc, #60]	; (801a824 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801a7e6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a7e8:	693b      	ldr	r3, [r7, #16]
 801a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7ec:	2201      	movs	r2, #1
 801a7ee:	409a      	lsls	r2, r3
 801a7f0:	4b0c      	ldr	r3, [pc, #48]	; (801a824 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	4313      	orrs	r3, r2
 801a7f6:	4a0b      	ldr	r2, [pc, #44]	; (801a824 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801a7f8:	6013      	str	r3, [r2, #0]
 801a7fa:	693b      	ldr	r3, [r7, #16]
 801a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7fe:	4613      	mov	r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	4413      	add	r3, r2
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	4a06      	ldr	r2, [pc, #24]	; (801a820 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801a808:	441a      	add	r2, r3
 801a80a:	693b      	ldr	r3, [r7, #16]
 801a80c:	3304      	adds	r3, #4
 801a80e:	4619      	mov	r1, r3
 801a810:	4610      	mov	r0, r2
 801a812:	f7fe fc52 	bl	80190ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a816:	bf00      	nop
 801a818:	3718      	adds	r7, #24
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
 801a81e:	bf00      	nop
 801a820:	200041fc 	.word	0x200041fc
 801a824:	200042d8 	.word	0x200042d8

0801a828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a828:	b480      	push	{r7}
 801a82a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a82c:	4b07      	ldr	r3, [pc, #28]	; (801a84c <pvTaskIncrementMutexHeldCount+0x24>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d004      	beq.n	801a83e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a834:	4b05      	ldr	r3, [pc, #20]	; (801a84c <pvTaskIncrementMutexHeldCount+0x24>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a83a:	3201      	adds	r2, #1
 801a83c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801a83e:	4b03      	ldr	r3, [pc, #12]	; (801a84c <pvTaskIncrementMutexHeldCount+0x24>)
 801a840:	681b      	ldr	r3, [r3, #0]
	}
 801a842:	4618      	mov	r0, r3
 801a844:	46bd      	mov	sp, r7
 801a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a84a:	4770      	bx	lr
 801a84c:	200041f8 	.word	0x200041f8

0801a850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b084      	sub	sp, #16
 801a854:	af00      	add	r7, sp, #0
 801a856:	6078      	str	r0, [r7, #4]
 801a858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a85a:	4b29      	ldr	r3, [pc, #164]	; (801a900 <prvAddCurrentTaskToDelayedList+0xb0>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a860:	4b28      	ldr	r3, [pc, #160]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	3304      	adds	r3, #4
 801a866:	4618      	mov	r0, r3
 801a868:	f7fe fc84 	bl	8019174 <uxListRemove>
 801a86c:	4603      	mov	r3, r0
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d10b      	bne.n	801a88a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a872:	4b24      	ldr	r3, [pc, #144]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a878:	2201      	movs	r2, #1
 801a87a:	fa02 f303 	lsl.w	r3, r2, r3
 801a87e:	43da      	mvns	r2, r3
 801a880:	4b21      	ldr	r3, [pc, #132]	; (801a908 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4013      	ands	r3, r2
 801a886:	4a20      	ldr	r2, [pc, #128]	; (801a908 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a890:	d10a      	bne.n	801a8a8 <prvAddCurrentTaskToDelayedList+0x58>
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d007      	beq.n	801a8a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a898:	4b1a      	ldr	r3, [pc, #104]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	3304      	adds	r3, #4
 801a89e:	4619      	mov	r1, r3
 801a8a0:	481a      	ldr	r0, [pc, #104]	; (801a90c <prvAddCurrentTaskToDelayedList+0xbc>)
 801a8a2:	f7fe fc0a 	bl	80190ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a8a6:	e026      	b.n	801a8f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a8a8:	68fa      	ldr	r2, [r7, #12]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	4413      	add	r3, r2
 801a8ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a8b0:	4b14      	ldr	r3, [pc, #80]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	68ba      	ldr	r2, [r7, #8]
 801a8b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a8b8:	68ba      	ldr	r2, [r7, #8]
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d209      	bcs.n	801a8d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a8c0:	4b13      	ldr	r3, [pc, #76]	; (801a910 <prvAddCurrentTaskToDelayedList+0xc0>)
 801a8c2:	681a      	ldr	r2, [r3, #0]
 801a8c4:	4b0f      	ldr	r3, [pc, #60]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	3304      	adds	r3, #4
 801a8ca:	4619      	mov	r1, r3
 801a8cc:	4610      	mov	r0, r2
 801a8ce:	f7fe fc18 	bl	8019102 <vListInsert>
}
 801a8d2:	e010      	b.n	801a8f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a8d4:	4b0f      	ldr	r3, [pc, #60]	; (801a914 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a8d6:	681a      	ldr	r2, [r3, #0]
 801a8d8:	4b0a      	ldr	r3, [pc, #40]	; (801a904 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	3304      	adds	r3, #4
 801a8de:	4619      	mov	r1, r3
 801a8e0:	4610      	mov	r0, r2
 801a8e2:	f7fe fc0e 	bl	8019102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a8e6:	4b0c      	ldr	r3, [pc, #48]	; (801a918 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	68ba      	ldr	r2, [r7, #8]
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d202      	bcs.n	801a8f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a8f0:	4a09      	ldr	r2, [pc, #36]	; (801a918 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	6013      	str	r3, [r2, #0]
}
 801a8f6:	bf00      	nop
 801a8f8:	3710      	adds	r7, #16
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}
 801a8fe:	bf00      	nop
 801a900:	200042d4 	.word	0x200042d4
 801a904:	200041f8 	.word	0x200041f8
 801a908:	200042d8 	.word	0x200042d8
 801a90c:	200042bc 	.word	0x200042bc
 801a910:	2000428c 	.word	0x2000428c
 801a914:	20004288 	.word	0x20004288
 801a918:	200042f0 	.word	0x200042f0

0801a91c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b08a      	sub	sp, #40	; 0x28
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 801a926:	79fb      	ldrb	r3, [r7, #7]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d10e      	bne.n	801a94a <BSP_LED_Init+0x2e>
 801a92c:	2300      	movs	r3, #0
 801a92e:	613b      	str	r3, [r7, #16]
 801a930:	4b1f      	ldr	r3, [pc, #124]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a934:	4a1e      	ldr	r2, [pc, #120]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a936:	f043 0302 	orr.w	r3, r3, #2
 801a93a:	6313      	str	r3, [r2, #48]	; 0x30
 801a93c:	4b1c      	ldr	r3, [pc, #112]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a940:	f003 0302 	and.w	r3, r3, #2
 801a944:	613b      	str	r3, [r7, #16]
 801a946:	693b      	ldr	r3, [r7, #16]
 801a948:	e00d      	b.n	801a966 <BSP_LED_Init+0x4a>
 801a94a:	2300      	movs	r3, #0
 801a94c:	60fb      	str	r3, [r7, #12]
 801a94e:	4b18      	ldr	r3, [pc, #96]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a952:	4a17      	ldr	r2, [pc, #92]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a954:	f043 0302 	orr.w	r3, r3, #2
 801a958:	6313      	str	r3, [r2, #48]	; 0x30
 801a95a:	4b15      	ldr	r3, [pc, #84]	; (801a9b0 <BSP_LED_Init+0x94>)
 801a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a95e:	f003 0302 	and.w	r3, r3, #2
 801a962:	60fb      	str	r3, [r7, #12]
 801a964:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 801a966:	79fb      	ldrb	r3, [r7, #7]
 801a968:	4a12      	ldr	r2, [pc, #72]	; (801a9b4 <BSP_LED_Init+0x98>)
 801a96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a96e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a970:	2301      	movs	r3, #1
 801a972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a974:	2300      	movs	r3, #0
 801a976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 801a978:	2302      	movs	r3, #2
 801a97a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 801a97c:	79fb      	ldrb	r3, [r7, #7]
 801a97e:	4a0e      	ldr	r2, [pc, #56]	; (801a9b8 <BSP_LED_Init+0x9c>)
 801a980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a984:	f107 0214 	add.w	r2, r7, #20
 801a988:	4611      	mov	r1, r2
 801a98a:	4618      	mov	r0, r3
 801a98c:	f000 fea8 	bl	801b6e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 801a990:	79fb      	ldrb	r3, [r7, #7]
 801a992:	4a09      	ldr	r2, [pc, #36]	; (801a9b8 <BSP_LED_Init+0x9c>)
 801a994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a998:	79fb      	ldrb	r3, [r7, #7]
 801a99a:	4a06      	ldr	r2, [pc, #24]	; (801a9b4 <BSP_LED_Init+0x98>)
 801a99c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	f001 f848 	bl	801ba38 <HAL_GPIO_WritePin>
}
 801a9a8:	bf00      	nop
 801a9aa:	3728      	adds	r7, #40	; 0x28
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	40023800 	.word	0x40023800
 801a9b4:	08040480 	.word	0x08040480
 801a9b8:	2000002c 	.word	0x2000002c

0801a9bc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b082      	sub	sp, #8
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 801a9c6:	79fb      	ldrb	r3, [r7, #7]
 801a9c8:	4a07      	ldr	r2, [pc, #28]	; (801a9e8 <BSP_LED_On+0x2c>)
 801a9ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a9ce:	79fb      	ldrb	r3, [r7, #7]
 801a9d0:	4a06      	ldr	r2, [pc, #24]	; (801a9ec <BSP_LED_On+0x30>)
 801a9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a9d6:	2201      	movs	r2, #1
 801a9d8:	4619      	mov	r1, r3
 801a9da:	f001 f82d 	bl	801ba38 <HAL_GPIO_WritePin>
}
 801a9de:	bf00      	nop
 801a9e0:	3708      	adds	r7, #8
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	2000002c 	.word	0x2000002c
 801a9ec:	08040480 	.word	0x08040480

0801a9f0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 801a9fa:	79fb      	ldrb	r3, [r7, #7]
 801a9fc:	4a07      	ldr	r2, [pc, #28]	; (801aa1c <BSP_LED_Off+0x2c>)
 801a9fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801aa02:	79fb      	ldrb	r3, [r7, #7]
 801aa04:	4a06      	ldr	r2, [pc, #24]	; (801aa20 <BSP_LED_Off+0x30>)
 801aa06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	4619      	mov	r1, r3
 801aa0e:	f001 f813 	bl	801ba38 <HAL_GPIO_WritePin>
}
 801aa12:	bf00      	nop
 801aa14:	3708      	adds	r7, #8
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd80      	pop	{r7, pc}
 801aa1a:	bf00      	nop
 801aa1c:	2000002c 	.word	0x2000002c
 801aa20:	08040480 	.word	0x08040480

0801aa24 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b088      	sub	sp, #32
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	4603      	mov	r3, r0
 801aa2c:	460a      	mov	r2, r1
 801aa2e:	71fb      	strb	r3, [r7, #7]
 801aa30:	4613      	mov	r3, r2
 801aa32:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 801aa34:	2300      	movs	r3, #0
 801aa36:	60bb      	str	r3, [r7, #8]
 801aa38:	4b22      	ldr	r3, [pc, #136]	; (801aac4 <BSP_PB_Init+0xa0>)
 801aa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa3c:	4a21      	ldr	r2, [pc, #132]	; (801aac4 <BSP_PB_Init+0xa0>)
 801aa3e:	f043 0304 	orr.w	r3, r3, #4
 801aa42:	6313      	str	r3, [r2, #48]	; 0x30
 801aa44:	4b1f      	ldr	r3, [pc, #124]	; (801aac4 <BSP_PB_Init+0xa0>)
 801aa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa48:	f003 0304 	and.w	r3, r3, #4
 801aa4c:	60bb      	str	r3, [r7, #8]
 801aa4e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 801aa50:	79bb      	ldrb	r3, [r7, #6]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d112      	bne.n	801aa7c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 801aa56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801aa5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801aa60:	2302      	movs	r3, #2
 801aa62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 801aa64:	2302      	movs	r3, #2
 801aa66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 801aa68:	79fb      	ldrb	r3, [r7, #7]
 801aa6a:	4a17      	ldr	r2, [pc, #92]	; (801aac8 <BSP_PB_Init+0xa4>)
 801aa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa70:	f107 020c 	add.w	r2, r7, #12
 801aa74:	4611      	mov	r1, r2
 801aa76:	4618      	mov	r0, r3
 801aa78:	f000 fe32 	bl	801b6e0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 801aa7c:	79bb      	ldrb	r3, [r7, #6]
 801aa7e:	2b01      	cmp	r3, #1
 801aa80:	d11c      	bne.n	801aabc <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 801aa82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801aa86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aa88:	2300      	movs	r3, #0
 801aa8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 801aa8c:	4b0f      	ldr	r3, [pc, #60]	; (801aacc <BSP_PB_Init+0xa8>)
 801aa8e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 801aa90:	79fb      	ldrb	r3, [r7, #7]
 801aa92:	4a0d      	ldr	r2, [pc, #52]	; (801aac8 <BSP_PB_Init+0xa4>)
 801aa94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa98:	f107 020c 	add.w	r2, r7, #12
 801aa9c:	4611      	mov	r1, r2
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f000 fe1e 	bl	801b6e0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 801aaa4:	2328      	movs	r3, #40	; 0x28
 801aaa6:	b25b      	sxtb	r3, r3
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	210f      	movs	r1, #15
 801aaac:	4618      	mov	r0, r3
 801aaae:	f000 f97a 	bl	801ada6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 801aab2:	2328      	movs	r3, #40	; 0x28
 801aab4:	b25b      	sxtb	r3, r3
 801aab6:	4618      	mov	r0, r3
 801aab8:	f000 f991 	bl	801adde <HAL_NVIC_EnableIRQ>
  }
}
 801aabc:	bf00      	nop
 801aabe:	3720      	adds	r7, #32
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}
 801aac4:	40023800 	.word	0x40023800
 801aac8:	20000038 	.word	0x20000038
 801aacc:	10210000 	.word	0x10210000

0801aad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801aad4:	4b0e      	ldr	r3, [pc, #56]	; (801ab10 <HAL_Init+0x40>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	4a0d      	ldr	r2, [pc, #52]	; (801ab10 <HAL_Init+0x40>)
 801aada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801aae0:	4b0b      	ldr	r3, [pc, #44]	; (801ab10 <HAL_Init+0x40>)
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	4a0a      	ldr	r2, [pc, #40]	; (801ab10 <HAL_Init+0x40>)
 801aae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801aaea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801aaec:	4b08      	ldr	r3, [pc, #32]	; (801ab10 <HAL_Init+0x40>)
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	4a07      	ldr	r2, [pc, #28]	; (801ab10 <HAL_Init+0x40>)
 801aaf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aaf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801aaf8:	2003      	movs	r0, #3
 801aafa:	f000 f949 	bl	801ad90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801aafe:	200f      	movs	r0, #15
 801ab00:	f000 f810 	bl	801ab24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801ab04:	f000 f806 	bl	801ab14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801ab08:	2300      	movs	r3, #0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	40023c00 	.word	0x40023c00

0801ab14 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 801ab14:	b480      	push	{r7}
 801ab16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 801ab18:	bf00      	nop
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab20:	4770      	bx	lr
	...

0801ab24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b082      	sub	sp, #8
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801ab2c:	4b12      	ldr	r3, [pc, #72]	; (801ab78 <HAL_InitTick+0x54>)
 801ab2e:	681a      	ldr	r2, [r3, #0]
 801ab30:	4b12      	ldr	r3, [pc, #72]	; (801ab7c <HAL_InitTick+0x58>)
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	4619      	mov	r1, r3
 801ab36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ab3a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ab3e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab42:	4618      	mov	r0, r3
 801ab44:	f000 f95d 	bl	801ae02 <HAL_SYSTICK_Config>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d001      	beq.n	801ab52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801ab4e:	2301      	movs	r3, #1
 801ab50:	e00e      	b.n	801ab70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b0f      	cmp	r3, #15
 801ab56:	d80a      	bhi.n	801ab6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801ab58:	2200      	movs	r2, #0
 801ab5a:	6879      	ldr	r1, [r7, #4]
 801ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab60:	f000 f921 	bl	801ada6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801ab64:	4a06      	ldr	r2, [pc, #24]	; (801ab80 <HAL_InitTick+0x5c>)
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	e000      	b.n	801ab70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801ab6e:	2301      	movs	r3, #1
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3708      	adds	r7, #8
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}
 801ab78:	20000024 	.word	0x20000024
 801ab7c:	20000040 	.word	0x20000040
 801ab80:	2000003c 	.word	0x2000003c

0801ab84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801ab84:	b480      	push	{r7}
 801ab86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801ab88:	4b06      	ldr	r3, [pc, #24]	; (801aba4 <HAL_IncTick+0x20>)
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	461a      	mov	r2, r3
 801ab8e:	4b06      	ldr	r3, [pc, #24]	; (801aba8 <HAL_IncTick+0x24>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	4413      	add	r3, r2
 801ab94:	4a04      	ldr	r2, [pc, #16]	; (801aba8 <HAL_IncTick+0x24>)
 801ab96:	6013      	str	r3, [r2, #0]
}
 801ab98:	bf00      	nop
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba0:	4770      	bx	lr
 801aba2:	bf00      	nop
 801aba4:	20000040 	.word	0x20000040
 801aba8:	2000aa40 	.word	0x2000aa40

0801abac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801abac:	b480      	push	{r7}
 801abae:	af00      	add	r7, sp, #0
  return uwTick;
 801abb0:	4b03      	ldr	r3, [pc, #12]	; (801abc0 <HAL_GetTick+0x14>)
 801abb2:	681b      	ldr	r3, [r3, #0]
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	46bd      	mov	sp, r7
 801abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abbc:	4770      	bx	lr
 801abbe:	bf00      	nop
 801abc0:	2000aa40 	.word	0x2000aa40

0801abc4 <__NVIC_SetPriorityGrouping>:
{
 801abc4:	b480      	push	{r7}
 801abc6:	b085      	sub	sp, #20
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f003 0307 	and.w	r3, r3, #7
 801abd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801abd4:	4b0c      	ldr	r3, [pc, #48]	; (801ac08 <__NVIC_SetPriorityGrouping+0x44>)
 801abd6:	68db      	ldr	r3, [r3, #12]
 801abd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801abda:	68ba      	ldr	r2, [r7, #8]
 801abdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801abe0:	4013      	ands	r3, r2
 801abe2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801abec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801abf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801abf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801abf6:	4a04      	ldr	r2, [pc, #16]	; (801ac08 <__NVIC_SetPriorityGrouping+0x44>)
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	60d3      	str	r3, [r2, #12]
}
 801abfc:	bf00      	nop
 801abfe:	3714      	adds	r7, #20
 801ac00:	46bd      	mov	sp, r7
 801ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac06:	4770      	bx	lr
 801ac08:	e000ed00 	.word	0xe000ed00

0801ac0c <__NVIC_GetPriorityGrouping>:
{
 801ac0c:	b480      	push	{r7}
 801ac0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801ac10:	4b04      	ldr	r3, [pc, #16]	; (801ac24 <__NVIC_GetPriorityGrouping+0x18>)
 801ac12:	68db      	ldr	r3, [r3, #12]
 801ac14:	0a1b      	lsrs	r3, r3, #8
 801ac16:	f003 0307 	and.w	r3, r3, #7
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac22:	4770      	bx	lr
 801ac24:	e000ed00 	.word	0xe000ed00

0801ac28 <__NVIC_EnableIRQ>:
{
 801ac28:	b480      	push	{r7}
 801ac2a:	b083      	sub	sp, #12
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	4603      	mov	r3, r0
 801ac30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ac32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	db0b      	blt.n	801ac52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ac3a:	79fb      	ldrb	r3, [r7, #7]
 801ac3c:	f003 021f 	and.w	r2, r3, #31
 801ac40:	4907      	ldr	r1, [pc, #28]	; (801ac60 <__NVIC_EnableIRQ+0x38>)
 801ac42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac46:	095b      	lsrs	r3, r3, #5
 801ac48:	2001      	movs	r0, #1
 801ac4a:	fa00 f202 	lsl.w	r2, r0, r2
 801ac4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801ac52:	bf00      	nop
 801ac54:	370c      	adds	r7, #12
 801ac56:	46bd      	mov	sp, r7
 801ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5c:	4770      	bx	lr
 801ac5e:	bf00      	nop
 801ac60:	e000e100 	.word	0xe000e100

0801ac64 <__NVIC_SetPriority>:
{
 801ac64:	b480      	push	{r7}
 801ac66:	b083      	sub	sp, #12
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	6039      	str	r1, [r7, #0]
 801ac6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ac70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	db0a      	blt.n	801ac8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	b2da      	uxtb	r2, r3
 801ac7c:	490c      	ldr	r1, [pc, #48]	; (801acb0 <__NVIC_SetPriority+0x4c>)
 801ac7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac82:	0112      	lsls	r2, r2, #4
 801ac84:	b2d2      	uxtb	r2, r2
 801ac86:	440b      	add	r3, r1
 801ac88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801ac8c:	e00a      	b.n	801aca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	b2da      	uxtb	r2, r3
 801ac92:	4908      	ldr	r1, [pc, #32]	; (801acb4 <__NVIC_SetPriority+0x50>)
 801ac94:	79fb      	ldrb	r3, [r7, #7]
 801ac96:	f003 030f 	and.w	r3, r3, #15
 801ac9a:	3b04      	subs	r3, #4
 801ac9c:	0112      	lsls	r2, r2, #4
 801ac9e:	b2d2      	uxtb	r2, r2
 801aca0:	440b      	add	r3, r1
 801aca2:	761a      	strb	r2, [r3, #24]
}
 801aca4:	bf00      	nop
 801aca6:	370c      	adds	r7, #12
 801aca8:	46bd      	mov	sp, r7
 801acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acae:	4770      	bx	lr
 801acb0:	e000e100 	.word	0xe000e100
 801acb4:	e000ed00 	.word	0xe000ed00

0801acb8 <NVIC_EncodePriority>:
{
 801acb8:	b480      	push	{r7}
 801acba:	b089      	sub	sp, #36	; 0x24
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	60f8      	str	r0, [r7, #12]
 801acc0:	60b9      	str	r1, [r7, #8]
 801acc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f003 0307 	and.w	r3, r3, #7
 801acca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801accc:	69fb      	ldr	r3, [r7, #28]
 801acce:	f1c3 0307 	rsb	r3, r3, #7
 801acd2:	2b04      	cmp	r3, #4
 801acd4:	bf28      	it	cs
 801acd6:	2304      	movcs	r3, #4
 801acd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801acda:	69fb      	ldr	r3, [r7, #28]
 801acdc:	3304      	adds	r3, #4
 801acde:	2b06      	cmp	r3, #6
 801ace0:	d902      	bls.n	801ace8 <NVIC_EncodePriority+0x30>
 801ace2:	69fb      	ldr	r3, [r7, #28]
 801ace4:	3b03      	subs	r3, #3
 801ace6:	e000      	b.n	801acea <NVIC_EncodePriority+0x32>
 801ace8:	2300      	movs	r3, #0
 801acea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801acec:	f04f 32ff 	mov.w	r2, #4294967295
 801acf0:	69bb      	ldr	r3, [r7, #24]
 801acf2:	fa02 f303 	lsl.w	r3, r2, r3
 801acf6:	43da      	mvns	r2, r3
 801acf8:	68bb      	ldr	r3, [r7, #8]
 801acfa:	401a      	ands	r2, r3
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ad00:	f04f 31ff 	mov.w	r1, #4294967295
 801ad04:	697b      	ldr	r3, [r7, #20]
 801ad06:	fa01 f303 	lsl.w	r3, r1, r3
 801ad0a:	43d9      	mvns	r1, r3
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ad10:	4313      	orrs	r3, r2
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3724      	adds	r7, #36	; 0x24
 801ad16:	46bd      	mov	sp, r7
 801ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1c:	4770      	bx	lr
	...

0801ad20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801ad20:	b480      	push	{r7}
 801ad22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801ad24:	f3bf 8f4f 	dsb	sy
}
 801ad28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801ad2a:	4b06      	ldr	r3, [pc, #24]	; (801ad44 <__NVIC_SystemReset+0x24>)
 801ad2c:	68db      	ldr	r3, [r3, #12]
 801ad2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801ad32:	4904      	ldr	r1, [pc, #16]	; (801ad44 <__NVIC_SystemReset+0x24>)
 801ad34:	4b04      	ldr	r3, [pc, #16]	; (801ad48 <__NVIC_SystemReset+0x28>)
 801ad36:	4313      	orrs	r3, r2
 801ad38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801ad3a:	f3bf 8f4f 	dsb	sy
}
 801ad3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801ad40:	bf00      	nop
 801ad42:	e7fd      	b.n	801ad40 <__NVIC_SystemReset+0x20>
 801ad44:	e000ed00 	.word	0xe000ed00
 801ad48:	05fa0004 	.word	0x05fa0004

0801ad4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b082      	sub	sp, #8
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	3b01      	subs	r3, #1
 801ad58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ad5c:	d301      	bcc.n	801ad62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ad5e:	2301      	movs	r3, #1
 801ad60:	e00f      	b.n	801ad82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ad62:	4a0a      	ldr	r2, [pc, #40]	; (801ad8c <SysTick_Config+0x40>)
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	3b01      	subs	r3, #1
 801ad68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ad6a:	210f      	movs	r1, #15
 801ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad70:	f7ff ff78 	bl	801ac64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ad74:	4b05      	ldr	r3, [pc, #20]	; (801ad8c <SysTick_Config+0x40>)
 801ad76:	2200      	movs	r2, #0
 801ad78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ad7a:	4b04      	ldr	r3, [pc, #16]	; (801ad8c <SysTick_Config+0x40>)
 801ad7c:	2207      	movs	r2, #7
 801ad7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ad80:	2300      	movs	r3, #0
}
 801ad82:	4618      	mov	r0, r3
 801ad84:	3708      	adds	r7, #8
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}
 801ad8a:	bf00      	nop
 801ad8c:	e000e010 	.word	0xe000e010

0801ad90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b082      	sub	sp, #8
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801ad98:	6878      	ldr	r0, [r7, #4]
 801ad9a:	f7ff ff13 	bl	801abc4 <__NVIC_SetPriorityGrouping>
}
 801ad9e:	bf00      	nop
 801ada0:	3708      	adds	r7, #8
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}

0801ada6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801ada6:	b580      	push	{r7, lr}
 801ada8:	b086      	sub	sp, #24
 801adaa:	af00      	add	r7, sp, #0
 801adac:	4603      	mov	r3, r0
 801adae:	60b9      	str	r1, [r7, #8]
 801adb0:	607a      	str	r2, [r7, #4]
 801adb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801adb4:	2300      	movs	r3, #0
 801adb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801adb8:	f7ff ff28 	bl	801ac0c <__NVIC_GetPriorityGrouping>
 801adbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801adbe:	687a      	ldr	r2, [r7, #4]
 801adc0:	68b9      	ldr	r1, [r7, #8]
 801adc2:	6978      	ldr	r0, [r7, #20]
 801adc4:	f7ff ff78 	bl	801acb8 <NVIC_EncodePriority>
 801adc8:	4602      	mov	r2, r0
 801adca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adce:	4611      	mov	r1, r2
 801add0:	4618      	mov	r0, r3
 801add2:	f7ff ff47 	bl	801ac64 <__NVIC_SetPriority>
}
 801add6:	bf00      	nop
 801add8:	3718      	adds	r7, #24
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}

0801adde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801adde:	b580      	push	{r7, lr}
 801ade0:	b082      	sub	sp, #8
 801ade2:	af00      	add	r7, sp, #0
 801ade4:	4603      	mov	r3, r0
 801ade6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801ade8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801adec:	4618      	mov	r0, r3
 801adee:	f7ff ff1b 	bl	801ac28 <__NVIC_EnableIRQ>
}
 801adf2:	bf00      	nop
 801adf4:	3708      	adds	r7, #8
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}

0801adfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801adfa:	b580      	push	{r7, lr}
 801adfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801adfe:	f7ff ff8f 	bl	801ad20 <__NVIC_SystemReset>

0801ae02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801ae02:	b580      	push	{r7, lr}
 801ae04:	b082      	sub	sp, #8
 801ae06:	af00      	add	r7, sp, #0
 801ae08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	f7ff ff9e 	bl	801ad4c <SysTick_Config>
 801ae10:	4603      	mov	r3, r0
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3708      	adds	r7, #8
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
	...

0801ae1c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b086      	sub	sp, #24
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	60f8      	str	r0, [r7, #12]
 801ae24:	60b9      	str	r1, [r7, #8]
 801ae26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801ae2e:	4b23      	ldr	r3, [pc, #140]	; (801aebc <HAL_FLASH_Program+0xa0>)
 801ae30:	7e1b      	ldrb	r3, [r3, #24]
 801ae32:	2b01      	cmp	r3, #1
 801ae34:	d101      	bne.n	801ae3a <HAL_FLASH_Program+0x1e>
 801ae36:	2302      	movs	r3, #2
 801ae38:	e03b      	b.n	801aeb2 <HAL_FLASH_Program+0x96>
 801ae3a:	4b20      	ldr	r3, [pc, #128]	; (801aebc <HAL_FLASH_Program+0xa0>)
 801ae3c:	2201      	movs	r2, #1
 801ae3e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ae40:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ae44:	f000 f8b0 	bl	801afa8 <FLASH_WaitForLastOperation>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801ae4c:	7dfb      	ldrb	r3, [r7, #23]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d12b      	bne.n	801aeaa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d105      	bne.n	801ae64 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801ae58:	783b      	ldrb	r3, [r7, #0]
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	68b8      	ldr	r0, [r7, #8]
 801ae5e:	f000 f95b 	bl	801b118 <FLASH_Program_Byte>
 801ae62:	e016      	b.n	801ae92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	2b01      	cmp	r3, #1
 801ae68:	d105      	bne.n	801ae76 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801ae6a:	883b      	ldrh	r3, [r7, #0]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	68b8      	ldr	r0, [r7, #8]
 801ae70:	f000 f92e 	bl	801b0d0 <FLASH_Program_HalfWord>
 801ae74:	e00d      	b.n	801ae92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	2b02      	cmp	r3, #2
 801ae7a:	d105      	bne.n	801ae88 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	4619      	mov	r1, r3
 801ae80:	68b8      	ldr	r0, [r7, #8]
 801ae82:	f000 f903 	bl	801b08c <FLASH_Program_Word>
 801ae86:	e004      	b.n	801ae92 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ae8c:	68b8      	ldr	r0, [r7, #8]
 801ae8e:	f000 f8cb 	bl	801b028 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ae92:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ae96:	f000 f887 	bl	801afa8 <FLASH_WaitForLastOperation>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801ae9e:	4b08      	ldr	r3, [pc, #32]	; (801aec0 <HAL_FLASH_Program+0xa4>)
 801aea0:	691b      	ldr	r3, [r3, #16]
 801aea2:	4a07      	ldr	r2, [pc, #28]	; (801aec0 <HAL_FLASH_Program+0xa4>)
 801aea4:	f023 0301 	bic.w	r3, r3, #1
 801aea8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801aeaa:	4b04      	ldr	r3, [pc, #16]	; (801aebc <HAL_FLASH_Program+0xa0>)
 801aeac:	2200      	movs	r2, #0
 801aeae:	761a      	strb	r2, [r3, #24]
  
  return status;
 801aeb0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	3718      	adds	r7, #24
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	bd80      	pop	{r7, pc}
 801aeba:	bf00      	nop
 801aebc:	2000aa44 	.word	0x2000aa44
 801aec0:	40023c00 	.word	0x40023c00

0801aec4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801aec4:	b480      	push	{r7}
 801aec6:	b083      	sub	sp, #12
 801aec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801aeca:	2300      	movs	r3, #0
 801aecc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801aece:	4b0b      	ldr	r3, [pc, #44]	; (801aefc <HAL_FLASH_Unlock+0x38>)
 801aed0:	691b      	ldr	r3, [r3, #16]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	da0b      	bge.n	801aeee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801aed6:	4b09      	ldr	r3, [pc, #36]	; (801aefc <HAL_FLASH_Unlock+0x38>)
 801aed8:	4a09      	ldr	r2, [pc, #36]	; (801af00 <HAL_FLASH_Unlock+0x3c>)
 801aeda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801aedc:	4b07      	ldr	r3, [pc, #28]	; (801aefc <HAL_FLASH_Unlock+0x38>)
 801aede:	4a09      	ldr	r2, [pc, #36]	; (801af04 <HAL_FLASH_Unlock+0x40>)
 801aee0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801aee2:	4b06      	ldr	r3, [pc, #24]	; (801aefc <HAL_FLASH_Unlock+0x38>)
 801aee4:	691b      	ldr	r3, [r3, #16]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	da01      	bge.n	801aeee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801aeea:	2301      	movs	r3, #1
 801aeec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801aeee:	79fb      	ldrb	r3, [r7, #7]
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	370c      	adds	r7, #12
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr
 801aefc:	40023c00 	.word	0x40023c00
 801af00:	45670123 	.word	0x45670123
 801af04:	cdef89ab 	.word	0xcdef89ab

0801af08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801af08:	b480      	push	{r7}
 801af0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801af0c:	4b05      	ldr	r3, [pc, #20]	; (801af24 <HAL_FLASH_Lock+0x1c>)
 801af0e:	691b      	ldr	r3, [r3, #16]
 801af10:	4a04      	ldr	r2, [pc, #16]	; (801af24 <HAL_FLASH_Lock+0x1c>)
 801af12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801af16:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801af18:	2300      	movs	r3, #0
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	46bd      	mov	sp, r7
 801af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af22:	4770      	bx	lr
 801af24:	40023c00 	.word	0x40023c00

0801af28 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 801af28:	b480      	push	{r7}
 801af2a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 801af2c:	4b09      	ldr	r3, [pc, #36]	; (801af54 <HAL_FLASH_OB_Unlock+0x2c>)
 801af2e:	695b      	ldr	r3, [r3, #20]
 801af30:	f003 0301 	and.w	r3, r3, #1
 801af34:	2b00      	cmp	r3, #0
 801af36:	d007      	beq.n	801af48 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 801af38:	4b06      	ldr	r3, [pc, #24]	; (801af54 <HAL_FLASH_OB_Unlock+0x2c>)
 801af3a:	4a07      	ldr	r2, [pc, #28]	; (801af58 <HAL_FLASH_OB_Unlock+0x30>)
 801af3c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 801af3e:	4b05      	ldr	r3, [pc, #20]	; (801af54 <HAL_FLASH_OB_Unlock+0x2c>)
 801af40:	4a06      	ldr	r2, [pc, #24]	; (801af5c <HAL_FLASH_OB_Unlock+0x34>)
 801af42:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 801af44:	2300      	movs	r3, #0
 801af46:	e000      	b.n	801af4a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 801af48:	2301      	movs	r3, #1
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	46bd      	mov	sp, r7
 801af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af52:	4770      	bx	lr
 801af54:	40023c00 	.word	0x40023c00
 801af58:	08192a3b 	.word	0x08192a3b
 801af5c:	4c5d6e7f 	.word	0x4c5d6e7f

0801af60 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 801af60:	b480      	push	{r7}
 801af62:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 801af64:	4b05      	ldr	r3, [pc, #20]	; (801af7c <HAL_FLASH_OB_Lock+0x1c>)
 801af66:	695b      	ldr	r3, [r3, #20]
 801af68:	4a04      	ldr	r2, [pc, #16]	; (801af7c <HAL_FLASH_OB_Lock+0x1c>)
 801af6a:	f043 0301 	orr.w	r3, r3, #1
 801af6e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 801af70:	2300      	movs	r3, #0
}
 801af72:	4618      	mov	r0, r3
 801af74:	46bd      	mov	sp, r7
 801af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7a:	4770      	bx	lr
 801af7c:	40023c00 	.word	0x40023c00

0801af80 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 801af84:	4b07      	ldr	r3, [pc, #28]	; (801afa4 <HAL_FLASH_OB_Launch+0x24>)
 801af86:	781b      	ldrb	r3, [r3, #0]
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	4a06      	ldr	r2, [pc, #24]	; (801afa4 <HAL_FLASH_OB_Launch+0x24>)
 801af8c:	f043 0302 	orr.w	r3, r3, #2
 801af90:	b2db      	uxtb	r3, r3
 801af92:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 801af94:	f24c 3050 	movw	r0, #50000	; 0xc350
 801af98:	f000 f806 	bl	801afa8 <FLASH_WaitForLastOperation>
 801af9c:	4603      	mov	r3, r0
}
 801af9e:	4618      	mov	r0, r3
 801afa0:	bd80      	pop	{r7, pc}
 801afa2:	bf00      	nop
 801afa4:	40023c14 	.word	0x40023c14

0801afa8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b084      	sub	sp, #16
 801afac:	af00      	add	r7, sp, #0
 801afae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801afb0:	2300      	movs	r3, #0
 801afb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801afb4:	4b1a      	ldr	r3, [pc, #104]	; (801b020 <FLASH_WaitForLastOperation+0x78>)
 801afb6:	2200      	movs	r2, #0
 801afb8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801afba:	f7ff fdf7 	bl	801abac <HAL_GetTick>
 801afbe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801afc0:	e010      	b.n	801afe4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afc8:	d00c      	beq.n	801afe4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d007      	beq.n	801afe0 <FLASH_WaitForLastOperation+0x38>
 801afd0:	f7ff fdec 	bl	801abac <HAL_GetTick>
 801afd4:	4602      	mov	r2, r0
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	1ad3      	subs	r3, r2, r3
 801afda:	687a      	ldr	r2, [r7, #4]
 801afdc:	429a      	cmp	r2, r3
 801afde:	d201      	bcs.n	801afe4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801afe0:	2303      	movs	r3, #3
 801afe2:	e019      	b.n	801b018 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801afe4:	4b0f      	ldr	r3, [pc, #60]	; (801b024 <FLASH_WaitForLastOperation+0x7c>)
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801afec:	2b00      	cmp	r3, #0
 801afee:	d1e8      	bne.n	801afc2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801aff0:	4b0c      	ldr	r3, [pc, #48]	; (801b024 <FLASH_WaitForLastOperation+0x7c>)
 801aff2:	68db      	ldr	r3, [r3, #12]
 801aff4:	f003 0301 	and.w	r3, r3, #1
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d002      	beq.n	801b002 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801affc:	4b09      	ldr	r3, [pc, #36]	; (801b024 <FLASH_WaitForLastOperation+0x7c>)
 801affe:	2201      	movs	r2, #1
 801b000:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801b002:	4b08      	ldr	r3, [pc, #32]	; (801b024 <FLASH_WaitForLastOperation+0x7c>)
 801b004:	68db      	ldr	r3, [r3, #12]
 801b006:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d003      	beq.n	801b016 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801b00e:	f000 f8a5 	bl	801b15c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801b012:	2301      	movs	r3, #1
 801b014:	e000      	b.n	801b018 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801b016:	2300      	movs	r3, #0
  
}  
 801b018:	4618      	mov	r0, r3
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}
 801b020:	2000aa44 	.word	0x2000aa44
 801b024:	40023c00 	.word	0x40023c00

0801b028 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b028:	b480      	push	{r7}
 801b02a:	b085      	sub	sp, #20
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b034:	4b14      	ldr	r3, [pc, #80]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b036:	691b      	ldr	r3, [r3, #16]
 801b038:	4a13      	ldr	r2, [pc, #76]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b03a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b03e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801b040:	4b11      	ldr	r3, [pc, #68]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b042:	691b      	ldr	r3, [r3, #16]
 801b044:	4a10      	ldr	r2, [pc, #64]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b046:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801b04a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801b04c:	4b0e      	ldr	r3, [pc, #56]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b04e:	691b      	ldr	r3, [r3, #16]
 801b050:	4a0d      	ldr	r2, [pc, #52]	; (801b088 <FLASH_Program_DoubleWord+0x60>)
 801b052:	f043 0301 	orr.w	r3, r3, #1
 801b056:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	683a      	ldr	r2, [r7, #0]
 801b05c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b05e:	f3bf 8f6f 	isb	sy
}
 801b062:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801b064:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b068:	f04f 0200 	mov.w	r2, #0
 801b06c:	f04f 0300 	mov.w	r3, #0
 801b070:	000a      	movs	r2, r1
 801b072:	2300      	movs	r3, #0
 801b074:	68f9      	ldr	r1, [r7, #12]
 801b076:	3104      	adds	r1, #4
 801b078:	4613      	mov	r3, r2
 801b07a:	600b      	str	r3, [r1, #0]
}
 801b07c:	bf00      	nop
 801b07e:	3714      	adds	r7, #20
 801b080:	46bd      	mov	sp, r7
 801b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b086:	4770      	bx	lr
 801b088:	40023c00 	.word	0x40023c00

0801b08c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 801b08c:	b480      	push	{r7}
 801b08e:	b083      	sub	sp, #12
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
 801b094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b096:	4b0d      	ldr	r3, [pc, #52]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b098:	691b      	ldr	r3, [r3, #16]
 801b09a:	4a0c      	ldr	r2, [pc, #48]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b09c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b0a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801b0a2:	4b0a      	ldr	r3, [pc, #40]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b0a4:	691b      	ldr	r3, [r3, #16]
 801b0a6:	4a09      	ldr	r2, [pc, #36]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b0a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b0ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801b0ae:	4b07      	ldr	r3, [pc, #28]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b0b0:	691b      	ldr	r3, [r3, #16]
 801b0b2:	4a06      	ldr	r2, [pc, #24]	; (801b0cc <FLASH_Program_Word+0x40>)
 801b0b4:	f043 0301 	orr.w	r3, r3, #1
 801b0b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	683a      	ldr	r2, [r7, #0]
 801b0be:	601a      	str	r2, [r3, #0]
}
 801b0c0:	bf00      	nop
 801b0c2:	370c      	adds	r7, #12
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ca:	4770      	bx	lr
 801b0cc:	40023c00 	.word	0x40023c00

0801b0d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801b0d0:	b480      	push	{r7}
 801b0d2:	b083      	sub	sp, #12
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
 801b0d8:	460b      	mov	r3, r1
 801b0da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b0dc:	4b0d      	ldr	r3, [pc, #52]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0de:	691b      	ldr	r3, [r3, #16]
 801b0e0:	4a0c      	ldr	r2, [pc, #48]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b0e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801b0e8:	4b0a      	ldr	r3, [pc, #40]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0ea:	691b      	ldr	r3, [r3, #16]
 801b0ec:	4a09      	ldr	r2, [pc, #36]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b0f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801b0f4:	4b07      	ldr	r3, [pc, #28]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0f6:	691b      	ldr	r3, [r3, #16]
 801b0f8:	4a06      	ldr	r2, [pc, #24]	; (801b114 <FLASH_Program_HalfWord+0x44>)
 801b0fa:	f043 0301 	orr.w	r3, r3, #1
 801b0fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	887a      	ldrh	r2, [r7, #2]
 801b104:	801a      	strh	r2, [r3, #0]
}
 801b106:	bf00      	nop
 801b108:	370c      	adds	r7, #12
 801b10a:	46bd      	mov	sp, r7
 801b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b110:	4770      	bx	lr
 801b112:	bf00      	nop
 801b114:	40023c00 	.word	0x40023c00

0801b118 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801b118:	b480      	push	{r7}
 801b11a:	b083      	sub	sp, #12
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
 801b120:	460b      	mov	r3, r1
 801b122:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b124:	4b0c      	ldr	r3, [pc, #48]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b126:	691b      	ldr	r3, [r3, #16]
 801b128:	4a0b      	ldr	r2, [pc, #44]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b12e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801b130:	4b09      	ldr	r3, [pc, #36]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b132:	4a09      	ldr	r2, [pc, #36]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b134:	691b      	ldr	r3, [r3, #16]
 801b136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801b138:	4b07      	ldr	r3, [pc, #28]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b13a:	691b      	ldr	r3, [r3, #16]
 801b13c:	4a06      	ldr	r2, [pc, #24]	; (801b158 <FLASH_Program_Byte+0x40>)
 801b13e:	f043 0301 	orr.w	r3, r3, #1
 801b142:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	78fa      	ldrb	r2, [r7, #3]
 801b148:	701a      	strb	r2, [r3, #0]
}
 801b14a:	bf00      	nop
 801b14c:	370c      	adds	r7, #12
 801b14e:	46bd      	mov	sp, r7
 801b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b154:	4770      	bx	lr
 801b156:	bf00      	nop
 801b158:	40023c00 	.word	0x40023c00

0801b15c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 801b15c:	b480      	push	{r7}
 801b15e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801b160:	4b2f      	ldr	r3, [pc, #188]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b162:	68db      	ldr	r3, [r3, #12]
 801b164:	f003 0310 	and.w	r3, r3, #16
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d008      	beq.n	801b17e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801b16c:	4b2d      	ldr	r3, [pc, #180]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b16e:	69db      	ldr	r3, [r3, #28]
 801b170:	f043 0310 	orr.w	r3, r3, #16
 801b174:	4a2b      	ldr	r2, [pc, #172]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b176:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801b178:	4b29      	ldr	r3, [pc, #164]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b17a:	2210      	movs	r2, #16
 801b17c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801b17e:	4b28      	ldr	r3, [pc, #160]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	f003 0320 	and.w	r3, r3, #32
 801b186:	2b00      	cmp	r3, #0
 801b188:	d008      	beq.n	801b19c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801b18a:	4b26      	ldr	r3, [pc, #152]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b18c:	69db      	ldr	r3, [r3, #28]
 801b18e:	f043 0308 	orr.w	r3, r3, #8
 801b192:	4a24      	ldr	r2, [pc, #144]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b194:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801b196:	4b22      	ldr	r3, [pc, #136]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b198:	2220      	movs	r2, #32
 801b19a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801b19c:	4b20      	ldr	r3, [pc, #128]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b19e:	68db      	ldr	r3, [r3, #12]
 801b1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d008      	beq.n	801b1ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801b1a8:	4b1e      	ldr	r3, [pc, #120]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1aa:	69db      	ldr	r3, [r3, #28]
 801b1ac:	f043 0304 	orr.w	r3, r3, #4
 801b1b0:	4a1c      	ldr	r2, [pc, #112]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801b1b4:	4b1a      	ldr	r3, [pc, #104]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1b6:	2240      	movs	r2, #64	; 0x40
 801b1b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801b1ba:	4b19      	ldr	r3, [pc, #100]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1bc:	68db      	ldr	r3, [r3, #12]
 801b1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d008      	beq.n	801b1d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801b1c6:	4b17      	ldr	r3, [pc, #92]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1c8:	69db      	ldr	r3, [r3, #28]
 801b1ca:	f043 0302 	orr.w	r3, r3, #2
 801b1ce:	4a15      	ldr	r2, [pc, #84]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801b1d2:	4b13      	ldr	r3, [pc, #76]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1d4:	2280      	movs	r2, #128	; 0x80
 801b1d6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801b1d8:	4b11      	ldr	r3, [pc, #68]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1da:	68db      	ldr	r3, [r3, #12]
 801b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d009      	beq.n	801b1f8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801b1e4:	4b0f      	ldr	r3, [pc, #60]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1e6:	69db      	ldr	r3, [r3, #28]
 801b1e8:	f043 0301 	orr.w	r3, r3, #1
 801b1ec:	4a0d      	ldr	r2, [pc, #52]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b1ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 801b1f0:	4b0b      	ldr	r3, [pc, #44]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b1f6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801b1f8:	4b09      	ldr	r3, [pc, #36]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b1fa:	68db      	ldr	r3, [r3, #12]
 801b1fc:	f003 0302 	and.w	r3, r3, #2
 801b200:	2b00      	cmp	r3, #0
 801b202:	d008      	beq.n	801b216 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801b204:	4b07      	ldr	r3, [pc, #28]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b206:	69db      	ldr	r3, [r3, #28]
 801b208:	f043 0320 	orr.w	r3, r3, #32
 801b20c:	4a05      	ldr	r2, [pc, #20]	; (801b224 <FLASH_SetErrorCode+0xc8>)
 801b20e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801b210:	4b03      	ldr	r3, [pc, #12]	; (801b220 <FLASH_SetErrorCode+0xc4>)
 801b212:	2202      	movs	r2, #2
 801b214:	60da      	str	r2, [r3, #12]
  }
}
 801b216:	bf00      	nop
 801b218:	46bd      	mov	sp, r7
 801b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b21e:	4770      	bx	lr
 801b220:	40023c00 	.word	0x40023c00
 801b224:	2000aa44 	.word	0x2000aa44

0801b228 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b084      	sub	sp, #16
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b232:	2301      	movs	r3, #1
 801b234:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801b236:	2300      	movs	r3, #0
 801b238:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b23a:	4b32      	ldr	r3, [pc, #200]	; (801b304 <HAL_FLASHEx_Erase+0xdc>)
 801b23c:	7e1b      	ldrb	r3, [r3, #24]
 801b23e:	2b01      	cmp	r3, #1
 801b240:	d101      	bne.n	801b246 <HAL_FLASHEx_Erase+0x1e>
 801b242:	2302      	movs	r3, #2
 801b244:	e05a      	b.n	801b2fc <HAL_FLASHEx_Erase+0xd4>
 801b246:	4b2f      	ldr	r3, [pc, #188]	; (801b304 <HAL_FLASHEx_Erase+0xdc>)
 801b248:	2201      	movs	r2, #1
 801b24a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b24c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b250:	f7ff feaa 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b254:	4603      	mov	r3, r0
 801b256:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801b258:	7bfb      	ldrb	r3, [r7, #15]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d14a      	bne.n	801b2f4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	f04f 32ff 	mov.w	r2, #4294967295
 801b264:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	2b01      	cmp	r3, #1
 801b26c:	d117      	bne.n	801b29e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	691b      	ldr	r3, [r3, #16]
 801b272:	b2da      	uxtb	r2, r3
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	685b      	ldr	r3, [r3, #4]
 801b278:	4619      	mov	r1, r3
 801b27a:	4610      	mov	r0, r2
 801b27c:	f000 f8a4 	bl	801b3c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b280:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b284:	f7ff fe90 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b288:	4603      	mov	r3, r0
 801b28a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801b28c:	4b1e      	ldr	r3, [pc, #120]	; (801b308 <HAL_FLASHEx_Erase+0xe0>)
 801b28e:	691b      	ldr	r3, [r3, #16]
 801b290:	4a1d      	ldr	r2, [pc, #116]	; (801b308 <HAL_FLASHEx_Erase+0xe0>)
 801b292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b296:	f023 0304 	bic.w	r3, r3, #4
 801b29a:	6113      	str	r3, [r2, #16]
 801b29c:	e028      	b.n	801b2f0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	689b      	ldr	r3, [r3, #8]
 801b2a2:	60bb      	str	r3, [r7, #8]
 801b2a4:	e01c      	b.n	801b2e0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	691b      	ldr	r3, [r3, #16]
 801b2aa:	b2db      	uxtb	r3, r3
 801b2ac:	4619      	mov	r1, r3
 801b2ae:	68b8      	ldr	r0, [r7, #8]
 801b2b0:	f000 f8c4 	bl	801b43c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b2b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b2b8:	f7ff fe76 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801b2c0:	4b11      	ldr	r3, [pc, #68]	; (801b308 <HAL_FLASHEx_Erase+0xe0>)
 801b2c2:	691b      	ldr	r3, [r3, #16]
 801b2c4:	4a10      	ldr	r2, [pc, #64]	; (801b308 <HAL_FLASHEx_Erase+0xe0>)
 801b2c6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801b2ca:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801b2cc:	7bfb      	ldrb	r3, [r7, #15]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d003      	beq.n	801b2da <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	68ba      	ldr	r2, [r7, #8]
 801b2d6:	601a      	str	r2, [r3, #0]
          break;
 801b2d8:	e00a      	b.n	801b2f0 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	3301      	adds	r3, #1
 801b2de:	60bb      	str	r3, [r7, #8]
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	68da      	ldr	r2, [r3, #12]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	689b      	ldr	r3, [r3, #8]
 801b2e8:	4413      	add	r3, r2
 801b2ea:	68ba      	ldr	r2, [r7, #8]
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	d3da      	bcc.n	801b2a6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 801b2f0:	f000 f9b0 	bl	801b654 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b2f4:	4b03      	ldr	r3, [pc, #12]	; (801b304 <HAL_FLASHEx_Erase+0xdc>)
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	761a      	strb	r2, [r3, #24]

  return status;
 801b2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	3710      	adds	r7, #16
 801b300:	46bd      	mov	sp, r7
 801b302:	bd80      	pop	{r7, pc}
 801b304:	2000aa44 	.word	0x2000aa44
 801b308:	40023c00 	.word	0x40023c00

0801b30c <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b084      	sub	sp, #16
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b314:	2301      	movs	r3, #1
 801b316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if(((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	f003 0301 	and.w	r3, r3, #1
 801b320:	2b00      	cmp	r3, #0
 801b322:	d01e      	beq.n	801b362 <HAL_FLASHEx_AdvOBProgram+0x56>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	685b      	ldr	r3, [r3, #4]
 801b328:	2b01      	cmp	r3, #1
 801b32a:	d10d      	bne.n	801b348 <HAL_FLASHEx_AdvOBProgram+0x3c>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	899b      	ldrh	r3, [r3, #12]
 801b330:	4618      	mov	r0, r3
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	89db      	ldrh	r3, [r3, #14]
 801b336:	4619      	mov	r1, r3
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	689b      	ldr	r3, [r3, #8]
 801b33c:	461a      	mov	r2, r3
 801b33e:	f000 f8f3 	bl	801b528 <FLASH_OB_EnablePCROP>
 801b342:	4603      	mov	r3, r0
 801b344:	73fb      	strb	r3, [r7, #15]
 801b346:	e00c      	b.n	801b362 <HAL_FLASHEx_AdvOBProgram+0x56>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
#else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	899b      	ldrh	r3, [r3, #12]
 801b34c:	4618      	mov	r0, r3
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	89db      	ldrh	r3, [r3, #14]
 801b352:	4619      	mov	r1, r3
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	689b      	ldr	r3, [r3, #8]
 801b358:	461a      	mov	r2, r3
 801b35a:	f000 f92d 	bl	801b5b8 <FLASH_OB_DisablePCROP>
 801b35e:	4603      	mov	r3, r0
 801b360:	73fb      	strb	r3, [r7, #15]
    }
  }
   
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  /*Program BOOT config option byte*/
  if(((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	f003 0302 	and.w	r3, r3, #2
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d006      	beq.n	801b37c <HAL_FLASHEx_AdvOBProgram+0x70>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	7c1b      	ldrb	r3, [r3, #16]
 801b372:	4618      	mov	r0, r3
 801b374:	f000 f8b0 	bl	801b4d8 <FLASH_OB_BootConfig>
 801b378:	4603      	mov	r3, r0
 801b37a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
 801b37c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b37e:	4618      	mov	r0, r3
 801b380:	3710      	adds	r7, #16
 801b382:	46bd      	mov	sp, r7
 801b384:	bd80      	pop	{r7, pc}
	...

0801b388 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 801b388:	b480      	push	{r7}
 801b38a:	b083      	sub	sp, #12
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
  /*Get Sector for Bank1*/
  pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 801b390:	4b0a      	ldr	r3, [pc, #40]	; (801b3bc <HAL_FLASHEx_AdvOBGetConfig+0x34>)
 801b392:	881b      	ldrh	r3, [r3, #0]
 801b394:	b29a      	uxth	r2, r3
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	819a      	strh	r2, [r3, #12]

  /*Get Sector for Bank2*/
  pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 801b39a:	4b09      	ldr	r3, [pc, #36]	; (801b3c0 <HAL_FLASHEx_AdvOBGetConfig+0x38>)
 801b39c:	881b      	ldrh	r3, [r3, #0]
 801b39e:	b29a      	uxth	r2, r3
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	81da      	strh	r2, [r3, #14]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 801b3a4:	4b07      	ldr	r3, [pc, #28]	; (801b3c4 <HAL_FLASHEx_AdvOBGetConfig+0x3c>)
 801b3a6:	781b      	ldrb	r3, [r3, #0]
 801b3a8:	b2da      	uxtb	r2, r3
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	741a      	strb	r2, [r3, #16]
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
 801b3ae:	bf00      	nop
 801b3b0:	370c      	adds	r7, #12
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b8:	4770      	bx	lr
 801b3ba:	bf00      	nop
 801b3bc:	40023c16 	.word	0x40023c16
 801b3c0:	40023c1a 	.word	0x40023c1a
 801b3c4:	40023c14 	.word	0x40023c14

0801b3c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801b3c8:	b480      	push	{r7}
 801b3ca:	b083      	sub	sp, #12
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	6039      	str	r1, [r7, #0]
 801b3d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b3d4:	4b18      	ldr	r3, [pc, #96]	; (801b438 <FLASH_MassErase+0x70>)
 801b3d6:	691b      	ldr	r3, [r3, #16]
 801b3d8:	4a17      	ldr	r2, [pc, #92]	; (801b438 <FLASH_MassErase+0x70>)
 801b3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3de:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	2b03      	cmp	r3, #3
 801b3e4:	d108      	bne.n	801b3f8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 801b3e6:	4b14      	ldr	r3, [pc, #80]	; (801b438 <FLASH_MassErase+0x70>)
 801b3e8:	691b      	ldr	r3, [r3, #16]
 801b3ea:	4a13      	ldr	r2, [pc, #76]	; (801b438 <FLASH_MassErase+0x70>)
 801b3ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b3f0:	f043 0304 	orr.w	r3, r3, #4
 801b3f4:	6113      	str	r3, [r2, #16]
 801b3f6:	e00f      	b.n	801b418 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 801b3f8:	683b      	ldr	r3, [r7, #0]
 801b3fa:	2b01      	cmp	r3, #1
 801b3fc:	d106      	bne.n	801b40c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 801b3fe:	4b0e      	ldr	r3, [pc, #56]	; (801b438 <FLASH_MassErase+0x70>)
 801b400:	691b      	ldr	r3, [r3, #16]
 801b402:	4a0d      	ldr	r2, [pc, #52]	; (801b438 <FLASH_MassErase+0x70>)
 801b404:	f043 0304 	orr.w	r3, r3, #4
 801b408:	6113      	str	r3, [r2, #16]
 801b40a:	e005      	b.n	801b418 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 801b40c:	4b0a      	ldr	r3, [pc, #40]	; (801b438 <FLASH_MassErase+0x70>)
 801b40e:	691b      	ldr	r3, [r3, #16]
 801b410:	4a09      	ldr	r2, [pc, #36]	; (801b438 <FLASH_MassErase+0x70>)
 801b412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b416:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801b418:	4b07      	ldr	r3, [pc, #28]	; (801b438 <FLASH_MassErase+0x70>)
 801b41a:	691a      	ldr	r2, [r3, #16]
 801b41c:	79fb      	ldrb	r3, [r7, #7]
 801b41e:	021b      	lsls	r3, r3, #8
 801b420:	4313      	orrs	r3, r2
 801b422:	4a05      	ldr	r2, [pc, #20]	; (801b438 <FLASH_MassErase+0x70>)
 801b424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b428:	6113      	str	r3, [r2, #16]
}
 801b42a:	bf00      	nop
 801b42c:	370c      	adds	r7, #12
 801b42e:	46bd      	mov	sp, r7
 801b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b434:	4770      	bx	lr
 801b436:	bf00      	nop
 801b438:	40023c00 	.word	0x40023c00

0801b43c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801b43c:	b480      	push	{r7}
 801b43e:	b085      	sub	sp, #20
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
 801b444:	460b      	mov	r3, r1
 801b446:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801b448:	2300      	movs	r3, #0
 801b44a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801b44c:	78fb      	ldrb	r3, [r7, #3]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d102      	bne.n	801b458 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801b452:	2300      	movs	r3, #0
 801b454:	60fb      	str	r3, [r7, #12]
 801b456:	e010      	b.n	801b47a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801b458:	78fb      	ldrb	r3, [r7, #3]
 801b45a:	2b01      	cmp	r3, #1
 801b45c:	d103      	bne.n	801b466 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801b45e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b462:	60fb      	str	r3, [r7, #12]
 801b464:	e009      	b.n	801b47a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801b466:	78fb      	ldrb	r3, [r7, #3]
 801b468:	2b02      	cmp	r3, #2
 801b46a:	d103      	bne.n	801b474 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801b46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b470:	60fb      	str	r3, [r7, #12]
 801b472:	e002      	b.n	801b47a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801b474:	f44f 7340 	mov.w	r3, #768	; 0x300
 801b478:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	2b0b      	cmp	r3, #11
 801b47e:	d902      	bls.n	801b486 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	3304      	adds	r3, #4
 801b484:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801b486:	4b13      	ldr	r3, [pc, #76]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b488:	691b      	ldr	r3, [r3, #16]
 801b48a:	4a12      	ldr	r2, [pc, #72]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b48c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801b492:	4b10      	ldr	r3, [pc, #64]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b494:	691a      	ldr	r2, [r3, #16]
 801b496:	490f      	ldr	r1, [pc, #60]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	4313      	orrs	r3, r2
 801b49c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801b49e:	4b0d      	ldr	r3, [pc, #52]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4a0:	691b      	ldr	r3, [r3, #16]
 801b4a2:	4a0c      	ldr	r2, [pc, #48]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801b4a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801b4aa:	4b0a      	ldr	r3, [pc, #40]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4ac:	691a      	ldr	r2, [r3, #16]
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	00db      	lsls	r3, r3, #3
 801b4b2:	4313      	orrs	r3, r2
 801b4b4:	4a07      	ldr	r2, [pc, #28]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4b6:	f043 0302 	orr.w	r3, r3, #2
 801b4ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801b4bc:	4b05      	ldr	r3, [pc, #20]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4be:	691b      	ldr	r3, [r3, #16]
 801b4c0:	4a04      	ldr	r2, [pc, #16]	; (801b4d4 <FLASH_Erase_Sector+0x98>)
 801b4c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b4c6:	6113      	str	r3, [r2, #16]
}
 801b4c8:	bf00      	nop
 801b4ca:	3714      	adds	r7, #20
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d2:	4770      	bx	lr
 801b4d4:	40023c00 	.word	0x40023c00

0801b4d8 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b084      	sub	sp, #16
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	4603      	mov	r3, r0
 801b4e0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT(BootConfig));

  /* Wait for last operation to be completed */  
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b4e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b4ea:	f7ff fd5d 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801b4f2:	7bfb      	ldrb	r3, [r7, #15]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d10f      	bne.n	801b518 <FLASH_OB_BootConfig+0x40>
  { 
    /* Set Dual Bank Boot */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 801b4f8:	4b0a      	ldr	r3, [pc, #40]	; (801b524 <FLASH_OB_BootConfig+0x4c>)
 801b4fa:	781b      	ldrb	r3, [r3, #0]
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	4a09      	ldr	r2, [pc, #36]	; (801b524 <FLASH_OB_BootConfig+0x4c>)
 801b500:	f023 0310 	bic.w	r3, r3, #16
 801b504:	b2db      	uxtb	r3, r3
 801b506:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 801b508:	4b06      	ldr	r3, [pc, #24]	; (801b524 <FLASH_OB_BootConfig+0x4c>)
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	b2da      	uxtb	r2, r3
 801b50e:	4905      	ldr	r1, [pc, #20]	; (801b524 <FLASH_OB_BootConfig+0x4c>)
 801b510:	79fb      	ldrb	r3, [r7, #7]
 801b512:	4313      	orrs	r3, r2
 801b514:	b2db      	uxtb	r3, r3
 801b516:	700b      	strb	r3, [r1, #0]
  }
  
  return status;
 801b518:	7bfb      	ldrb	r3, [r7, #15]
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	3710      	adds	r7, #16
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}
 801b522:	bf00      	nop
 801b524:	40023c14 	.word	0x40023c14

0801b528 <FLASH_OB_EnablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status  
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b086      	sub	sp, #24
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	60f8      	str	r0, [r7, #12]
 801b530:	60b9      	str	r1, [r7, #8]
 801b532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b534:	2300      	movs	r3, #0
 801b536:	75fb      	strb	r3, [r7, #23]
  
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b538:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b53c:	f7ff fd34 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b540:	4603      	mov	r3, r0
 801b542:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 801b544:	7dfb      	ldrb	r3, [r7, #23]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d12d      	bne.n	801b5a6 <FLASH_OB_EnablePCROP+0x7e>
  {
    if((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	2b01      	cmp	r3, #1
 801b54e:	d002      	beq.n	801b556 <FLASH_OB_EnablePCROP+0x2e>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	2b03      	cmp	r3, #3
 801b554:	d109      	bne.n	801b56a <FLASH_OB_EnablePCROP+0x42>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1; 
 801b556:	4b16      	ldr	r3, [pc, #88]	; (801b5b0 <FLASH_OB_EnablePCROP+0x88>)
 801b558:	881b      	ldrh	r3, [r3, #0]
 801b55a:	b29a      	uxth	r2, r3
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	b29b      	uxth	r3, r3
 801b560:	4913      	ldr	r1, [pc, #76]	; (801b5b0 <FLASH_OB_EnablePCROP+0x88>)
 801b562:	4313      	orrs	r3, r2
 801b564:	b29b      	uxth	r3, r3
 801b566:	800b      	strh	r3, [r1, #0]
 801b568:	e008      	b.n	801b57c <FLASH_OB_EnablePCROP+0x54>
    }
    else 
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
 801b56a:	4b12      	ldr	r3, [pc, #72]	; (801b5b4 <FLASH_OB_EnablePCROP+0x8c>)
 801b56c:	881b      	ldrh	r3, [r3, #0]
 801b56e:	b29a      	uxth	r2, r3
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	b29b      	uxth	r3, r3
 801b574:	490f      	ldr	r1, [pc, #60]	; (801b5b4 <FLASH_OB_EnablePCROP+0x8c>)
 801b576:	4313      	orrs	r3, r2
 801b578:	b29b      	uxth	r3, r3
 801b57a:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if(Banks == FLASH_BANK_BOTH)
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	2b03      	cmp	r3, #3
 801b580:	d111      	bne.n	801b5a6 <FLASH_OB_EnablePCROP+0x7e>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b582:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b586:	f7ff fd0f 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b58a:	4603      	mov	r3, r0
 801b58c:	75fb      	strb	r3, [r7, #23]
      
      if(status == HAL_OK)
 801b58e:	7dfb      	ldrb	r3, [r7, #23]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d108      	bne.n	801b5a6 <FLASH_OB_EnablePCROP+0x7e>
      { 
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
 801b594:	4b07      	ldr	r3, [pc, #28]	; (801b5b4 <FLASH_OB_EnablePCROP+0x8c>)
 801b596:	881b      	ldrh	r3, [r3, #0]
 801b598:	b29a      	uxth	r2, r3
 801b59a:	68bb      	ldr	r3, [r7, #8]
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	4905      	ldr	r1, [pc, #20]	; (801b5b4 <FLASH_OB_EnablePCROP+0x8c>)
 801b5a0:	4313      	orrs	r3, r2
 801b5a2:	b29b      	uxth	r3, r3
 801b5a4:	800b      	strh	r3, [r1, #0]
      }
    }
    
  }

  return status;
 801b5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	3718      	adds	r7, #24
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}
 801b5b0:	40023c16 	.word	0x40023c16
 801b5b4:	40023c1a 	.word	0x40023c1a

0801b5b8 <FLASH_OB_DisablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status  
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{  
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b086      	sub	sp, #24
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	60f8      	str	r0, [r7, #12]
 801b5c0:	60b9      	str	r1, [r7, #8]
 801b5c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5c4:	2300      	movs	r3, #0
 801b5c6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b5c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b5cc:	f7ff fcec 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 801b5d4:	7dfb      	ldrb	r3, [r7, #23]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d133      	bne.n	801b642 <FLASH_OB_DisablePCROP+0x8a>
  {
    if((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	2b01      	cmp	r3, #1
 801b5de:	d002      	beq.n	801b5e6 <FLASH_OB_DisablePCROP+0x2e>
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	2b03      	cmp	r3, #3
 801b5e4:	d10b      	bne.n	801b5fe <FLASH_OB_DisablePCROP+0x46>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~SectorBank1); 
 801b5e6:	4b19      	ldr	r3, [pc, #100]	; (801b64c <FLASH_OB_DisablePCROP+0x94>)
 801b5e8:	881b      	ldrh	r3, [r3, #0]
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	43db      	mvns	r3, r3
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	4915      	ldr	r1, [pc, #84]	; (801b64c <FLASH_OB_DisablePCROP+0x94>)
 801b5f6:	4013      	ands	r3, r2
 801b5f8:	b29b      	uxth	r3, r3
 801b5fa:	800b      	strh	r3, [r1, #0]
 801b5fc:	e00a      	b.n	801b614 <FLASH_OB_DisablePCROP+0x5c>
    }
    else 
    {
      /*Write protection done on sectors of BANK2*/
      assert_param(IS_OB_PCROP(SectorBank2));
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 801b5fe:	4b14      	ldr	r3, [pc, #80]	; (801b650 <FLASH_OB_DisablePCROP+0x98>)
 801b600:	881b      	ldrh	r3, [r3, #0]
 801b602:	b29a      	uxth	r2, r3
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	b29b      	uxth	r3, r3
 801b608:	43db      	mvns	r3, r3
 801b60a:	b29b      	uxth	r3, r3
 801b60c:	4910      	ldr	r1, [pc, #64]	; (801b650 <FLASH_OB_DisablePCROP+0x98>)
 801b60e:	4013      	ands	r3, r2
 801b610:	b29b      	uxth	r3, r3
 801b612:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if(Banks == FLASH_BANK_BOTH)
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	2b03      	cmp	r3, #3
 801b618:	d113      	bne.n	801b642 <FLASH_OB_DisablePCROP+0x8a>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
     /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b61a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b61e:	f7ff fcc3 	bl	801afa8 <FLASH_WaitForLastOperation>
 801b622:	4603      	mov	r3, r0
 801b624:	75fb      	strb	r3, [r7, #23]
      
      if(status == HAL_OK)
 801b626:	7dfb      	ldrb	r3, [r7, #23]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d10a      	bne.n	801b642 <FLASH_OB_DisablePCROP+0x8a>
      { 
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 801b62c:	4b08      	ldr	r3, [pc, #32]	; (801b650 <FLASH_OB_DisablePCROP+0x98>)
 801b62e:	881b      	ldrh	r3, [r3, #0]
 801b630:	b29a      	uxth	r2, r3
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	b29b      	uxth	r3, r3
 801b636:	43db      	mvns	r3, r3
 801b638:	b29b      	uxth	r3, r3
 801b63a:	4905      	ldr	r1, [pc, #20]	; (801b650 <FLASH_OB_DisablePCROP+0x98>)
 801b63c:	4013      	ands	r3, r2
 801b63e:	b29b      	uxth	r3, r3
 801b640:	800b      	strh	r3, [r1, #0]
      }
    }
    
  }
  
  return status;
 801b642:	7dfb      	ldrb	r3, [r7, #23]

}
 801b644:	4618      	mov	r0, r3
 801b646:	3718      	adds	r7, #24
 801b648:	46bd      	mov	sp, r7
 801b64a:	bd80      	pop	{r7, pc}
 801b64c:	40023c16 	.word	0x40023c16
 801b650:	40023c1a 	.word	0x40023c1a

0801b654 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801b654:	b480      	push	{r7}
 801b656:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801b658:	4b20      	ldr	r3, [pc, #128]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b660:	2b00      	cmp	r3, #0
 801b662:	d017      	beq.n	801b694 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801b664:	4b1d      	ldr	r3, [pc, #116]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	4a1c      	ldr	r2, [pc, #112]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b66a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b66e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801b670:	4b1a      	ldr	r3, [pc, #104]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	4a19      	ldr	r2, [pc, #100]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b67a:	6013      	str	r3, [r2, #0]
 801b67c:	4b17      	ldr	r3, [pc, #92]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	4a16      	ldr	r2, [pc, #88]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b686:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801b688:	4b14      	ldr	r3, [pc, #80]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	4a13      	ldr	r2, [pc, #76]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b68e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b692:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801b694:	4b11      	ldr	r3, [pc, #68]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d017      	beq.n	801b6d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801b6a0:	4b0e      	ldr	r3, [pc, #56]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	4a0d      	ldr	r2, [pc, #52]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801b6ac:	4b0b      	ldr	r3, [pc, #44]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	4a0a      	ldr	r2, [pc, #40]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b6b6:	6013      	str	r3, [r2, #0]
 801b6b8:	4b08      	ldr	r3, [pc, #32]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	4a07      	ldr	r2, [pc, #28]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b6c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801b6c4:	4b05      	ldr	r3, [pc, #20]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4a04      	ldr	r2, [pc, #16]	; (801b6dc <FLASH_FlushCaches+0x88>)
 801b6ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b6ce:	6013      	str	r3, [r2, #0]
  }
}
 801b6d0:	bf00      	nop
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d8:	4770      	bx	lr
 801b6da:	bf00      	nop
 801b6dc:	40023c00 	.word	0x40023c00

0801b6e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b6e0:	b480      	push	{r7}
 801b6e2:	b089      	sub	sp, #36	; 0x24
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
 801b6e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801b6ee:	2300      	movs	r3, #0
 801b6f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	61fb      	str	r3, [r7, #28]
 801b6fa:	e177      	b.n	801b9ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801b6fc:	2201      	movs	r2, #1
 801b6fe:	69fb      	ldr	r3, [r7, #28]
 801b700:	fa02 f303 	lsl.w	r3, r2, r3
 801b704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	697a      	ldr	r2, [r7, #20]
 801b70c:	4013      	ands	r3, r2
 801b70e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801b710:	693a      	ldr	r2, [r7, #16]
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	429a      	cmp	r2, r3
 801b716:	f040 8166 	bne.w	801b9e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801b71a:	683b      	ldr	r3, [r7, #0]
 801b71c:	685b      	ldr	r3, [r3, #4]
 801b71e:	2b01      	cmp	r3, #1
 801b720:	d00b      	beq.n	801b73a <HAL_GPIO_Init+0x5a>
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	685b      	ldr	r3, [r3, #4]
 801b726:	2b02      	cmp	r3, #2
 801b728:	d007      	beq.n	801b73a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801b72e:	2b11      	cmp	r3, #17
 801b730:	d003      	beq.n	801b73a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b732:	683b      	ldr	r3, [r7, #0]
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	2b12      	cmp	r3, #18
 801b738:	d130      	bne.n	801b79c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	689b      	ldr	r3, [r3, #8]
 801b73e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801b740:	69fb      	ldr	r3, [r7, #28]
 801b742:	005b      	lsls	r3, r3, #1
 801b744:	2203      	movs	r2, #3
 801b746:	fa02 f303 	lsl.w	r3, r2, r3
 801b74a:	43db      	mvns	r3, r3
 801b74c:	69ba      	ldr	r2, [r7, #24]
 801b74e:	4013      	ands	r3, r2
 801b750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	68da      	ldr	r2, [r3, #12]
 801b756:	69fb      	ldr	r3, [r7, #28]
 801b758:	005b      	lsls	r3, r3, #1
 801b75a:	fa02 f303 	lsl.w	r3, r2, r3
 801b75e:	69ba      	ldr	r2, [r7, #24]
 801b760:	4313      	orrs	r3, r2
 801b762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	69ba      	ldr	r2, [r7, #24]
 801b768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	685b      	ldr	r3, [r3, #4]
 801b76e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801b770:	2201      	movs	r2, #1
 801b772:	69fb      	ldr	r3, [r7, #28]
 801b774:	fa02 f303 	lsl.w	r3, r2, r3
 801b778:	43db      	mvns	r3, r3
 801b77a:	69ba      	ldr	r2, [r7, #24]
 801b77c:	4013      	ands	r3, r2
 801b77e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	091b      	lsrs	r3, r3, #4
 801b786:	f003 0201 	and.w	r2, r3, #1
 801b78a:	69fb      	ldr	r3, [r7, #28]
 801b78c:	fa02 f303 	lsl.w	r3, r2, r3
 801b790:	69ba      	ldr	r2, [r7, #24]
 801b792:	4313      	orrs	r3, r2
 801b794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	69ba      	ldr	r2, [r7, #24]
 801b79a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	68db      	ldr	r3, [r3, #12]
 801b7a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801b7a2:	69fb      	ldr	r3, [r7, #28]
 801b7a4:	005b      	lsls	r3, r3, #1
 801b7a6:	2203      	movs	r2, #3
 801b7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ac:	43db      	mvns	r3, r3
 801b7ae:	69ba      	ldr	r2, [r7, #24]
 801b7b0:	4013      	ands	r3, r2
 801b7b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b7b4:	683b      	ldr	r3, [r7, #0]
 801b7b6:	689a      	ldr	r2, [r3, #8]
 801b7b8:	69fb      	ldr	r3, [r7, #28]
 801b7ba:	005b      	lsls	r3, r3, #1
 801b7bc:	fa02 f303 	lsl.w	r3, r2, r3
 801b7c0:	69ba      	ldr	r2, [r7, #24]
 801b7c2:	4313      	orrs	r3, r2
 801b7c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	69ba      	ldr	r2, [r7, #24]
 801b7ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	685b      	ldr	r3, [r3, #4]
 801b7d0:	2b02      	cmp	r3, #2
 801b7d2:	d003      	beq.n	801b7dc <HAL_GPIO_Init+0xfc>
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	685b      	ldr	r3, [r3, #4]
 801b7d8:	2b12      	cmp	r3, #18
 801b7da:	d123      	bne.n	801b824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b7dc:	69fb      	ldr	r3, [r7, #28]
 801b7de:	08da      	lsrs	r2, r3, #3
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	3208      	adds	r2, #8
 801b7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b7e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801b7ea:	69fb      	ldr	r3, [r7, #28]
 801b7ec:	f003 0307 	and.w	r3, r3, #7
 801b7f0:	009b      	lsls	r3, r3, #2
 801b7f2:	220f      	movs	r2, #15
 801b7f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b7f8:	43db      	mvns	r3, r3
 801b7fa:	69ba      	ldr	r2, [r7, #24]
 801b7fc:	4013      	ands	r3, r2
 801b7fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	691a      	ldr	r2, [r3, #16]
 801b804:	69fb      	ldr	r3, [r7, #28]
 801b806:	f003 0307 	and.w	r3, r3, #7
 801b80a:	009b      	lsls	r3, r3, #2
 801b80c:	fa02 f303 	lsl.w	r3, r2, r3
 801b810:	69ba      	ldr	r2, [r7, #24]
 801b812:	4313      	orrs	r3, r2
 801b814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b816:	69fb      	ldr	r3, [r7, #28]
 801b818:	08da      	lsrs	r2, r3, #3
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	3208      	adds	r2, #8
 801b81e:	69b9      	ldr	r1, [r7, #24]
 801b820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801b82a:	69fb      	ldr	r3, [r7, #28]
 801b82c:	005b      	lsls	r3, r3, #1
 801b82e:	2203      	movs	r2, #3
 801b830:	fa02 f303 	lsl.w	r3, r2, r3
 801b834:	43db      	mvns	r3, r3
 801b836:	69ba      	ldr	r2, [r7, #24]
 801b838:	4013      	ands	r3, r2
 801b83a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b83c:	683b      	ldr	r3, [r7, #0]
 801b83e:	685b      	ldr	r3, [r3, #4]
 801b840:	f003 0203 	and.w	r2, r3, #3
 801b844:	69fb      	ldr	r3, [r7, #28]
 801b846:	005b      	lsls	r3, r3, #1
 801b848:	fa02 f303 	lsl.w	r3, r2, r3
 801b84c:	69ba      	ldr	r2, [r7, #24]
 801b84e:	4313      	orrs	r3, r2
 801b850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	69ba      	ldr	r2, [r7, #24]
 801b856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801b858:	683b      	ldr	r3, [r7, #0]
 801b85a:	685b      	ldr	r3, [r3, #4]
 801b85c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b860:	2b00      	cmp	r3, #0
 801b862:	f000 80c0 	beq.w	801b9e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b866:	2300      	movs	r3, #0
 801b868:	60fb      	str	r3, [r7, #12]
 801b86a:	4b66      	ldr	r3, [pc, #408]	; (801ba04 <HAL_GPIO_Init+0x324>)
 801b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b86e:	4a65      	ldr	r2, [pc, #404]	; (801ba04 <HAL_GPIO_Init+0x324>)
 801b870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b874:	6453      	str	r3, [r2, #68]	; 0x44
 801b876:	4b63      	ldr	r3, [pc, #396]	; (801ba04 <HAL_GPIO_Init+0x324>)
 801b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b87a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b87e:	60fb      	str	r3, [r7, #12]
 801b880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b882:	4a61      	ldr	r2, [pc, #388]	; (801ba08 <HAL_GPIO_Init+0x328>)
 801b884:	69fb      	ldr	r3, [r7, #28]
 801b886:	089b      	lsrs	r3, r3, #2
 801b888:	3302      	adds	r3, #2
 801b88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b88e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	f003 0303 	and.w	r3, r3, #3
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	220f      	movs	r2, #15
 801b89a:	fa02 f303 	lsl.w	r3, r2, r3
 801b89e:	43db      	mvns	r3, r3
 801b8a0:	69ba      	ldr	r2, [r7, #24]
 801b8a2:	4013      	ands	r3, r2
 801b8a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	4a58      	ldr	r2, [pc, #352]	; (801ba0c <HAL_GPIO_Init+0x32c>)
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	d037      	beq.n	801b91e <HAL_GPIO_Init+0x23e>
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	4a57      	ldr	r2, [pc, #348]	; (801ba10 <HAL_GPIO_Init+0x330>)
 801b8b2:	4293      	cmp	r3, r2
 801b8b4:	d031      	beq.n	801b91a <HAL_GPIO_Init+0x23a>
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	4a56      	ldr	r2, [pc, #344]	; (801ba14 <HAL_GPIO_Init+0x334>)
 801b8ba:	4293      	cmp	r3, r2
 801b8bc:	d02b      	beq.n	801b916 <HAL_GPIO_Init+0x236>
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	4a55      	ldr	r2, [pc, #340]	; (801ba18 <HAL_GPIO_Init+0x338>)
 801b8c2:	4293      	cmp	r3, r2
 801b8c4:	d025      	beq.n	801b912 <HAL_GPIO_Init+0x232>
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	4a54      	ldr	r2, [pc, #336]	; (801ba1c <HAL_GPIO_Init+0x33c>)
 801b8ca:	4293      	cmp	r3, r2
 801b8cc:	d01f      	beq.n	801b90e <HAL_GPIO_Init+0x22e>
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	4a53      	ldr	r2, [pc, #332]	; (801ba20 <HAL_GPIO_Init+0x340>)
 801b8d2:	4293      	cmp	r3, r2
 801b8d4:	d019      	beq.n	801b90a <HAL_GPIO_Init+0x22a>
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	4a52      	ldr	r2, [pc, #328]	; (801ba24 <HAL_GPIO_Init+0x344>)
 801b8da:	4293      	cmp	r3, r2
 801b8dc:	d013      	beq.n	801b906 <HAL_GPIO_Init+0x226>
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	4a51      	ldr	r2, [pc, #324]	; (801ba28 <HAL_GPIO_Init+0x348>)
 801b8e2:	4293      	cmp	r3, r2
 801b8e4:	d00d      	beq.n	801b902 <HAL_GPIO_Init+0x222>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	4a50      	ldr	r2, [pc, #320]	; (801ba2c <HAL_GPIO_Init+0x34c>)
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	d007      	beq.n	801b8fe <HAL_GPIO_Init+0x21e>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	4a4f      	ldr	r2, [pc, #316]	; (801ba30 <HAL_GPIO_Init+0x350>)
 801b8f2:	4293      	cmp	r3, r2
 801b8f4:	d101      	bne.n	801b8fa <HAL_GPIO_Init+0x21a>
 801b8f6:	2309      	movs	r3, #9
 801b8f8:	e012      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b8fa:	230a      	movs	r3, #10
 801b8fc:	e010      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b8fe:	2308      	movs	r3, #8
 801b900:	e00e      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b902:	2307      	movs	r3, #7
 801b904:	e00c      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b906:	2306      	movs	r3, #6
 801b908:	e00a      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b90a:	2305      	movs	r3, #5
 801b90c:	e008      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b90e:	2304      	movs	r3, #4
 801b910:	e006      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b912:	2303      	movs	r3, #3
 801b914:	e004      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b916:	2302      	movs	r3, #2
 801b918:	e002      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b91a:	2301      	movs	r3, #1
 801b91c:	e000      	b.n	801b920 <HAL_GPIO_Init+0x240>
 801b91e:	2300      	movs	r3, #0
 801b920:	69fa      	ldr	r2, [r7, #28]
 801b922:	f002 0203 	and.w	r2, r2, #3
 801b926:	0092      	lsls	r2, r2, #2
 801b928:	4093      	lsls	r3, r2
 801b92a:	69ba      	ldr	r2, [r7, #24]
 801b92c:	4313      	orrs	r3, r2
 801b92e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b930:	4935      	ldr	r1, [pc, #212]	; (801ba08 <HAL_GPIO_Init+0x328>)
 801b932:	69fb      	ldr	r3, [r7, #28]
 801b934:	089b      	lsrs	r3, r3, #2
 801b936:	3302      	adds	r3, #2
 801b938:	69ba      	ldr	r2, [r7, #24]
 801b93a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801b93e:	4b3d      	ldr	r3, [pc, #244]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b944:	693b      	ldr	r3, [r7, #16]
 801b946:	43db      	mvns	r3, r3
 801b948:	69ba      	ldr	r2, [r7, #24]
 801b94a:	4013      	ands	r3, r2
 801b94c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	685b      	ldr	r3, [r3, #4]
 801b952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b956:	2b00      	cmp	r3, #0
 801b958:	d003      	beq.n	801b962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801b95a:	69ba      	ldr	r2, [r7, #24]
 801b95c:	693b      	ldr	r3, [r7, #16]
 801b95e:	4313      	orrs	r3, r2
 801b960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801b962:	4a34      	ldr	r2, [pc, #208]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b964:	69bb      	ldr	r3, [r7, #24]
 801b966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801b968:	4b32      	ldr	r3, [pc, #200]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b96a:	685b      	ldr	r3, [r3, #4]
 801b96c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	43db      	mvns	r3, r3
 801b972:	69ba      	ldr	r2, [r7, #24]
 801b974:	4013      	ands	r3, r2
 801b976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b980:	2b00      	cmp	r3, #0
 801b982:	d003      	beq.n	801b98c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801b984:	69ba      	ldr	r2, [r7, #24]
 801b986:	693b      	ldr	r3, [r7, #16]
 801b988:	4313      	orrs	r3, r2
 801b98a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801b98c:	4a29      	ldr	r2, [pc, #164]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b98e:	69bb      	ldr	r3, [r7, #24]
 801b990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801b992:	4b28      	ldr	r3, [pc, #160]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b994:	689b      	ldr	r3, [r3, #8]
 801b996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b998:	693b      	ldr	r3, [r7, #16]
 801b99a:	43db      	mvns	r3, r3
 801b99c:	69ba      	ldr	r2, [r7, #24]
 801b99e:	4013      	ands	r3, r2
 801b9a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801b9a2:	683b      	ldr	r3, [r7, #0]
 801b9a4:	685b      	ldr	r3, [r3, #4]
 801b9a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d003      	beq.n	801b9b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801b9ae:	69ba      	ldr	r2, [r7, #24]
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	4313      	orrs	r3, r2
 801b9b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801b9b6:	4a1f      	ldr	r2, [pc, #124]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b9b8:	69bb      	ldr	r3, [r7, #24]
 801b9ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801b9bc:	4b1d      	ldr	r3, [pc, #116]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b9c2:	693b      	ldr	r3, [r7, #16]
 801b9c4:	43db      	mvns	r3, r3
 801b9c6:	69ba      	ldr	r2, [r7, #24]
 801b9c8:	4013      	ands	r3, r2
 801b9ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801b9cc:	683b      	ldr	r3, [r7, #0]
 801b9ce:	685b      	ldr	r3, [r3, #4]
 801b9d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d003      	beq.n	801b9e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801b9d8:	69ba      	ldr	r2, [r7, #24]
 801b9da:	693b      	ldr	r3, [r7, #16]
 801b9dc:	4313      	orrs	r3, r2
 801b9de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801b9e0:	4a14      	ldr	r2, [pc, #80]	; (801ba34 <HAL_GPIO_Init+0x354>)
 801b9e2:	69bb      	ldr	r3, [r7, #24]
 801b9e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801b9e6:	69fb      	ldr	r3, [r7, #28]
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	61fb      	str	r3, [r7, #28]
 801b9ec:	69fb      	ldr	r3, [r7, #28]
 801b9ee:	2b0f      	cmp	r3, #15
 801b9f0:	f67f ae84 	bls.w	801b6fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801b9f4:	bf00      	nop
 801b9f6:	bf00      	nop
 801b9f8:	3724      	adds	r7, #36	; 0x24
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba00:	4770      	bx	lr
 801ba02:	bf00      	nop
 801ba04:	40023800 	.word	0x40023800
 801ba08:	40013800 	.word	0x40013800
 801ba0c:	40020000 	.word	0x40020000
 801ba10:	40020400 	.word	0x40020400
 801ba14:	40020800 	.word	0x40020800
 801ba18:	40020c00 	.word	0x40020c00
 801ba1c:	40021000 	.word	0x40021000
 801ba20:	40021400 	.word	0x40021400
 801ba24:	40021800 	.word	0x40021800
 801ba28:	40021c00 	.word	0x40021c00
 801ba2c:	40022000 	.word	0x40022000
 801ba30:	40022400 	.word	0x40022400
 801ba34:	40013c00 	.word	0x40013c00

0801ba38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ba38:	b480      	push	{r7}
 801ba3a:	b083      	sub	sp, #12
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	460b      	mov	r3, r1
 801ba42:	807b      	strh	r3, [r7, #2]
 801ba44:	4613      	mov	r3, r2
 801ba46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801ba48:	787b      	ldrb	r3, [r7, #1]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d003      	beq.n	801ba56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ba4e:	887a      	ldrh	r2, [r7, #2]
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801ba54:	e003      	b.n	801ba5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801ba56:	887b      	ldrh	r3, [r7, #2]
 801ba58:	041a      	lsls	r2, r3, #16
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	619a      	str	r2, [r3, #24]
}
 801ba5e:	bf00      	nop
 801ba60:	370c      	adds	r7, #12
 801ba62:	46bd      	mov	sp, r7
 801ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba68:	4770      	bx	lr
	...

0801ba6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801ba6c:	b580      	push	{r7, lr}
 801ba6e:	b082      	sub	sp, #8
 801ba70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801ba72:	2300      	movs	r3, #0
 801ba74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801ba76:	2300      	movs	r3, #0
 801ba78:	603b      	str	r3, [r7, #0]
 801ba7a:	4b20      	ldr	r3, [pc, #128]	; (801bafc <HAL_PWREx_EnableOverDrive+0x90>)
 801ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba7e:	4a1f      	ldr	r2, [pc, #124]	; (801bafc <HAL_PWREx_EnableOverDrive+0x90>)
 801ba80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba84:	6413      	str	r3, [r2, #64]	; 0x40
 801ba86:	4b1d      	ldr	r3, [pc, #116]	; (801bafc <HAL_PWREx_EnableOverDrive+0x90>)
 801ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba8e:	603b      	str	r3, [r7, #0]
 801ba90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801ba92:	4b1b      	ldr	r3, [pc, #108]	; (801bb00 <HAL_PWREx_EnableOverDrive+0x94>)
 801ba94:	2201      	movs	r2, #1
 801ba96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ba98:	f7ff f888 	bl	801abac <HAL_GetTick>
 801ba9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801ba9e:	e009      	b.n	801bab4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801baa0:	f7ff f884 	bl	801abac <HAL_GetTick>
 801baa4:	4602      	mov	r2, r0
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	1ad3      	subs	r3, r2, r3
 801baaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801baae:	d901      	bls.n	801bab4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801bab0:	2303      	movs	r3, #3
 801bab2:	e01f      	b.n	801baf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801bab4:	4b13      	ldr	r3, [pc, #76]	; (801bb04 <HAL_PWREx_EnableOverDrive+0x98>)
 801bab6:	685b      	ldr	r3, [r3, #4]
 801bab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801babc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bac0:	d1ee      	bne.n	801baa0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801bac2:	4b11      	ldr	r3, [pc, #68]	; (801bb08 <HAL_PWREx_EnableOverDrive+0x9c>)
 801bac4:	2201      	movs	r2, #1
 801bac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bac8:	f7ff f870 	bl	801abac <HAL_GetTick>
 801bacc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801bace:	e009      	b.n	801bae4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801bad0:	f7ff f86c 	bl	801abac <HAL_GetTick>
 801bad4:	4602      	mov	r2, r0
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	1ad3      	subs	r3, r2, r3
 801bada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bade:	d901      	bls.n	801bae4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801bae0:	2303      	movs	r3, #3
 801bae2:	e007      	b.n	801baf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801bae4:	4b07      	ldr	r3, [pc, #28]	; (801bb04 <HAL_PWREx_EnableOverDrive+0x98>)
 801bae6:	685b      	ldr	r3, [r3, #4]
 801bae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801baec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801baf0:	d1ee      	bne.n	801bad0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801baf2:	2300      	movs	r3, #0
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	3708      	adds	r7, #8
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	40023800 	.word	0x40023800
 801bb00:	420e0040 	.word	0x420e0040
 801bb04:	40007000 	.word	0x40007000
 801bb08:	420e0044 	.word	0x420e0044

0801bb0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b086      	sub	sp, #24
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d101      	bne.n	801bb1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb1a:	2301      	movs	r3, #1
 801bb1c:	e25b      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	f003 0301 	and.w	r3, r3, #1
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d075      	beq.n	801bc16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801bb2a:	4ba3      	ldr	r3, [pc, #652]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb2c:	689b      	ldr	r3, [r3, #8]
 801bb2e:	f003 030c 	and.w	r3, r3, #12
 801bb32:	2b04      	cmp	r3, #4
 801bb34:	d00c      	beq.n	801bb50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb36:	4ba0      	ldr	r3, [pc, #640]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb38:	689b      	ldr	r3, [r3, #8]
 801bb3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801bb3e:	2b08      	cmp	r3, #8
 801bb40:	d112      	bne.n	801bb68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb42:	4b9d      	ldr	r3, [pc, #628]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb4e:	d10b      	bne.n	801bb68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb50:	4b99      	ldr	r3, [pc, #612]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d05b      	beq.n	801bc14 <HAL_RCC_OscConfig+0x108>
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	685b      	ldr	r3, [r3, #4]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d157      	bne.n	801bc14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801bb64:	2301      	movs	r3, #1
 801bb66:	e236      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	685b      	ldr	r3, [r3, #4]
 801bb6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb70:	d106      	bne.n	801bb80 <HAL_RCC_OscConfig+0x74>
 801bb72:	4b91      	ldr	r3, [pc, #580]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	4a90      	ldr	r2, [pc, #576]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb7c:	6013      	str	r3, [r2, #0]
 801bb7e:	e01d      	b.n	801bbbc <HAL_RCC_OscConfig+0xb0>
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	685b      	ldr	r3, [r3, #4]
 801bb84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bb88:	d10c      	bne.n	801bba4 <HAL_RCC_OscConfig+0x98>
 801bb8a:	4b8b      	ldr	r3, [pc, #556]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	4a8a      	ldr	r2, [pc, #552]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb94:	6013      	str	r3, [r2, #0]
 801bb96:	4b88      	ldr	r3, [pc, #544]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	4a87      	ldr	r2, [pc, #540]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bb9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bba0:	6013      	str	r3, [r2, #0]
 801bba2:	e00b      	b.n	801bbbc <HAL_RCC_OscConfig+0xb0>
 801bba4:	4b84      	ldr	r3, [pc, #528]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	4a83      	ldr	r2, [pc, #524]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bbaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bbae:	6013      	str	r3, [r2, #0]
 801bbb0:	4b81      	ldr	r3, [pc, #516]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	4a80      	ldr	r2, [pc, #512]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bbb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bbba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	685b      	ldr	r3, [r3, #4]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d013      	beq.n	801bbec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bbc4:	f7fe fff2 	bl	801abac <HAL_GetTick>
 801bbc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbca:	e008      	b.n	801bbde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bbcc:	f7fe ffee 	bl	801abac <HAL_GetTick>
 801bbd0:	4602      	mov	r2, r0
 801bbd2:	693b      	ldr	r3, [r7, #16]
 801bbd4:	1ad3      	subs	r3, r2, r3
 801bbd6:	2b64      	cmp	r3, #100	; 0x64
 801bbd8:	d901      	bls.n	801bbde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801bbda:	2303      	movs	r3, #3
 801bbdc:	e1fb      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbde:	4b76      	ldr	r3, [pc, #472]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d0f0      	beq.n	801bbcc <HAL_RCC_OscConfig+0xc0>
 801bbea:	e014      	b.n	801bc16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bbec:	f7fe ffde 	bl	801abac <HAL_GetTick>
 801bbf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bbf2:	e008      	b.n	801bc06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bbf4:	f7fe ffda 	bl	801abac <HAL_GetTick>
 801bbf8:	4602      	mov	r2, r0
 801bbfa:	693b      	ldr	r3, [r7, #16]
 801bbfc:	1ad3      	subs	r3, r2, r3
 801bbfe:	2b64      	cmp	r3, #100	; 0x64
 801bc00:	d901      	bls.n	801bc06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bc02:	2303      	movs	r3, #3
 801bc04:	e1e7      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc06:	4b6c      	ldr	r3, [pc, #432]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d1f0      	bne.n	801bbf4 <HAL_RCC_OscConfig+0xe8>
 801bc12:	e000      	b.n	801bc16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	f003 0302 	and.w	r3, r3, #2
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d063      	beq.n	801bcea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801bc22:	4b65      	ldr	r3, [pc, #404]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc24:	689b      	ldr	r3, [r3, #8]
 801bc26:	f003 030c 	and.w	r3, r3, #12
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d00b      	beq.n	801bc46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc2e:	4b62      	ldr	r3, [pc, #392]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc30:	689b      	ldr	r3, [r3, #8]
 801bc32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801bc36:	2b08      	cmp	r3, #8
 801bc38:	d11c      	bne.n	801bc74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc3a:	4b5f      	ldr	r3, [pc, #380]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc3c:	685b      	ldr	r3, [r3, #4]
 801bc3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d116      	bne.n	801bc74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc46:	4b5c      	ldr	r3, [pc, #368]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	f003 0302 	and.w	r3, r3, #2
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d005      	beq.n	801bc5e <HAL_RCC_OscConfig+0x152>
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	68db      	ldr	r3, [r3, #12]
 801bc56:	2b01      	cmp	r3, #1
 801bc58:	d001      	beq.n	801bc5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	e1bb      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc5e:	4b56      	ldr	r3, [pc, #344]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	691b      	ldr	r3, [r3, #16]
 801bc6a:	00db      	lsls	r3, r3, #3
 801bc6c:	4952      	ldr	r1, [pc, #328]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc6e:	4313      	orrs	r3, r2
 801bc70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc72:	e03a      	b.n	801bcea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	68db      	ldr	r3, [r3, #12]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d020      	beq.n	801bcbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bc7c:	4b4f      	ldr	r3, [pc, #316]	; (801bdbc <HAL_RCC_OscConfig+0x2b0>)
 801bc7e:	2201      	movs	r2, #1
 801bc80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc82:	f7fe ff93 	bl	801abac <HAL_GetTick>
 801bc86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bc88:	e008      	b.n	801bc9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bc8a:	f7fe ff8f 	bl	801abac <HAL_GetTick>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	1ad3      	subs	r3, r2, r3
 801bc94:	2b02      	cmp	r3, #2
 801bc96:	d901      	bls.n	801bc9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801bc98:	2303      	movs	r3, #3
 801bc9a:	e19c      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bc9c:	4b46      	ldr	r3, [pc, #280]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	f003 0302 	and.w	r3, r3, #2
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d0f0      	beq.n	801bc8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bca8:	4b43      	ldr	r3, [pc, #268]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	691b      	ldr	r3, [r3, #16]
 801bcb4:	00db      	lsls	r3, r3, #3
 801bcb6:	4940      	ldr	r1, [pc, #256]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bcb8:	4313      	orrs	r3, r2
 801bcba:	600b      	str	r3, [r1, #0]
 801bcbc:	e015      	b.n	801bcea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bcbe:	4b3f      	ldr	r3, [pc, #252]	; (801bdbc <HAL_RCC_OscConfig+0x2b0>)
 801bcc0:	2200      	movs	r2, #0
 801bcc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcc4:	f7fe ff72 	bl	801abac <HAL_GetTick>
 801bcc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bcca:	e008      	b.n	801bcde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bccc:	f7fe ff6e 	bl	801abac <HAL_GetTick>
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	1ad3      	subs	r3, r2, r3
 801bcd6:	2b02      	cmp	r3, #2
 801bcd8:	d901      	bls.n	801bcde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801bcda:	2303      	movs	r3, #3
 801bcdc:	e17b      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bcde:	4b36      	ldr	r3, [pc, #216]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	f003 0302 	and.w	r3, r3, #2
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d1f0      	bne.n	801bccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	f003 0308 	and.w	r3, r3, #8
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d030      	beq.n	801bd58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	695b      	ldr	r3, [r3, #20]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d016      	beq.n	801bd2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bcfe:	4b30      	ldr	r3, [pc, #192]	; (801bdc0 <HAL_RCC_OscConfig+0x2b4>)
 801bd00:	2201      	movs	r2, #1
 801bd02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd04:	f7fe ff52 	bl	801abac <HAL_GetTick>
 801bd08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd0a:	e008      	b.n	801bd1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd0c:	f7fe ff4e 	bl	801abac <HAL_GetTick>
 801bd10:	4602      	mov	r2, r0
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	1ad3      	subs	r3, r2, r3
 801bd16:	2b02      	cmp	r3, #2
 801bd18:	d901      	bls.n	801bd1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801bd1a:	2303      	movs	r3, #3
 801bd1c:	e15b      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd1e:	4b26      	ldr	r3, [pc, #152]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd22:	f003 0302 	and.w	r3, r3, #2
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d0f0      	beq.n	801bd0c <HAL_RCC_OscConfig+0x200>
 801bd2a:	e015      	b.n	801bd58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bd2c:	4b24      	ldr	r3, [pc, #144]	; (801bdc0 <HAL_RCC_OscConfig+0x2b4>)
 801bd2e:	2200      	movs	r2, #0
 801bd30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801bd32:	f7fe ff3b 	bl	801abac <HAL_GetTick>
 801bd36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd38:	e008      	b.n	801bd4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd3a:	f7fe ff37 	bl	801abac <HAL_GetTick>
 801bd3e:	4602      	mov	r2, r0
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	1ad3      	subs	r3, r2, r3
 801bd44:	2b02      	cmp	r3, #2
 801bd46:	d901      	bls.n	801bd4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801bd48:	2303      	movs	r3, #3
 801bd4a:	e144      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd4c:	4b1a      	ldr	r3, [pc, #104]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd50:	f003 0302 	and.w	r3, r3, #2
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d1f0      	bne.n	801bd3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f003 0304 	and.w	r3, r3, #4
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	f000 80a0 	beq.w	801bea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bd66:	2300      	movs	r3, #0
 801bd68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bd6a:	4b13      	ldr	r3, [pc, #76]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d10f      	bne.n	801bd96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bd76:	2300      	movs	r3, #0
 801bd78:	60bb      	str	r3, [r7, #8]
 801bd7a:	4b0f      	ldr	r3, [pc, #60]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd7e:	4a0e      	ldr	r2, [pc, #56]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bd84:	6413      	str	r3, [r2, #64]	; 0x40
 801bd86:	4b0c      	ldr	r3, [pc, #48]	; (801bdb8 <HAL_RCC_OscConfig+0x2ac>)
 801bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd8e:	60bb      	str	r3, [r7, #8]
 801bd90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bd92:	2301      	movs	r3, #1
 801bd94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bd96:	4b0b      	ldr	r3, [pc, #44]	; (801bdc4 <HAL_RCC_OscConfig+0x2b8>)
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d121      	bne.n	801bde6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bda2:	4b08      	ldr	r3, [pc, #32]	; (801bdc4 <HAL_RCC_OscConfig+0x2b8>)
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	4a07      	ldr	r2, [pc, #28]	; (801bdc4 <HAL_RCC_OscConfig+0x2b8>)
 801bda8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bdac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bdae:	f7fe fefd 	bl	801abac <HAL_GetTick>
 801bdb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdb4:	e011      	b.n	801bdda <HAL_RCC_OscConfig+0x2ce>
 801bdb6:	bf00      	nop
 801bdb8:	40023800 	.word	0x40023800
 801bdbc:	42470000 	.word	0x42470000
 801bdc0:	42470e80 	.word	0x42470e80
 801bdc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bdc8:	f7fe fef0 	bl	801abac <HAL_GetTick>
 801bdcc:	4602      	mov	r2, r0
 801bdce:	693b      	ldr	r3, [r7, #16]
 801bdd0:	1ad3      	subs	r3, r2, r3
 801bdd2:	2b02      	cmp	r3, #2
 801bdd4:	d901      	bls.n	801bdda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801bdd6:	2303      	movs	r3, #3
 801bdd8:	e0fd      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdda:	4b81      	ldr	r3, [pc, #516]	; (801bfe0 <HAL_RCC_OscConfig+0x4d4>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d0f0      	beq.n	801bdc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	689b      	ldr	r3, [r3, #8]
 801bdea:	2b01      	cmp	r3, #1
 801bdec:	d106      	bne.n	801bdfc <HAL_RCC_OscConfig+0x2f0>
 801bdee:	4b7d      	ldr	r3, [pc, #500]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdf2:	4a7c      	ldr	r2, [pc, #496]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bdf4:	f043 0301 	orr.w	r3, r3, #1
 801bdf8:	6713      	str	r3, [r2, #112]	; 0x70
 801bdfa:	e01c      	b.n	801be36 <HAL_RCC_OscConfig+0x32a>
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	689b      	ldr	r3, [r3, #8]
 801be00:	2b05      	cmp	r3, #5
 801be02:	d10c      	bne.n	801be1e <HAL_RCC_OscConfig+0x312>
 801be04:	4b77      	ldr	r3, [pc, #476]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be08:	4a76      	ldr	r2, [pc, #472]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be0a:	f043 0304 	orr.w	r3, r3, #4
 801be0e:	6713      	str	r3, [r2, #112]	; 0x70
 801be10:	4b74      	ldr	r3, [pc, #464]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be14:	4a73      	ldr	r2, [pc, #460]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be16:	f043 0301 	orr.w	r3, r3, #1
 801be1a:	6713      	str	r3, [r2, #112]	; 0x70
 801be1c:	e00b      	b.n	801be36 <HAL_RCC_OscConfig+0x32a>
 801be1e:	4b71      	ldr	r3, [pc, #452]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be22:	4a70      	ldr	r2, [pc, #448]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be24:	f023 0301 	bic.w	r3, r3, #1
 801be28:	6713      	str	r3, [r2, #112]	; 0x70
 801be2a:	4b6e      	ldr	r3, [pc, #440]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be2e:	4a6d      	ldr	r2, [pc, #436]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be30:	f023 0304 	bic.w	r3, r3, #4
 801be34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	689b      	ldr	r3, [r3, #8]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d015      	beq.n	801be6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be3e:	f7fe feb5 	bl	801abac <HAL_GetTick>
 801be42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be44:	e00a      	b.n	801be5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be46:	f7fe feb1 	bl	801abac <HAL_GetTick>
 801be4a:	4602      	mov	r2, r0
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	1ad3      	subs	r3, r2, r3
 801be50:	f241 3288 	movw	r2, #5000	; 0x1388
 801be54:	4293      	cmp	r3, r2
 801be56:	d901      	bls.n	801be5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801be58:	2303      	movs	r3, #3
 801be5a:	e0bc      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be5c:	4b61      	ldr	r3, [pc, #388]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be60:	f003 0302 	and.w	r3, r3, #2
 801be64:	2b00      	cmp	r3, #0
 801be66:	d0ee      	beq.n	801be46 <HAL_RCC_OscConfig+0x33a>
 801be68:	e014      	b.n	801be94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801be6a:	f7fe fe9f 	bl	801abac <HAL_GetTick>
 801be6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be70:	e00a      	b.n	801be88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be72:	f7fe fe9b 	bl	801abac <HAL_GetTick>
 801be76:	4602      	mov	r2, r0
 801be78:	693b      	ldr	r3, [r7, #16]
 801be7a:	1ad3      	subs	r3, r2, r3
 801be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 801be80:	4293      	cmp	r3, r2
 801be82:	d901      	bls.n	801be88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801be84:	2303      	movs	r3, #3
 801be86:	e0a6      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be88:	4b56      	ldr	r3, [pc, #344]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be8c:	f003 0302 	and.w	r3, r3, #2
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1ee      	bne.n	801be72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801be94:	7dfb      	ldrb	r3, [r7, #23]
 801be96:	2b01      	cmp	r3, #1
 801be98:	d105      	bne.n	801bea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801be9a:	4b52      	ldr	r3, [pc, #328]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be9e:	4a51      	ldr	r2, [pc, #324]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	699b      	ldr	r3, [r3, #24]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	f000 8092 	beq.w	801bfd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801beb0:	4b4c      	ldr	r3, [pc, #304]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801beb2:	689b      	ldr	r3, [r3, #8]
 801beb4:	f003 030c 	and.w	r3, r3, #12
 801beb8:	2b08      	cmp	r3, #8
 801beba:	d05c      	beq.n	801bf76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	699b      	ldr	r3, [r3, #24]
 801bec0:	2b02      	cmp	r3, #2
 801bec2:	d141      	bne.n	801bf48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bec4:	4b48      	ldr	r3, [pc, #288]	; (801bfe8 <HAL_RCC_OscConfig+0x4dc>)
 801bec6:	2200      	movs	r2, #0
 801bec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801beca:	f7fe fe6f 	bl	801abac <HAL_GetTick>
 801bece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bed0:	e008      	b.n	801bee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bed2:	f7fe fe6b 	bl	801abac <HAL_GetTick>
 801bed6:	4602      	mov	r2, r0
 801bed8:	693b      	ldr	r3, [r7, #16]
 801beda:	1ad3      	subs	r3, r2, r3
 801bedc:	2b02      	cmp	r3, #2
 801bede:	d901      	bls.n	801bee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801bee0:	2303      	movs	r3, #3
 801bee2:	e078      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bee4:	4b3f      	ldr	r3, [pc, #252]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801beec:	2b00      	cmp	r3, #0
 801beee:	d1f0      	bne.n	801bed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	69da      	ldr	r2, [r3, #28]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	6a1b      	ldr	r3, [r3, #32]
 801bef8:	431a      	orrs	r2, r3
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801befe:	019b      	lsls	r3, r3, #6
 801bf00:	431a      	orrs	r2, r3
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf06:	085b      	lsrs	r3, r3, #1
 801bf08:	3b01      	subs	r3, #1
 801bf0a:	041b      	lsls	r3, r3, #16
 801bf0c:	431a      	orrs	r2, r3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf12:	061b      	lsls	r3, r3, #24
 801bf14:	4933      	ldr	r1, [pc, #204]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bf16:	4313      	orrs	r3, r2
 801bf18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bf1a:	4b33      	ldr	r3, [pc, #204]	; (801bfe8 <HAL_RCC_OscConfig+0x4dc>)
 801bf1c:	2201      	movs	r2, #1
 801bf1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bf20:	f7fe fe44 	bl	801abac <HAL_GetTick>
 801bf24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf26:	e008      	b.n	801bf3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf28:	f7fe fe40 	bl	801abac <HAL_GetTick>
 801bf2c:	4602      	mov	r2, r0
 801bf2e:	693b      	ldr	r3, [r7, #16]
 801bf30:	1ad3      	subs	r3, r2, r3
 801bf32:	2b02      	cmp	r3, #2
 801bf34:	d901      	bls.n	801bf3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801bf36:	2303      	movs	r3, #3
 801bf38:	e04d      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf3a:	4b2a      	ldr	r3, [pc, #168]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d0f0      	beq.n	801bf28 <HAL_RCC_OscConfig+0x41c>
 801bf46:	e045      	b.n	801bfd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf48:	4b27      	ldr	r3, [pc, #156]	; (801bfe8 <HAL_RCC_OscConfig+0x4dc>)
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bf4e:	f7fe fe2d 	bl	801abac <HAL_GetTick>
 801bf52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf54:	e008      	b.n	801bf68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf56:	f7fe fe29 	bl	801abac <HAL_GetTick>
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	693b      	ldr	r3, [r7, #16]
 801bf5e:	1ad3      	subs	r3, r2, r3
 801bf60:	2b02      	cmp	r3, #2
 801bf62:	d901      	bls.n	801bf68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801bf64:	2303      	movs	r3, #3
 801bf66:	e036      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf68:	4b1e      	ldr	r3, [pc, #120]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d1f0      	bne.n	801bf56 <HAL_RCC_OscConfig+0x44a>
 801bf74:	e02e      	b.n	801bfd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	699b      	ldr	r3, [r3, #24]
 801bf7a:	2b01      	cmp	r3, #1
 801bf7c:	d101      	bne.n	801bf82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801bf7e:	2301      	movs	r3, #1
 801bf80:	e029      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801bf82:	4b18      	ldr	r3, [pc, #96]	; (801bfe4 <HAL_RCC_OscConfig+0x4d8>)
 801bf84:	689b      	ldr	r3, [r3, #8]
 801bf86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	69db      	ldr	r3, [r3, #28]
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d11c      	bne.n	801bfd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bfa0:	429a      	cmp	r2, r3
 801bfa2:	d115      	bne.n	801bfd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801bfa4:	68fa      	ldr	r2, [r7, #12]
 801bfa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bfaa:	4013      	ands	r3, r2
 801bfac:	687a      	ldr	r2, [r7, #4]
 801bfae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bfb0:	4293      	cmp	r3, r2
 801bfb2:	d10d      	bne.n	801bfd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801bfbe:	429a      	cmp	r2, r3
 801bfc0:	d106      	bne.n	801bfd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d001      	beq.n	801bfd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801bfd0:	2301      	movs	r3, #1
 801bfd2:	e000      	b.n	801bfd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801bfd4:	2300      	movs	r3, #0
}
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	3718      	adds	r7, #24
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	bd80      	pop	{r7, pc}
 801bfde:	bf00      	nop
 801bfe0:	40007000 	.word	0x40007000
 801bfe4:	40023800 	.word	0x40023800
 801bfe8:	42470060 	.word	0x42470060

0801bfec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b084      	sub	sp, #16
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
 801bff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d101      	bne.n	801c000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bffc:	2301      	movs	r3, #1
 801bffe:	e0cc      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801c000:	4b68      	ldr	r3, [pc, #416]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	f003 030f 	and.w	r3, r3, #15
 801c008:	683a      	ldr	r2, [r7, #0]
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d90c      	bls.n	801c028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c00e:	4b65      	ldr	r3, [pc, #404]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c010:	683a      	ldr	r2, [r7, #0]
 801c012:	b2d2      	uxtb	r2, r2
 801c014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c016:	4b63      	ldr	r3, [pc, #396]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	f003 030f 	and.w	r3, r3, #15
 801c01e:	683a      	ldr	r2, [r7, #0]
 801c020:	429a      	cmp	r2, r3
 801c022:	d001      	beq.n	801c028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801c024:	2301      	movs	r3, #1
 801c026:	e0b8      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	f003 0302 	and.w	r3, r3, #2
 801c030:	2b00      	cmp	r3, #0
 801c032:	d020      	beq.n	801c076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	f003 0304 	and.w	r3, r3, #4
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d005      	beq.n	801c04c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c040:	4b59      	ldr	r3, [pc, #356]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c042:	689b      	ldr	r3, [r3, #8]
 801c044:	4a58      	ldr	r2, [pc, #352]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801c04a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	f003 0308 	and.w	r3, r3, #8
 801c054:	2b00      	cmp	r3, #0
 801c056:	d005      	beq.n	801c064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801c058:	4b53      	ldr	r3, [pc, #332]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c05a:	689b      	ldr	r3, [r3, #8]
 801c05c:	4a52      	ldr	r2, [pc, #328]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c05e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801c062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c064:	4b50      	ldr	r3, [pc, #320]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c066:	689b      	ldr	r3, [r3, #8]
 801c068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	689b      	ldr	r3, [r3, #8]
 801c070:	494d      	ldr	r1, [pc, #308]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c072:	4313      	orrs	r3, r2
 801c074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	f003 0301 	and.w	r3, r3, #1
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d044      	beq.n	801c10c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	685b      	ldr	r3, [r3, #4]
 801c086:	2b01      	cmp	r3, #1
 801c088:	d107      	bne.n	801c09a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c08a:	4b47      	ldr	r3, [pc, #284]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c092:	2b00      	cmp	r3, #0
 801c094:	d119      	bne.n	801c0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801c096:	2301      	movs	r3, #1
 801c098:	e07f      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	685b      	ldr	r3, [r3, #4]
 801c09e:	2b02      	cmp	r3, #2
 801c0a0:	d003      	beq.n	801c0aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801c0a6:	2b03      	cmp	r3, #3
 801c0a8:	d107      	bne.n	801c0ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c0aa:	4b3f      	ldr	r3, [pc, #252]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d109      	bne.n	801c0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	e06f      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c0ba:	4b3b      	ldr	r3, [pc, #236]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	f003 0302 	and.w	r3, r3, #2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d101      	bne.n	801c0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	e067      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801c0ca:	4b37      	ldr	r3, [pc, #220]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c0cc:	689b      	ldr	r3, [r3, #8]
 801c0ce:	f023 0203 	bic.w	r2, r3, #3
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	685b      	ldr	r3, [r3, #4]
 801c0d6:	4934      	ldr	r1, [pc, #208]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c0d8:	4313      	orrs	r3, r2
 801c0da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801c0dc:	f7fe fd66 	bl	801abac <HAL_GetTick>
 801c0e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c0e2:	e00a      	b.n	801c0fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c0e4:	f7fe fd62 	bl	801abac <HAL_GetTick>
 801c0e8:	4602      	mov	r2, r0
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	1ad3      	subs	r3, r2, r3
 801c0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 801c0f2:	4293      	cmp	r3, r2
 801c0f4:	d901      	bls.n	801c0fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801c0f6:	2303      	movs	r3, #3
 801c0f8:	e04f      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c0fa:	4b2b      	ldr	r3, [pc, #172]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c0fc:	689b      	ldr	r3, [r3, #8]
 801c0fe:	f003 020c 	and.w	r2, r3, #12
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	009b      	lsls	r3, r3, #2
 801c108:	429a      	cmp	r2, r3
 801c10a:	d1eb      	bne.n	801c0e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801c10c:	4b25      	ldr	r3, [pc, #148]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	f003 030f 	and.w	r3, r3, #15
 801c114:	683a      	ldr	r2, [r7, #0]
 801c116:	429a      	cmp	r2, r3
 801c118:	d20c      	bcs.n	801c134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c11a:	4b22      	ldr	r3, [pc, #136]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c11c:	683a      	ldr	r2, [r7, #0]
 801c11e:	b2d2      	uxtb	r2, r2
 801c120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c122:	4b20      	ldr	r3, [pc, #128]	; (801c1a4 <HAL_RCC_ClockConfig+0x1b8>)
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	f003 030f 	and.w	r3, r3, #15
 801c12a:	683a      	ldr	r2, [r7, #0]
 801c12c:	429a      	cmp	r2, r3
 801c12e:	d001      	beq.n	801c134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801c130:	2301      	movs	r3, #1
 801c132:	e032      	b.n	801c19a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	f003 0304 	and.w	r3, r3, #4
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d008      	beq.n	801c152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c140:	4b19      	ldr	r3, [pc, #100]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c142:	689b      	ldr	r3, [r3, #8]
 801c144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	4916      	ldr	r1, [pc, #88]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c14e:	4313      	orrs	r3, r2
 801c150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	f003 0308 	and.w	r3, r3, #8
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d009      	beq.n	801c172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c15e:	4b12      	ldr	r3, [pc, #72]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c160:	689b      	ldr	r3, [r3, #8]
 801c162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	691b      	ldr	r3, [r3, #16]
 801c16a:	00db      	lsls	r3, r3, #3
 801c16c:	490e      	ldr	r1, [pc, #56]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c16e:	4313      	orrs	r3, r2
 801c170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801c172:	f000 f821 	bl	801c1b8 <HAL_RCC_GetSysClockFreq>
 801c176:	4602      	mov	r2, r0
 801c178:	4b0b      	ldr	r3, [pc, #44]	; (801c1a8 <HAL_RCC_ClockConfig+0x1bc>)
 801c17a:	689b      	ldr	r3, [r3, #8]
 801c17c:	091b      	lsrs	r3, r3, #4
 801c17e:	f003 030f 	and.w	r3, r3, #15
 801c182:	490a      	ldr	r1, [pc, #40]	; (801c1ac <HAL_RCC_ClockConfig+0x1c0>)
 801c184:	5ccb      	ldrb	r3, [r1, r3]
 801c186:	fa22 f303 	lsr.w	r3, r2, r3
 801c18a:	4a09      	ldr	r2, [pc, #36]	; (801c1b0 <HAL_RCC_ClockConfig+0x1c4>)
 801c18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801c18e:	4b09      	ldr	r3, [pc, #36]	; (801c1b4 <HAL_RCC_ClockConfig+0x1c8>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	4618      	mov	r0, r3
 801c194:	f7fe fcc6 	bl	801ab24 <HAL_InitTick>

  return HAL_OK;
 801c198:	2300      	movs	r3, #0
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3710      	adds	r7, #16
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}
 801c1a2:	bf00      	nop
 801c1a4:	40023c00 	.word	0x40023c00
 801c1a8:	40023800 	.word	0x40023800
 801c1ac:	08040460 	.word	0x08040460
 801c1b0:	20000024 	.word	0x20000024
 801c1b4:	2000003c 	.word	0x2000003c

0801c1b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c1b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c1bc:	b084      	sub	sp, #16
 801c1be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	607b      	str	r3, [r7, #4]
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	60fb      	str	r3, [r7, #12]
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c1d0:	4b67      	ldr	r3, [pc, #412]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c1d2:	689b      	ldr	r3, [r3, #8]
 801c1d4:	f003 030c 	and.w	r3, r3, #12
 801c1d8:	2b08      	cmp	r3, #8
 801c1da:	d00d      	beq.n	801c1f8 <HAL_RCC_GetSysClockFreq+0x40>
 801c1dc:	2b08      	cmp	r3, #8
 801c1de:	f200 80bd 	bhi.w	801c35c <HAL_RCC_GetSysClockFreq+0x1a4>
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d002      	beq.n	801c1ec <HAL_RCC_GetSysClockFreq+0x34>
 801c1e6:	2b04      	cmp	r3, #4
 801c1e8:	d003      	beq.n	801c1f2 <HAL_RCC_GetSysClockFreq+0x3a>
 801c1ea:	e0b7      	b.n	801c35c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801c1ec:	4b61      	ldr	r3, [pc, #388]	; (801c374 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801c1ee:	60bb      	str	r3, [r7, #8]
       break;
 801c1f0:	e0b7      	b.n	801c362 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801c1f2:	4b61      	ldr	r3, [pc, #388]	; (801c378 <HAL_RCC_GetSysClockFreq+0x1c0>)
 801c1f4:	60bb      	str	r3, [r7, #8]
      break;
 801c1f6:	e0b4      	b.n	801c362 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801c1f8:	4b5d      	ldr	r3, [pc, #372]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c1fa:	685b      	ldr	r3, [r3, #4]
 801c1fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c200:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801c202:	4b5b      	ldr	r3, [pc, #364]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c204:	685b      	ldr	r3, [r3, #4]
 801c206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d04d      	beq.n	801c2aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c20e:	4b58      	ldr	r3, [pc, #352]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c210:	685b      	ldr	r3, [r3, #4]
 801c212:	099b      	lsrs	r3, r3, #6
 801c214:	461a      	mov	r2, r3
 801c216:	f04f 0300 	mov.w	r3, #0
 801c21a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c21e:	f04f 0100 	mov.w	r1, #0
 801c222:	ea02 0800 	and.w	r8, r2, r0
 801c226:	ea03 0901 	and.w	r9, r3, r1
 801c22a:	4640      	mov	r0, r8
 801c22c:	4649      	mov	r1, r9
 801c22e:	f04f 0200 	mov.w	r2, #0
 801c232:	f04f 0300 	mov.w	r3, #0
 801c236:	014b      	lsls	r3, r1, #5
 801c238:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801c23c:	0142      	lsls	r2, r0, #5
 801c23e:	4610      	mov	r0, r2
 801c240:	4619      	mov	r1, r3
 801c242:	ebb0 0008 	subs.w	r0, r0, r8
 801c246:	eb61 0109 	sbc.w	r1, r1, r9
 801c24a:	f04f 0200 	mov.w	r2, #0
 801c24e:	f04f 0300 	mov.w	r3, #0
 801c252:	018b      	lsls	r3, r1, #6
 801c254:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801c258:	0182      	lsls	r2, r0, #6
 801c25a:	1a12      	subs	r2, r2, r0
 801c25c:	eb63 0301 	sbc.w	r3, r3, r1
 801c260:	f04f 0000 	mov.w	r0, #0
 801c264:	f04f 0100 	mov.w	r1, #0
 801c268:	00d9      	lsls	r1, r3, #3
 801c26a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c26e:	00d0      	lsls	r0, r2, #3
 801c270:	4602      	mov	r2, r0
 801c272:	460b      	mov	r3, r1
 801c274:	eb12 0208 	adds.w	r2, r2, r8
 801c278:	eb43 0309 	adc.w	r3, r3, r9
 801c27c:	f04f 0000 	mov.w	r0, #0
 801c280:	f04f 0100 	mov.w	r1, #0
 801c284:	0259      	lsls	r1, r3, #9
 801c286:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801c28a:	0250      	lsls	r0, r2, #9
 801c28c:	4602      	mov	r2, r0
 801c28e:	460b      	mov	r3, r1
 801c290:	4610      	mov	r0, r2
 801c292:	4619      	mov	r1, r3
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	461a      	mov	r2, r3
 801c298:	f04f 0300 	mov.w	r3, #0
 801c29c:	f7e4 fc9e 	bl	8000bdc <__aeabi_uldivmod>
 801c2a0:	4602      	mov	r2, r0
 801c2a2:	460b      	mov	r3, r1
 801c2a4:	4613      	mov	r3, r2
 801c2a6:	60fb      	str	r3, [r7, #12]
 801c2a8:	e04a      	b.n	801c340 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c2aa:	4b31      	ldr	r3, [pc, #196]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c2ac:	685b      	ldr	r3, [r3, #4]
 801c2ae:	099b      	lsrs	r3, r3, #6
 801c2b0:	461a      	mov	r2, r3
 801c2b2:	f04f 0300 	mov.w	r3, #0
 801c2b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c2ba:	f04f 0100 	mov.w	r1, #0
 801c2be:	ea02 0400 	and.w	r4, r2, r0
 801c2c2:	ea03 0501 	and.w	r5, r3, r1
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	4629      	mov	r1, r5
 801c2ca:	f04f 0200 	mov.w	r2, #0
 801c2ce:	f04f 0300 	mov.w	r3, #0
 801c2d2:	014b      	lsls	r3, r1, #5
 801c2d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801c2d8:	0142      	lsls	r2, r0, #5
 801c2da:	4610      	mov	r0, r2
 801c2dc:	4619      	mov	r1, r3
 801c2de:	1b00      	subs	r0, r0, r4
 801c2e0:	eb61 0105 	sbc.w	r1, r1, r5
 801c2e4:	f04f 0200 	mov.w	r2, #0
 801c2e8:	f04f 0300 	mov.w	r3, #0
 801c2ec:	018b      	lsls	r3, r1, #6
 801c2ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801c2f2:	0182      	lsls	r2, r0, #6
 801c2f4:	1a12      	subs	r2, r2, r0
 801c2f6:	eb63 0301 	sbc.w	r3, r3, r1
 801c2fa:	f04f 0000 	mov.w	r0, #0
 801c2fe:	f04f 0100 	mov.w	r1, #0
 801c302:	00d9      	lsls	r1, r3, #3
 801c304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c308:	00d0      	lsls	r0, r2, #3
 801c30a:	4602      	mov	r2, r0
 801c30c:	460b      	mov	r3, r1
 801c30e:	1912      	adds	r2, r2, r4
 801c310:	eb45 0303 	adc.w	r3, r5, r3
 801c314:	f04f 0000 	mov.w	r0, #0
 801c318:	f04f 0100 	mov.w	r1, #0
 801c31c:	0299      	lsls	r1, r3, #10
 801c31e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801c322:	0290      	lsls	r0, r2, #10
 801c324:	4602      	mov	r2, r0
 801c326:	460b      	mov	r3, r1
 801c328:	4610      	mov	r0, r2
 801c32a:	4619      	mov	r1, r3
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	461a      	mov	r2, r3
 801c330:	f04f 0300 	mov.w	r3, #0
 801c334:	f7e4 fc52 	bl	8000bdc <__aeabi_uldivmod>
 801c338:	4602      	mov	r2, r0
 801c33a:	460b      	mov	r3, r1
 801c33c:	4613      	mov	r3, r2
 801c33e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801c340:	4b0b      	ldr	r3, [pc, #44]	; (801c370 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	0c1b      	lsrs	r3, r3, #16
 801c346:	f003 0303 	and.w	r3, r3, #3
 801c34a:	3301      	adds	r3, #1
 801c34c:	005b      	lsls	r3, r3, #1
 801c34e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801c350:	68fa      	ldr	r2, [r7, #12]
 801c352:	683b      	ldr	r3, [r7, #0]
 801c354:	fbb2 f3f3 	udiv	r3, r2, r3
 801c358:	60bb      	str	r3, [r7, #8]
      break;
 801c35a:	e002      	b.n	801c362 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801c35c:	4b05      	ldr	r3, [pc, #20]	; (801c374 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801c35e:	60bb      	str	r3, [r7, #8]
      break;
 801c360:	bf00      	nop
    }
  }
  return sysclockfreq;
 801c362:	68bb      	ldr	r3, [r7, #8]
}
 801c364:	4618      	mov	r0, r3
 801c366:	3710      	adds	r7, #16
 801c368:	46bd      	mov	sp, r7
 801c36a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c36e:	bf00      	nop
 801c370:	40023800 	.word	0x40023800
 801c374:	00f42400 	.word	0x00f42400
 801c378:	007a1200 	.word	0x007a1200

0801c37c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c37c:	b480      	push	{r7}
 801c37e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c380:	4b03      	ldr	r3, [pc, #12]	; (801c390 <HAL_RCC_GetHCLKFreq+0x14>)
 801c382:	681b      	ldr	r3, [r3, #0]
}
 801c384:	4618      	mov	r0, r3
 801c386:	46bd      	mov	sp, r7
 801c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c38c:	4770      	bx	lr
 801c38e:	bf00      	nop
 801c390:	20000024 	.word	0x20000024

0801c394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c394:	b580      	push	{r7, lr}
 801c396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801c398:	f7ff fff0 	bl	801c37c <HAL_RCC_GetHCLKFreq>
 801c39c:	4602      	mov	r2, r0
 801c39e:	4b05      	ldr	r3, [pc, #20]	; (801c3b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 801c3a0:	689b      	ldr	r3, [r3, #8]
 801c3a2:	0a9b      	lsrs	r3, r3, #10
 801c3a4:	f003 0307 	and.w	r3, r3, #7
 801c3a8:	4903      	ldr	r1, [pc, #12]	; (801c3b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c3aa:	5ccb      	ldrb	r3, [r1, r3]
 801c3ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	bd80      	pop	{r7, pc}
 801c3b4:	40023800 	.word	0x40023800
 801c3b8:	08040470 	.word	0x08040470

0801c3bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801c3c0:	f7ff ffdc 	bl	801c37c <HAL_RCC_GetHCLKFreq>
 801c3c4:	4602      	mov	r2, r0
 801c3c6:	4b05      	ldr	r3, [pc, #20]	; (801c3dc <HAL_RCC_GetPCLK2Freq+0x20>)
 801c3c8:	689b      	ldr	r3, [r3, #8]
 801c3ca:	0b5b      	lsrs	r3, r3, #13
 801c3cc:	f003 0307 	and.w	r3, r3, #7
 801c3d0:	4903      	ldr	r1, [pc, #12]	; (801c3e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c3d2:	5ccb      	ldrb	r3, [r1, r3]
 801c3d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c3d8:	4618      	mov	r0, r3
 801c3da:	bd80      	pop	{r7, pc}
 801c3dc:	40023800 	.word	0x40023800
 801c3e0:	08040470 	.word	0x08040470

0801c3e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	b082      	sub	sp, #8
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d101      	bne.n	801c3f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c3f2:	2301      	movs	r3, #1
 801c3f4:	e03f      	b.n	801c476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c3fc:	b2db      	uxtb	r3, r3
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d106      	bne.n	801c410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	2200      	movs	r2, #0
 801c406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f000 f837 	bl	801c47e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2224      	movs	r2, #36	; 0x24
 801c414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	68da      	ldr	r2, [r3, #12]
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801c428:	6878      	ldr	r0, [r7, #4]
 801c42a:	f000 f915 	bl	801c658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	691a      	ldr	r2, [r3, #16]
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801c43c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	695a      	ldr	r2, [r3, #20]
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801c44c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	68da      	ldr	r2, [r3, #12]
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c45c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	2200      	movs	r2, #0
 801c462:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	2220      	movs	r2, #32
 801c468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	2220      	movs	r2, #32
 801c470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801c474:	2300      	movs	r3, #0
}
 801c476:	4618      	mov	r0, r3
 801c478:	3708      	adds	r7, #8
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}

0801c47e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801c47e:	b480      	push	{r7}
 801c480:	b083      	sub	sp, #12
 801c482:	af00      	add	r7, sp, #0
 801c484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 801c486:	bf00      	nop
 801c488:	370c      	adds	r7, #12
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr

0801c492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c492:	b580      	push	{r7, lr}
 801c494:	b088      	sub	sp, #32
 801c496:	af02      	add	r7, sp, #8
 801c498:	60f8      	str	r0, [r7, #12]
 801c49a:	60b9      	str	r1, [r7, #8]
 801c49c:	603b      	str	r3, [r7, #0]
 801c49e:	4613      	mov	r3, r2
 801c4a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801c4ac:	b2db      	uxtb	r3, r3
 801c4ae:	2b20      	cmp	r3, #32
 801c4b0:	f040 8083 	bne.w	801c5ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801c4b4:	68bb      	ldr	r3, [r7, #8]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d002      	beq.n	801c4c0 <HAL_UART_Transmit+0x2e>
 801c4ba:	88fb      	ldrh	r3, [r7, #6]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d101      	bne.n	801c4c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801c4c0:	2301      	movs	r3, #1
 801c4c2:	e07b      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c4ca:	2b01      	cmp	r3, #1
 801c4cc:	d101      	bne.n	801c4d2 <HAL_UART_Transmit+0x40>
 801c4ce:	2302      	movs	r3, #2
 801c4d0:	e074      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2201      	movs	r2, #1
 801c4d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	2200      	movs	r2, #0
 801c4de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	2221      	movs	r2, #33	; 0x21
 801c4e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801c4e8:	f7fe fb60 	bl	801abac <HAL_GetTick>
 801c4ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	88fa      	ldrh	r2, [r7, #6]
 801c4f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	88fa      	ldrh	r2, [r7, #6]
 801c4f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801c502:	e042      	b.n	801c58a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c508:	b29b      	uxth	r3, r3
 801c50a:	3b01      	subs	r3, #1
 801c50c:	b29a      	uxth	r2, r3
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	689b      	ldr	r3, [r3, #8]
 801c516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c51a:	d122      	bne.n	801c562 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c51c:	683b      	ldr	r3, [r7, #0]
 801c51e:	9300      	str	r3, [sp, #0]
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	2200      	movs	r2, #0
 801c524:	2180      	movs	r1, #128	; 0x80
 801c526:	68f8      	ldr	r0, [r7, #12]
 801c528:	f000 f84c 	bl	801c5c4 <UART_WaitOnFlagUntilTimeout>
 801c52c:	4603      	mov	r3, r0
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d001      	beq.n	801c536 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801c532:	2303      	movs	r3, #3
 801c534:	e042      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801c536:	68bb      	ldr	r3, [r7, #8]
 801c538:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801c53a:	693b      	ldr	r3, [r7, #16]
 801c53c:	881b      	ldrh	r3, [r3, #0]
 801c53e:	461a      	mov	r2, r3
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c548:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	691b      	ldr	r3, [r3, #16]
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d103      	bne.n	801c55a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	3302      	adds	r3, #2
 801c556:	60bb      	str	r3, [r7, #8]
 801c558:	e017      	b.n	801c58a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801c55a:	68bb      	ldr	r3, [r7, #8]
 801c55c:	3301      	adds	r3, #1
 801c55e:	60bb      	str	r3, [r7, #8]
 801c560:	e013      	b.n	801c58a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c562:	683b      	ldr	r3, [r7, #0]
 801c564:	9300      	str	r3, [sp, #0]
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	2200      	movs	r2, #0
 801c56a:	2180      	movs	r1, #128	; 0x80
 801c56c:	68f8      	ldr	r0, [r7, #12]
 801c56e:	f000 f829 	bl	801c5c4 <UART_WaitOnFlagUntilTimeout>
 801c572:	4603      	mov	r3, r0
 801c574:	2b00      	cmp	r3, #0
 801c576:	d001      	beq.n	801c57c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801c578:	2303      	movs	r3, #3
 801c57a:	e01f      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	1c5a      	adds	r2, r3, #1
 801c580:	60ba      	str	r2, [r7, #8]
 801c582:	781a      	ldrb	r2, [r3, #0]
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c58e:	b29b      	uxth	r3, r3
 801c590:	2b00      	cmp	r3, #0
 801c592:	d1b7      	bne.n	801c504 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c594:	683b      	ldr	r3, [r7, #0]
 801c596:	9300      	str	r3, [sp, #0]
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	2200      	movs	r2, #0
 801c59c:	2140      	movs	r1, #64	; 0x40
 801c59e:	68f8      	ldr	r0, [r7, #12]
 801c5a0:	f000 f810 	bl	801c5c4 <UART_WaitOnFlagUntilTimeout>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d001      	beq.n	801c5ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801c5aa:	2303      	movs	r3, #3
 801c5ac:	e006      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	2220      	movs	r2, #32
 801c5b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	e000      	b.n	801c5bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801c5ba:	2302      	movs	r3, #2
  }
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3718      	adds	r7, #24
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}

0801c5c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b084      	sub	sp, #16
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	60f8      	str	r0, [r7, #12]
 801c5cc:	60b9      	str	r1, [r7, #8]
 801c5ce:	603b      	str	r3, [r7, #0]
 801c5d0:	4613      	mov	r3, r2
 801c5d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c5d4:	e02c      	b.n	801c630 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c5d6:	69bb      	ldr	r3, [r7, #24]
 801c5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5dc:	d028      	beq.n	801c630 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c5de:	69bb      	ldr	r3, [r7, #24]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d007      	beq.n	801c5f4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c5e4:	f7fe fae2 	bl	801abac <HAL_GetTick>
 801c5e8:	4602      	mov	r2, r0
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	1ad3      	subs	r3, r2, r3
 801c5ee:	69ba      	ldr	r2, [r7, #24]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d21d      	bcs.n	801c630 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	68da      	ldr	r2, [r3, #12]
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801c602:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	695a      	ldr	r2, [r3, #20]
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	f022 0201 	bic.w	r2, r2, #1
 801c612:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	2220      	movs	r2, #32
 801c618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	2220      	movs	r2, #32
 801c620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	2200      	movs	r2, #0
 801c628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801c62c:	2303      	movs	r3, #3
 801c62e:	e00f      	b.n	801c650 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	681a      	ldr	r2, [r3, #0]
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	4013      	ands	r3, r2
 801c63a:	68ba      	ldr	r2, [r7, #8]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	bf0c      	ite	eq
 801c640:	2301      	moveq	r3, #1
 801c642:	2300      	movne	r3, #0
 801c644:	b2db      	uxtb	r3, r3
 801c646:	461a      	mov	r2, r3
 801c648:	79fb      	ldrb	r3, [r7, #7]
 801c64a:	429a      	cmp	r2, r3
 801c64c:	d0c3      	beq.n	801c5d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c64e:	2300      	movs	r3, #0
}
 801c650:	4618      	mov	r0, r3
 801c652:	3710      	adds	r7, #16
 801c654:	46bd      	mov	sp, r7
 801c656:	bd80      	pop	{r7, pc}

0801c658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	b0bd      	sub	sp, #244	; 0xf4
 801c65e:	af00      	add	r7, sp, #0
 801c660:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	691b      	ldr	r3, [r3, #16]
 801c66c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c674:	68d9      	ldr	r1, [r3, #12]
 801c676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	ea40 0301 	orr.w	r3, r0, r1
 801c680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c686:	689a      	ldr	r2, [r3, #8]
 801c688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c68c:	691b      	ldr	r3, [r3, #16]
 801c68e:	431a      	orrs	r2, r3
 801c690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c694:	695b      	ldr	r3, [r3, #20]
 801c696:	431a      	orrs	r2, r3
 801c698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c69c:	69db      	ldr	r3, [r3, #28]
 801c69e:	4313      	orrs	r3, r2
 801c6a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801c6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	68db      	ldr	r3, [r3, #12]
 801c6ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c6b0:	f021 010c 	bic.w	r1, r1, #12
 801c6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6b8:	681a      	ldr	r2, [r3, #0]
 801c6ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801c6be:	430b      	orrs	r3, r1
 801c6c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	695b      	ldr	r3, [r3, #20]
 801c6ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6d2:	6999      	ldr	r1, [r3, #24]
 801c6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6d8:	681a      	ldr	r2, [r3, #0]
 801c6da:	ea40 0301 	orr.w	r3, r0, r1
 801c6de:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6e4:	69db      	ldr	r3, [r3, #28]
 801c6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c6ea:	f040 81a5 	bne.w	801ca38 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6f2:	681a      	ldr	r2, [r3, #0]
 801c6f4:	4bcd      	ldr	r3, [pc, #820]	; (801ca2c <UART_SetConfig+0x3d4>)
 801c6f6:	429a      	cmp	r2, r3
 801c6f8:	d006      	beq.n	801c708 <UART_SetConfig+0xb0>
 801c6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6fe:	681a      	ldr	r2, [r3, #0]
 801c700:	4bcb      	ldr	r3, [pc, #812]	; (801ca30 <UART_SetConfig+0x3d8>)
 801c702:	429a      	cmp	r2, r3
 801c704:	f040 80cb 	bne.w	801c89e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c708:	f7ff fe58 	bl	801c3bc <HAL_RCC_GetPCLK2Freq>
 801c70c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c714:	461c      	mov	r4, r3
 801c716:	f04f 0500 	mov.w	r5, #0
 801c71a:	4622      	mov	r2, r4
 801c71c:	462b      	mov	r3, r5
 801c71e:	1891      	adds	r1, r2, r2
 801c720:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801c724:	415b      	adcs	r3, r3
 801c726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c72a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801c72e:	1912      	adds	r2, r2, r4
 801c730:	eb45 0303 	adc.w	r3, r5, r3
 801c734:	f04f 0000 	mov.w	r0, #0
 801c738:	f04f 0100 	mov.w	r1, #0
 801c73c:	00d9      	lsls	r1, r3, #3
 801c73e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c742:	00d0      	lsls	r0, r2, #3
 801c744:	4602      	mov	r2, r0
 801c746:	460b      	mov	r3, r1
 801c748:	1911      	adds	r1, r2, r4
 801c74a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801c74e:	416b      	adcs	r3, r5
 801c750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c758:	685b      	ldr	r3, [r3, #4]
 801c75a:	461a      	mov	r2, r3
 801c75c:	f04f 0300 	mov.w	r3, #0
 801c760:	1891      	adds	r1, r2, r2
 801c762:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801c766:	415b      	adcs	r3, r3
 801c768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c76c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801c770:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801c774:	f7e4 fa32 	bl	8000bdc <__aeabi_uldivmod>
 801c778:	4602      	mov	r2, r0
 801c77a:	460b      	mov	r3, r1
 801c77c:	4bad      	ldr	r3, [pc, #692]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c77e:	fba3 2302 	umull	r2, r3, r3, r2
 801c782:	095b      	lsrs	r3, r3, #5
 801c784:	011e      	lsls	r6, r3, #4
 801c786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c78a:	461c      	mov	r4, r3
 801c78c:	f04f 0500 	mov.w	r5, #0
 801c790:	4622      	mov	r2, r4
 801c792:	462b      	mov	r3, r5
 801c794:	1891      	adds	r1, r2, r2
 801c796:	67b9      	str	r1, [r7, #120]	; 0x78
 801c798:	415b      	adcs	r3, r3
 801c79a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c79c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801c7a0:	1912      	adds	r2, r2, r4
 801c7a2:	eb45 0303 	adc.w	r3, r5, r3
 801c7a6:	f04f 0000 	mov.w	r0, #0
 801c7aa:	f04f 0100 	mov.w	r1, #0
 801c7ae:	00d9      	lsls	r1, r3, #3
 801c7b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c7b4:	00d0      	lsls	r0, r2, #3
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	460b      	mov	r3, r1
 801c7ba:	1911      	adds	r1, r2, r4
 801c7bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 801c7c0:	416b      	adcs	r3, r5
 801c7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c7ca:	685b      	ldr	r3, [r3, #4]
 801c7cc:	461a      	mov	r2, r3
 801c7ce:	f04f 0300 	mov.w	r3, #0
 801c7d2:	1891      	adds	r1, r2, r2
 801c7d4:	6739      	str	r1, [r7, #112]	; 0x70
 801c7d6:	415b      	adcs	r3, r3
 801c7d8:	677b      	str	r3, [r7, #116]	; 0x74
 801c7da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801c7de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801c7e2:	f7e4 f9fb 	bl	8000bdc <__aeabi_uldivmod>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	4b92      	ldr	r3, [pc, #584]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c7ec:	fba3 1302 	umull	r1, r3, r3, r2
 801c7f0:	095b      	lsrs	r3, r3, #5
 801c7f2:	2164      	movs	r1, #100	; 0x64
 801c7f4:	fb01 f303 	mul.w	r3, r1, r3
 801c7f8:	1ad3      	subs	r3, r2, r3
 801c7fa:	00db      	lsls	r3, r3, #3
 801c7fc:	3332      	adds	r3, #50	; 0x32
 801c7fe:	4a8d      	ldr	r2, [pc, #564]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c800:	fba2 2303 	umull	r2, r3, r2, r3
 801c804:	095b      	lsrs	r3, r3, #5
 801c806:	005b      	lsls	r3, r3, #1
 801c808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c80c:	441e      	add	r6, r3
 801c80e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c812:	4618      	mov	r0, r3
 801c814:	f04f 0100 	mov.w	r1, #0
 801c818:	4602      	mov	r2, r0
 801c81a:	460b      	mov	r3, r1
 801c81c:	1894      	adds	r4, r2, r2
 801c81e:	66bc      	str	r4, [r7, #104]	; 0x68
 801c820:	415b      	adcs	r3, r3
 801c822:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c824:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801c828:	1812      	adds	r2, r2, r0
 801c82a:	eb41 0303 	adc.w	r3, r1, r3
 801c82e:	f04f 0400 	mov.w	r4, #0
 801c832:	f04f 0500 	mov.w	r5, #0
 801c836:	00dd      	lsls	r5, r3, #3
 801c838:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c83c:	00d4      	lsls	r4, r2, #3
 801c83e:	4622      	mov	r2, r4
 801c840:	462b      	mov	r3, r5
 801c842:	1814      	adds	r4, r2, r0
 801c844:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801c848:	414b      	adcs	r3, r1
 801c84a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c852:	685b      	ldr	r3, [r3, #4]
 801c854:	461a      	mov	r2, r3
 801c856:	f04f 0300 	mov.w	r3, #0
 801c85a:	1891      	adds	r1, r2, r2
 801c85c:	6639      	str	r1, [r7, #96]	; 0x60
 801c85e:	415b      	adcs	r3, r3
 801c860:	667b      	str	r3, [r7, #100]	; 0x64
 801c862:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801c866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c86a:	f7e4 f9b7 	bl	8000bdc <__aeabi_uldivmod>
 801c86e:	4602      	mov	r2, r0
 801c870:	460b      	mov	r3, r1
 801c872:	4b70      	ldr	r3, [pc, #448]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c874:	fba3 1302 	umull	r1, r3, r3, r2
 801c878:	095b      	lsrs	r3, r3, #5
 801c87a:	2164      	movs	r1, #100	; 0x64
 801c87c:	fb01 f303 	mul.w	r3, r1, r3
 801c880:	1ad3      	subs	r3, r2, r3
 801c882:	00db      	lsls	r3, r3, #3
 801c884:	3332      	adds	r3, #50	; 0x32
 801c886:	4a6b      	ldr	r2, [pc, #428]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c888:	fba2 2303 	umull	r2, r3, r2, r3
 801c88c:	095b      	lsrs	r3, r3, #5
 801c88e:	f003 0207 	and.w	r2, r3, #7
 801c892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	4432      	add	r2, r6
 801c89a:	609a      	str	r2, [r3, #8]
 801c89c:	e26d      	b.n	801cd7a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c89e:	f7ff fd79 	bl	801c394 <HAL_RCC_GetPCLK1Freq>
 801c8a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c8a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c8aa:	461c      	mov	r4, r3
 801c8ac:	f04f 0500 	mov.w	r5, #0
 801c8b0:	4622      	mov	r2, r4
 801c8b2:	462b      	mov	r3, r5
 801c8b4:	1891      	adds	r1, r2, r2
 801c8b6:	65b9      	str	r1, [r7, #88]	; 0x58
 801c8b8:	415b      	adcs	r3, r3
 801c8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c8bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c8c0:	1912      	adds	r2, r2, r4
 801c8c2:	eb45 0303 	adc.w	r3, r5, r3
 801c8c6:	f04f 0000 	mov.w	r0, #0
 801c8ca:	f04f 0100 	mov.w	r1, #0
 801c8ce:	00d9      	lsls	r1, r3, #3
 801c8d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c8d4:	00d0      	lsls	r0, r2, #3
 801c8d6:	4602      	mov	r2, r0
 801c8d8:	460b      	mov	r3, r1
 801c8da:	1911      	adds	r1, r2, r4
 801c8dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801c8e0:	416b      	adcs	r3, r5
 801c8e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c8ea:	685b      	ldr	r3, [r3, #4]
 801c8ec:	461a      	mov	r2, r3
 801c8ee:	f04f 0300 	mov.w	r3, #0
 801c8f2:	1891      	adds	r1, r2, r2
 801c8f4:	6539      	str	r1, [r7, #80]	; 0x50
 801c8f6:	415b      	adcs	r3, r3
 801c8f8:	657b      	str	r3, [r7, #84]	; 0x54
 801c8fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c8fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801c902:	f7e4 f96b 	bl	8000bdc <__aeabi_uldivmod>
 801c906:	4602      	mov	r2, r0
 801c908:	460b      	mov	r3, r1
 801c90a:	4b4a      	ldr	r3, [pc, #296]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c90c:	fba3 2302 	umull	r2, r3, r3, r2
 801c910:	095b      	lsrs	r3, r3, #5
 801c912:	011e      	lsls	r6, r3, #4
 801c914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c918:	461c      	mov	r4, r3
 801c91a:	f04f 0500 	mov.w	r5, #0
 801c91e:	4622      	mov	r2, r4
 801c920:	462b      	mov	r3, r5
 801c922:	1891      	adds	r1, r2, r2
 801c924:	64b9      	str	r1, [r7, #72]	; 0x48
 801c926:	415b      	adcs	r3, r3
 801c928:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c92a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c92e:	1912      	adds	r2, r2, r4
 801c930:	eb45 0303 	adc.w	r3, r5, r3
 801c934:	f04f 0000 	mov.w	r0, #0
 801c938:	f04f 0100 	mov.w	r1, #0
 801c93c:	00d9      	lsls	r1, r3, #3
 801c93e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c942:	00d0      	lsls	r0, r2, #3
 801c944:	4602      	mov	r2, r0
 801c946:	460b      	mov	r3, r1
 801c948:	1911      	adds	r1, r2, r4
 801c94a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801c94e:	416b      	adcs	r3, r5
 801c950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c958:	685b      	ldr	r3, [r3, #4]
 801c95a:	461a      	mov	r2, r3
 801c95c:	f04f 0300 	mov.w	r3, #0
 801c960:	1891      	adds	r1, r2, r2
 801c962:	6439      	str	r1, [r7, #64]	; 0x40
 801c964:	415b      	adcs	r3, r3
 801c966:	647b      	str	r3, [r7, #68]	; 0x44
 801c968:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c96c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801c970:	f7e4 f934 	bl	8000bdc <__aeabi_uldivmod>
 801c974:	4602      	mov	r2, r0
 801c976:	460b      	mov	r3, r1
 801c978:	4b2e      	ldr	r3, [pc, #184]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c97a:	fba3 1302 	umull	r1, r3, r3, r2
 801c97e:	095b      	lsrs	r3, r3, #5
 801c980:	2164      	movs	r1, #100	; 0x64
 801c982:	fb01 f303 	mul.w	r3, r1, r3
 801c986:	1ad3      	subs	r3, r2, r3
 801c988:	00db      	lsls	r3, r3, #3
 801c98a:	3332      	adds	r3, #50	; 0x32
 801c98c:	4a29      	ldr	r2, [pc, #164]	; (801ca34 <UART_SetConfig+0x3dc>)
 801c98e:	fba2 2303 	umull	r2, r3, r2, r3
 801c992:	095b      	lsrs	r3, r3, #5
 801c994:	005b      	lsls	r3, r3, #1
 801c996:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c99a:	441e      	add	r6, r3
 801c99c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f04f 0100 	mov.w	r1, #0
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	460b      	mov	r3, r1
 801c9aa:	1894      	adds	r4, r2, r2
 801c9ac:	63bc      	str	r4, [r7, #56]	; 0x38
 801c9ae:	415b      	adcs	r3, r3
 801c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c9b6:	1812      	adds	r2, r2, r0
 801c9b8:	eb41 0303 	adc.w	r3, r1, r3
 801c9bc:	f04f 0400 	mov.w	r4, #0
 801c9c0:	f04f 0500 	mov.w	r5, #0
 801c9c4:	00dd      	lsls	r5, r3, #3
 801c9c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c9ca:	00d4      	lsls	r4, r2, #3
 801c9cc:	4622      	mov	r2, r4
 801c9ce:	462b      	mov	r3, r5
 801c9d0:	1814      	adds	r4, r2, r0
 801c9d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801c9d6:	414b      	adcs	r3, r1
 801c9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c9e0:	685b      	ldr	r3, [r3, #4]
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	f04f 0300 	mov.w	r3, #0
 801c9e8:	1891      	adds	r1, r2, r2
 801c9ea:	6339      	str	r1, [r7, #48]	; 0x30
 801c9ec:	415b      	adcs	r3, r3
 801c9ee:	637b      	str	r3, [r7, #52]	; 0x34
 801c9f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c9f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801c9f8:	f7e4 f8f0 	bl	8000bdc <__aeabi_uldivmod>
 801c9fc:	4602      	mov	r2, r0
 801c9fe:	460b      	mov	r3, r1
 801ca00:	4b0c      	ldr	r3, [pc, #48]	; (801ca34 <UART_SetConfig+0x3dc>)
 801ca02:	fba3 1302 	umull	r1, r3, r3, r2
 801ca06:	095b      	lsrs	r3, r3, #5
 801ca08:	2164      	movs	r1, #100	; 0x64
 801ca0a:	fb01 f303 	mul.w	r3, r1, r3
 801ca0e:	1ad3      	subs	r3, r2, r3
 801ca10:	00db      	lsls	r3, r3, #3
 801ca12:	3332      	adds	r3, #50	; 0x32
 801ca14:	4a07      	ldr	r2, [pc, #28]	; (801ca34 <UART_SetConfig+0x3dc>)
 801ca16:	fba2 2303 	umull	r2, r3, r2, r3
 801ca1a:	095b      	lsrs	r3, r3, #5
 801ca1c:	f003 0207 	and.w	r2, r3, #7
 801ca20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	4432      	add	r2, r6
 801ca28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801ca2a:	e1a6      	b.n	801cd7a <UART_SetConfig+0x722>
 801ca2c:	40011000 	.word	0x40011000
 801ca30:	40011400 	.word	0x40011400
 801ca34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801ca38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ca3c:	681a      	ldr	r2, [r3, #0]
 801ca3e:	4bd1      	ldr	r3, [pc, #836]	; (801cd84 <UART_SetConfig+0x72c>)
 801ca40:	429a      	cmp	r2, r3
 801ca42:	d006      	beq.n	801ca52 <UART_SetConfig+0x3fa>
 801ca44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ca48:	681a      	ldr	r2, [r3, #0]
 801ca4a:	4bcf      	ldr	r3, [pc, #828]	; (801cd88 <UART_SetConfig+0x730>)
 801ca4c:	429a      	cmp	r2, r3
 801ca4e:	f040 80ca 	bne.w	801cbe6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801ca52:	f7ff fcb3 	bl	801c3bc <HAL_RCC_GetPCLK2Freq>
 801ca56:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801ca5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ca5e:	461c      	mov	r4, r3
 801ca60:	f04f 0500 	mov.w	r5, #0
 801ca64:	4622      	mov	r2, r4
 801ca66:	462b      	mov	r3, r5
 801ca68:	1891      	adds	r1, r2, r2
 801ca6a:	62b9      	str	r1, [r7, #40]	; 0x28
 801ca6c:	415b      	adcs	r3, r3
 801ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ca74:	1912      	adds	r2, r2, r4
 801ca76:	eb45 0303 	adc.w	r3, r5, r3
 801ca7a:	f04f 0000 	mov.w	r0, #0
 801ca7e:	f04f 0100 	mov.w	r1, #0
 801ca82:	00d9      	lsls	r1, r3, #3
 801ca84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ca88:	00d0      	lsls	r0, r2, #3
 801ca8a:	4602      	mov	r2, r0
 801ca8c:	460b      	mov	r3, r1
 801ca8e:	eb12 0a04 	adds.w	sl, r2, r4
 801ca92:	eb43 0b05 	adc.w	fp, r3, r5
 801ca96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ca9a:	685b      	ldr	r3, [r3, #4]
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f04f 0100 	mov.w	r1, #0
 801caa2:	f04f 0200 	mov.w	r2, #0
 801caa6:	f04f 0300 	mov.w	r3, #0
 801caaa:	008b      	lsls	r3, r1, #2
 801caac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801cab0:	0082      	lsls	r2, r0, #2
 801cab2:	4650      	mov	r0, sl
 801cab4:	4659      	mov	r1, fp
 801cab6:	f7e4 f891 	bl	8000bdc <__aeabi_uldivmod>
 801caba:	4602      	mov	r2, r0
 801cabc:	460b      	mov	r3, r1
 801cabe:	4bb3      	ldr	r3, [pc, #716]	; (801cd8c <UART_SetConfig+0x734>)
 801cac0:	fba3 2302 	umull	r2, r3, r3, r2
 801cac4:	095b      	lsrs	r3, r3, #5
 801cac6:	011e      	lsls	r6, r3, #4
 801cac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801cacc:	4618      	mov	r0, r3
 801cace:	f04f 0100 	mov.w	r1, #0
 801cad2:	4602      	mov	r2, r0
 801cad4:	460b      	mov	r3, r1
 801cad6:	1894      	adds	r4, r2, r2
 801cad8:	623c      	str	r4, [r7, #32]
 801cada:	415b      	adcs	r3, r3
 801cadc:	627b      	str	r3, [r7, #36]	; 0x24
 801cade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cae2:	1812      	adds	r2, r2, r0
 801cae4:	eb41 0303 	adc.w	r3, r1, r3
 801cae8:	f04f 0400 	mov.w	r4, #0
 801caec:	f04f 0500 	mov.w	r5, #0
 801caf0:	00dd      	lsls	r5, r3, #3
 801caf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801caf6:	00d4      	lsls	r4, r2, #3
 801caf8:	4622      	mov	r2, r4
 801cafa:	462b      	mov	r3, r5
 801cafc:	1814      	adds	r4, r2, r0
 801cafe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801cb02:	414b      	adcs	r3, r1
 801cb04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801cb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cb0c:	685b      	ldr	r3, [r3, #4]
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f04f 0100 	mov.w	r1, #0
 801cb14:	f04f 0200 	mov.w	r2, #0
 801cb18:	f04f 0300 	mov.w	r3, #0
 801cb1c:	008b      	lsls	r3, r1, #2
 801cb1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801cb22:	0082      	lsls	r2, r0, #2
 801cb24:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801cb28:	f7e4 f858 	bl	8000bdc <__aeabi_uldivmod>
 801cb2c:	4602      	mov	r2, r0
 801cb2e:	460b      	mov	r3, r1
 801cb30:	4b96      	ldr	r3, [pc, #600]	; (801cd8c <UART_SetConfig+0x734>)
 801cb32:	fba3 1302 	umull	r1, r3, r3, r2
 801cb36:	095b      	lsrs	r3, r3, #5
 801cb38:	2164      	movs	r1, #100	; 0x64
 801cb3a:	fb01 f303 	mul.w	r3, r1, r3
 801cb3e:	1ad3      	subs	r3, r2, r3
 801cb40:	011b      	lsls	r3, r3, #4
 801cb42:	3332      	adds	r3, #50	; 0x32
 801cb44:	4a91      	ldr	r2, [pc, #580]	; (801cd8c <UART_SetConfig+0x734>)
 801cb46:	fba2 2303 	umull	r2, r3, r2, r3
 801cb4a:	095b      	lsrs	r3, r3, #5
 801cb4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb50:	441e      	add	r6, r3
 801cb52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801cb56:	4618      	mov	r0, r3
 801cb58:	f04f 0100 	mov.w	r1, #0
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	460b      	mov	r3, r1
 801cb60:	1894      	adds	r4, r2, r2
 801cb62:	61bc      	str	r4, [r7, #24]
 801cb64:	415b      	adcs	r3, r3
 801cb66:	61fb      	str	r3, [r7, #28]
 801cb68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cb6c:	1812      	adds	r2, r2, r0
 801cb6e:	eb41 0303 	adc.w	r3, r1, r3
 801cb72:	f04f 0400 	mov.w	r4, #0
 801cb76:	f04f 0500 	mov.w	r5, #0
 801cb7a:	00dd      	lsls	r5, r3, #3
 801cb7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801cb80:	00d4      	lsls	r4, r2, #3
 801cb82:	4622      	mov	r2, r4
 801cb84:	462b      	mov	r3, r5
 801cb86:	1814      	adds	r4, r2, r0
 801cb88:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 801cb8c:	414b      	adcs	r3, r1
 801cb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cb96:	685b      	ldr	r3, [r3, #4]
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f04f 0100 	mov.w	r1, #0
 801cb9e:	f04f 0200 	mov.w	r2, #0
 801cba2:	f04f 0300 	mov.w	r3, #0
 801cba6:	008b      	lsls	r3, r1, #2
 801cba8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801cbac:	0082      	lsls	r2, r0, #2
 801cbae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801cbb2:	f7e4 f813 	bl	8000bdc <__aeabi_uldivmod>
 801cbb6:	4602      	mov	r2, r0
 801cbb8:	460b      	mov	r3, r1
 801cbba:	4b74      	ldr	r3, [pc, #464]	; (801cd8c <UART_SetConfig+0x734>)
 801cbbc:	fba3 1302 	umull	r1, r3, r3, r2
 801cbc0:	095b      	lsrs	r3, r3, #5
 801cbc2:	2164      	movs	r1, #100	; 0x64
 801cbc4:	fb01 f303 	mul.w	r3, r1, r3
 801cbc8:	1ad3      	subs	r3, r2, r3
 801cbca:	011b      	lsls	r3, r3, #4
 801cbcc:	3332      	adds	r3, #50	; 0x32
 801cbce:	4a6f      	ldr	r2, [pc, #444]	; (801cd8c <UART_SetConfig+0x734>)
 801cbd0:	fba2 2303 	umull	r2, r3, r2, r3
 801cbd4:	095b      	lsrs	r3, r3, #5
 801cbd6:	f003 020f 	and.w	r2, r3, #15
 801cbda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	4432      	add	r2, r6
 801cbe2:	609a      	str	r2, [r3, #8]
 801cbe4:	e0c9      	b.n	801cd7a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801cbe6:	f7ff fbd5 	bl	801c394 <HAL_RCC_GetPCLK1Freq>
 801cbea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cbee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801cbf2:	461c      	mov	r4, r3
 801cbf4:	f04f 0500 	mov.w	r5, #0
 801cbf8:	4622      	mov	r2, r4
 801cbfa:	462b      	mov	r3, r5
 801cbfc:	1891      	adds	r1, r2, r2
 801cbfe:	6139      	str	r1, [r7, #16]
 801cc00:	415b      	adcs	r3, r3
 801cc02:	617b      	str	r3, [r7, #20]
 801cc04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cc08:	1912      	adds	r2, r2, r4
 801cc0a:	eb45 0303 	adc.w	r3, r5, r3
 801cc0e:	f04f 0000 	mov.w	r0, #0
 801cc12:	f04f 0100 	mov.w	r1, #0
 801cc16:	00d9      	lsls	r1, r3, #3
 801cc18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801cc1c:	00d0      	lsls	r0, r2, #3
 801cc1e:	4602      	mov	r2, r0
 801cc20:	460b      	mov	r3, r1
 801cc22:	eb12 0804 	adds.w	r8, r2, r4
 801cc26:	eb43 0905 	adc.w	r9, r3, r5
 801cc2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cc2e:	685b      	ldr	r3, [r3, #4]
 801cc30:	4618      	mov	r0, r3
 801cc32:	f04f 0100 	mov.w	r1, #0
 801cc36:	f04f 0200 	mov.w	r2, #0
 801cc3a:	f04f 0300 	mov.w	r3, #0
 801cc3e:	008b      	lsls	r3, r1, #2
 801cc40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801cc44:	0082      	lsls	r2, r0, #2
 801cc46:	4640      	mov	r0, r8
 801cc48:	4649      	mov	r1, r9
 801cc4a:	f7e3 ffc7 	bl	8000bdc <__aeabi_uldivmod>
 801cc4e:	4602      	mov	r2, r0
 801cc50:	460b      	mov	r3, r1
 801cc52:	4b4e      	ldr	r3, [pc, #312]	; (801cd8c <UART_SetConfig+0x734>)
 801cc54:	fba3 2302 	umull	r2, r3, r3, r2
 801cc58:	095b      	lsrs	r3, r3, #5
 801cc5a:	011e      	lsls	r6, r3, #4
 801cc5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801cc60:	4618      	mov	r0, r3
 801cc62:	f04f 0100 	mov.w	r1, #0
 801cc66:	4602      	mov	r2, r0
 801cc68:	460b      	mov	r3, r1
 801cc6a:	1894      	adds	r4, r2, r2
 801cc6c:	60bc      	str	r4, [r7, #8]
 801cc6e:	415b      	adcs	r3, r3
 801cc70:	60fb      	str	r3, [r7, #12]
 801cc72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cc76:	1812      	adds	r2, r2, r0
 801cc78:	eb41 0303 	adc.w	r3, r1, r3
 801cc7c:	f04f 0400 	mov.w	r4, #0
 801cc80:	f04f 0500 	mov.w	r5, #0
 801cc84:	00dd      	lsls	r5, r3, #3
 801cc86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801cc8a:	00d4      	lsls	r4, r2, #3
 801cc8c:	4622      	mov	r2, r4
 801cc8e:	462b      	mov	r3, r5
 801cc90:	1814      	adds	r4, r2, r0
 801cc92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801cc96:	414b      	adcs	r3, r1
 801cc98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cca0:	685b      	ldr	r3, [r3, #4]
 801cca2:	4618      	mov	r0, r3
 801cca4:	f04f 0100 	mov.w	r1, #0
 801cca8:	f04f 0200 	mov.w	r2, #0
 801ccac:	f04f 0300 	mov.w	r3, #0
 801ccb0:	008b      	lsls	r3, r1, #2
 801ccb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801ccb6:	0082      	lsls	r2, r0, #2
 801ccb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ccbc:	f7e3 ff8e 	bl	8000bdc <__aeabi_uldivmod>
 801ccc0:	4602      	mov	r2, r0
 801ccc2:	460b      	mov	r3, r1
 801ccc4:	4b31      	ldr	r3, [pc, #196]	; (801cd8c <UART_SetConfig+0x734>)
 801ccc6:	fba3 1302 	umull	r1, r3, r3, r2
 801ccca:	095b      	lsrs	r3, r3, #5
 801cccc:	2164      	movs	r1, #100	; 0x64
 801ccce:	fb01 f303 	mul.w	r3, r1, r3
 801ccd2:	1ad3      	subs	r3, r2, r3
 801ccd4:	011b      	lsls	r3, r3, #4
 801ccd6:	3332      	adds	r3, #50	; 0x32
 801ccd8:	4a2c      	ldr	r2, [pc, #176]	; (801cd8c <UART_SetConfig+0x734>)
 801ccda:	fba2 2303 	umull	r2, r3, r2, r3
 801ccde:	095b      	lsrs	r3, r3, #5
 801cce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cce4:	441e      	add	r6, r3
 801cce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ccea:	4618      	mov	r0, r3
 801ccec:	f04f 0100 	mov.w	r1, #0
 801ccf0:	4602      	mov	r2, r0
 801ccf2:	460b      	mov	r3, r1
 801ccf4:	1894      	adds	r4, r2, r2
 801ccf6:	603c      	str	r4, [r7, #0]
 801ccf8:	415b      	adcs	r3, r3
 801ccfa:	607b      	str	r3, [r7, #4]
 801ccfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cd00:	1812      	adds	r2, r2, r0
 801cd02:	eb41 0303 	adc.w	r3, r1, r3
 801cd06:	f04f 0400 	mov.w	r4, #0
 801cd0a:	f04f 0500 	mov.w	r5, #0
 801cd0e:	00dd      	lsls	r5, r3, #3
 801cd10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801cd14:	00d4      	lsls	r4, r2, #3
 801cd16:	4622      	mov	r2, r4
 801cd18:	462b      	mov	r3, r5
 801cd1a:	1814      	adds	r4, r2, r0
 801cd1c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801cd20:	414b      	adcs	r3, r1
 801cd22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801cd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cd2a:	685b      	ldr	r3, [r3, #4]
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	f04f 0100 	mov.w	r1, #0
 801cd32:	f04f 0200 	mov.w	r2, #0
 801cd36:	f04f 0300 	mov.w	r3, #0
 801cd3a:	008b      	lsls	r3, r1, #2
 801cd3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801cd40:	0082      	lsls	r2, r0, #2
 801cd42:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801cd46:	f7e3 ff49 	bl	8000bdc <__aeabi_uldivmod>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	460b      	mov	r3, r1
 801cd4e:	4b0f      	ldr	r3, [pc, #60]	; (801cd8c <UART_SetConfig+0x734>)
 801cd50:	fba3 1302 	umull	r1, r3, r3, r2
 801cd54:	095b      	lsrs	r3, r3, #5
 801cd56:	2164      	movs	r1, #100	; 0x64
 801cd58:	fb01 f303 	mul.w	r3, r1, r3
 801cd5c:	1ad3      	subs	r3, r2, r3
 801cd5e:	011b      	lsls	r3, r3, #4
 801cd60:	3332      	adds	r3, #50	; 0x32
 801cd62:	4a0a      	ldr	r2, [pc, #40]	; (801cd8c <UART_SetConfig+0x734>)
 801cd64:	fba2 2303 	umull	r2, r3, r2, r3
 801cd68:	095b      	lsrs	r3, r3, #5
 801cd6a:	f003 020f 	and.w	r2, r3, #15
 801cd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	4432      	add	r2, r6
 801cd76:	609a      	str	r2, [r3, #8]
}
 801cd78:	e7ff      	b.n	801cd7a <UART_SetConfig+0x722>
 801cd7a:	bf00      	nop
 801cd7c:	37f4      	adds	r7, #244	; 0xf4
 801cd7e:	46bd      	mov	sp, r7
 801cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd84:	40011000 	.word	0x40011000
 801cd88:	40011400 	.word	0x40011400
 801cd8c:	51eb851f 	.word	0x51eb851f

0801cd90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 801cd90:	f8df d034 	ldr.w	sp, [pc, #52]	; 801cdc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 801cd94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801cd96:	e003      	b.n	801cda0 <LoopCopyDataInit>

0801cd98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801cd98:	4b0c      	ldr	r3, [pc, #48]	; (801cdcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801cd9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801cd9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801cd9e:	3104      	adds	r1, #4

0801cda0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 801cda0:	480b      	ldr	r0, [pc, #44]	; (801cdd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801cda2:	4b0c      	ldr	r3, [pc, #48]	; (801cdd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801cda4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801cda6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801cda8:	d3f6      	bcc.n	801cd98 <CopyDataInit>
  ldr  r2, =_sbss
 801cdaa:	4a0b      	ldr	r2, [pc, #44]	; (801cdd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801cdac:	e002      	b.n	801cdb4 <LoopFillZerobss>

0801cdae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 801cdae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801cdb0:	f842 3b04 	str.w	r3, [r2], #4

0801cdb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 801cdb4:	4b09      	ldr	r3, [pc, #36]	; (801cddc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801cdb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801cdb8:	d3f9      	bcc.n	801cdae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 801cdba:	f7fc f8f7 	bl	8018fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801cdbe:	f000 fad7 	bl	801d370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801cdc2:	f7fb feaf 	bl	8018b24 <main>
  bx  lr
 801cdc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801cdc8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 801cdcc:	08040860 	.word	0x08040860
  ldr  r0, =_sdata
 801cdd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801cdd4:	200009f0 	.word	0x200009f0
  ldr  r2, =_sbss
 801cdd8:	200009f0 	.word	0x200009f0
  ldr  r3, = _ebss
 801cddc:	2000aa74 	.word	0x2000aa74

0801cde0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801cde0:	e7fe      	b.n	801cde0 <ADC_IRQHandler>
	...

0801cde4 <_write>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

int _write(int file, char *ptr, int len)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b086      	sub	sp, #24
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	60f8      	str	r0, [r7, #12]
 801cdec:	60b9      	str	r1, [r7, #8]
 801cdee:	607a      	str	r2, [r7, #4]
   int i;

   if(file == 1)
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	2b01      	cmp	r3, #1
 801cdf4:	d116      	bne.n	801ce24 <_write+0x40>
   {
      for(i = 0; i < len; i++)
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	617b      	str	r3, [r7, #20]
 801cdfa:	e00e      	b.n	801ce1a <_write+0x36>
      fputc(ptr[i], stdout);
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	68ba      	ldr	r2, [r7, #8]
 801ce00:	4413      	add	r3, r2
 801ce02:	781b      	ldrb	r3, [r3, #0]
 801ce04:	461a      	mov	r2, r3
 801ce06:	4b16      	ldr	r3, [pc, #88]	; (801ce60 <_write+0x7c>)
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	689b      	ldr	r3, [r3, #8]
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	4610      	mov	r0, r2
 801ce10:	f7fb fc00 	bl	8018614 <fputc>
      for(i = 0; i < len; i++)
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	3301      	adds	r3, #1
 801ce18:	617b      	str	r3, [r7, #20]
 801ce1a:	697a      	ldr	r2, [r7, #20]
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	dbec      	blt.n	801cdfc <_write+0x18>
 801ce22:	e018      	b.n	801ce56 <_write+0x72>
   }
   else if(file == 2)
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	2b02      	cmp	r3, #2
 801ce28:	d115      	bne.n	801ce56 <_write+0x72>
   {
      for(i = 0; i < len; i++)
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	617b      	str	r3, [r7, #20]
 801ce2e:	e00e      	b.n	801ce4e <_write+0x6a>
      fputc(ptr[i], stderr);
 801ce30:	697b      	ldr	r3, [r7, #20]
 801ce32:	68ba      	ldr	r2, [r7, #8]
 801ce34:	4413      	add	r3, r2
 801ce36:	781b      	ldrb	r3, [r3, #0]
 801ce38:	461a      	mov	r2, r3
 801ce3a:	4b09      	ldr	r3, [pc, #36]	; (801ce60 <_write+0x7c>)
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	68db      	ldr	r3, [r3, #12]
 801ce40:	4619      	mov	r1, r3
 801ce42:	4610      	mov	r0, r2
 801ce44:	f7fb fbe6 	bl	8018614 <fputc>
      for(i = 0; i < len; i++)
 801ce48:	697b      	ldr	r3, [r7, #20]
 801ce4a:	3301      	adds	r3, #1
 801ce4c:	617b      	str	r3, [r7, #20]
 801ce4e:	697a      	ldr	r2, [r7, #20]
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	429a      	cmp	r2, r3
 801ce54:	dbec      	blt.n	801ce30 <_write+0x4c>
   }

   return len;
 801ce56:	687b      	ldr	r3, [r7, #4]
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3718      	adds	r7, #24
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}
 801ce60:	20000044 	.word	0x20000044

0801ce64 <_read>:

int _read(int file, char *ptr, int len)
{
 801ce64:	b480      	push	{r7}
 801ce66:	b085      	sub	sp, #20
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	60f8      	str	r0, [r7, #12]
 801ce6c:	60b9      	str	r1, [r7, #8]
 801ce6e:	607a      	str	r2, [r7, #4]
   return 0;
 801ce70:	2300      	movs	r3, #0
}
 801ce72:	4618      	mov	r0, r3
 801ce74:	3714      	adds	r7, #20
 801ce76:	46bd      	mov	sp, r7
 801ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce7c:	4770      	bx	lr
	...

0801ce80 <_sbrk>:

extern caddr_t _sbrk(int incr)
{
 801ce80:	b480      	push	{r7}
 801ce82:	b085      	sub	sp, #20
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
   static caddr_t heap_end = NULL;
   caddr_t prev_heap_end;

   if(heap_end == NULL)
 801ce88:	4b11      	ldr	r3, [pc, #68]	; (801ced0 <_sbrk+0x50>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d102      	bne.n	801ce96 <_sbrk+0x16>
      heap_end = (caddr_t) &_end;
 801ce90:	4b0f      	ldr	r3, [pc, #60]	; (801ced0 <_sbrk+0x50>)
 801ce92:	4a10      	ldr	r2, [pc, #64]	; (801ced4 <_sbrk+0x54>)
 801ce94:	601a      	str	r2, [r3, #0]

   prev_heap_end = heap_end;
 801ce96:	4b0e      	ldr	r3, [pc, #56]	; (801ced0 <_sbrk+0x50>)
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	60fb      	str	r3, [r7, #12]

   if((heap_end + incr) > (caddr_t) &_max_heap)
 801ce9c:	4b0c      	ldr	r3, [pc, #48]	; (801ced0 <_sbrk+0x50>)
 801ce9e:	681a      	ldr	r2, [r3, #0]
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	4413      	add	r3, r2
 801cea4:	4a0c      	ldr	r2, [pc, #48]	; (801ced8 <_sbrk+0x58>)
 801cea6:	4293      	cmp	r3, r2
 801cea8:	d905      	bls.n	801ceb6 <_sbrk+0x36>
   {
      errno = ENOMEM;
 801ceaa:	4b0c      	ldr	r3, [pc, #48]	; (801cedc <_sbrk+0x5c>)
 801ceac:	220c      	movs	r2, #12
 801ceae:	601a      	str	r2, [r3, #0]
      return (caddr_t) -1;
 801ceb0:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb4:	e006      	b.n	801cec4 <_sbrk+0x44>
   }

   heap_end += incr;
 801ceb6:	4b06      	ldr	r3, [pc, #24]	; (801ced0 <_sbrk+0x50>)
 801ceb8:	681a      	ldr	r2, [r3, #0]
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	4413      	add	r3, r2
 801cebe:	4a04      	ldr	r2, [pc, #16]	; (801ced0 <_sbrk+0x50>)
 801cec0:	6013      	str	r3, [r2, #0]

   return prev_heap_end;
 801cec2:	68fb      	ldr	r3, [r7, #12]
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3714      	adds	r7, #20
 801cec8:	46bd      	mov	sp, r7
 801ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cece:	4770      	bx	lr
 801ced0:	200042fc 	.word	0x200042fc
 801ced4:	2000aa74 	.word	0x2000aa74
 801ced8:	2002aa74 	.word	0x2002aa74
 801cedc:	2000aa70 	.word	0x2000aa70

0801cee0 <_close>:
{
   return -1;
}

extern int _close(int file)
{
 801cee0:	b480      	push	{r7}
 801cee2:	b083      	sub	sp, #12
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
   return -1;
 801cee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ceec:	4618      	mov	r0, r3
 801ceee:	370c      	adds	r7, #12
 801cef0:	46bd      	mov	sp, r7
 801cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef6:	4770      	bx	lr

0801cef8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
 801cef8:	b480      	push	{r7}
 801cefa:	b083      	sub	sp, #12
 801cefc:	af00      	add	r7, sp, #0
 801cefe:	6078      	str	r0, [r7, #4]
 801cf00:	6039      	str	r1, [r7, #0]
   st->st_mode = S_IFCHR;
 801cf02:	683b      	ldr	r3, [r7, #0]
 801cf04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801cf08:	605a      	str	r2, [r3, #4]
   return 0;
 801cf0a:	2300      	movs	r3, #0
}
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	370c      	adds	r7, #12
 801cf10:	46bd      	mov	sp, r7
 801cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf16:	4770      	bx	lr

0801cf18 <_isatty>:

extern int _isatty(int file)
{
 801cf18:	b480      	push	{r7}
 801cf1a:	b083      	sub	sp, #12
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
   return 1;
 801cf20:	2301      	movs	r3, #1
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	370c      	adds	r7, #12
 801cf26:	46bd      	mov	sp, r7
 801cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf2c:	4770      	bx	lr

0801cf2e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
 801cf2e:	b480      	push	{r7}
 801cf30:	b085      	sub	sp, #20
 801cf32:	af00      	add	r7, sp, #0
 801cf34:	60f8      	str	r0, [r7, #12]
 801cf36:	60b9      	str	r1, [r7, #8]
 801cf38:	607a      	str	r2, [r7, #4]
   return 0;
 801cf3a:	2300      	movs	r3, #0
}
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	3714      	adds	r7, #20
 801cf40:	46bd      	mov	sp, r7
 801cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf46:	4770      	bx	lr

0801cf48 <_exit>:

extern void _exit(int status)
{
 801cf48:	b480      	push	{r7}
 801cf4a:	b083      	sub	sp, #12
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
   while(1);
 801cf50:	e7fe      	b.n	801cf50 <_exit+0x8>

0801cf52 <_kill>:
}

extern void _kill(int pid, int sig)
{
 801cf52:	b480      	push	{r7}
 801cf54:	b083      	sub	sp, #12
 801cf56:	af00      	add	r7, sp, #0
 801cf58:	6078      	str	r0, [r7, #4]
 801cf5a:	6039      	str	r1, [r7, #0]
   return;
 801cf5c:	bf00      	nop
}
 801cf5e:	370c      	adds	r7, #12
 801cf60:	46bd      	mov	sp, r7
 801cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf66:	4770      	bx	lr

0801cf68 <_getpid>:

extern int _getpid(void)
{
 801cf68:	b480      	push	{r7}
 801cf6a:	af00      	add	r7, sp, #0
   return -1;
 801cf6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cf70:	4618      	mov	r0, r3
 801cf72:	46bd      	mov	sp, r7
 801cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf78:	4770      	bx	lr

0801cf7a <atoi>:
 801cf7a:	220a      	movs	r2, #10
 801cf7c:	2100      	movs	r1, #0
 801cf7e:	f000 bfcd 	b.w	801df1c <strtol>
	...

0801cf84 <fprintf>:
 801cf84:	b40e      	push	{r1, r2, r3}
 801cf86:	b503      	push	{r0, r1, lr}
 801cf88:	4601      	mov	r1, r0
 801cf8a:	ab03      	add	r3, sp, #12
 801cf8c:	4805      	ldr	r0, [pc, #20]	; (801cfa4 <fprintf+0x20>)
 801cf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf92:	6800      	ldr	r0, [r0, #0]
 801cf94:	9301      	str	r3, [sp, #4]
 801cf96:	f002 fa43 	bl	801f420 <_vfprintf_r>
 801cf9a:	b002      	add	sp, #8
 801cf9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfa0:	b003      	add	sp, #12
 801cfa2:	4770      	bx	lr
 801cfa4:	20000044 	.word	0x20000044

0801cfa8 <_fputs_r>:
 801cfa8:	b530      	push	{r4, r5, lr}
 801cfaa:	b087      	sub	sp, #28
 801cfac:	4605      	mov	r5, r0
 801cfae:	4608      	mov	r0, r1
 801cfb0:	4614      	mov	r4, r2
 801cfb2:	9101      	str	r1, [sp, #4]
 801cfb4:	f7e3 f976 	bl	80002a4 <strlen>
 801cfb8:	ab01      	add	r3, sp, #4
 801cfba:	9303      	str	r3, [sp, #12]
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	9005      	str	r0, [sp, #20]
 801cfc0:	9002      	str	r0, [sp, #8]
 801cfc2:	9304      	str	r3, [sp, #16]
 801cfc4:	b125      	cbz	r5, 801cfd0 <_fputs_r+0x28>
 801cfc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801cfc8:	b913      	cbnz	r3, 801cfd0 <_fputs_r+0x28>
 801cfca:	4628      	mov	r0, r5
 801cfcc:	f004 fc68 	bl	80218a0 <__sinit>
 801cfd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cfd2:	07db      	lsls	r3, r3, #31
 801cfd4:	d405      	bmi.n	801cfe2 <_fputs_r+0x3a>
 801cfd6:	89a3      	ldrh	r3, [r4, #12]
 801cfd8:	0598      	lsls	r0, r3, #22
 801cfda:	d402      	bmi.n	801cfe2 <_fputs_r+0x3a>
 801cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cfde:	f000 f9ed 	bl	801d3bc <__retarget_lock_acquire_recursive>
 801cfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfe6:	0499      	lsls	r1, r3, #18
 801cfe8:	d406      	bmi.n	801cff8 <_fputs_r+0x50>
 801cfea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801cfee:	81a3      	strh	r3, [r4, #12]
 801cff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801cff6:	6663      	str	r3, [r4, #100]	; 0x64
 801cff8:	aa03      	add	r2, sp, #12
 801cffa:	4628      	mov	r0, r5
 801cffc:	4621      	mov	r1, r4
 801cffe:	f000 f815 	bl	801d02c <__sfvwrite_r>
 801d002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d004:	07da      	lsls	r2, r3, #31
 801d006:	4605      	mov	r5, r0
 801d008:	d405      	bmi.n	801d016 <_fputs_r+0x6e>
 801d00a:	89a3      	ldrh	r3, [r4, #12]
 801d00c:	059b      	lsls	r3, r3, #22
 801d00e:	d402      	bmi.n	801d016 <_fputs_r+0x6e>
 801d010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d012:	f000 f9d4 	bl	801d3be <__retarget_lock_release_recursive>
 801d016:	4628      	mov	r0, r5
 801d018:	b007      	add	sp, #28
 801d01a:	bd30      	pop	{r4, r5, pc}

0801d01c <fputs>:
 801d01c:	4b02      	ldr	r3, [pc, #8]	; (801d028 <fputs+0xc>)
 801d01e:	460a      	mov	r2, r1
 801d020:	4601      	mov	r1, r0
 801d022:	6818      	ldr	r0, [r3, #0]
 801d024:	f7ff bfc0 	b.w	801cfa8 <_fputs_r>
 801d028:	20000044 	.word	0x20000044

0801d02c <__sfvwrite_r>:
 801d02c:	6893      	ldr	r3, [r2, #8]
 801d02e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d032:	4606      	mov	r6, r0
 801d034:	460c      	mov	r4, r1
 801d036:	4690      	mov	r8, r2
 801d038:	b91b      	cbnz	r3, 801d042 <__sfvwrite_r+0x16>
 801d03a:	2000      	movs	r0, #0
 801d03c:	b003      	add	sp, #12
 801d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d042:	898b      	ldrh	r3, [r1, #12]
 801d044:	0718      	lsls	r0, r3, #28
 801d046:	d550      	bpl.n	801d0ea <__sfvwrite_r+0xbe>
 801d048:	690b      	ldr	r3, [r1, #16]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d04d      	beq.n	801d0ea <__sfvwrite_r+0xbe>
 801d04e:	89a3      	ldrh	r3, [r4, #12]
 801d050:	f8d8 7000 	ldr.w	r7, [r8]
 801d054:	f013 0902 	ands.w	r9, r3, #2
 801d058:	d16c      	bne.n	801d134 <__sfvwrite_r+0x108>
 801d05a:	f013 0301 	ands.w	r3, r3, #1
 801d05e:	f000 809c 	beq.w	801d19a <__sfvwrite_r+0x16e>
 801d062:	4648      	mov	r0, r9
 801d064:	46ca      	mov	sl, r9
 801d066:	46cb      	mov	fp, r9
 801d068:	f1bb 0f00 	cmp.w	fp, #0
 801d06c:	f000 8103 	beq.w	801d276 <__sfvwrite_r+0x24a>
 801d070:	b950      	cbnz	r0, 801d088 <__sfvwrite_r+0x5c>
 801d072:	465a      	mov	r2, fp
 801d074:	210a      	movs	r1, #10
 801d076:	4650      	mov	r0, sl
 801d078:	f7e3 f8ba 	bl	80001f0 <memchr>
 801d07c:	2800      	cmp	r0, #0
 801d07e:	f000 80ff 	beq.w	801d280 <__sfvwrite_r+0x254>
 801d082:	3001      	adds	r0, #1
 801d084:	eba0 090a 	sub.w	r9, r0, sl
 801d088:	6820      	ldr	r0, [r4, #0]
 801d08a:	6921      	ldr	r1, [r4, #16]
 801d08c:	6963      	ldr	r3, [r4, #20]
 801d08e:	45d9      	cmp	r9, fp
 801d090:	464a      	mov	r2, r9
 801d092:	bf28      	it	cs
 801d094:	465a      	movcs	r2, fp
 801d096:	4288      	cmp	r0, r1
 801d098:	f240 80f5 	bls.w	801d286 <__sfvwrite_r+0x25a>
 801d09c:	68a5      	ldr	r5, [r4, #8]
 801d09e:	441d      	add	r5, r3
 801d0a0:	42aa      	cmp	r2, r5
 801d0a2:	f340 80f0 	ble.w	801d286 <__sfvwrite_r+0x25a>
 801d0a6:	4651      	mov	r1, sl
 801d0a8:	462a      	mov	r2, r5
 801d0aa:	f000 fbf7 	bl	801d89c <memmove>
 801d0ae:	6823      	ldr	r3, [r4, #0]
 801d0b0:	442b      	add	r3, r5
 801d0b2:	6023      	str	r3, [r4, #0]
 801d0b4:	4621      	mov	r1, r4
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	f004 fb86 	bl	80217c8 <_fflush_r>
 801d0bc:	2800      	cmp	r0, #0
 801d0be:	d167      	bne.n	801d190 <__sfvwrite_r+0x164>
 801d0c0:	ebb9 0905 	subs.w	r9, r9, r5
 801d0c4:	f040 80f7 	bne.w	801d2b6 <__sfvwrite_r+0x28a>
 801d0c8:	4621      	mov	r1, r4
 801d0ca:	4630      	mov	r0, r6
 801d0cc:	f004 fb7c 	bl	80217c8 <_fflush_r>
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	d15d      	bne.n	801d190 <__sfvwrite_r+0x164>
 801d0d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d0d8:	44aa      	add	sl, r5
 801d0da:	ebab 0b05 	sub.w	fp, fp, r5
 801d0de:	1b55      	subs	r5, r2, r5
 801d0e0:	f8c8 5008 	str.w	r5, [r8, #8]
 801d0e4:	2d00      	cmp	r5, #0
 801d0e6:	d1bf      	bne.n	801d068 <__sfvwrite_r+0x3c>
 801d0e8:	e7a7      	b.n	801d03a <__sfvwrite_r+0xe>
 801d0ea:	4621      	mov	r1, r4
 801d0ec:	4630      	mov	r0, r6
 801d0ee:	f003 fc0d 	bl	802090c <__swsetup_r>
 801d0f2:	2800      	cmp	r0, #0
 801d0f4:	d0ab      	beq.n	801d04e <__sfvwrite_r+0x22>
 801d0f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d0fa:	e79f      	b.n	801d03c <__sfvwrite_r+0x10>
 801d0fc:	e9d7 b900 	ldrd	fp, r9, [r7]
 801d100:	3708      	adds	r7, #8
 801d102:	f1b9 0f00 	cmp.w	r9, #0
 801d106:	d0f9      	beq.n	801d0fc <__sfvwrite_r+0xd0>
 801d108:	45d1      	cmp	r9, sl
 801d10a:	464b      	mov	r3, r9
 801d10c:	69e1      	ldr	r1, [r4, #28]
 801d10e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d110:	bf28      	it	cs
 801d112:	4653      	movcs	r3, sl
 801d114:	465a      	mov	r2, fp
 801d116:	4630      	mov	r0, r6
 801d118:	47a8      	blx	r5
 801d11a:	2800      	cmp	r0, #0
 801d11c:	dd38      	ble.n	801d190 <__sfvwrite_r+0x164>
 801d11e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d122:	4483      	add	fp, r0
 801d124:	eba9 0900 	sub.w	r9, r9, r0
 801d128:	1a18      	subs	r0, r3, r0
 801d12a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d12e:	2800      	cmp	r0, #0
 801d130:	d1e7      	bne.n	801d102 <__sfvwrite_r+0xd6>
 801d132:	e782      	b.n	801d03a <__sfvwrite_r+0xe>
 801d134:	f04f 0b00 	mov.w	fp, #0
 801d138:	f8df a180 	ldr.w	sl, [pc, #384]	; 801d2bc <__sfvwrite_r+0x290>
 801d13c:	46d9      	mov	r9, fp
 801d13e:	e7e0      	b.n	801d102 <__sfvwrite_r+0xd6>
 801d140:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801d144:	3708      	adds	r7, #8
 801d146:	f1ba 0f00 	cmp.w	sl, #0
 801d14a:	d0f9      	beq.n	801d140 <__sfvwrite_r+0x114>
 801d14c:	89a3      	ldrh	r3, [r4, #12]
 801d14e:	68a2      	ldr	r2, [r4, #8]
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	0599      	lsls	r1, r3, #22
 801d154:	d563      	bpl.n	801d21e <__sfvwrite_r+0x1f2>
 801d156:	4552      	cmp	r2, sl
 801d158:	d836      	bhi.n	801d1c8 <__sfvwrite_r+0x19c>
 801d15a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801d15e:	d033      	beq.n	801d1c8 <__sfvwrite_r+0x19c>
 801d160:	6921      	ldr	r1, [r4, #16]
 801d162:	6965      	ldr	r5, [r4, #20]
 801d164:	eba0 0b01 	sub.w	fp, r0, r1
 801d168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d170:	f10b 0201 	add.w	r2, fp, #1
 801d174:	106d      	asrs	r5, r5, #1
 801d176:	4452      	add	r2, sl
 801d178:	4295      	cmp	r5, r2
 801d17a:	bf38      	it	cc
 801d17c:	4615      	movcc	r5, r2
 801d17e:	055b      	lsls	r3, r3, #21
 801d180:	d53d      	bpl.n	801d1fe <__sfvwrite_r+0x1d2>
 801d182:	4629      	mov	r1, r5
 801d184:	4630      	mov	r0, r6
 801d186:	f000 f92b 	bl	801d3e0 <_malloc_r>
 801d18a:	b948      	cbnz	r0, 801d1a0 <__sfvwrite_r+0x174>
 801d18c:	230c      	movs	r3, #12
 801d18e:	6033      	str	r3, [r6, #0]
 801d190:	89a3      	ldrh	r3, [r4, #12]
 801d192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d196:	81a3      	strh	r3, [r4, #12]
 801d198:	e7ad      	b.n	801d0f6 <__sfvwrite_r+0xca>
 801d19a:	4699      	mov	r9, r3
 801d19c:	469a      	mov	sl, r3
 801d19e:	e7d2      	b.n	801d146 <__sfvwrite_r+0x11a>
 801d1a0:	465a      	mov	r2, fp
 801d1a2:	6921      	ldr	r1, [r4, #16]
 801d1a4:	9001      	str	r0, [sp, #4]
 801d1a6:	f000 fb6b 	bl	801d880 <memcpy>
 801d1aa:	89a2      	ldrh	r2, [r4, #12]
 801d1ac:	9b01      	ldr	r3, [sp, #4]
 801d1ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801d1b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d1b6:	81a2      	strh	r2, [r4, #12]
 801d1b8:	6123      	str	r3, [r4, #16]
 801d1ba:	6165      	str	r5, [r4, #20]
 801d1bc:	445b      	add	r3, fp
 801d1be:	eba5 050b 	sub.w	r5, r5, fp
 801d1c2:	6023      	str	r3, [r4, #0]
 801d1c4:	4652      	mov	r2, sl
 801d1c6:	60a5      	str	r5, [r4, #8]
 801d1c8:	4552      	cmp	r2, sl
 801d1ca:	bf28      	it	cs
 801d1cc:	4652      	movcs	r2, sl
 801d1ce:	6820      	ldr	r0, [r4, #0]
 801d1d0:	9201      	str	r2, [sp, #4]
 801d1d2:	4649      	mov	r1, r9
 801d1d4:	f000 fb62 	bl	801d89c <memmove>
 801d1d8:	68a3      	ldr	r3, [r4, #8]
 801d1da:	9a01      	ldr	r2, [sp, #4]
 801d1dc:	1a9b      	subs	r3, r3, r2
 801d1de:	60a3      	str	r3, [r4, #8]
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	441a      	add	r2, r3
 801d1e4:	4655      	mov	r5, sl
 801d1e6:	6022      	str	r2, [r4, #0]
 801d1e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801d1ec:	44a9      	add	r9, r5
 801d1ee:	ebaa 0a05 	sub.w	sl, sl, r5
 801d1f2:	1b45      	subs	r5, r0, r5
 801d1f4:	f8c8 5008 	str.w	r5, [r8, #8]
 801d1f8:	2d00      	cmp	r5, #0
 801d1fa:	d1a4      	bne.n	801d146 <__sfvwrite_r+0x11a>
 801d1fc:	e71d      	b.n	801d03a <__sfvwrite_r+0xe>
 801d1fe:	462a      	mov	r2, r5
 801d200:	4630      	mov	r0, r6
 801d202:	f000 fb79 	bl	801d8f8 <_realloc_r>
 801d206:	4603      	mov	r3, r0
 801d208:	2800      	cmp	r0, #0
 801d20a:	d1d5      	bne.n	801d1b8 <__sfvwrite_r+0x18c>
 801d20c:	6921      	ldr	r1, [r4, #16]
 801d20e:	4630      	mov	r0, r6
 801d210:	f004 fbd6 	bl	80219c0 <_free_r>
 801d214:	89a3      	ldrh	r3, [r4, #12]
 801d216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d21a:	81a3      	strh	r3, [r4, #12]
 801d21c:	e7b6      	b.n	801d18c <__sfvwrite_r+0x160>
 801d21e:	6923      	ldr	r3, [r4, #16]
 801d220:	4283      	cmp	r3, r0
 801d222:	d302      	bcc.n	801d22a <__sfvwrite_r+0x1fe>
 801d224:	6961      	ldr	r1, [r4, #20]
 801d226:	4551      	cmp	r1, sl
 801d228:	d915      	bls.n	801d256 <__sfvwrite_r+0x22a>
 801d22a:	4552      	cmp	r2, sl
 801d22c:	bf28      	it	cs
 801d22e:	4652      	movcs	r2, sl
 801d230:	4649      	mov	r1, r9
 801d232:	4615      	mov	r5, r2
 801d234:	f000 fb32 	bl	801d89c <memmove>
 801d238:	68a3      	ldr	r3, [r4, #8]
 801d23a:	6822      	ldr	r2, [r4, #0]
 801d23c:	1b5b      	subs	r3, r3, r5
 801d23e:	442a      	add	r2, r5
 801d240:	60a3      	str	r3, [r4, #8]
 801d242:	6022      	str	r2, [r4, #0]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d1cf      	bne.n	801d1e8 <__sfvwrite_r+0x1bc>
 801d248:	4621      	mov	r1, r4
 801d24a:	4630      	mov	r0, r6
 801d24c:	f004 fabc 	bl	80217c8 <_fflush_r>
 801d250:	2800      	cmp	r0, #0
 801d252:	d0c9      	beq.n	801d1e8 <__sfvwrite_r+0x1bc>
 801d254:	e79c      	b.n	801d190 <__sfvwrite_r+0x164>
 801d256:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d25a:	459a      	cmp	sl, r3
 801d25c:	bf38      	it	cc
 801d25e:	4653      	movcc	r3, sl
 801d260:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d262:	fb93 f3f1 	sdiv	r3, r3, r1
 801d266:	464a      	mov	r2, r9
 801d268:	434b      	muls	r3, r1
 801d26a:	4630      	mov	r0, r6
 801d26c:	69e1      	ldr	r1, [r4, #28]
 801d26e:	47a8      	blx	r5
 801d270:	1e05      	subs	r5, r0, #0
 801d272:	dcb9      	bgt.n	801d1e8 <__sfvwrite_r+0x1bc>
 801d274:	e78c      	b.n	801d190 <__sfvwrite_r+0x164>
 801d276:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801d27a:	2000      	movs	r0, #0
 801d27c:	3708      	adds	r7, #8
 801d27e:	e6f3      	b.n	801d068 <__sfvwrite_r+0x3c>
 801d280:	f10b 0901 	add.w	r9, fp, #1
 801d284:	e700      	b.n	801d088 <__sfvwrite_r+0x5c>
 801d286:	4293      	cmp	r3, r2
 801d288:	dc08      	bgt.n	801d29c <__sfvwrite_r+0x270>
 801d28a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d28c:	69e1      	ldr	r1, [r4, #28]
 801d28e:	4652      	mov	r2, sl
 801d290:	4630      	mov	r0, r6
 801d292:	47a8      	blx	r5
 801d294:	1e05      	subs	r5, r0, #0
 801d296:	f73f af13 	bgt.w	801d0c0 <__sfvwrite_r+0x94>
 801d29a:	e779      	b.n	801d190 <__sfvwrite_r+0x164>
 801d29c:	4651      	mov	r1, sl
 801d29e:	9201      	str	r2, [sp, #4]
 801d2a0:	f000 fafc 	bl	801d89c <memmove>
 801d2a4:	9a01      	ldr	r2, [sp, #4]
 801d2a6:	68a3      	ldr	r3, [r4, #8]
 801d2a8:	1a9b      	subs	r3, r3, r2
 801d2aa:	60a3      	str	r3, [r4, #8]
 801d2ac:	6823      	ldr	r3, [r4, #0]
 801d2ae:	4413      	add	r3, r2
 801d2b0:	6023      	str	r3, [r4, #0]
 801d2b2:	4615      	mov	r5, r2
 801d2b4:	e704      	b.n	801d0c0 <__sfvwrite_r+0x94>
 801d2b6:	2001      	movs	r0, #1
 801d2b8:	e70c      	b.n	801d0d4 <__sfvwrite_r+0xa8>
 801d2ba:	bf00      	nop
 801d2bc:	7ffffc00 	.word	0x7ffffc00

0801d2c0 <_fwrite_r>:
 801d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c4:	b086      	sub	sp, #24
 801d2c6:	fb02 f603 	mul.w	r6, r2, r3
 801d2ca:	461d      	mov	r5, r3
 801d2cc:	ab01      	add	r3, sp, #4
 801d2ce:	9303      	str	r3, [sp, #12]
 801d2d0:	2301      	movs	r3, #1
 801d2d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d2d4:	9101      	str	r1, [sp, #4]
 801d2d6:	4690      	mov	r8, r2
 801d2d8:	9602      	str	r6, [sp, #8]
 801d2da:	9605      	str	r6, [sp, #20]
 801d2dc:	9304      	str	r3, [sp, #16]
 801d2de:	4607      	mov	r7, r0
 801d2e0:	b118      	cbz	r0, 801d2ea <_fwrite_r+0x2a>
 801d2e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d2e4:	b90b      	cbnz	r3, 801d2ea <_fwrite_r+0x2a>
 801d2e6:	f004 fadb 	bl	80218a0 <__sinit>
 801d2ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2ec:	07d8      	lsls	r0, r3, #31
 801d2ee:	d405      	bmi.n	801d2fc <_fwrite_r+0x3c>
 801d2f0:	89a3      	ldrh	r3, [r4, #12]
 801d2f2:	0599      	lsls	r1, r3, #22
 801d2f4:	d402      	bmi.n	801d2fc <_fwrite_r+0x3c>
 801d2f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2f8:	f000 f860 	bl	801d3bc <__retarget_lock_acquire_recursive>
 801d2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d300:	049a      	lsls	r2, r3, #18
 801d302:	d406      	bmi.n	801d312 <_fwrite_r+0x52>
 801d304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d308:	81a3      	strh	r3, [r4, #12]
 801d30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d30c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d310:	6663      	str	r3, [r4, #100]	; 0x64
 801d312:	aa03      	add	r2, sp, #12
 801d314:	4621      	mov	r1, r4
 801d316:	4638      	mov	r0, r7
 801d318:	f7ff fe88 	bl	801d02c <__sfvwrite_r>
 801d31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d31e:	b958      	cbnz	r0, 801d338 <_fwrite_r+0x78>
 801d320:	07d8      	lsls	r0, r3, #31
 801d322:	d405      	bmi.n	801d330 <_fwrite_r+0x70>
 801d324:	89a3      	ldrh	r3, [r4, #12]
 801d326:	0599      	lsls	r1, r3, #22
 801d328:	d402      	bmi.n	801d330 <_fwrite_r+0x70>
 801d32a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d32c:	f000 f847 	bl	801d3be <__retarget_lock_release_recursive>
 801d330:	4628      	mov	r0, r5
 801d332:	b006      	add	sp, #24
 801d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d338:	07da      	lsls	r2, r3, #31
 801d33a:	d405      	bmi.n	801d348 <_fwrite_r+0x88>
 801d33c:	89a3      	ldrh	r3, [r4, #12]
 801d33e:	059b      	lsls	r3, r3, #22
 801d340:	d402      	bmi.n	801d348 <_fwrite_r+0x88>
 801d342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d344:	f000 f83b 	bl	801d3be <__retarget_lock_release_recursive>
 801d348:	9d05      	ldr	r5, [sp, #20]
 801d34a:	1b75      	subs	r5, r6, r5
 801d34c:	fbb5 f5f8 	udiv	r5, r5, r8
 801d350:	e7ee      	b.n	801d330 <_fwrite_r+0x70>
	...

0801d354 <fwrite>:
 801d354:	b507      	push	{r0, r1, r2, lr}
 801d356:	9300      	str	r3, [sp, #0]
 801d358:	4613      	mov	r3, r2
 801d35a:	460a      	mov	r2, r1
 801d35c:	4601      	mov	r1, r0
 801d35e:	4803      	ldr	r0, [pc, #12]	; (801d36c <fwrite+0x18>)
 801d360:	6800      	ldr	r0, [r0, #0]
 801d362:	f7ff ffad 	bl	801d2c0 <_fwrite_r>
 801d366:	b003      	add	sp, #12
 801d368:	f85d fb04 	ldr.w	pc, [sp], #4
 801d36c:	20000044 	.word	0x20000044

0801d370 <__libc_init_array>:
 801d370:	b570      	push	{r4, r5, r6, lr}
 801d372:	4d0d      	ldr	r5, [pc, #52]	; (801d3a8 <__libc_init_array+0x38>)
 801d374:	4c0d      	ldr	r4, [pc, #52]	; (801d3ac <__libc_init_array+0x3c>)
 801d376:	1b64      	subs	r4, r4, r5
 801d378:	10a4      	asrs	r4, r4, #2
 801d37a:	2600      	movs	r6, #0
 801d37c:	42a6      	cmp	r6, r4
 801d37e:	d109      	bne.n	801d394 <__libc_init_array+0x24>
 801d380:	4d0b      	ldr	r5, [pc, #44]	; (801d3b0 <__libc_init_array+0x40>)
 801d382:	4c0c      	ldr	r4, [pc, #48]	; (801d3b4 <__libc_init_array+0x44>)
 801d384:	f006 f828 	bl	80233d8 <_init>
 801d388:	1b64      	subs	r4, r4, r5
 801d38a:	10a4      	asrs	r4, r4, #2
 801d38c:	2600      	movs	r6, #0
 801d38e:	42a6      	cmp	r6, r4
 801d390:	d105      	bne.n	801d39e <__libc_init_array+0x2e>
 801d392:	bd70      	pop	{r4, r5, r6, pc}
 801d394:	f855 3b04 	ldr.w	r3, [r5], #4
 801d398:	4798      	blx	r3
 801d39a:	3601      	adds	r6, #1
 801d39c:	e7ee      	b.n	801d37c <__libc_init_array+0xc>
 801d39e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d3a2:	4798      	blx	r3
 801d3a4:	3601      	adds	r6, #1
 801d3a6:	e7f2      	b.n	801d38e <__libc_init_array+0x1e>
 801d3a8:	08040854 	.word	0x08040854
 801d3ac:	08040854 	.word	0x08040854
 801d3b0:	08040854 	.word	0x08040854
 801d3b4:	0804085c 	.word	0x0804085c

0801d3b8 <__retarget_lock_init_recursive>:
 801d3b8:	4770      	bx	lr

0801d3ba <__retarget_lock_close_recursive>:
 801d3ba:	4770      	bx	lr

0801d3bc <__retarget_lock_acquire_recursive>:
 801d3bc:	4770      	bx	lr

0801d3be <__retarget_lock_release_recursive>:
 801d3be:	4770      	bx	lr

0801d3c0 <malloc>:
 801d3c0:	4b02      	ldr	r3, [pc, #8]	; (801d3cc <malloc+0xc>)
 801d3c2:	4601      	mov	r1, r0
 801d3c4:	6818      	ldr	r0, [r3, #0]
 801d3c6:	f000 b80b 	b.w	801d3e0 <_malloc_r>
 801d3ca:	bf00      	nop
 801d3cc:	20000044 	.word	0x20000044

0801d3d0 <free>:
 801d3d0:	4b02      	ldr	r3, [pc, #8]	; (801d3dc <free+0xc>)
 801d3d2:	4601      	mov	r1, r0
 801d3d4:	6818      	ldr	r0, [r3, #0]
 801d3d6:	f004 baf3 	b.w	80219c0 <_free_r>
 801d3da:	bf00      	nop
 801d3dc:	20000044 	.word	0x20000044

0801d3e0 <_malloc_r>:
 801d3e0:	f101 030b 	add.w	r3, r1, #11
 801d3e4:	2b16      	cmp	r3, #22
 801d3e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ea:	4605      	mov	r5, r0
 801d3ec:	d906      	bls.n	801d3fc <_malloc_r+0x1c>
 801d3ee:	f033 0707 	bics.w	r7, r3, #7
 801d3f2:	d504      	bpl.n	801d3fe <_malloc_r+0x1e>
 801d3f4:	230c      	movs	r3, #12
 801d3f6:	602b      	str	r3, [r5, #0]
 801d3f8:	2400      	movs	r4, #0
 801d3fa:	e1ae      	b.n	801d75a <_malloc_r+0x37a>
 801d3fc:	2710      	movs	r7, #16
 801d3fe:	42b9      	cmp	r1, r7
 801d400:	d8f8      	bhi.n	801d3f4 <_malloc_r+0x14>
 801d402:	4628      	mov	r0, r5
 801d404:	f000 fa6c 	bl	801d8e0 <__malloc_lock>
 801d408:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801d40c:	4ec3      	ldr	r6, [pc, #780]	; (801d71c <_malloc_r+0x33c>)
 801d40e:	d238      	bcs.n	801d482 <_malloc_r+0xa2>
 801d410:	f107 0208 	add.w	r2, r7, #8
 801d414:	4432      	add	r2, r6
 801d416:	f1a2 0108 	sub.w	r1, r2, #8
 801d41a:	6854      	ldr	r4, [r2, #4]
 801d41c:	428c      	cmp	r4, r1
 801d41e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801d422:	d102      	bne.n	801d42a <_malloc_r+0x4a>
 801d424:	68d4      	ldr	r4, [r2, #12]
 801d426:	42a2      	cmp	r2, r4
 801d428:	d010      	beq.n	801d44c <_malloc_r+0x6c>
 801d42a:	6863      	ldr	r3, [r4, #4]
 801d42c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801d430:	f023 0303 	bic.w	r3, r3, #3
 801d434:	60ca      	str	r2, [r1, #12]
 801d436:	4423      	add	r3, r4
 801d438:	6091      	str	r1, [r2, #8]
 801d43a:	685a      	ldr	r2, [r3, #4]
 801d43c:	f042 0201 	orr.w	r2, r2, #1
 801d440:	605a      	str	r2, [r3, #4]
 801d442:	4628      	mov	r0, r5
 801d444:	f000 fa52 	bl	801d8ec <__malloc_unlock>
 801d448:	3408      	adds	r4, #8
 801d44a:	e186      	b.n	801d75a <_malloc_r+0x37a>
 801d44c:	3302      	adds	r3, #2
 801d44e:	4ab4      	ldr	r2, [pc, #720]	; (801d720 <_malloc_r+0x340>)
 801d450:	6934      	ldr	r4, [r6, #16]
 801d452:	4294      	cmp	r4, r2
 801d454:	4611      	mov	r1, r2
 801d456:	d077      	beq.n	801d548 <_malloc_r+0x168>
 801d458:	6860      	ldr	r0, [r4, #4]
 801d45a:	f020 0c03 	bic.w	ip, r0, #3
 801d45e:	ebac 0007 	sub.w	r0, ip, r7
 801d462:	280f      	cmp	r0, #15
 801d464:	dd48      	ble.n	801d4f8 <_malloc_r+0x118>
 801d466:	19e1      	adds	r1, r4, r7
 801d468:	f040 0301 	orr.w	r3, r0, #1
 801d46c:	f047 0701 	orr.w	r7, r7, #1
 801d470:	6067      	str	r7, [r4, #4]
 801d472:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801d476:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801d47a:	604b      	str	r3, [r1, #4]
 801d47c:	f844 000c 	str.w	r0, [r4, ip]
 801d480:	e7df      	b.n	801d442 <_malloc_r+0x62>
 801d482:	0a7b      	lsrs	r3, r7, #9
 801d484:	d02a      	beq.n	801d4dc <_malloc_r+0xfc>
 801d486:	2b04      	cmp	r3, #4
 801d488:	d812      	bhi.n	801d4b0 <_malloc_r+0xd0>
 801d48a:	09bb      	lsrs	r3, r7, #6
 801d48c:	3338      	adds	r3, #56	; 0x38
 801d48e:	1c5a      	adds	r2, r3, #1
 801d490:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801d494:	f1a2 0c08 	sub.w	ip, r2, #8
 801d498:	6854      	ldr	r4, [r2, #4]
 801d49a:	4564      	cmp	r4, ip
 801d49c:	d006      	beq.n	801d4ac <_malloc_r+0xcc>
 801d49e:	6862      	ldr	r2, [r4, #4]
 801d4a0:	f022 0203 	bic.w	r2, r2, #3
 801d4a4:	1bd0      	subs	r0, r2, r7
 801d4a6:	280f      	cmp	r0, #15
 801d4a8:	dd1c      	ble.n	801d4e4 <_malloc_r+0x104>
 801d4aa:	3b01      	subs	r3, #1
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	e7ce      	b.n	801d44e <_malloc_r+0x6e>
 801d4b0:	2b14      	cmp	r3, #20
 801d4b2:	d801      	bhi.n	801d4b8 <_malloc_r+0xd8>
 801d4b4:	335b      	adds	r3, #91	; 0x5b
 801d4b6:	e7ea      	b.n	801d48e <_malloc_r+0xae>
 801d4b8:	2b54      	cmp	r3, #84	; 0x54
 801d4ba:	d802      	bhi.n	801d4c2 <_malloc_r+0xe2>
 801d4bc:	0b3b      	lsrs	r3, r7, #12
 801d4be:	336e      	adds	r3, #110	; 0x6e
 801d4c0:	e7e5      	b.n	801d48e <_malloc_r+0xae>
 801d4c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801d4c6:	d802      	bhi.n	801d4ce <_malloc_r+0xee>
 801d4c8:	0bfb      	lsrs	r3, r7, #15
 801d4ca:	3377      	adds	r3, #119	; 0x77
 801d4cc:	e7df      	b.n	801d48e <_malloc_r+0xae>
 801d4ce:	f240 5254 	movw	r2, #1364	; 0x554
 801d4d2:	4293      	cmp	r3, r2
 801d4d4:	d804      	bhi.n	801d4e0 <_malloc_r+0x100>
 801d4d6:	0cbb      	lsrs	r3, r7, #18
 801d4d8:	337c      	adds	r3, #124	; 0x7c
 801d4da:	e7d8      	b.n	801d48e <_malloc_r+0xae>
 801d4dc:	233f      	movs	r3, #63	; 0x3f
 801d4de:	e7d6      	b.n	801d48e <_malloc_r+0xae>
 801d4e0:	237e      	movs	r3, #126	; 0x7e
 801d4e2:	e7d4      	b.n	801d48e <_malloc_r+0xae>
 801d4e4:	2800      	cmp	r0, #0
 801d4e6:	68e1      	ldr	r1, [r4, #12]
 801d4e8:	db04      	blt.n	801d4f4 <_malloc_r+0x114>
 801d4ea:	68a3      	ldr	r3, [r4, #8]
 801d4ec:	60d9      	str	r1, [r3, #12]
 801d4ee:	608b      	str	r3, [r1, #8]
 801d4f0:	18a3      	adds	r3, r4, r2
 801d4f2:	e7a2      	b.n	801d43a <_malloc_r+0x5a>
 801d4f4:	460c      	mov	r4, r1
 801d4f6:	e7d0      	b.n	801d49a <_malloc_r+0xba>
 801d4f8:	2800      	cmp	r0, #0
 801d4fa:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801d4fe:	db07      	blt.n	801d510 <_malloc_r+0x130>
 801d500:	44a4      	add	ip, r4
 801d502:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d506:	f043 0301 	orr.w	r3, r3, #1
 801d50a:	f8cc 3004 	str.w	r3, [ip, #4]
 801d50e:	e798      	b.n	801d442 <_malloc_r+0x62>
 801d510:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801d514:	6870      	ldr	r0, [r6, #4]
 801d516:	f080 809e 	bcs.w	801d656 <_malloc_r+0x276>
 801d51a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801d51e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801d522:	f04f 0c01 	mov.w	ip, #1
 801d526:	3201      	adds	r2, #1
 801d528:	fa0c fc0e 	lsl.w	ip, ip, lr
 801d52c:	ea4c 0000 	orr.w	r0, ip, r0
 801d530:	6070      	str	r0, [r6, #4]
 801d532:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801d536:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801d53a:	3808      	subs	r0, #8
 801d53c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801d540:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801d544:	f8cc 400c 	str.w	r4, [ip, #12]
 801d548:	2001      	movs	r0, #1
 801d54a:	109a      	asrs	r2, r3, #2
 801d54c:	fa00 f202 	lsl.w	r2, r0, r2
 801d550:	6870      	ldr	r0, [r6, #4]
 801d552:	4290      	cmp	r0, r2
 801d554:	d326      	bcc.n	801d5a4 <_malloc_r+0x1c4>
 801d556:	4210      	tst	r0, r2
 801d558:	d106      	bne.n	801d568 <_malloc_r+0x188>
 801d55a:	f023 0303 	bic.w	r3, r3, #3
 801d55e:	0052      	lsls	r2, r2, #1
 801d560:	4210      	tst	r0, r2
 801d562:	f103 0304 	add.w	r3, r3, #4
 801d566:	d0fa      	beq.n	801d55e <_malloc_r+0x17e>
 801d568:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801d56c:	46c1      	mov	r9, r8
 801d56e:	469e      	mov	lr, r3
 801d570:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801d574:	454c      	cmp	r4, r9
 801d576:	f040 80b3 	bne.w	801d6e0 <_malloc_r+0x300>
 801d57a:	f10e 0e01 	add.w	lr, lr, #1
 801d57e:	f01e 0f03 	tst.w	lr, #3
 801d582:	f109 0908 	add.w	r9, r9, #8
 801d586:	d1f3      	bne.n	801d570 <_malloc_r+0x190>
 801d588:	0798      	lsls	r0, r3, #30
 801d58a:	f040 80ec 	bne.w	801d766 <_malloc_r+0x386>
 801d58e:	6873      	ldr	r3, [r6, #4]
 801d590:	ea23 0302 	bic.w	r3, r3, r2
 801d594:	6073      	str	r3, [r6, #4]
 801d596:	6870      	ldr	r0, [r6, #4]
 801d598:	0052      	lsls	r2, r2, #1
 801d59a:	4290      	cmp	r0, r2
 801d59c:	d302      	bcc.n	801d5a4 <_malloc_r+0x1c4>
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	f040 80ee 	bne.w	801d780 <_malloc_r+0x3a0>
 801d5a4:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801d5a8:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d5ac:	f021 0903 	bic.w	r9, r1, #3
 801d5b0:	45b9      	cmp	r9, r7
 801d5b2:	d304      	bcc.n	801d5be <_malloc_r+0x1de>
 801d5b4:	eba9 0207 	sub.w	r2, r9, r7
 801d5b8:	2a0f      	cmp	r2, #15
 801d5ba:	f300 8149 	bgt.w	801d850 <_malloc_r+0x470>
 801d5be:	4a59      	ldr	r2, [pc, #356]	; (801d724 <_malloc_r+0x344>)
 801d5c0:	6811      	ldr	r1, [r2, #0]
 801d5c2:	3110      	adds	r1, #16
 801d5c4:	eb0b 0309 	add.w	r3, fp, r9
 801d5c8:	4439      	add	r1, r7
 801d5ca:	2008      	movs	r0, #8
 801d5cc:	9301      	str	r3, [sp, #4]
 801d5ce:	9100      	str	r1, [sp, #0]
 801d5d0:	f001 ff16 	bl	801f400 <sysconf>
 801d5d4:	4a54      	ldr	r2, [pc, #336]	; (801d728 <_malloc_r+0x348>)
 801d5d6:	e9dd 1300 	ldrd	r1, r3, [sp]
 801d5da:	4680      	mov	r8, r0
 801d5dc:	6810      	ldr	r0, [r2, #0]
 801d5de:	3001      	adds	r0, #1
 801d5e0:	bf1f      	itttt	ne
 801d5e2:	f101 31ff 	addne.w	r1, r1, #4294967295
 801d5e6:	4441      	addne	r1, r8
 801d5e8:	f1c8 0000 	rsbne	r0, r8, #0
 801d5ec:	4001      	andne	r1, r0
 801d5ee:	4628      	mov	r0, r5
 801d5f0:	e9cd 1300 	strd	r1, r3, [sp]
 801d5f4:	f000 fb26 	bl	801dc44 <_sbrk_r>
 801d5f8:	1c42      	adds	r2, r0, #1
 801d5fa:	4604      	mov	r4, r0
 801d5fc:	f000 80fc 	beq.w	801d7f8 <_malloc_r+0x418>
 801d600:	9b01      	ldr	r3, [sp, #4]
 801d602:	9900      	ldr	r1, [sp, #0]
 801d604:	4a48      	ldr	r2, [pc, #288]	; (801d728 <_malloc_r+0x348>)
 801d606:	4283      	cmp	r3, r0
 801d608:	d902      	bls.n	801d610 <_malloc_r+0x230>
 801d60a:	45b3      	cmp	fp, r6
 801d60c:	f040 80f4 	bne.w	801d7f8 <_malloc_r+0x418>
 801d610:	f8df a120 	ldr.w	sl, [pc, #288]	; 801d734 <_malloc_r+0x354>
 801d614:	f8da 0000 	ldr.w	r0, [sl]
 801d618:	42a3      	cmp	r3, r4
 801d61a:	eb00 0e01 	add.w	lr, r0, r1
 801d61e:	f8ca e000 	str.w	lr, [sl]
 801d622:	f108 3cff 	add.w	ip, r8, #4294967295
 801d626:	f040 80ad 	bne.w	801d784 <_malloc_r+0x3a4>
 801d62a:	ea13 0f0c 	tst.w	r3, ip
 801d62e:	f040 80a9 	bne.w	801d784 <_malloc_r+0x3a4>
 801d632:	68b3      	ldr	r3, [r6, #8]
 801d634:	4449      	add	r1, r9
 801d636:	f041 0101 	orr.w	r1, r1, #1
 801d63a:	6059      	str	r1, [r3, #4]
 801d63c:	4a3b      	ldr	r2, [pc, #236]	; (801d72c <_malloc_r+0x34c>)
 801d63e:	f8da 3000 	ldr.w	r3, [sl]
 801d642:	6811      	ldr	r1, [r2, #0]
 801d644:	428b      	cmp	r3, r1
 801d646:	bf88      	it	hi
 801d648:	6013      	strhi	r3, [r2, #0]
 801d64a:	4a39      	ldr	r2, [pc, #228]	; (801d730 <_malloc_r+0x350>)
 801d64c:	6811      	ldr	r1, [r2, #0]
 801d64e:	428b      	cmp	r3, r1
 801d650:	bf88      	it	hi
 801d652:	6013      	strhi	r3, [r2, #0]
 801d654:	e0d0      	b.n	801d7f8 <_malloc_r+0x418>
 801d656:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801d65a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801d65e:	d218      	bcs.n	801d692 <_malloc_r+0x2b2>
 801d660:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801d664:	3238      	adds	r2, #56	; 0x38
 801d666:	f102 0e01 	add.w	lr, r2, #1
 801d66a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801d66e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801d672:	45f0      	cmp	r8, lr
 801d674:	d12b      	bne.n	801d6ce <_malloc_r+0x2ee>
 801d676:	1092      	asrs	r2, r2, #2
 801d678:	f04f 0c01 	mov.w	ip, #1
 801d67c:	fa0c f202 	lsl.w	r2, ip, r2
 801d680:	4310      	orrs	r0, r2
 801d682:	6070      	str	r0, [r6, #4]
 801d684:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801d688:	f8c8 4008 	str.w	r4, [r8, #8]
 801d68c:	f8ce 400c 	str.w	r4, [lr, #12]
 801d690:	e75a      	b.n	801d548 <_malloc_r+0x168>
 801d692:	2a14      	cmp	r2, #20
 801d694:	d801      	bhi.n	801d69a <_malloc_r+0x2ba>
 801d696:	325b      	adds	r2, #91	; 0x5b
 801d698:	e7e5      	b.n	801d666 <_malloc_r+0x286>
 801d69a:	2a54      	cmp	r2, #84	; 0x54
 801d69c:	d803      	bhi.n	801d6a6 <_malloc_r+0x2c6>
 801d69e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801d6a2:	326e      	adds	r2, #110	; 0x6e
 801d6a4:	e7df      	b.n	801d666 <_malloc_r+0x286>
 801d6a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801d6aa:	d803      	bhi.n	801d6b4 <_malloc_r+0x2d4>
 801d6ac:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801d6b0:	3277      	adds	r2, #119	; 0x77
 801d6b2:	e7d8      	b.n	801d666 <_malloc_r+0x286>
 801d6b4:	f240 5e54 	movw	lr, #1364	; 0x554
 801d6b8:	4572      	cmp	r2, lr
 801d6ba:	bf9a      	itte	ls
 801d6bc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801d6c0:	327c      	addls	r2, #124	; 0x7c
 801d6c2:	227e      	movhi	r2, #126	; 0x7e
 801d6c4:	e7cf      	b.n	801d666 <_malloc_r+0x286>
 801d6c6:	f8de e008 	ldr.w	lr, [lr, #8]
 801d6ca:	45f0      	cmp	r8, lr
 801d6cc:	d005      	beq.n	801d6da <_malloc_r+0x2fa>
 801d6ce:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d6d2:	f022 0203 	bic.w	r2, r2, #3
 801d6d6:	4562      	cmp	r2, ip
 801d6d8:	d8f5      	bhi.n	801d6c6 <_malloc_r+0x2e6>
 801d6da:	f8de 800c 	ldr.w	r8, [lr, #12]
 801d6de:	e7d1      	b.n	801d684 <_malloc_r+0x2a4>
 801d6e0:	6860      	ldr	r0, [r4, #4]
 801d6e2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801d6e6:	f020 0003 	bic.w	r0, r0, #3
 801d6ea:	eba0 0a07 	sub.w	sl, r0, r7
 801d6ee:	f1ba 0f0f 	cmp.w	sl, #15
 801d6f2:	dd21      	ble.n	801d738 <_malloc_r+0x358>
 801d6f4:	68a3      	ldr	r3, [r4, #8]
 801d6f6:	19e2      	adds	r2, r4, r7
 801d6f8:	f047 0701 	orr.w	r7, r7, #1
 801d6fc:	6067      	str	r7, [r4, #4]
 801d6fe:	f8c3 c00c 	str.w	ip, [r3, #12]
 801d702:	f8cc 3008 	str.w	r3, [ip, #8]
 801d706:	f04a 0301 	orr.w	r3, sl, #1
 801d70a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801d70e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801d712:	6053      	str	r3, [r2, #4]
 801d714:	f844 a000 	str.w	sl, [r4, r0]
 801d718:	e693      	b.n	801d442 <_malloc_r+0x62>
 801d71a:	bf00      	nop
 801d71c:	20000470 	.word	0x20000470
 801d720:	20000478 	.word	0x20000478
 801d724:	20004330 	.word	0x20004330
 801d728:	20000878 	.word	0x20000878
 801d72c:	20004328 	.word	0x20004328
 801d730:	2000432c 	.word	0x2000432c
 801d734:	20004300 	.word	0x20004300
 801d738:	f1ba 0f00 	cmp.w	sl, #0
 801d73c:	db11      	blt.n	801d762 <_malloc_r+0x382>
 801d73e:	4420      	add	r0, r4
 801d740:	6843      	ldr	r3, [r0, #4]
 801d742:	f043 0301 	orr.w	r3, r3, #1
 801d746:	6043      	str	r3, [r0, #4]
 801d748:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801d74c:	4628      	mov	r0, r5
 801d74e:	f8c3 c00c 	str.w	ip, [r3, #12]
 801d752:	f8cc 3008 	str.w	r3, [ip, #8]
 801d756:	f000 f8c9 	bl	801d8ec <__malloc_unlock>
 801d75a:	4620      	mov	r0, r4
 801d75c:	b003      	add	sp, #12
 801d75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d762:	4664      	mov	r4, ip
 801d764:	e706      	b.n	801d574 <_malloc_r+0x194>
 801d766:	f858 0908 	ldr.w	r0, [r8], #-8
 801d76a:	4540      	cmp	r0, r8
 801d76c:	f103 33ff 	add.w	r3, r3, #4294967295
 801d770:	f43f af0a 	beq.w	801d588 <_malloc_r+0x1a8>
 801d774:	e70f      	b.n	801d596 <_malloc_r+0x1b6>
 801d776:	3304      	adds	r3, #4
 801d778:	0052      	lsls	r2, r2, #1
 801d77a:	4210      	tst	r0, r2
 801d77c:	d0fb      	beq.n	801d776 <_malloc_r+0x396>
 801d77e:	e6f3      	b.n	801d568 <_malloc_r+0x188>
 801d780:	4673      	mov	r3, lr
 801d782:	e7fa      	b.n	801d77a <_malloc_r+0x39a>
 801d784:	6810      	ldr	r0, [r2, #0]
 801d786:	3001      	adds	r0, #1
 801d788:	bf1b      	ittet	ne
 801d78a:	1ae3      	subne	r3, r4, r3
 801d78c:	4473      	addne	r3, lr
 801d78e:	6014      	streq	r4, [r2, #0]
 801d790:	f8ca 3000 	strne.w	r3, [sl]
 801d794:	f014 0307 	ands.w	r3, r4, #7
 801d798:	bf1a      	itte	ne
 801d79a:	f1c3 0008 	rsbne	r0, r3, #8
 801d79e:	1824      	addne	r4, r4, r0
 801d7a0:	4618      	moveq	r0, r3
 801d7a2:	1862      	adds	r2, r4, r1
 801d7a4:	ea02 010c 	and.w	r1, r2, ip
 801d7a8:	4480      	add	r8, r0
 801d7aa:	eba8 0801 	sub.w	r8, r8, r1
 801d7ae:	ea08 080c 	and.w	r8, r8, ip
 801d7b2:	4641      	mov	r1, r8
 801d7b4:	4628      	mov	r0, r5
 801d7b6:	9301      	str	r3, [sp, #4]
 801d7b8:	9200      	str	r2, [sp, #0]
 801d7ba:	f000 fa43 	bl	801dc44 <_sbrk_r>
 801d7be:	1c43      	adds	r3, r0, #1
 801d7c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d7c4:	d105      	bne.n	801d7d2 <_malloc_r+0x3f2>
 801d7c6:	b32b      	cbz	r3, 801d814 <_malloc_r+0x434>
 801d7c8:	f1a3 0008 	sub.w	r0, r3, #8
 801d7cc:	4410      	add	r0, r2
 801d7ce:	f04f 0800 	mov.w	r8, #0
 801d7d2:	f8da 2000 	ldr.w	r2, [sl]
 801d7d6:	60b4      	str	r4, [r6, #8]
 801d7d8:	1b00      	subs	r0, r0, r4
 801d7da:	4440      	add	r0, r8
 801d7dc:	4442      	add	r2, r8
 801d7de:	f040 0001 	orr.w	r0, r0, #1
 801d7e2:	45b3      	cmp	fp, r6
 801d7e4:	f8ca 2000 	str.w	r2, [sl]
 801d7e8:	6060      	str	r0, [r4, #4]
 801d7ea:	f43f af27 	beq.w	801d63c <_malloc_r+0x25c>
 801d7ee:	f1b9 0f0f 	cmp.w	r9, #15
 801d7f2:	d812      	bhi.n	801d81a <_malloc_r+0x43a>
 801d7f4:	2301      	movs	r3, #1
 801d7f6:	6063      	str	r3, [r4, #4]
 801d7f8:	68b3      	ldr	r3, [r6, #8]
 801d7fa:	685b      	ldr	r3, [r3, #4]
 801d7fc:	f023 0303 	bic.w	r3, r3, #3
 801d800:	42bb      	cmp	r3, r7
 801d802:	eba3 0207 	sub.w	r2, r3, r7
 801d806:	d301      	bcc.n	801d80c <_malloc_r+0x42c>
 801d808:	2a0f      	cmp	r2, #15
 801d80a:	dc21      	bgt.n	801d850 <_malloc_r+0x470>
 801d80c:	4628      	mov	r0, r5
 801d80e:	f000 f86d 	bl	801d8ec <__malloc_unlock>
 801d812:	e5f1      	b.n	801d3f8 <_malloc_r+0x18>
 801d814:	4610      	mov	r0, r2
 801d816:	4698      	mov	r8, r3
 801d818:	e7db      	b.n	801d7d2 <_malloc_r+0x3f2>
 801d81a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801d81e:	f1a9 090c 	sub.w	r9, r9, #12
 801d822:	f029 0907 	bic.w	r9, r9, #7
 801d826:	f003 0301 	and.w	r3, r3, #1
 801d82a:	ea43 0309 	orr.w	r3, r3, r9
 801d82e:	f8cb 3004 	str.w	r3, [fp, #4]
 801d832:	2205      	movs	r2, #5
 801d834:	eb0b 0309 	add.w	r3, fp, r9
 801d838:	f1b9 0f0f 	cmp.w	r9, #15
 801d83c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801d840:	f67f aefc 	bls.w	801d63c <_malloc_r+0x25c>
 801d844:	f10b 0108 	add.w	r1, fp, #8
 801d848:	4628      	mov	r0, r5
 801d84a:	f004 f8b9 	bl	80219c0 <_free_r>
 801d84e:	e6f5      	b.n	801d63c <_malloc_r+0x25c>
 801d850:	68b4      	ldr	r4, [r6, #8]
 801d852:	f047 0301 	orr.w	r3, r7, #1
 801d856:	4427      	add	r7, r4
 801d858:	f042 0201 	orr.w	r2, r2, #1
 801d85c:	6063      	str	r3, [r4, #4]
 801d85e:	60b7      	str	r7, [r6, #8]
 801d860:	607a      	str	r2, [r7, #4]
 801d862:	e5ee      	b.n	801d442 <_malloc_r+0x62>

0801d864 <memcmp>:
 801d864:	b530      	push	{r4, r5, lr}
 801d866:	3901      	subs	r1, #1
 801d868:	2400      	movs	r4, #0
 801d86a:	42a2      	cmp	r2, r4
 801d86c:	d101      	bne.n	801d872 <memcmp+0xe>
 801d86e:	2000      	movs	r0, #0
 801d870:	e005      	b.n	801d87e <memcmp+0x1a>
 801d872:	5d03      	ldrb	r3, [r0, r4]
 801d874:	3401      	adds	r4, #1
 801d876:	5d0d      	ldrb	r5, [r1, r4]
 801d878:	42ab      	cmp	r3, r5
 801d87a:	d0f6      	beq.n	801d86a <memcmp+0x6>
 801d87c:	1b58      	subs	r0, r3, r5
 801d87e:	bd30      	pop	{r4, r5, pc}

0801d880 <memcpy>:
 801d880:	440a      	add	r2, r1
 801d882:	4291      	cmp	r1, r2
 801d884:	f100 33ff 	add.w	r3, r0, #4294967295
 801d888:	d100      	bne.n	801d88c <memcpy+0xc>
 801d88a:	4770      	bx	lr
 801d88c:	b510      	push	{r4, lr}
 801d88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d892:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d896:	4291      	cmp	r1, r2
 801d898:	d1f9      	bne.n	801d88e <memcpy+0xe>
 801d89a:	bd10      	pop	{r4, pc}

0801d89c <memmove>:
 801d89c:	4288      	cmp	r0, r1
 801d89e:	b510      	push	{r4, lr}
 801d8a0:	eb01 0402 	add.w	r4, r1, r2
 801d8a4:	d902      	bls.n	801d8ac <memmove+0x10>
 801d8a6:	4284      	cmp	r4, r0
 801d8a8:	4623      	mov	r3, r4
 801d8aa:	d807      	bhi.n	801d8bc <memmove+0x20>
 801d8ac:	1e43      	subs	r3, r0, #1
 801d8ae:	42a1      	cmp	r1, r4
 801d8b0:	d008      	beq.n	801d8c4 <memmove+0x28>
 801d8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d8ba:	e7f8      	b.n	801d8ae <memmove+0x12>
 801d8bc:	4402      	add	r2, r0
 801d8be:	4601      	mov	r1, r0
 801d8c0:	428a      	cmp	r2, r1
 801d8c2:	d100      	bne.n	801d8c6 <memmove+0x2a>
 801d8c4:	bd10      	pop	{r4, pc}
 801d8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d8ce:	e7f7      	b.n	801d8c0 <memmove+0x24>

0801d8d0 <memset>:
 801d8d0:	4402      	add	r2, r0
 801d8d2:	4603      	mov	r3, r0
 801d8d4:	4293      	cmp	r3, r2
 801d8d6:	d100      	bne.n	801d8da <memset+0xa>
 801d8d8:	4770      	bx	lr
 801d8da:	f803 1b01 	strb.w	r1, [r3], #1
 801d8de:	e7f9      	b.n	801d8d4 <memset+0x4>

0801d8e0 <__malloc_lock>:
 801d8e0:	4801      	ldr	r0, [pc, #4]	; (801d8e8 <__malloc_lock+0x8>)
 801d8e2:	f7ff bd6b 	b.w	801d3bc <__retarget_lock_acquire_recursive>
 801d8e6:	bf00      	nop
 801d8e8:	2000aa68 	.word	0x2000aa68

0801d8ec <__malloc_unlock>:
 801d8ec:	4801      	ldr	r0, [pc, #4]	; (801d8f4 <__malloc_unlock+0x8>)
 801d8ee:	f7ff bd66 	b.w	801d3be <__retarget_lock_release_recursive>
 801d8f2:	bf00      	nop
 801d8f4:	2000aa68 	.word	0x2000aa68

0801d8f8 <_realloc_r>:
 801d8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8fc:	4681      	mov	r9, r0
 801d8fe:	460c      	mov	r4, r1
 801d900:	b929      	cbnz	r1, 801d90e <_realloc_r+0x16>
 801d902:	4611      	mov	r1, r2
 801d904:	b003      	add	sp, #12
 801d906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d90a:	f7ff bd69 	b.w	801d3e0 <_malloc_r>
 801d90e:	9201      	str	r2, [sp, #4]
 801d910:	f7ff ffe6 	bl	801d8e0 <__malloc_lock>
 801d914:	9a01      	ldr	r2, [sp, #4]
 801d916:	f102 080b 	add.w	r8, r2, #11
 801d91a:	f1b8 0f16 	cmp.w	r8, #22
 801d91e:	d90b      	bls.n	801d938 <_realloc_r+0x40>
 801d920:	f038 0807 	bics.w	r8, r8, #7
 801d924:	d50a      	bpl.n	801d93c <_realloc_r+0x44>
 801d926:	230c      	movs	r3, #12
 801d928:	f8c9 3000 	str.w	r3, [r9]
 801d92c:	f04f 0b00 	mov.w	fp, #0
 801d930:	4658      	mov	r0, fp
 801d932:	b003      	add	sp, #12
 801d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d938:	f04f 0810 	mov.w	r8, #16
 801d93c:	4590      	cmp	r8, r2
 801d93e:	d3f2      	bcc.n	801d926 <_realloc_r+0x2e>
 801d940:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801d944:	f025 0603 	bic.w	r6, r5, #3
 801d948:	45b0      	cmp	r8, r6
 801d94a:	f1a4 0a08 	sub.w	sl, r4, #8
 801d94e:	f340 8170 	ble.w	801dc32 <_realloc_r+0x33a>
 801d952:	48a9      	ldr	r0, [pc, #676]	; (801dbf8 <_realloc_r+0x300>)
 801d954:	9001      	str	r0, [sp, #4]
 801d956:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801d95a:	eb0a 0306 	add.w	r3, sl, r6
 801d95e:	459c      	cmp	ip, r3
 801d960:	6859      	ldr	r1, [r3, #4]
 801d962:	d005      	beq.n	801d970 <_realloc_r+0x78>
 801d964:	f021 0001 	bic.w	r0, r1, #1
 801d968:	4418      	add	r0, r3
 801d96a:	6840      	ldr	r0, [r0, #4]
 801d96c:	07c7      	lsls	r7, r0, #31
 801d96e:	d427      	bmi.n	801d9c0 <_realloc_r+0xc8>
 801d970:	f021 0103 	bic.w	r1, r1, #3
 801d974:	459c      	cmp	ip, r3
 801d976:	eb06 0701 	add.w	r7, r6, r1
 801d97a:	d119      	bne.n	801d9b0 <_realloc_r+0xb8>
 801d97c:	f108 0010 	add.w	r0, r8, #16
 801d980:	42b8      	cmp	r0, r7
 801d982:	dc1f      	bgt.n	801d9c4 <_realloc_r+0xcc>
 801d984:	eb0a 0308 	add.w	r3, sl, r8
 801d988:	9a01      	ldr	r2, [sp, #4]
 801d98a:	eba7 0708 	sub.w	r7, r7, r8
 801d98e:	f047 0701 	orr.w	r7, r7, #1
 801d992:	6093      	str	r3, [r2, #8]
 801d994:	605f      	str	r7, [r3, #4]
 801d996:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	ea43 0308 	orr.w	r3, r3, r8
 801d9a2:	f844 3c04 	str.w	r3, [r4, #-4]
 801d9a6:	4648      	mov	r0, r9
 801d9a8:	f7ff ffa0 	bl	801d8ec <__malloc_unlock>
 801d9ac:	46a3      	mov	fp, r4
 801d9ae:	e7bf      	b.n	801d930 <_realloc_r+0x38>
 801d9b0:	45b8      	cmp	r8, r7
 801d9b2:	dc07      	bgt.n	801d9c4 <_realloc_r+0xcc>
 801d9b4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801d9b8:	60da      	str	r2, [r3, #12]
 801d9ba:	6093      	str	r3, [r2, #8]
 801d9bc:	4655      	mov	r5, sl
 801d9be:	e07f      	b.n	801dac0 <_realloc_r+0x1c8>
 801d9c0:	2100      	movs	r1, #0
 801d9c2:	460b      	mov	r3, r1
 801d9c4:	07e8      	lsls	r0, r5, #31
 801d9c6:	f100 80e5 	bmi.w	801db94 <_realloc_r+0x29c>
 801d9ca:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801d9ce:	ebaa 0505 	sub.w	r5, sl, r5
 801d9d2:	6868      	ldr	r0, [r5, #4]
 801d9d4:	f020 0003 	bic.w	r0, r0, #3
 801d9d8:	eb00 0b06 	add.w	fp, r0, r6
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	f000 80a5 	beq.w	801db2c <_realloc_r+0x234>
 801d9e2:	459c      	cmp	ip, r3
 801d9e4:	eb01 070b 	add.w	r7, r1, fp
 801d9e8:	d14a      	bne.n	801da80 <_realloc_r+0x188>
 801d9ea:	f108 0310 	add.w	r3, r8, #16
 801d9ee:	42bb      	cmp	r3, r7
 801d9f0:	f300 809c 	bgt.w	801db2c <_realloc_r+0x234>
 801d9f4:	46ab      	mov	fp, r5
 801d9f6:	68eb      	ldr	r3, [r5, #12]
 801d9f8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801d9fc:	60d3      	str	r3, [r2, #12]
 801d9fe:	609a      	str	r2, [r3, #8]
 801da00:	1f32      	subs	r2, r6, #4
 801da02:	2a24      	cmp	r2, #36	; 0x24
 801da04:	d837      	bhi.n	801da76 <_realloc_r+0x17e>
 801da06:	2a13      	cmp	r2, #19
 801da08:	d933      	bls.n	801da72 <_realloc_r+0x17a>
 801da0a:	6823      	ldr	r3, [r4, #0]
 801da0c:	60ab      	str	r3, [r5, #8]
 801da0e:	6863      	ldr	r3, [r4, #4]
 801da10:	60eb      	str	r3, [r5, #12]
 801da12:	2a1b      	cmp	r2, #27
 801da14:	d81b      	bhi.n	801da4e <_realloc_r+0x156>
 801da16:	3408      	adds	r4, #8
 801da18:	f105 0310 	add.w	r3, r5, #16
 801da1c:	6822      	ldr	r2, [r4, #0]
 801da1e:	601a      	str	r2, [r3, #0]
 801da20:	6862      	ldr	r2, [r4, #4]
 801da22:	605a      	str	r2, [r3, #4]
 801da24:	68a2      	ldr	r2, [r4, #8]
 801da26:	609a      	str	r2, [r3, #8]
 801da28:	eb05 0308 	add.w	r3, r5, r8
 801da2c:	9a01      	ldr	r2, [sp, #4]
 801da2e:	eba7 0708 	sub.w	r7, r7, r8
 801da32:	f047 0701 	orr.w	r7, r7, #1
 801da36:	6093      	str	r3, [r2, #8]
 801da38:	605f      	str	r7, [r3, #4]
 801da3a:	686b      	ldr	r3, [r5, #4]
 801da3c:	f003 0301 	and.w	r3, r3, #1
 801da40:	ea43 0308 	orr.w	r3, r3, r8
 801da44:	606b      	str	r3, [r5, #4]
 801da46:	4648      	mov	r0, r9
 801da48:	f7ff ff50 	bl	801d8ec <__malloc_unlock>
 801da4c:	e770      	b.n	801d930 <_realloc_r+0x38>
 801da4e:	68a3      	ldr	r3, [r4, #8]
 801da50:	612b      	str	r3, [r5, #16]
 801da52:	68e3      	ldr	r3, [r4, #12]
 801da54:	616b      	str	r3, [r5, #20]
 801da56:	2a24      	cmp	r2, #36	; 0x24
 801da58:	bf01      	itttt	eq
 801da5a:	6923      	ldreq	r3, [r4, #16]
 801da5c:	61ab      	streq	r3, [r5, #24]
 801da5e:	6962      	ldreq	r2, [r4, #20]
 801da60:	61ea      	streq	r2, [r5, #28]
 801da62:	bf19      	ittee	ne
 801da64:	3410      	addne	r4, #16
 801da66:	f105 0318 	addne.w	r3, r5, #24
 801da6a:	f105 0320 	addeq.w	r3, r5, #32
 801da6e:	3418      	addeq	r4, #24
 801da70:	e7d4      	b.n	801da1c <_realloc_r+0x124>
 801da72:	465b      	mov	r3, fp
 801da74:	e7d2      	b.n	801da1c <_realloc_r+0x124>
 801da76:	4621      	mov	r1, r4
 801da78:	4658      	mov	r0, fp
 801da7a:	f7ff ff0f 	bl	801d89c <memmove>
 801da7e:	e7d3      	b.n	801da28 <_realloc_r+0x130>
 801da80:	45b8      	cmp	r8, r7
 801da82:	dc53      	bgt.n	801db2c <_realloc_r+0x234>
 801da84:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801da88:	4628      	mov	r0, r5
 801da8a:	60da      	str	r2, [r3, #12]
 801da8c:	6093      	str	r3, [r2, #8]
 801da8e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801da92:	68eb      	ldr	r3, [r5, #12]
 801da94:	60d3      	str	r3, [r2, #12]
 801da96:	609a      	str	r2, [r3, #8]
 801da98:	1f32      	subs	r2, r6, #4
 801da9a:	2a24      	cmp	r2, #36	; 0x24
 801da9c:	d842      	bhi.n	801db24 <_realloc_r+0x22c>
 801da9e:	2a13      	cmp	r2, #19
 801daa0:	d908      	bls.n	801dab4 <_realloc_r+0x1bc>
 801daa2:	6823      	ldr	r3, [r4, #0]
 801daa4:	60ab      	str	r3, [r5, #8]
 801daa6:	6863      	ldr	r3, [r4, #4]
 801daa8:	60eb      	str	r3, [r5, #12]
 801daaa:	2a1b      	cmp	r2, #27
 801daac:	d828      	bhi.n	801db00 <_realloc_r+0x208>
 801daae:	3408      	adds	r4, #8
 801dab0:	f105 0010 	add.w	r0, r5, #16
 801dab4:	6823      	ldr	r3, [r4, #0]
 801dab6:	6003      	str	r3, [r0, #0]
 801dab8:	6863      	ldr	r3, [r4, #4]
 801daba:	6043      	str	r3, [r0, #4]
 801dabc:	68a3      	ldr	r3, [r4, #8]
 801dabe:	6083      	str	r3, [r0, #8]
 801dac0:	686a      	ldr	r2, [r5, #4]
 801dac2:	eba7 0008 	sub.w	r0, r7, r8
 801dac6:	280f      	cmp	r0, #15
 801dac8:	f002 0201 	and.w	r2, r2, #1
 801dacc:	eb05 0307 	add.w	r3, r5, r7
 801dad0:	f240 80b1 	bls.w	801dc36 <_realloc_r+0x33e>
 801dad4:	eb05 0108 	add.w	r1, r5, r8
 801dad8:	ea48 0202 	orr.w	r2, r8, r2
 801dadc:	f040 0001 	orr.w	r0, r0, #1
 801dae0:	606a      	str	r2, [r5, #4]
 801dae2:	6048      	str	r0, [r1, #4]
 801dae4:	685a      	ldr	r2, [r3, #4]
 801dae6:	f042 0201 	orr.w	r2, r2, #1
 801daea:	605a      	str	r2, [r3, #4]
 801daec:	3108      	adds	r1, #8
 801daee:	4648      	mov	r0, r9
 801daf0:	f003 ff66 	bl	80219c0 <_free_r>
 801daf4:	4648      	mov	r0, r9
 801daf6:	f7ff fef9 	bl	801d8ec <__malloc_unlock>
 801dafa:	f105 0b08 	add.w	fp, r5, #8
 801dafe:	e717      	b.n	801d930 <_realloc_r+0x38>
 801db00:	68a3      	ldr	r3, [r4, #8]
 801db02:	612b      	str	r3, [r5, #16]
 801db04:	68e3      	ldr	r3, [r4, #12]
 801db06:	616b      	str	r3, [r5, #20]
 801db08:	2a24      	cmp	r2, #36	; 0x24
 801db0a:	bf01      	itttt	eq
 801db0c:	6923      	ldreq	r3, [r4, #16]
 801db0e:	61ab      	streq	r3, [r5, #24]
 801db10:	6963      	ldreq	r3, [r4, #20]
 801db12:	61eb      	streq	r3, [r5, #28]
 801db14:	bf19      	ittee	ne
 801db16:	3410      	addne	r4, #16
 801db18:	f105 0018 	addne.w	r0, r5, #24
 801db1c:	f105 0020 	addeq.w	r0, r5, #32
 801db20:	3418      	addeq	r4, #24
 801db22:	e7c7      	b.n	801dab4 <_realloc_r+0x1bc>
 801db24:	4621      	mov	r1, r4
 801db26:	f7ff feb9 	bl	801d89c <memmove>
 801db2a:	e7c9      	b.n	801dac0 <_realloc_r+0x1c8>
 801db2c:	45d8      	cmp	r8, fp
 801db2e:	dc31      	bgt.n	801db94 <_realloc_r+0x29c>
 801db30:	4628      	mov	r0, r5
 801db32:	68eb      	ldr	r3, [r5, #12]
 801db34:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801db38:	60d3      	str	r3, [r2, #12]
 801db3a:	609a      	str	r2, [r3, #8]
 801db3c:	1f32      	subs	r2, r6, #4
 801db3e:	2a24      	cmp	r2, #36	; 0x24
 801db40:	d824      	bhi.n	801db8c <_realloc_r+0x294>
 801db42:	2a13      	cmp	r2, #19
 801db44:	d908      	bls.n	801db58 <_realloc_r+0x260>
 801db46:	6823      	ldr	r3, [r4, #0]
 801db48:	60ab      	str	r3, [r5, #8]
 801db4a:	6863      	ldr	r3, [r4, #4]
 801db4c:	60eb      	str	r3, [r5, #12]
 801db4e:	2a1b      	cmp	r2, #27
 801db50:	d80a      	bhi.n	801db68 <_realloc_r+0x270>
 801db52:	3408      	adds	r4, #8
 801db54:	f105 0010 	add.w	r0, r5, #16
 801db58:	6823      	ldr	r3, [r4, #0]
 801db5a:	6003      	str	r3, [r0, #0]
 801db5c:	6863      	ldr	r3, [r4, #4]
 801db5e:	6043      	str	r3, [r0, #4]
 801db60:	68a3      	ldr	r3, [r4, #8]
 801db62:	6083      	str	r3, [r0, #8]
 801db64:	465f      	mov	r7, fp
 801db66:	e7ab      	b.n	801dac0 <_realloc_r+0x1c8>
 801db68:	68a3      	ldr	r3, [r4, #8]
 801db6a:	612b      	str	r3, [r5, #16]
 801db6c:	68e3      	ldr	r3, [r4, #12]
 801db6e:	616b      	str	r3, [r5, #20]
 801db70:	2a24      	cmp	r2, #36	; 0x24
 801db72:	bf01      	itttt	eq
 801db74:	6923      	ldreq	r3, [r4, #16]
 801db76:	61ab      	streq	r3, [r5, #24]
 801db78:	6963      	ldreq	r3, [r4, #20]
 801db7a:	61eb      	streq	r3, [r5, #28]
 801db7c:	bf19      	ittee	ne
 801db7e:	3410      	addne	r4, #16
 801db80:	f105 0018 	addne.w	r0, r5, #24
 801db84:	f105 0020 	addeq.w	r0, r5, #32
 801db88:	3418      	addeq	r4, #24
 801db8a:	e7e5      	b.n	801db58 <_realloc_r+0x260>
 801db8c:	4621      	mov	r1, r4
 801db8e:	f7ff fe85 	bl	801d89c <memmove>
 801db92:	e7e7      	b.n	801db64 <_realloc_r+0x26c>
 801db94:	4611      	mov	r1, r2
 801db96:	4648      	mov	r0, r9
 801db98:	f7ff fc22 	bl	801d3e0 <_malloc_r>
 801db9c:	4683      	mov	fp, r0
 801db9e:	2800      	cmp	r0, #0
 801dba0:	f43f af51 	beq.w	801da46 <_realloc_r+0x14e>
 801dba4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801dba8:	f023 0301 	bic.w	r3, r3, #1
 801dbac:	4453      	add	r3, sl
 801dbae:	f1a0 0208 	sub.w	r2, r0, #8
 801dbb2:	4293      	cmp	r3, r2
 801dbb4:	d105      	bne.n	801dbc2 <_realloc_r+0x2ca>
 801dbb6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801dbba:	f027 0703 	bic.w	r7, r7, #3
 801dbbe:	4437      	add	r7, r6
 801dbc0:	e6fc      	b.n	801d9bc <_realloc_r+0xc4>
 801dbc2:	1f32      	subs	r2, r6, #4
 801dbc4:	2a24      	cmp	r2, #36	; 0x24
 801dbc6:	d830      	bhi.n	801dc2a <_realloc_r+0x332>
 801dbc8:	2a13      	cmp	r2, #19
 801dbca:	d92b      	bls.n	801dc24 <_realloc_r+0x32c>
 801dbcc:	6823      	ldr	r3, [r4, #0]
 801dbce:	6003      	str	r3, [r0, #0]
 801dbd0:	6863      	ldr	r3, [r4, #4]
 801dbd2:	6043      	str	r3, [r0, #4]
 801dbd4:	2a1b      	cmp	r2, #27
 801dbd6:	d811      	bhi.n	801dbfc <_realloc_r+0x304>
 801dbd8:	f104 0208 	add.w	r2, r4, #8
 801dbdc:	f100 0308 	add.w	r3, r0, #8
 801dbe0:	6811      	ldr	r1, [r2, #0]
 801dbe2:	6019      	str	r1, [r3, #0]
 801dbe4:	6851      	ldr	r1, [r2, #4]
 801dbe6:	6059      	str	r1, [r3, #4]
 801dbe8:	6892      	ldr	r2, [r2, #8]
 801dbea:	609a      	str	r2, [r3, #8]
 801dbec:	4621      	mov	r1, r4
 801dbee:	4648      	mov	r0, r9
 801dbf0:	f003 fee6 	bl	80219c0 <_free_r>
 801dbf4:	e727      	b.n	801da46 <_realloc_r+0x14e>
 801dbf6:	bf00      	nop
 801dbf8:	20000470 	.word	0x20000470
 801dbfc:	68a3      	ldr	r3, [r4, #8]
 801dbfe:	6083      	str	r3, [r0, #8]
 801dc00:	68e3      	ldr	r3, [r4, #12]
 801dc02:	60c3      	str	r3, [r0, #12]
 801dc04:	2a24      	cmp	r2, #36	; 0x24
 801dc06:	bf01      	itttt	eq
 801dc08:	6923      	ldreq	r3, [r4, #16]
 801dc0a:	6103      	streq	r3, [r0, #16]
 801dc0c:	6961      	ldreq	r1, [r4, #20]
 801dc0e:	6141      	streq	r1, [r0, #20]
 801dc10:	bf19      	ittee	ne
 801dc12:	f104 0210 	addne.w	r2, r4, #16
 801dc16:	f100 0310 	addne.w	r3, r0, #16
 801dc1a:	f104 0218 	addeq.w	r2, r4, #24
 801dc1e:	f100 0318 	addeq.w	r3, r0, #24
 801dc22:	e7dd      	b.n	801dbe0 <_realloc_r+0x2e8>
 801dc24:	4603      	mov	r3, r0
 801dc26:	4622      	mov	r2, r4
 801dc28:	e7da      	b.n	801dbe0 <_realloc_r+0x2e8>
 801dc2a:	4621      	mov	r1, r4
 801dc2c:	f7ff fe36 	bl	801d89c <memmove>
 801dc30:	e7dc      	b.n	801dbec <_realloc_r+0x2f4>
 801dc32:	4637      	mov	r7, r6
 801dc34:	e6c2      	b.n	801d9bc <_realloc_r+0xc4>
 801dc36:	4317      	orrs	r7, r2
 801dc38:	606f      	str	r7, [r5, #4]
 801dc3a:	685a      	ldr	r2, [r3, #4]
 801dc3c:	f042 0201 	orr.w	r2, r2, #1
 801dc40:	605a      	str	r2, [r3, #4]
 801dc42:	e757      	b.n	801daf4 <_realloc_r+0x1fc>

0801dc44 <_sbrk_r>:
 801dc44:	b538      	push	{r3, r4, r5, lr}
 801dc46:	4d06      	ldr	r5, [pc, #24]	; (801dc60 <_sbrk_r+0x1c>)
 801dc48:	2300      	movs	r3, #0
 801dc4a:	4604      	mov	r4, r0
 801dc4c:	4608      	mov	r0, r1
 801dc4e:	602b      	str	r3, [r5, #0]
 801dc50:	f7ff f916 	bl	801ce80 <_sbrk>
 801dc54:	1c43      	adds	r3, r0, #1
 801dc56:	d102      	bne.n	801dc5e <_sbrk_r+0x1a>
 801dc58:	682b      	ldr	r3, [r5, #0]
 801dc5a:	b103      	cbz	r3, 801dc5e <_sbrk_r+0x1a>
 801dc5c:	6023      	str	r3, [r4, #0]
 801dc5e:	bd38      	pop	{r3, r4, r5, pc}
 801dc60:	2000aa70 	.word	0x2000aa70

0801dc64 <sprintf>:
 801dc64:	b40e      	push	{r1, r2, r3}
 801dc66:	b500      	push	{lr}
 801dc68:	b09c      	sub	sp, #112	; 0x70
 801dc6a:	ab1d      	add	r3, sp, #116	; 0x74
 801dc6c:	9002      	str	r0, [sp, #8]
 801dc6e:	9006      	str	r0, [sp, #24]
 801dc70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc74:	4809      	ldr	r0, [pc, #36]	; (801dc9c <sprintf+0x38>)
 801dc76:	9107      	str	r1, [sp, #28]
 801dc78:	9104      	str	r1, [sp, #16]
 801dc7a:	4909      	ldr	r1, [pc, #36]	; (801dca0 <sprintf+0x3c>)
 801dc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc80:	9105      	str	r1, [sp, #20]
 801dc82:	6800      	ldr	r0, [r0, #0]
 801dc84:	9301      	str	r3, [sp, #4]
 801dc86:	a902      	add	r1, sp, #8
 801dc88:	f000 f9da 	bl	801e040 <_svfprintf_r>
 801dc8c:	9b02      	ldr	r3, [sp, #8]
 801dc8e:	2200      	movs	r2, #0
 801dc90:	701a      	strb	r2, [r3, #0]
 801dc92:	b01c      	add	sp, #112	; 0x70
 801dc94:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc98:	b003      	add	sp, #12
 801dc9a:	4770      	bx	lr
 801dc9c:	20000044 	.word	0x20000044
 801dca0:	ffff0208 	.word	0xffff0208

0801dca4 <strcasecmp>:
 801dca4:	b570      	push	{r4, r5, r6, lr}
 801dca6:	4d0c      	ldr	r5, [pc, #48]	; (801dcd8 <strcasecmp+0x34>)
 801dca8:	4604      	mov	r4, r0
 801dcaa:	462e      	mov	r6, r5
 801dcac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dcb0:	5d5a      	ldrb	r2, [r3, r5]
 801dcb2:	f002 0203 	and.w	r2, r2, #3
 801dcb6:	2a01      	cmp	r2, #1
 801dcb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dcbc:	5cb0      	ldrb	r0, [r6, r2]
 801dcbe:	f000 0003 	and.w	r0, r0, #3
 801dcc2:	bf08      	it	eq
 801dcc4:	3320      	addeq	r3, #32
 801dcc6:	2801      	cmp	r0, #1
 801dcc8:	bf08      	it	eq
 801dcca:	3220      	addeq	r2, #32
 801dccc:	1a98      	subs	r0, r3, r2
 801dcce:	d101      	bne.n	801dcd4 <strcasecmp+0x30>
 801dcd0:	2a00      	cmp	r2, #0
 801dcd2:	d1eb      	bne.n	801dcac <strcasecmp+0x8>
 801dcd4:	bd70      	pop	{r4, r5, r6, pc}
 801dcd6:	bf00      	nop
 801dcd8:	0804048e 	.word	0x0804048e

0801dcdc <strchr>:
 801dcdc:	b2c9      	uxtb	r1, r1
 801dcde:	4603      	mov	r3, r0
 801dce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dce4:	b11a      	cbz	r2, 801dcee <strchr+0x12>
 801dce6:	428a      	cmp	r2, r1
 801dce8:	d1f9      	bne.n	801dcde <strchr+0x2>
 801dcea:	4618      	mov	r0, r3
 801dcec:	4770      	bx	lr
 801dcee:	2900      	cmp	r1, #0
 801dcf0:	bf18      	it	ne
 801dcf2:	2300      	movne	r3, #0
 801dcf4:	e7f9      	b.n	801dcea <strchr+0xe>

0801dcf6 <strcpy>:
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dcfc:	f803 2b01 	strb.w	r2, [r3], #1
 801dd00:	2a00      	cmp	r2, #0
 801dd02:	d1f9      	bne.n	801dcf8 <strcpy+0x2>
 801dd04:	4770      	bx	lr
	...

0801dd08 <strncasecmp>:
 801dd08:	b570      	push	{r4, r5, r6, lr}
 801dd0a:	4e0f      	ldr	r6, [pc, #60]	; (801dd48 <strncasecmp+0x40>)
 801dd0c:	4604      	mov	r4, r0
 801dd0e:	440a      	add	r2, r1
 801dd10:	428a      	cmp	r2, r1
 801dd12:	d101      	bne.n	801dd18 <strncasecmp+0x10>
 801dd14:	2000      	movs	r0, #0
 801dd16:	e013      	b.n	801dd40 <strncasecmp+0x38>
 801dd18:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dd1c:	5d98      	ldrb	r0, [r3, r6]
 801dd1e:	f000 0003 	and.w	r0, r0, #3
 801dd22:	2801      	cmp	r0, #1
 801dd24:	f811 0b01 	ldrb.w	r0, [r1], #1
 801dd28:	5c35      	ldrb	r5, [r6, r0]
 801dd2a:	f005 0503 	and.w	r5, r5, #3
 801dd2e:	bf08      	it	eq
 801dd30:	3320      	addeq	r3, #32
 801dd32:	2d01      	cmp	r5, #1
 801dd34:	bf08      	it	eq
 801dd36:	3020      	addeq	r0, #32
 801dd38:	1a1b      	subs	r3, r3, r0
 801dd3a:	d102      	bne.n	801dd42 <strncasecmp+0x3a>
 801dd3c:	2800      	cmp	r0, #0
 801dd3e:	d1e7      	bne.n	801dd10 <strncasecmp+0x8>
 801dd40:	bd70      	pop	{r4, r5, r6, pc}
 801dd42:	4618      	mov	r0, r3
 801dd44:	e7fc      	b.n	801dd40 <strncasecmp+0x38>
 801dd46:	bf00      	nop
 801dd48:	0804048e 	.word	0x0804048e

0801dd4c <strncmp>:
 801dd4c:	b510      	push	{r4, lr}
 801dd4e:	b16a      	cbz	r2, 801dd6c <strncmp+0x20>
 801dd50:	3901      	subs	r1, #1
 801dd52:	1884      	adds	r4, r0, r2
 801dd54:	f810 3b01 	ldrb.w	r3, [r0], #1
 801dd58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dd5c:	4293      	cmp	r3, r2
 801dd5e:	d103      	bne.n	801dd68 <strncmp+0x1c>
 801dd60:	42a0      	cmp	r0, r4
 801dd62:	d001      	beq.n	801dd68 <strncmp+0x1c>
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d1f5      	bne.n	801dd54 <strncmp+0x8>
 801dd68:	1a98      	subs	r0, r3, r2
 801dd6a:	bd10      	pop	{r4, pc}
 801dd6c:	4610      	mov	r0, r2
 801dd6e:	e7fc      	b.n	801dd6a <strncmp+0x1e>

0801dd70 <strncpy>:
 801dd70:	b510      	push	{r4, lr}
 801dd72:	3901      	subs	r1, #1
 801dd74:	4603      	mov	r3, r0
 801dd76:	b132      	cbz	r2, 801dd86 <strncpy+0x16>
 801dd78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd7c:	f803 4b01 	strb.w	r4, [r3], #1
 801dd80:	3a01      	subs	r2, #1
 801dd82:	2c00      	cmp	r4, #0
 801dd84:	d1f7      	bne.n	801dd76 <strncpy+0x6>
 801dd86:	441a      	add	r2, r3
 801dd88:	2100      	movs	r1, #0
 801dd8a:	4293      	cmp	r3, r2
 801dd8c:	d100      	bne.n	801dd90 <strncpy+0x20>
 801dd8e:	bd10      	pop	{r4, pc}
 801dd90:	f803 1b01 	strb.w	r1, [r3], #1
 801dd94:	e7f9      	b.n	801dd8a <strncpy+0x1a>

0801dd96 <strrchr>:
 801dd96:	b538      	push	{r3, r4, r5, lr}
 801dd98:	4603      	mov	r3, r0
 801dd9a:	460c      	mov	r4, r1
 801dd9c:	b969      	cbnz	r1, 801ddba <strrchr+0x24>
 801dd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dda2:	f7ff bf9b 	b.w	801dcdc <strchr>
 801dda6:	1c43      	adds	r3, r0, #1
 801dda8:	4605      	mov	r5, r0
 801ddaa:	4621      	mov	r1, r4
 801ddac:	4618      	mov	r0, r3
 801ddae:	f7ff ff95 	bl	801dcdc <strchr>
 801ddb2:	2800      	cmp	r0, #0
 801ddb4:	d1f7      	bne.n	801dda6 <strrchr+0x10>
 801ddb6:	4628      	mov	r0, r5
 801ddb8:	bd38      	pop	{r3, r4, r5, pc}
 801ddba:	2500      	movs	r5, #0
 801ddbc:	e7f5      	b.n	801ddaa <strrchr+0x14>

0801ddbe <__strtok_r>:
 801ddbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddc0:	b908      	cbnz	r0, 801ddc6 <__strtok_r+0x8>
 801ddc2:	6810      	ldr	r0, [r2, #0]
 801ddc4:	b188      	cbz	r0, 801ddea <__strtok_r+0x2c>
 801ddc6:	4604      	mov	r4, r0
 801ddc8:	4620      	mov	r0, r4
 801ddca:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ddce:	460f      	mov	r7, r1
 801ddd0:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ddd4:	b91e      	cbnz	r6, 801ddde <__strtok_r+0x20>
 801ddd6:	b965      	cbnz	r5, 801ddf2 <__strtok_r+0x34>
 801ddd8:	6015      	str	r5, [r2, #0]
 801ddda:	4628      	mov	r0, r5
 801dddc:	e005      	b.n	801ddea <__strtok_r+0x2c>
 801ddde:	42b5      	cmp	r5, r6
 801dde0:	d1f6      	bne.n	801ddd0 <__strtok_r+0x12>
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d1f0      	bne.n	801ddc8 <__strtok_r+0xa>
 801dde6:	6014      	str	r4, [r2, #0]
 801dde8:	7003      	strb	r3, [r0, #0]
 801ddea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddec:	461c      	mov	r4, r3
 801ddee:	e00c      	b.n	801de0a <__strtok_r+0x4c>
 801ddf0:	b915      	cbnz	r5, 801ddf8 <__strtok_r+0x3a>
 801ddf2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ddf6:	460e      	mov	r6, r1
 801ddf8:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ddfc:	42ab      	cmp	r3, r5
 801ddfe:	d1f7      	bne.n	801ddf0 <__strtok_r+0x32>
 801de00:	2b00      	cmp	r3, #0
 801de02:	d0f3      	beq.n	801ddec <__strtok_r+0x2e>
 801de04:	2300      	movs	r3, #0
 801de06:	f804 3c01 	strb.w	r3, [r4, #-1]
 801de0a:	6014      	str	r4, [r2, #0]
 801de0c:	e7ed      	b.n	801ddea <__strtok_r+0x2c>

0801de0e <strtok_r>:
 801de0e:	2301      	movs	r3, #1
 801de10:	f7ff bfd5 	b.w	801ddbe <__strtok_r>

0801de14 <_strtol_l.isra.0>:
 801de14:	2b01      	cmp	r3, #1
 801de16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de1a:	d001      	beq.n	801de20 <_strtol_l.isra.0+0xc>
 801de1c:	2b24      	cmp	r3, #36	; 0x24
 801de1e:	d906      	bls.n	801de2e <_strtol_l.isra.0+0x1a>
 801de20:	f003 fc3e 	bl	80216a0 <__errno>
 801de24:	2316      	movs	r3, #22
 801de26:	6003      	str	r3, [r0, #0]
 801de28:	2000      	movs	r0, #0
 801de2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de2e:	4f3a      	ldr	r7, [pc, #232]	; (801df18 <_strtol_l.isra.0+0x104>)
 801de30:	468e      	mov	lr, r1
 801de32:	4676      	mov	r6, lr
 801de34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801de38:	5de5      	ldrb	r5, [r4, r7]
 801de3a:	f015 0508 	ands.w	r5, r5, #8
 801de3e:	d1f8      	bne.n	801de32 <_strtol_l.isra.0+0x1e>
 801de40:	2c2d      	cmp	r4, #45	; 0x2d
 801de42:	d134      	bne.n	801deae <_strtol_l.isra.0+0x9a>
 801de44:	f89e 4000 	ldrb.w	r4, [lr]
 801de48:	f04f 0801 	mov.w	r8, #1
 801de4c:	f106 0e02 	add.w	lr, r6, #2
 801de50:	2b00      	cmp	r3, #0
 801de52:	d05c      	beq.n	801df0e <_strtol_l.isra.0+0xfa>
 801de54:	2b10      	cmp	r3, #16
 801de56:	d10c      	bne.n	801de72 <_strtol_l.isra.0+0x5e>
 801de58:	2c30      	cmp	r4, #48	; 0x30
 801de5a:	d10a      	bne.n	801de72 <_strtol_l.isra.0+0x5e>
 801de5c:	f89e 4000 	ldrb.w	r4, [lr]
 801de60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801de64:	2c58      	cmp	r4, #88	; 0x58
 801de66:	d14d      	bne.n	801df04 <_strtol_l.isra.0+0xf0>
 801de68:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801de6c:	2310      	movs	r3, #16
 801de6e:	f10e 0e02 	add.w	lr, lr, #2
 801de72:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801de76:	f10c 3cff 	add.w	ip, ip, #4294967295
 801de7a:	2600      	movs	r6, #0
 801de7c:	fbbc f9f3 	udiv	r9, ip, r3
 801de80:	4635      	mov	r5, r6
 801de82:	fb03 ca19 	mls	sl, r3, r9, ip
 801de86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801de8a:	2f09      	cmp	r7, #9
 801de8c:	d818      	bhi.n	801dec0 <_strtol_l.isra.0+0xac>
 801de8e:	463c      	mov	r4, r7
 801de90:	42a3      	cmp	r3, r4
 801de92:	dd24      	ble.n	801dede <_strtol_l.isra.0+0xca>
 801de94:	2e00      	cmp	r6, #0
 801de96:	db1f      	blt.n	801ded8 <_strtol_l.isra.0+0xc4>
 801de98:	45a9      	cmp	r9, r5
 801de9a:	d31d      	bcc.n	801ded8 <_strtol_l.isra.0+0xc4>
 801de9c:	d101      	bne.n	801dea2 <_strtol_l.isra.0+0x8e>
 801de9e:	45a2      	cmp	sl, r4
 801dea0:	db1a      	blt.n	801ded8 <_strtol_l.isra.0+0xc4>
 801dea2:	fb05 4503 	mla	r5, r5, r3, r4
 801dea6:	2601      	movs	r6, #1
 801dea8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801deac:	e7eb      	b.n	801de86 <_strtol_l.isra.0+0x72>
 801deae:	2c2b      	cmp	r4, #43	; 0x2b
 801deb0:	bf08      	it	eq
 801deb2:	f89e 4000 	ldrbeq.w	r4, [lr]
 801deb6:	46a8      	mov	r8, r5
 801deb8:	bf08      	it	eq
 801deba:	f106 0e02 	addeq.w	lr, r6, #2
 801debe:	e7c7      	b.n	801de50 <_strtol_l.isra.0+0x3c>
 801dec0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801dec4:	2f19      	cmp	r7, #25
 801dec6:	d801      	bhi.n	801decc <_strtol_l.isra.0+0xb8>
 801dec8:	3c37      	subs	r4, #55	; 0x37
 801deca:	e7e1      	b.n	801de90 <_strtol_l.isra.0+0x7c>
 801decc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ded0:	2f19      	cmp	r7, #25
 801ded2:	d804      	bhi.n	801dede <_strtol_l.isra.0+0xca>
 801ded4:	3c57      	subs	r4, #87	; 0x57
 801ded6:	e7db      	b.n	801de90 <_strtol_l.isra.0+0x7c>
 801ded8:	f04f 36ff 	mov.w	r6, #4294967295
 801dedc:	e7e4      	b.n	801dea8 <_strtol_l.isra.0+0x94>
 801dede:	2e00      	cmp	r6, #0
 801dee0:	da05      	bge.n	801deee <_strtol_l.isra.0+0xda>
 801dee2:	2322      	movs	r3, #34	; 0x22
 801dee4:	6003      	str	r3, [r0, #0]
 801dee6:	4665      	mov	r5, ip
 801dee8:	b942      	cbnz	r2, 801defc <_strtol_l.isra.0+0xe8>
 801deea:	4628      	mov	r0, r5
 801deec:	e79d      	b.n	801de2a <_strtol_l.isra.0+0x16>
 801deee:	f1b8 0f00 	cmp.w	r8, #0
 801def2:	d000      	beq.n	801def6 <_strtol_l.isra.0+0xe2>
 801def4:	426d      	negs	r5, r5
 801def6:	2a00      	cmp	r2, #0
 801def8:	d0f7      	beq.n	801deea <_strtol_l.isra.0+0xd6>
 801defa:	b10e      	cbz	r6, 801df00 <_strtol_l.isra.0+0xec>
 801defc:	f10e 31ff 	add.w	r1, lr, #4294967295
 801df00:	6011      	str	r1, [r2, #0]
 801df02:	e7f2      	b.n	801deea <_strtol_l.isra.0+0xd6>
 801df04:	2430      	movs	r4, #48	; 0x30
 801df06:	2b00      	cmp	r3, #0
 801df08:	d1b3      	bne.n	801de72 <_strtol_l.isra.0+0x5e>
 801df0a:	2308      	movs	r3, #8
 801df0c:	e7b1      	b.n	801de72 <_strtol_l.isra.0+0x5e>
 801df0e:	2c30      	cmp	r4, #48	; 0x30
 801df10:	d0a4      	beq.n	801de5c <_strtol_l.isra.0+0x48>
 801df12:	230a      	movs	r3, #10
 801df14:	e7ad      	b.n	801de72 <_strtol_l.isra.0+0x5e>
 801df16:	bf00      	nop
 801df18:	0804048e 	.word	0x0804048e

0801df1c <strtol>:
 801df1c:	4613      	mov	r3, r2
 801df1e:	460a      	mov	r2, r1
 801df20:	4601      	mov	r1, r0
 801df22:	4802      	ldr	r0, [pc, #8]	; (801df2c <strtol+0x10>)
 801df24:	6800      	ldr	r0, [r0, #0]
 801df26:	f7ff bf75 	b.w	801de14 <_strtol_l.isra.0>
 801df2a:	bf00      	nop
 801df2c:	20000044 	.word	0x20000044

0801df30 <_strtoul_l.isra.0>:
 801df30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df34:	4e3b      	ldr	r6, [pc, #236]	; (801e024 <_strtoul_l.isra.0+0xf4>)
 801df36:	4686      	mov	lr, r0
 801df38:	468c      	mov	ip, r1
 801df3a:	4660      	mov	r0, ip
 801df3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801df40:	5da5      	ldrb	r5, [r4, r6]
 801df42:	f015 0508 	ands.w	r5, r5, #8
 801df46:	d1f8      	bne.n	801df3a <_strtoul_l.isra.0+0xa>
 801df48:	2c2d      	cmp	r4, #45	; 0x2d
 801df4a:	d134      	bne.n	801dfb6 <_strtoul_l.isra.0+0x86>
 801df4c:	f89c 4000 	ldrb.w	r4, [ip]
 801df50:	f04f 0801 	mov.w	r8, #1
 801df54:	f100 0c02 	add.w	ip, r0, #2
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d05e      	beq.n	801e01a <_strtoul_l.isra.0+0xea>
 801df5c:	2b10      	cmp	r3, #16
 801df5e:	d10c      	bne.n	801df7a <_strtoul_l.isra.0+0x4a>
 801df60:	2c30      	cmp	r4, #48	; 0x30
 801df62:	d10a      	bne.n	801df7a <_strtoul_l.isra.0+0x4a>
 801df64:	f89c 0000 	ldrb.w	r0, [ip]
 801df68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801df6c:	2858      	cmp	r0, #88	; 0x58
 801df6e:	d14f      	bne.n	801e010 <_strtoul_l.isra.0+0xe0>
 801df70:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801df74:	2310      	movs	r3, #16
 801df76:	f10c 0c02 	add.w	ip, ip, #2
 801df7a:	f04f 37ff 	mov.w	r7, #4294967295
 801df7e:	2500      	movs	r5, #0
 801df80:	fbb7 f7f3 	udiv	r7, r7, r3
 801df84:	fb03 f907 	mul.w	r9, r3, r7
 801df88:	ea6f 0909 	mvn.w	r9, r9
 801df8c:	4628      	mov	r0, r5
 801df8e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801df92:	2e09      	cmp	r6, #9
 801df94:	d818      	bhi.n	801dfc8 <_strtoul_l.isra.0+0x98>
 801df96:	4634      	mov	r4, r6
 801df98:	42a3      	cmp	r3, r4
 801df9a:	dd24      	ble.n	801dfe6 <_strtoul_l.isra.0+0xb6>
 801df9c:	2d00      	cmp	r5, #0
 801df9e:	db1f      	blt.n	801dfe0 <_strtoul_l.isra.0+0xb0>
 801dfa0:	4287      	cmp	r7, r0
 801dfa2:	d31d      	bcc.n	801dfe0 <_strtoul_l.isra.0+0xb0>
 801dfa4:	d101      	bne.n	801dfaa <_strtoul_l.isra.0+0x7a>
 801dfa6:	45a1      	cmp	r9, r4
 801dfa8:	db1a      	blt.n	801dfe0 <_strtoul_l.isra.0+0xb0>
 801dfaa:	fb00 4003 	mla	r0, r0, r3, r4
 801dfae:	2501      	movs	r5, #1
 801dfb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801dfb4:	e7eb      	b.n	801df8e <_strtoul_l.isra.0+0x5e>
 801dfb6:	2c2b      	cmp	r4, #43	; 0x2b
 801dfb8:	bf08      	it	eq
 801dfba:	f89c 4000 	ldrbeq.w	r4, [ip]
 801dfbe:	46a8      	mov	r8, r5
 801dfc0:	bf08      	it	eq
 801dfc2:	f100 0c02 	addeq.w	ip, r0, #2
 801dfc6:	e7c7      	b.n	801df58 <_strtoul_l.isra.0+0x28>
 801dfc8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801dfcc:	2e19      	cmp	r6, #25
 801dfce:	d801      	bhi.n	801dfd4 <_strtoul_l.isra.0+0xa4>
 801dfd0:	3c37      	subs	r4, #55	; 0x37
 801dfd2:	e7e1      	b.n	801df98 <_strtoul_l.isra.0+0x68>
 801dfd4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801dfd8:	2e19      	cmp	r6, #25
 801dfda:	d804      	bhi.n	801dfe6 <_strtoul_l.isra.0+0xb6>
 801dfdc:	3c57      	subs	r4, #87	; 0x57
 801dfde:	e7db      	b.n	801df98 <_strtoul_l.isra.0+0x68>
 801dfe0:	f04f 35ff 	mov.w	r5, #4294967295
 801dfe4:	e7e4      	b.n	801dfb0 <_strtoul_l.isra.0+0x80>
 801dfe6:	2d00      	cmp	r5, #0
 801dfe8:	da07      	bge.n	801dffa <_strtoul_l.isra.0+0xca>
 801dfea:	2322      	movs	r3, #34	; 0x22
 801dfec:	f8ce 3000 	str.w	r3, [lr]
 801dff0:	f04f 30ff 	mov.w	r0, #4294967295
 801dff4:	b942      	cbnz	r2, 801e008 <_strtoul_l.isra.0+0xd8>
 801dff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dffa:	f1b8 0f00 	cmp.w	r8, #0
 801dffe:	d000      	beq.n	801e002 <_strtoul_l.isra.0+0xd2>
 801e000:	4240      	negs	r0, r0
 801e002:	2a00      	cmp	r2, #0
 801e004:	d0f7      	beq.n	801dff6 <_strtoul_l.isra.0+0xc6>
 801e006:	b10d      	cbz	r5, 801e00c <_strtoul_l.isra.0+0xdc>
 801e008:	f10c 31ff 	add.w	r1, ip, #4294967295
 801e00c:	6011      	str	r1, [r2, #0]
 801e00e:	e7f2      	b.n	801dff6 <_strtoul_l.isra.0+0xc6>
 801e010:	2430      	movs	r4, #48	; 0x30
 801e012:	2b00      	cmp	r3, #0
 801e014:	d1b1      	bne.n	801df7a <_strtoul_l.isra.0+0x4a>
 801e016:	2308      	movs	r3, #8
 801e018:	e7af      	b.n	801df7a <_strtoul_l.isra.0+0x4a>
 801e01a:	2c30      	cmp	r4, #48	; 0x30
 801e01c:	d0a2      	beq.n	801df64 <_strtoul_l.isra.0+0x34>
 801e01e:	230a      	movs	r3, #10
 801e020:	e7ab      	b.n	801df7a <_strtoul_l.isra.0+0x4a>
 801e022:	bf00      	nop
 801e024:	0804048e 	.word	0x0804048e

0801e028 <strtoul>:
 801e028:	4613      	mov	r3, r2
 801e02a:	460a      	mov	r2, r1
 801e02c:	4601      	mov	r1, r0
 801e02e:	4802      	ldr	r0, [pc, #8]	; (801e038 <strtoul+0x10>)
 801e030:	6800      	ldr	r0, [r0, #0]
 801e032:	f7ff bf7d 	b.w	801df30 <_strtoul_l.isra.0>
 801e036:	bf00      	nop
 801e038:	20000044 	.word	0x20000044
 801e03c:	00000000 	.word	0x00000000

0801e040 <_svfprintf_r>:
 801e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e044:	ed2d 8b04 	vpush	{d8-d9}
 801e048:	b0cf      	sub	sp, #316	; 0x13c
 801e04a:	4689      	mov	r9, r1
 801e04c:	4693      	mov	fp, r2
 801e04e:	461e      	mov	r6, r3
 801e050:	4682      	mov	sl, r0
 801e052:	f003 fd95 	bl	8021b80 <_localeconv_r>
 801e056:	6803      	ldr	r3, [r0, #0]
 801e058:	9313      	str	r3, [sp, #76]	; 0x4c
 801e05a:	4618      	mov	r0, r3
 801e05c:	f7e2 f922 	bl	80002a4 <strlen>
 801e060:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e064:	900e      	str	r0, [sp, #56]	; 0x38
 801e066:	0618      	lsls	r0, r3, #24
 801e068:	d51a      	bpl.n	801e0a0 <_svfprintf_r+0x60>
 801e06a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e06e:	b9bb      	cbnz	r3, 801e0a0 <_svfprintf_r+0x60>
 801e070:	2140      	movs	r1, #64	; 0x40
 801e072:	4650      	mov	r0, sl
 801e074:	f7ff f9b4 	bl	801d3e0 <_malloc_r>
 801e078:	f8c9 0000 	str.w	r0, [r9]
 801e07c:	f8c9 0010 	str.w	r0, [r9, #16]
 801e080:	b958      	cbnz	r0, 801e09a <_svfprintf_r+0x5a>
 801e082:	230c      	movs	r3, #12
 801e084:	f8ca 3000 	str.w	r3, [sl]
 801e088:	f04f 33ff 	mov.w	r3, #4294967295
 801e08c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e08e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e090:	b04f      	add	sp, #316	; 0x13c
 801e092:	ecbd 8b04 	vpop	{d8-d9}
 801e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09a:	2340      	movs	r3, #64	; 0x40
 801e09c:	f8c9 3014 	str.w	r3, [r9, #20]
 801e0a0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801e2f0 <_svfprintf_r+0x2b0>
 801e0a4:	2500      	movs	r5, #0
 801e0a6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801e0aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801e0ae:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801e0b2:	ac25      	add	r4, sp, #148	; 0x94
 801e0b4:	9422      	str	r4, [sp, #136]	; 0x88
 801e0b6:	9505      	str	r5, [sp, #20]
 801e0b8:	950a      	str	r5, [sp, #40]	; 0x28
 801e0ba:	9512      	str	r5, [sp, #72]	; 0x48
 801e0bc:	9514      	str	r5, [sp, #80]	; 0x50
 801e0be:	950f      	str	r5, [sp, #60]	; 0x3c
 801e0c0:	465b      	mov	r3, fp
 801e0c2:	461d      	mov	r5, r3
 801e0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0c8:	b10a      	cbz	r2, 801e0ce <_svfprintf_r+0x8e>
 801e0ca:	2a25      	cmp	r2, #37	; 0x25
 801e0cc:	d1f9      	bne.n	801e0c2 <_svfprintf_r+0x82>
 801e0ce:	ebb5 070b 	subs.w	r7, r5, fp
 801e0d2:	d00d      	beq.n	801e0f0 <_svfprintf_r+0xb0>
 801e0d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0d6:	443b      	add	r3, r7
 801e0d8:	9324      	str	r3, [sp, #144]	; 0x90
 801e0da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e0dc:	3301      	adds	r3, #1
 801e0de:	2b07      	cmp	r3, #7
 801e0e0:	e9c4 b700 	strd	fp, r7, [r4]
 801e0e4:	9323      	str	r3, [sp, #140]	; 0x8c
 801e0e6:	dc79      	bgt.n	801e1dc <_svfprintf_r+0x19c>
 801e0e8:	3408      	adds	r4, #8
 801e0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0ec:	443b      	add	r3, r7
 801e0ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801e0f0:	782b      	ldrb	r3, [r5, #0]
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	f001 8140 	beq.w	801f378 <_svfprintf_r+0x1338>
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 801e0fe:	3501      	adds	r5, #1
 801e100:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e104:	9204      	str	r2, [sp, #16]
 801e106:	9310      	str	r3, [sp, #64]	; 0x40
 801e108:	4698      	mov	r8, r3
 801e10a:	270a      	movs	r7, #10
 801e10c:	212b      	movs	r1, #43	; 0x2b
 801e10e:	462a      	mov	r2, r5
 801e110:	f812 3b01 	ldrb.w	r3, [r2], #1
 801e114:	9307      	str	r3, [sp, #28]
 801e116:	920b      	str	r2, [sp, #44]	; 0x2c
 801e118:	9b07      	ldr	r3, [sp, #28]
 801e11a:	3b20      	subs	r3, #32
 801e11c:	2b5a      	cmp	r3, #90	; 0x5a
 801e11e:	f200 85b4 	bhi.w	801ec8a <_svfprintf_r+0xc4a>
 801e122:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e126:	007e      	.short	0x007e
 801e128:	05b205b2 	.word	0x05b205b2
 801e12c:	05b20086 	.word	0x05b20086
 801e130:	05b205b2 	.word	0x05b205b2
 801e134:	05b20065 	.word	0x05b20065
 801e138:	008905b2 	.word	0x008905b2
 801e13c:	05b20093 	.word	0x05b20093
 801e140:	00960090 	.word	0x00960090
 801e144:	00b305b2 	.word	0x00b305b2
 801e148:	00b600b6 	.word	0x00b600b6
 801e14c:	00b600b6 	.word	0x00b600b6
 801e150:	00b600b6 	.word	0x00b600b6
 801e154:	00b600b6 	.word	0x00b600b6
 801e158:	05b200b6 	.word	0x05b200b6
 801e15c:	05b205b2 	.word	0x05b205b2
 801e160:	05b205b2 	.word	0x05b205b2
 801e164:	05b205b2 	.word	0x05b205b2
 801e168:	05b20127 	.word	0x05b20127
 801e16c:	00fc00e9 	.word	0x00fc00e9
 801e170:	01270127 	.word	0x01270127
 801e174:	05b20127 	.word	0x05b20127
 801e178:	05b205b2 	.word	0x05b205b2
 801e17c:	00c605b2 	.word	0x00c605b2
 801e180:	05b205b2 	.word	0x05b205b2
 801e184:	05b20492 	.word	0x05b20492
 801e188:	05b205b2 	.word	0x05b205b2
 801e18c:	05b204d9 	.word	0x05b204d9
 801e190:	05b204fa 	.word	0x05b204fa
 801e194:	051905b2 	.word	0x051905b2
 801e198:	05b205b2 	.word	0x05b205b2
 801e19c:	05b205b2 	.word	0x05b205b2
 801e1a0:	05b205b2 	.word	0x05b205b2
 801e1a4:	05b205b2 	.word	0x05b205b2
 801e1a8:	05b20127 	.word	0x05b20127
 801e1ac:	00fe00e9 	.word	0x00fe00e9
 801e1b0:	01270127 	.word	0x01270127
 801e1b4:	00c90127 	.word	0x00c90127
 801e1b8:	00dd00fe 	.word	0x00dd00fe
 801e1bc:	00d605b2 	.word	0x00d605b2
 801e1c0:	046f05b2 	.word	0x046f05b2
 801e1c4:	04c80494 	.word	0x04c80494
 801e1c8:	05b200dd 	.word	0x05b200dd
 801e1cc:	007c04d9 	.word	0x007c04d9
 801e1d0:	05b204fc 	.word	0x05b204fc
 801e1d4:	053605b2 	.word	0x053605b2
 801e1d8:	007c05b2 	.word	0x007c05b2
 801e1dc:	aa22      	add	r2, sp, #136	; 0x88
 801e1de:	4649      	mov	r1, r9
 801e1e0:	4650      	mov	r0, sl
 801e1e2:	f004 f8e8 	bl	80223b6 <__ssprint_r>
 801e1e6:	2800      	cmp	r0, #0
 801e1e8:	f040 8132 	bne.w	801e450 <_svfprintf_r+0x410>
 801e1ec:	ac25      	add	r4, sp, #148	; 0x94
 801e1ee:	e77c      	b.n	801e0ea <_svfprintf_r+0xaa>
 801e1f0:	4650      	mov	r0, sl
 801e1f2:	f003 fcc5 	bl	8021b80 <_localeconv_r>
 801e1f6:	6843      	ldr	r3, [r0, #4]
 801e1f8:	9314      	str	r3, [sp, #80]	; 0x50
 801e1fa:	4618      	mov	r0, r3
 801e1fc:	f7e2 f852 	bl	80002a4 <strlen>
 801e200:	9012      	str	r0, [sp, #72]	; 0x48
 801e202:	4650      	mov	r0, sl
 801e204:	f003 fcbc 	bl	8021b80 <_localeconv_r>
 801e208:	6883      	ldr	r3, [r0, #8]
 801e20a:	930a      	str	r3, [sp, #40]	; 0x28
 801e20c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e20e:	212b      	movs	r1, #43	; 0x2b
 801e210:	b12b      	cbz	r3, 801e21e <_svfprintf_r+0x1de>
 801e212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e214:	b11b      	cbz	r3, 801e21e <_svfprintf_r+0x1de>
 801e216:	781b      	ldrb	r3, [r3, #0]
 801e218:	b10b      	cbz	r3, 801e21e <_svfprintf_r+0x1de>
 801e21a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801e21e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e220:	e775      	b.n	801e10e <_svfprintf_r+0xce>
 801e222:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801e226:	2b00      	cmp	r3, #0
 801e228:	d1f9      	bne.n	801e21e <_svfprintf_r+0x1de>
 801e22a:	2320      	movs	r3, #32
 801e22c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e230:	e7f5      	b.n	801e21e <_svfprintf_r+0x1de>
 801e232:	f048 0801 	orr.w	r8, r8, #1
 801e236:	e7f2      	b.n	801e21e <_svfprintf_r+0x1de>
 801e238:	f856 3b04 	ldr.w	r3, [r6], #4
 801e23c:	9310      	str	r3, [sp, #64]	; 0x40
 801e23e:	2b00      	cmp	r3, #0
 801e240:	daed      	bge.n	801e21e <_svfprintf_r+0x1de>
 801e242:	425b      	negs	r3, r3
 801e244:	9310      	str	r3, [sp, #64]	; 0x40
 801e246:	f048 0804 	orr.w	r8, r8, #4
 801e24a:	e7e8      	b.n	801e21e <_svfprintf_r+0x1de>
 801e24c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801e250:	e7e5      	b.n	801e21e <_svfprintf_r+0x1de>
 801e252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e254:	f812 3b01 	ldrb.w	r3, [r2], #1
 801e258:	9307      	str	r3, [sp, #28]
 801e25a:	2b2a      	cmp	r3, #42	; 0x2a
 801e25c:	d113      	bne.n	801e286 <_svfprintf_r+0x246>
 801e25e:	f856 0b04 	ldr.w	r0, [r6], #4
 801e262:	920b      	str	r2, [sp, #44]	; 0x2c
 801e264:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801e268:	9304      	str	r3, [sp, #16]
 801e26a:	e7d8      	b.n	801e21e <_svfprintf_r+0x1de>
 801e26c:	9804      	ldr	r0, [sp, #16]
 801e26e:	fb07 3300 	mla	r3, r7, r0, r3
 801e272:	9304      	str	r3, [sp, #16]
 801e274:	f812 3b01 	ldrb.w	r3, [r2], #1
 801e278:	9307      	str	r3, [sp, #28]
 801e27a:	9b07      	ldr	r3, [sp, #28]
 801e27c:	3b30      	subs	r3, #48	; 0x30
 801e27e:	2b09      	cmp	r3, #9
 801e280:	d9f4      	bls.n	801e26c <_svfprintf_r+0x22c>
 801e282:	920b      	str	r2, [sp, #44]	; 0x2c
 801e284:	e748      	b.n	801e118 <_svfprintf_r+0xd8>
 801e286:	2300      	movs	r3, #0
 801e288:	9304      	str	r3, [sp, #16]
 801e28a:	e7f6      	b.n	801e27a <_svfprintf_r+0x23a>
 801e28c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801e290:	e7c5      	b.n	801e21e <_svfprintf_r+0x1de>
 801e292:	2300      	movs	r3, #0
 801e294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e296:	9310      	str	r3, [sp, #64]	; 0x40
 801e298:	9b07      	ldr	r3, [sp, #28]
 801e29a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e29c:	3b30      	subs	r3, #48	; 0x30
 801e29e:	fb07 3300 	mla	r3, r7, r0, r3
 801e2a2:	9310      	str	r3, [sp, #64]	; 0x40
 801e2a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801e2a8:	9307      	str	r3, [sp, #28]
 801e2aa:	3b30      	subs	r3, #48	; 0x30
 801e2ac:	2b09      	cmp	r3, #9
 801e2ae:	d9f3      	bls.n	801e298 <_svfprintf_r+0x258>
 801e2b0:	e7e7      	b.n	801e282 <_svfprintf_r+0x242>
 801e2b2:	f048 0808 	orr.w	r8, r8, #8
 801e2b6:	e7b2      	b.n	801e21e <_svfprintf_r+0x1de>
 801e2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2ba:	781b      	ldrb	r3, [r3, #0]
 801e2bc:	2b68      	cmp	r3, #104	; 0x68
 801e2be:	bf01      	itttt	eq
 801e2c0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801e2c2:	3301      	addeq	r3, #1
 801e2c4:	930b      	streq	r3, [sp, #44]	; 0x2c
 801e2c6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801e2ca:	bf18      	it	ne
 801e2cc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801e2d0:	e7a5      	b.n	801e21e <_svfprintf_r+0x1de>
 801e2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2d4:	781b      	ldrb	r3, [r3, #0]
 801e2d6:	2b6c      	cmp	r3, #108	; 0x6c
 801e2d8:	d105      	bne.n	801e2e6 <_svfprintf_r+0x2a6>
 801e2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2dc:	3301      	adds	r3, #1
 801e2de:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2e0:	f048 0820 	orr.w	r8, r8, #32
 801e2e4:	e79b      	b.n	801e21e <_svfprintf_r+0x1de>
 801e2e6:	f048 0810 	orr.w	r8, r8, #16
 801e2ea:	e798      	b.n	801e21e <_svfprintf_r+0x1de>
 801e2ec:	f3af 8000 	nop.w
	...
 801e2f8:	4632      	mov	r2, r6
 801e2fa:	2000      	movs	r0, #0
 801e2fc:	f852 3b04 	ldr.w	r3, [r2], #4
 801e300:	9206      	str	r2, [sp, #24]
 801e302:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801e306:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801e30a:	2301      	movs	r3, #1
 801e30c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801e310:	9003      	str	r0, [sp, #12]
 801e312:	9304      	str	r3, [sp, #16]
 801e314:	4606      	mov	r6, r0
 801e316:	4605      	mov	r5, r0
 801e318:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801e31c:	e1b8      	b.n	801e690 <_svfprintf_r+0x650>
 801e31e:	f048 0810 	orr.w	r8, r8, #16
 801e322:	f018 0f20 	tst.w	r8, #32
 801e326:	d012      	beq.n	801e34e <_svfprintf_r+0x30e>
 801e328:	3607      	adds	r6, #7
 801e32a:	f026 0307 	bic.w	r3, r6, #7
 801e32e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801e332:	9306      	str	r3, [sp, #24]
 801e334:	2e00      	cmp	r6, #0
 801e336:	f177 0300 	sbcs.w	r3, r7, #0
 801e33a:	da06      	bge.n	801e34a <_svfprintf_r+0x30a>
 801e33c:	4276      	negs	r6, r6
 801e33e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801e342:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801e346:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e34a:	2301      	movs	r3, #1
 801e34c:	e38e      	b.n	801ea6c <_svfprintf_r+0xa2c>
 801e34e:	1d33      	adds	r3, r6, #4
 801e350:	f018 0f10 	tst.w	r8, #16
 801e354:	9306      	str	r3, [sp, #24]
 801e356:	d002      	beq.n	801e35e <_svfprintf_r+0x31e>
 801e358:	6836      	ldr	r6, [r6, #0]
 801e35a:	17f7      	asrs	r7, r6, #31
 801e35c:	e7ea      	b.n	801e334 <_svfprintf_r+0x2f4>
 801e35e:	f018 0f40 	tst.w	r8, #64	; 0x40
 801e362:	6836      	ldr	r6, [r6, #0]
 801e364:	d001      	beq.n	801e36a <_svfprintf_r+0x32a>
 801e366:	b236      	sxth	r6, r6
 801e368:	e7f7      	b.n	801e35a <_svfprintf_r+0x31a>
 801e36a:	f418 7f00 	tst.w	r8, #512	; 0x200
 801e36e:	bf18      	it	ne
 801e370:	b276      	sxtbne	r6, r6
 801e372:	e7f2      	b.n	801e35a <_svfprintf_r+0x31a>
 801e374:	3607      	adds	r6, #7
 801e376:	f026 0307 	bic.w	r3, r6, #7
 801e37a:	ecb3 7b02 	vldmia	r3!, {d7}
 801e37e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801e382:	9306      	str	r3, [sp, #24]
 801e384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e386:	ee09 3a10 	vmov	s18, r3
 801e38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e38c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e390:	ee09 3a90 	vmov	s19, r3
 801e394:	f04f 32ff 	mov.w	r2, #4294967295
 801e398:	4b3a      	ldr	r3, [pc, #232]	; (801e484 <_svfprintf_r+0x444>)
 801e39a:	ec51 0b19 	vmov	r0, r1, d9
 801e39e:	f7e2 fbdf 	bl	8000b60 <__aeabi_dcmpun>
 801e3a2:	bb10      	cbnz	r0, 801e3ea <_svfprintf_r+0x3aa>
 801e3a4:	4b37      	ldr	r3, [pc, #220]	; (801e484 <_svfprintf_r+0x444>)
 801e3a6:	ec51 0b19 	vmov	r0, r1, d9
 801e3aa:	f04f 32ff 	mov.w	r2, #4294967295
 801e3ae:	f7e2 fbb9 	bl	8000b24 <__aeabi_dcmple>
 801e3b2:	b9d0      	cbnz	r0, 801e3ea <_svfprintf_r+0x3aa>
 801e3b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	f7e2 fba8 	bl	8000b10 <__aeabi_dcmplt>
 801e3c0:	b110      	cbz	r0, 801e3c8 <_svfprintf_r+0x388>
 801e3c2:	232d      	movs	r3, #45	; 0x2d
 801e3c4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e3c8:	4a2f      	ldr	r2, [pc, #188]	; (801e488 <_svfprintf_r+0x448>)
 801e3ca:	4830      	ldr	r0, [pc, #192]	; (801e48c <_svfprintf_r+0x44c>)
 801e3cc:	9b07      	ldr	r3, [sp, #28]
 801e3ce:	2100      	movs	r1, #0
 801e3d0:	2b47      	cmp	r3, #71	; 0x47
 801e3d2:	bfd4      	ite	le
 801e3d4:	4693      	movle	fp, r2
 801e3d6:	4683      	movgt	fp, r0
 801e3d8:	2303      	movs	r3, #3
 801e3da:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801e3de:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801e3e2:	2600      	movs	r6, #0
 801e3e4:	4633      	mov	r3, r6
 801e3e6:	f001 b802 	b.w	801f3ee <_svfprintf_r+0x13ae>
 801e3ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801e3ee:	4610      	mov	r0, r2
 801e3f0:	4619      	mov	r1, r3
 801e3f2:	f7e2 fbb5 	bl	8000b60 <__aeabi_dcmpun>
 801e3f6:	b140      	cbz	r0, 801e40a <_svfprintf_r+0x3ca>
 801e3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3fa:	4a25      	ldr	r2, [pc, #148]	; (801e490 <_svfprintf_r+0x450>)
 801e3fc:	4825      	ldr	r0, [pc, #148]	; (801e494 <_svfprintf_r+0x454>)
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	bfbc      	itt	lt
 801e402:	232d      	movlt	r3, #45	; 0x2d
 801e404:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801e408:	e7e0      	b.n	801e3cc <_svfprintf_r+0x38c>
 801e40a:	9b07      	ldr	r3, [sp, #28]
 801e40c:	f023 0320 	bic.w	r3, r3, #32
 801e410:	2b41      	cmp	r3, #65	; 0x41
 801e412:	9308      	str	r3, [sp, #32]
 801e414:	d125      	bne.n	801e462 <_svfprintf_r+0x422>
 801e416:	2330      	movs	r3, #48	; 0x30
 801e418:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801e41c:	9b07      	ldr	r3, [sp, #28]
 801e41e:	2b61      	cmp	r3, #97	; 0x61
 801e420:	bf0c      	ite	eq
 801e422:	2378      	moveq	r3, #120	; 0x78
 801e424:	2358      	movne	r3, #88	; 0x58
 801e426:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801e42a:	9b04      	ldr	r3, [sp, #16]
 801e42c:	2b63      	cmp	r3, #99	; 0x63
 801e42e:	f048 0802 	orr.w	r8, r8, #2
 801e432:	dd31      	ble.n	801e498 <_svfprintf_r+0x458>
 801e434:	1c59      	adds	r1, r3, #1
 801e436:	4650      	mov	r0, sl
 801e438:	f7fe ffd2 	bl	801d3e0 <_malloc_r>
 801e43c:	4683      	mov	fp, r0
 801e43e:	2800      	cmp	r0, #0
 801e440:	f040 81fe 	bne.w	801e840 <_svfprintf_r+0x800>
 801e444:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e44c:	f8a9 300c 	strh.w	r3, [r9, #12]
 801e450:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e454:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e45a:	bf18      	it	ne
 801e45c:	f04f 33ff 	movne.w	r3, #4294967295
 801e460:	e614      	b.n	801e08c <_svfprintf_r+0x4c>
 801e462:	9b04      	ldr	r3, [sp, #16]
 801e464:	3301      	adds	r3, #1
 801e466:	f000 81ed 	beq.w	801e844 <_svfprintf_r+0x804>
 801e46a:	9b08      	ldr	r3, [sp, #32]
 801e46c:	2b47      	cmp	r3, #71	; 0x47
 801e46e:	f040 81ec 	bne.w	801e84a <_svfprintf_r+0x80a>
 801e472:	9b04      	ldr	r3, [sp, #16]
 801e474:	2b00      	cmp	r3, #0
 801e476:	f040 81e8 	bne.w	801e84a <_svfprintf_r+0x80a>
 801e47a:	9303      	str	r3, [sp, #12]
 801e47c:	2301      	movs	r3, #1
 801e47e:	9304      	str	r3, [sp, #16]
 801e480:	e00d      	b.n	801e49e <_svfprintf_r+0x45e>
 801e482:	bf00      	nop
 801e484:	7fefffff 	.word	0x7fefffff
 801e488:	08040594 	.word	0x08040594
 801e48c:	08040598 	.word	0x08040598
 801e490:	0804059c 	.word	0x0804059c
 801e494:	080405a0 	.word	0x080405a0
 801e498:	9003      	str	r0, [sp, #12]
 801e49a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801e49e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801e4a2:	9311      	str	r3, [sp, #68]	; 0x44
 801e4a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	f280 81d1 	bge.w	801e84e <_svfprintf_r+0x80e>
 801e4ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4ae:	ee08 3a10 	vmov	s16, r3
 801e4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e4b8:	ee08 3a90 	vmov	s17, r3
 801e4bc:	232d      	movs	r3, #45	; 0x2d
 801e4be:	9318      	str	r3, [sp, #96]	; 0x60
 801e4c0:	9b08      	ldr	r3, [sp, #32]
 801e4c2:	2b41      	cmp	r3, #65	; 0x41
 801e4c4:	f040 81e1 	bne.w	801e88a <_svfprintf_r+0x84a>
 801e4c8:	eeb0 0a48 	vmov.f32	s0, s16
 801e4cc:	eef0 0a68 	vmov.f32	s1, s17
 801e4d0:	a81c      	add	r0, sp, #112	; 0x70
 801e4d2:	f003 fef5 	bl	80222c0 <frexp>
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e4dc:	ec51 0b10 	vmov	r0, r1, d0
 801e4e0:	f7e2 f8a4 	bl	800062c <__aeabi_dmul>
 801e4e4:	2200      	movs	r2, #0
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	4606      	mov	r6, r0
 801e4ea:	460f      	mov	r7, r1
 801e4ec:	f7e2 fb06 	bl	8000afc <__aeabi_dcmpeq>
 801e4f0:	b108      	cbz	r0, 801e4f6 <_svfprintf_r+0x4b6>
 801e4f2:	2301      	movs	r3, #1
 801e4f4:	931c      	str	r3, [sp, #112]	; 0x70
 801e4f6:	4bb4      	ldr	r3, [pc, #720]	; (801e7c8 <_svfprintf_r+0x788>)
 801e4f8:	4ab4      	ldr	r2, [pc, #720]	; (801e7cc <_svfprintf_r+0x78c>)
 801e4fa:	9907      	ldr	r1, [sp, #28]
 801e4fc:	2961      	cmp	r1, #97	; 0x61
 801e4fe:	bf18      	it	ne
 801e500:	461a      	movne	r2, r3
 801e502:	9b04      	ldr	r3, [sp, #16]
 801e504:	9217      	str	r2, [sp, #92]	; 0x5c
 801e506:	3b01      	subs	r3, #1
 801e508:	9305      	str	r3, [sp, #20]
 801e50a:	465d      	mov	r5, fp
 801e50c:	4bb0      	ldr	r3, [pc, #704]	; (801e7d0 <_svfprintf_r+0x790>)
 801e50e:	2200      	movs	r2, #0
 801e510:	4630      	mov	r0, r6
 801e512:	4639      	mov	r1, r7
 801e514:	f7e2 f88a 	bl	800062c <__aeabi_dmul>
 801e518:	460f      	mov	r7, r1
 801e51a:	4606      	mov	r6, r0
 801e51c:	f7e2 fb36 	bl	8000b8c <__aeabi_d2iz>
 801e520:	9019      	str	r0, [sp, #100]	; 0x64
 801e522:	f7e2 f819 	bl	8000558 <__aeabi_i2d>
 801e526:	4602      	mov	r2, r0
 801e528:	460b      	mov	r3, r1
 801e52a:	4630      	mov	r0, r6
 801e52c:	4639      	mov	r1, r7
 801e52e:	f7e1 fec5 	bl	80002bc <__aeabi_dsub>
 801e532:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e536:	5c9b      	ldrb	r3, [r3, r2]
 801e538:	f805 3b01 	strb.w	r3, [r5], #1
 801e53c:	9b05      	ldr	r3, [sp, #20]
 801e53e:	9309      	str	r3, [sp, #36]	; 0x24
 801e540:	1c5a      	adds	r2, r3, #1
 801e542:	4606      	mov	r6, r0
 801e544:	460f      	mov	r7, r1
 801e546:	d007      	beq.n	801e558 <_svfprintf_r+0x518>
 801e548:	3b01      	subs	r3, #1
 801e54a:	9305      	str	r3, [sp, #20]
 801e54c:	2200      	movs	r2, #0
 801e54e:	2300      	movs	r3, #0
 801e550:	f7e2 fad4 	bl	8000afc <__aeabi_dcmpeq>
 801e554:	2800      	cmp	r0, #0
 801e556:	d0d9      	beq.n	801e50c <_svfprintf_r+0x4cc>
 801e558:	4b9e      	ldr	r3, [pc, #632]	; (801e7d4 <_svfprintf_r+0x794>)
 801e55a:	2200      	movs	r2, #0
 801e55c:	4630      	mov	r0, r6
 801e55e:	4639      	mov	r1, r7
 801e560:	f7e2 faf4 	bl	8000b4c <__aeabi_dcmpgt>
 801e564:	b960      	cbnz	r0, 801e580 <_svfprintf_r+0x540>
 801e566:	4b9b      	ldr	r3, [pc, #620]	; (801e7d4 <_svfprintf_r+0x794>)
 801e568:	2200      	movs	r2, #0
 801e56a:	4630      	mov	r0, r6
 801e56c:	4639      	mov	r1, r7
 801e56e:	f7e2 fac5 	bl	8000afc <__aeabi_dcmpeq>
 801e572:	2800      	cmp	r0, #0
 801e574:	f000 8184 	beq.w	801e880 <_svfprintf_r+0x840>
 801e578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e57a:	07df      	lsls	r7, r3, #31
 801e57c:	f140 8180 	bpl.w	801e880 <_svfprintf_r+0x840>
 801e580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e582:	9520      	str	r5, [sp, #128]	; 0x80
 801e584:	7bd9      	ldrb	r1, [r3, #15]
 801e586:	2030      	movs	r0, #48	; 0x30
 801e588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e58a:	1e53      	subs	r3, r2, #1
 801e58c:	9320      	str	r3, [sp, #128]	; 0x80
 801e58e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801e592:	428b      	cmp	r3, r1
 801e594:	f000 8163 	beq.w	801e85e <_svfprintf_r+0x81e>
 801e598:	2b39      	cmp	r3, #57	; 0x39
 801e59a:	bf0b      	itete	eq
 801e59c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801e59e:	3301      	addne	r3, #1
 801e5a0:	7a9b      	ldrbeq	r3, [r3, #10]
 801e5a2:	b2db      	uxtbne	r3, r3
 801e5a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e5a8:	eba5 030b 	sub.w	r3, r5, fp
 801e5ac:	9305      	str	r3, [sp, #20]
 801e5ae:	9b08      	ldr	r3, [sp, #32]
 801e5b0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e5b2:	2b47      	cmp	r3, #71	; 0x47
 801e5b4:	f040 81b1 	bne.w	801e91a <_svfprintf_r+0x8da>
 801e5b8:	1cee      	adds	r6, r5, #3
 801e5ba:	db03      	blt.n	801e5c4 <_svfprintf_r+0x584>
 801e5bc:	9b04      	ldr	r3, [sp, #16]
 801e5be:	42ab      	cmp	r3, r5
 801e5c0:	f280 81d6 	bge.w	801e970 <_svfprintf_r+0x930>
 801e5c4:	9b07      	ldr	r3, [sp, #28]
 801e5c6:	3b02      	subs	r3, #2
 801e5c8:	9307      	str	r3, [sp, #28]
 801e5ca:	9907      	ldr	r1, [sp, #28]
 801e5cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801e5d0:	f021 0120 	bic.w	r1, r1, #32
 801e5d4:	2941      	cmp	r1, #65	; 0x41
 801e5d6:	bf08      	it	eq
 801e5d8:	320f      	addeq	r2, #15
 801e5da:	f105 33ff 	add.w	r3, r5, #4294967295
 801e5de:	bf06      	itte	eq
 801e5e0:	b2d2      	uxtbeq	r2, r2
 801e5e2:	2101      	moveq	r1, #1
 801e5e4:	2100      	movne	r1, #0
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	931c      	str	r3, [sp, #112]	; 0x70
 801e5ea:	bfb8      	it	lt
 801e5ec:	f1c5 0301 	rsblt	r3, r5, #1
 801e5f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801e5f4:	bfb4      	ite	lt
 801e5f6:	222d      	movlt	r2, #45	; 0x2d
 801e5f8:	222b      	movge	r2, #43	; 0x2b
 801e5fa:	2b09      	cmp	r3, #9
 801e5fc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801e600:	f340 81a4 	ble.w	801e94c <_svfprintf_r+0x90c>
 801e604:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801e608:	260a      	movs	r6, #10
 801e60a:	4611      	mov	r1, r2
 801e60c:	fb93 f5f6 	sdiv	r5, r3, r6
 801e610:	fb06 3015 	mls	r0, r6, r5, r3
 801e614:	3030      	adds	r0, #48	; 0x30
 801e616:	f801 0c01 	strb.w	r0, [r1, #-1]
 801e61a:	4618      	mov	r0, r3
 801e61c:	2863      	cmp	r0, #99	; 0x63
 801e61e:	f102 32ff 	add.w	r2, r2, #4294967295
 801e622:	462b      	mov	r3, r5
 801e624:	dcf1      	bgt.n	801e60a <_svfprintf_r+0x5ca>
 801e626:	3330      	adds	r3, #48	; 0x30
 801e628:	1e88      	subs	r0, r1, #2
 801e62a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e62e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801e632:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801e636:	4603      	mov	r3, r0
 801e638:	42ab      	cmp	r3, r5
 801e63a:	f0c0 8182 	bcc.w	801e942 <_svfprintf_r+0x902>
 801e63e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801e642:	1a52      	subs	r2, r2, r1
 801e644:	42a8      	cmp	r0, r5
 801e646:	bf88      	it	hi
 801e648:	2200      	movhi	r2, #0
 801e64a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801e64e:	441a      	add	r2, r3
 801e650:	ab1e      	add	r3, sp, #120	; 0x78
 801e652:	1ad3      	subs	r3, r2, r3
 801e654:	9a05      	ldr	r2, [sp, #20]
 801e656:	9315      	str	r3, [sp, #84]	; 0x54
 801e658:	2a01      	cmp	r2, #1
 801e65a:	4413      	add	r3, r2
 801e65c:	9304      	str	r3, [sp, #16]
 801e65e:	dc02      	bgt.n	801e666 <_svfprintf_r+0x626>
 801e660:	f018 0f01 	tst.w	r8, #1
 801e664:	d003      	beq.n	801e66e <_svfprintf_r+0x62e>
 801e666:	9b04      	ldr	r3, [sp, #16]
 801e668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e66a:	4413      	add	r3, r2
 801e66c:	9304      	str	r3, [sp, #16]
 801e66e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801e672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e676:	9311      	str	r3, [sp, #68]	; 0x44
 801e678:	2300      	movs	r3, #0
 801e67a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e67e:	461d      	mov	r5, r3
 801e680:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e682:	b113      	cbz	r3, 801e68a <_svfprintf_r+0x64a>
 801e684:	232d      	movs	r3, #45	; 0x2d
 801e686:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e68a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801e68e:	2600      	movs	r6, #0
 801e690:	9b04      	ldr	r3, [sp, #16]
 801e692:	42b3      	cmp	r3, r6
 801e694:	bfb8      	it	lt
 801e696:	4633      	movlt	r3, r6
 801e698:	9311      	str	r3, [sp, #68]	; 0x44
 801e69a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801e69e:	b113      	cbz	r3, 801e6a6 <_svfprintf_r+0x666>
 801e6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6a2:	3301      	adds	r3, #1
 801e6a4:	9311      	str	r3, [sp, #68]	; 0x44
 801e6a6:	f018 0302 	ands.w	r3, r8, #2
 801e6aa:	9317      	str	r3, [sp, #92]	; 0x5c
 801e6ac:	bf1e      	ittt	ne
 801e6ae:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801e6b0:	3302      	addne	r3, #2
 801e6b2:	9311      	strne	r3, [sp, #68]	; 0x44
 801e6b4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801e6b8:	9318      	str	r3, [sp, #96]	; 0x60
 801e6ba:	d11f      	bne.n	801e6fc <_svfprintf_r+0x6bc>
 801e6bc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e6c0:	1a9f      	subs	r7, r3, r2
 801e6c2:	2f00      	cmp	r7, #0
 801e6c4:	dd1a      	ble.n	801e6fc <_svfprintf_r+0x6bc>
 801e6c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e6ca:	4843      	ldr	r0, [pc, #268]	; (801e7d8 <_svfprintf_r+0x798>)
 801e6cc:	6020      	str	r0, [r4, #0]
 801e6ce:	2f10      	cmp	r7, #16
 801e6d0:	f103 0301 	add.w	r3, r3, #1
 801e6d4:	f104 0108 	add.w	r1, r4, #8
 801e6d8:	f300 82e6 	bgt.w	801eca8 <_svfprintf_r+0xc68>
 801e6dc:	6067      	str	r7, [r4, #4]
 801e6de:	2b07      	cmp	r3, #7
 801e6e0:	4417      	add	r7, r2
 801e6e2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801e6e6:	f340 82f2 	ble.w	801ecce <_svfprintf_r+0xc8e>
 801e6ea:	aa22      	add	r2, sp, #136	; 0x88
 801e6ec:	4649      	mov	r1, r9
 801e6ee:	4650      	mov	r0, sl
 801e6f0:	f003 fe61 	bl	80223b6 <__ssprint_r>
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	f040 861d 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801e6fa:	ac25      	add	r4, sp, #148	; 0x94
 801e6fc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801e700:	b173      	cbz	r3, 801e720 <_svfprintf_r+0x6e0>
 801e702:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801e706:	6023      	str	r3, [r4, #0]
 801e708:	2301      	movs	r3, #1
 801e70a:	6063      	str	r3, [r4, #4]
 801e70c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e70e:	3301      	adds	r3, #1
 801e710:	9324      	str	r3, [sp, #144]	; 0x90
 801e712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e714:	3301      	adds	r3, #1
 801e716:	2b07      	cmp	r3, #7
 801e718:	9323      	str	r3, [sp, #140]	; 0x8c
 801e71a:	f300 82da 	bgt.w	801ecd2 <_svfprintf_r+0xc92>
 801e71e:	3408      	adds	r4, #8
 801e720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e722:	b16b      	cbz	r3, 801e740 <_svfprintf_r+0x700>
 801e724:	ab1b      	add	r3, sp, #108	; 0x6c
 801e726:	6023      	str	r3, [r4, #0]
 801e728:	2302      	movs	r3, #2
 801e72a:	6063      	str	r3, [r4, #4]
 801e72c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e72e:	3302      	adds	r3, #2
 801e730:	9324      	str	r3, [sp, #144]	; 0x90
 801e732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e734:	3301      	adds	r3, #1
 801e736:	2b07      	cmp	r3, #7
 801e738:	9323      	str	r3, [sp, #140]	; 0x8c
 801e73a:	f300 82d4 	bgt.w	801ece6 <_svfprintf_r+0xca6>
 801e73e:	3408      	adds	r4, #8
 801e740:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e742:	2b80      	cmp	r3, #128	; 0x80
 801e744:	d11f      	bne.n	801e786 <_svfprintf_r+0x746>
 801e746:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e74a:	1a9f      	subs	r7, r3, r2
 801e74c:	2f00      	cmp	r7, #0
 801e74e:	dd1a      	ble.n	801e786 <_svfprintf_r+0x746>
 801e750:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e754:	4821      	ldr	r0, [pc, #132]	; (801e7dc <_svfprintf_r+0x79c>)
 801e756:	6020      	str	r0, [r4, #0]
 801e758:	2f10      	cmp	r7, #16
 801e75a:	f103 0301 	add.w	r3, r3, #1
 801e75e:	f104 0108 	add.w	r1, r4, #8
 801e762:	f300 82ca 	bgt.w	801ecfa <_svfprintf_r+0xcba>
 801e766:	6067      	str	r7, [r4, #4]
 801e768:	2b07      	cmp	r3, #7
 801e76a:	4417      	add	r7, r2
 801e76c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801e770:	f340 82d6 	ble.w	801ed20 <_svfprintf_r+0xce0>
 801e774:	aa22      	add	r2, sp, #136	; 0x88
 801e776:	4649      	mov	r1, r9
 801e778:	4650      	mov	r0, sl
 801e77a:	f003 fe1c 	bl	80223b6 <__ssprint_r>
 801e77e:	2800      	cmp	r0, #0
 801e780:	f040 85d8 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801e784:	ac25      	add	r4, sp, #148	; 0x94
 801e786:	9b04      	ldr	r3, [sp, #16]
 801e788:	1af6      	subs	r6, r6, r3
 801e78a:	2e00      	cmp	r6, #0
 801e78c:	dd28      	ble.n	801e7e0 <_svfprintf_r+0x7a0>
 801e78e:	4f13      	ldr	r7, [pc, #76]	; (801e7dc <_svfprintf_r+0x79c>)
 801e790:	6027      	str	r7, [r4, #0]
 801e792:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e796:	2e10      	cmp	r6, #16
 801e798:	f103 0301 	add.w	r3, r3, #1
 801e79c:	f104 0108 	add.w	r1, r4, #8
 801e7a0:	f300 82c0 	bgt.w	801ed24 <_svfprintf_r+0xce4>
 801e7a4:	6066      	str	r6, [r4, #4]
 801e7a6:	2b07      	cmp	r3, #7
 801e7a8:	4416      	add	r6, r2
 801e7aa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e7ae:	f340 82cc 	ble.w	801ed4a <_svfprintf_r+0xd0a>
 801e7b2:	aa22      	add	r2, sp, #136	; 0x88
 801e7b4:	4649      	mov	r1, r9
 801e7b6:	4650      	mov	r0, sl
 801e7b8:	f003 fdfd 	bl	80223b6 <__ssprint_r>
 801e7bc:	2800      	cmp	r0, #0
 801e7be:	f040 85b9 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801e7c2:	ac25      	add	r4, sp, #148	; 0x94
 801e7c4:	e00c      	b.n	801e7e0 <_svfprintf_r+0x7a0>
 801e7c6:	bf00      	nop
 801e7c8:	080405b5 	.word	0x080405b5
 801e7cc:	080405a4 	.word	0x080405a4
 801e7d0:	40300000 	.word	0x40300000
 801e7d4:	3fe00000 	.word	0x3fe00000
 801e7d8:	080405c8 	.word	0x080405c8
 801e7dc:	080405d8 	.word	0x080405d8
 801e7e0:	f418 7f80 	tst.w	r8, #256	; 0x100
 801e7e4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801e7e6:	f040 82b7 	bne.w	801ed58 <_svfprintf_r+0xd18>
 801e7ea:	9b04      	ldr	r3, [sp, #16]
 801e7ec:	f8c4 b000 	str.w	fp, [r4]
 801e7f0:	441e      	add	r6, r3
 801e7f2:	6063      	str	r3, [r4, #4]
 801e7f4:	9624      	str	r6, [sp, #144]	; 0x90
 801e7f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e7f8:	3301      	adds	r3, #1
 801e7fa:	2b07      	cmp	r3, #7
 801e7fc:	9323      	str	r3, [sp, #140]	; 0x8c
 801e7fe:	f300 82f0 	bgt.w	801ede2 <_svfprintf_r+0xda2>
 801e802:	3408      	adds	r4, #8
 801e804:	f018 0f04 	tst.w	r8, #4
 801e808:	f040 8576 	bne.w	801f2f8 <_svfprintf_r+0x12b8>
 801e80c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801e810:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e812:	428a      	cmp	r2, r1
 801e814:	bfac      	ite	ge
 801e816:	189b      	addge	r3, r3, r2
 801e818:	185b      	addlt	r3, r3, r1
 801e81a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e81c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e81e:	b13b      	cbz	r3, 801e830 <_svfprintf_r+0x7f0>
 801e820:	aa22      	add	r2, sp, #136	; 0x88
 801e822:	4649      	mov	r1, r9
 801e824:	4650      	mov	r0, sl
 801e826:	f003 fdc6 	bl	80223b6 <__ssprint_r>
 801e82a:	2800      	cmp	r0, #0
 801e82c:	f040 8582 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801e830:	2300      	movs	r3, #0
 801e832:	9323      	str	r3, [sp, #140]	; 0x8c
 801e834:	9b03      	ldr	r3, [sp, #12]
 801e836:	2b00      	cmp	r3, #0
 801e838:	f040 8598 	bne.w	801f36c <_svfprintf_r+0x132c>
 801e83c:	ac25      	add	r4, sp, #148	; 0x94
 801e83e:	e0ed      	b.n	801ea1c <_svfprintf_r+0x9dc>
 801e840:	9003      	str	r0, [sp, #12]
 801e842:	e62c      	b.n	801e49e <_svfprintf_r+0x45e>
 801e844:	9003      	str	r0, [sp, #12]
 801e846:	2306      	movs	r3, #6
 801e848:	e619      	b.n	801e47e <_svfprintf_r+0x43e>
 801e84a:	9003      	str	r0, [sp, #12]
 801e84c:	e627      	b.n	801e49e <_svfprintf_r+0x45e>
 801e84e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801e852:	2300      	movs	r3, #0
 801e854:	eeb0 8a47 	vmov.f32	s16, s14
 801e858:	eef0 8a67 	vmov.f32	s17, s15
 801e85c:	e62f      	b.n	801e4be <_svfprintf_r+0x47e>
 801e85e:	f802 0c01 	strb.w	r0, [r2, #-1]
 801e862:	e691      	b.n	801e588 <_svfprintf_r+0x548>
 801e864:	f803 0b01 	strb.w	r0, [r3], #1
 801e868:	1aca      	subs	r2, r1, r3
 801e86a:	2a00      	cmp	r2, #0
 801e86c:	dafa      	bge.n	801e864 <_svfprintf_r+0x824>
 801e86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e872:	3201      	adds	r2, #1
 801e874:	f103 0301 	add.w	r3, r3, #1
 801e878:	bfb8      	it	lt
 801e87a:	2300      	movlt	r3, #0
 801e87c:	441d      	add	r5, r3
 801e87e:	e693      	b.n	801e5a8 <_svfprintf_r+0x568>
 801e880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e882:	462b      	mov	r3, r5
 801e884:	18a9      	adds	r1, r5, r2
 801e886:	2030      	movs	r0, #48	; 0x30
 801e888:	e7ee      	b.n	801e868 <_svfprintf_r+0x828>
 801e88a:	9b08      	ldr	r3, [sp, #32]
 801e88c:	2b46      	cmp	r3, #70	; 0x46
 801e88e:	d005      	beq.n	801e89c <_svfprintf_r+0x85c>
 801e890:	2b45      	cmp	r3, #69	; 0x45
 801e892:	d11b      	bne.n	801e8cc <_svfprintf_r+0x88c>
 801e894:	9b04      	ldr	r3, [sp, #16]
 801e896:	1c5d      	adds	r5, r3, #1
 801e898:	2102      	movs	r1, #2
 801e89a:	e001      	b.n	801e8a0 <_svfprintf_r+0x860>
 801e89c:	9d04      	ldr	r5, [sp, #16]
 801e89e:	2103      	movs	r1, #3
 801e8a0:	ab20      	add	r3, sp, #128	; 0x80
 801e8a2:	9301      	str	r3, [sp, #4]
 801e8a4:	ab1d      	add	r3, sp, #116	; 0x74
 801e8a6:	9300      	str	r3, [sp, #0]
 801e8a8:	462a      	mov	r2, r5
 801e8aa:	ab1c      	add	r3, sp, #112	; 0x70
 801e8ac:	4650      	mov	r0, sl
 801e8ae:	eeb0 0a48 	vmov.f32	s0, s16
 801e8b2:	eef0 0a68 	vmov.f32	s1, s17
 801e8b6:	f002 f91f 	bl	8020af8 <_dtoa_r>
 801e8ba:	9b08      	ldr	r3, [sp, #32]
 801e8bc:	2b47      	cmp	r3, #71	; 0x47
 801e8be:	4683      	mov	fp, r0
 801e8c0:	d106      	bne.n	801e8d0 <_svfprintf_r+0x890>
 801e8c2:	f018 0f01 	tst.w	r8, #1
 801e8c6:	d103      	bne.n	801e8d0 <_svfprintf_r+0x890>
 801e8c8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e8ca:	e66d      	b.n	801e5a8 <_svfprintf_r+0x568>
 801e8cc:	9d04      	ldr	r5, [sp, #16]
 801e8ce:	e7e3      	b.n	801e898 <_svfprintf_r+0x858>
 801e8d0:	9b08      	ldr	r3, [sp, #32]
 801e8d2:	2b46      	cmp	r3, #70	; 0x46
 801e8d4:	eb0b 0605 	add.w	r6, fp, r5
 801e8d8:	d10f      	bne.n	801e8fa <_svfprintf_r+0x8ba>
 801e8da:	f89b 3000 	ldrb.w	r3, [fp]
 801e8de:	2b30      	cmp	r3, #48	; 0x30
 801e8e0:	d109      	bne.n	801e8f6 <_svfprintf_r+0x8b6>
 801e8e2:	ec51 0b18 	vmov	r0, r1, d8
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	f7e2 f907 	bl	8000afc <__aeabi_dcmpeq>
 801e8ee:	b910      	cbnz	r0, 801e8f6 <_svfprintf_r+0x8b6>
 801e8f0:	f1c5 0501 	rsb	r5, r5, #1
 801e8f4:	951c      	str	r5, [sp, #112]	; 0x70
 801e8f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e8f8:	441e      	add	r6, r3
 801e8fa:	ec51 0b18 	vmov	r0, r1, d8
 801e8fe:	2200      	movs	r2, #0
 801e900:	2300      	movs	r3, #0
 801e902:	f7e2 f8fb 	bl	8000afc <__aeabi_dcmpeq>
 801e906:	b100      	cbz	r0, 801e90a <_svfprintf_r+0x8ca>
 801e908:	9620      	str	r6, [sp, #128]	; 0x80
 801e90a:	2230      	movs	r2, #48	; 0x30
 801e90c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e90e:	429e      	cmp	r6, r3
 801e910:	d9da      	bls.n	801e8c8 <_svfprintf_r+0x888>
 801e912:	1c59      	adds	r1, r3, #1
 801e914:	9120      	str	r1, [sp, #128]	; 0x80
 801e916:	701a      	strb	r2, [r3, #0]
 801e918:	e7f8      	b.n	801e90c <_svfprintf_r+0x8cc>
 801e91a:	9b08      	ldr	r3, [sp, #32]
 801e91c:	2b46      	cmp	r3, #70	; 0x46
 801e91e:	f47f ae54 	bne.w	801e5ca <_svfprintf_r+0x58a>
 801e922:	9a04      	ldr	r2, [sp, #16]
 801e924:	f008 0301 	and.w	r3, r8, #1
 801e928:	2d00      	cmp	r5, #0
 801e92a:	ea43 0302 	orr.w	r3, r3, r2
 801e92e:	dd1a      	ble.n	801e966 <_svfprintf_r+0x926>
 801e930:	2b00      	cmp	r3, #0
 801e932:	d034      	beq.n	801e99e <_svfprintf_r+0x95e>
 801e934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e936:	18eb      	adds	r3, r5, r3
 801e938:	441a      	add	r2, r3
 801e93a:	9204      	str	r2, [sp, #16]
 801e93c:	2366      	movs	r3, #102	; 0x66
 801e93e:	9307      	str	r3, [sp, #28]
 801e940:	e033      	b.n	801e9aa <_svfprintf_r+0x96a>
 801e942:	f813 6b01 	ldrb.w	r6, [r3], #1
 801e946:	f802 6b01 	strb.w	r6, [r2], #1
 801e94a:	e675      	b.n	801e638 <_svfprintf_r+0x5f8>
 801e94c:	b941      	cbnz	r1, 801e960 <_svfprintf_r+0x920>
 801e94e:	2230      	movs	r2, #48	; 0x30
 801e950:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801e954:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801e958:	3330      	adds	r3, #48	; 0x30
 801e95a:	f802 3b01 	strb.w	r3, [r2], #1
 801e95e:	e677      	b.n	801e650 <_svfprintf_r+0x610>
 801e960:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801e964:	e7f8      	b.n	801e958 <_svfprintf_r+0x918>
 801e966:	b1e3      	cbz	r3, 801e9a2 <_svfprintf_r+0x962>
 801e968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e96a:	9a04      	ldr	r2, [sp, #16]
 801e96c:	3301      	adds	r3, #1
 801e96e:	e7e3      	b.n	801e938 <_svfprintf_r+0x8f8>
 801e970:	9b05      	ldr	r3, [sp, #20]
 801e972:	429d      	cmp	r5, r3
 801e974:	db07      	blt.n	801e986 <_svfprintf_r+0x946>
 801e976:	f018 0f01 	tst.w	r8, #1
 801e97a:	d02d      	beq.n	801e9d8 <_svfprintf_r+0x998>
 801e97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e97e:	18eb      	adds	r3, r5, r3
 801e980:	9304      	str	r3, [sp, #16]
 801e982:	2367      	movs	r3, #103	; 0x67
 801e984:	e7db      	b.n	801e93e <_svfprintf_r+0x8fe>
 801e986:	9b05      	ldr	r3, [sp, #20]
 801e988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e98a:	2d00      	cmp	r5, #0
 801e98c:	4413      	add	r3, r2
 801e98e:	9304      	str	r3, [sp, #16]
 801e990:	dcf7      	bgt.n	801e982 <_svfprintf_r+0x942>
 801e992:	9a04      	ldr	r2, [sp, #16]
 801e994:	f1c5 0301 	rsb	r3, r5, #1
 801e998:	441a      	add	r2, r3
 801e99a:	4613      	mov	r3, r2
 801e99c:	e7f0      	b.n	801e980 <_svfprintf_r+0x940>
 801e99e:	9504      	str	r5, [sp, #16]
 801e9a0:	e7cc      	b.n	801e93c <_svfprintf_r+0x8fc>
 801e9a2:	2366      	movs	r3, #102	; 0x66
 801e9a4:	9307      	str	r3, [sp, #28]
 801e9a6:	2301      	movs	r3, #1
 801e9a8:	9304      	str	r3, [sp, #16]
 801e9aa:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801e9ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e9b0:	d025      	beq.n	801e9fe <_svfprintf_r+0x9be>
 801e9b2:	2300      	movs	r3, #0
 801e9b4:	2d00      	cmp	r5, #0
 801e9b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e9ba:	f77f ae61 	ble.w	801e680 <_svfprintf_r+0x640>
 801e9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9c0:	781b      	ldrb	r3, [r3, #0]
 801e9c2:	2bff      	cmp	r3, #255	; 0xff
 801e9c4:	d10a      	bne.n	801e9dc <_svfprintf_r+0x99c>
 801e9c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e9ca:	9904      	ldr	r1, [sp, #16]
 801e9cc:	4413      	add	r3, r2
 801e9ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9d0:	fb02 1303 	mla	r3, r2, r3, r1
 801e9d4:	9304      	str	r3, [sp, #16]
 801e9d6:	e653      	b.n	801e680 <_svfprintf_r+0x640>
 801e9d8:	9504      	str	r5, [sp, #16]
 801e9da:	e7d2      	b.n	801e982 <_svfprintf_r+0x942>
 801e9dc:	42ab      	cmp	r3, r5
 801e9de:	daf2      	bge.n	801e9c6 <_svfprintf_r+0x986>
 801e9e0:	1aed      	subs	r5, r5, r3
 801e9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9e4:	785b      	ldrb	r3, [r3, #1]
 801e9e6:	b133      	cbz	r3, 801e9f6 <_svfprintf_r+0x9b6>
 801e9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9ea:	3301      	adds	r3, #1
 801e9ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9f0:	3301      	adds	r3, #1
 801e9f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e9f4:	e7e3      	b.n	801e9be <_svfprintf_r+0x97e>
 801e9f6:	9b08      	ldr	r3, [sp, #32]
 801e9f8:	3301      	adds	r3, #1
 801e9fa:	9308      	str	r3, [sp, #32]
 801e9fc:	e7df      	b.n	801e9be <_svfprintf_r+0x97e>
 801e9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea00:	9308      	str	r3, [sp, #32]
 801ea02:	e63d      	b.n	801e680 <_svfprintf_r+0x640>
 801ea04:	4632      	mov	r2, r6
 801ea06:	f018 0f20 	tst.w	r8, #32
 801ea0a:	f852 3b04 	ldr.w	r3, [r2], #4
 801ea0e:	9206      	str	r2, [sp, #24]
 801ea10:	d009      	beq.n	801ea26 <_svfprintf_r+0x9e6>
 801ea12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea14:	4610      	mov	r0, r2
 801ea16:	17d1      	asrs	r1, r2, #31
 801ea18:	e9c3 0100 	strd	r0, r1, [r3]
 801ea1c:	9e06      	ldr	r6, [sp, #24]
 801ea1e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801ea22:	f7ff bb4d 	b.w	801e0c0 <_svfprintf_r+0x80>
 801ea26:	f018 0f10 	tst.w	r8, #16
 801ea2a:	d002      	beq.n	801ea32 <_svfprintf_r+0x9f2>
 801ea2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea2e:	601a      	str	r2, [r3, #0]
 801ea30:	e7f4      	b.n	801ea1c <_svfprintf_r+0x9dc>
 801ea32:	f018 0f40 	tst.w	r8, #64	; 0x40
 801ea36:	d002      	beq.n	801ea3e <_svfprintf_r+0x9fe>
 801ea38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea3a:	801a      	strh	r2, [r3, #0]
 801ea3c:	e7ee      	b.n	801ea1c <_svfprintf_r+0x9dc>
 801ea3e:	f418 7f00 	tst.w	r8, #512	; 0x200
 801ea42:	d0f3      	beq.n	801ea2c <_svfprintf_r+0x9ec>
 801ea44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea46:	701a      	strb	r2, [r3, #0]
 801ea48:	e7e8      	b.n	801ea1c <_svfprintf_r+0x9dc>
 801ea4a:	f048 0810 	orr.w	r8, r8, #16
 801ea4e:	f018 0f20 	tst.w	r8, #32
 801ea52:	d01e      	beq.n	801ea92 <_svfprintf_r+0xa52>
 801ea54:	3607      	adds	r6, #7
 801ea56:	f026 0307 	bic.w	r3, r6, #7
 801ea5a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ea5e:	9306      	str	r3, [sp, #24]
 801ea60:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801ea64:	2300      	movs	r3, #0
 801ea66:	2200      	movs	r2, #0
 801ea68:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801ea6c:	9a04      	ldr	r2, [sp, #16]
 801ea6e:	3201      	adds	r2, #1
 801ea70:	f000 848d 	beq.w	801f38e <_svfprintf_r+0x134e>
 801ea74:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801ea78:	9203      	str	r2, [sp, #12]
 801ea7a:	ea56 0207 	orrs.w	r2, r6, r7
 801ea7e:	f040 848c 	bne.w	801f39a <_svfprintf_r+0x135a>
 801ea82:	9a04      	ldr	r2, [sp, #16]
 801ea84:	2a00      	cmp	r2, #0
 801ea86:	f000 80f5 	beq.w	801ec74 <_svfprintf_r+0xc34>
 801ea8a:	2b01      	cmp	r3, #1
 801ea8c:	f040 8488 	bne.w	801f3a0 <_svfprintf_r+0x1360>
 801ea90:	e097      	b.n	801ebc2 <_svfprintf_r+0xb82>
 801ea92:	1d33      	adds	r3, r6, #4
 801ea94:	f018 0f10 	tst.w	r8, #16
 801ea98:	9306      	str	r3, [sp, #24]
 801ea9a:	d001      	beq.n	801eaa0 <_svfprintf_r+0xa60>
 801ea9c:	6836      	ldr	r6, [r6, #0]
 801ea9e:	e003      	b.n	801eaa8 <_svfprintf_r+0xa68>
 801eaa0:	f018 0f40 	tst.w	r8, #64	; 0x40
 801eaa4:	d002      	beq.n	801eaac <_svfprintf_r+0xa6c>
 801eaa6:	8836      	ldrh	r6, [r6, #0]
 801eaa8:	2700      	movs	r7, #0
 801eaaa:	e7d9      	b.n	801ea60 <_svfprintf_r+0xa20>
 801eaac:	f418 7f00 	tst.w	r8, #512	; 0x200
 801eab0:	d0f4      	beq.n	801ea9c <_svfprintf_r+0xa5c>
 801eab2:	7836      	ldrb	r6, [r6, #0]
 801eab4:	e7f8      	b.n	801eaa8 <_svfprintf_r+0xa68>
 801eab6:	4633      	mov	r3, r6
 801eab8:	2278      	movs	r2, #120	; 0x78
 801eaba:	f853 6b04 	ldr.w	r6, [r3], #4
 801eabe:	9306      	str	r3, [sp, #24]
 801eac0:	f647 0330 	movw	r3, #30768	; 0x7830
 801eac4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801eac8:	4ba1      	ldr	r3, [pc, #644]	; (801ed50 <_svfprintf_r+0xd10>)
 801eaca:	9316      	str	r3, [sp, #88]	; 0x58
 801eacc:	2700      	movs	r7, #0
 801eace:	f048 0802 	orr.w	r8, r8, #2
 801ead2:	2302      	movs	r3, #2
 801ead4:	9207      	str	r2, [sp, #28]
 801ead6:	e7c6      	b.n	801ea66 <_svfprintf_r+0xa26>
 801ead8:	4633      	mov	r3, r6
 801eada:	2500      	movs	r5, #0
 801eadc:	f853 bb04 	ldr.w	fp, [r3], #4
 801eae0:	9306      	str	r3, [sp, #24]
 801eae2:	9b04      	ldr	r3, [sp, #16]
 801eae4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801eae8:	1c59      	adds	r1, r3, #1
 801eaea:	d010      	beq.n	801eb0e <_svfprintf_r+0xace>
 801eaec:	461a      	mov	r2, r3
 801eaee:	4629      	mov	r1, r5
 801eaf0:	4658      	mov	r0, fp
 801eaf2:	f7e1 fb7d 	bl	80001f0 <memchr>
 801eaf6:	9003      	str	r0, [sp, #12]
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	f000 80d2 	beq.w	801eca2 <_svfprintf_r+0xc62>
 801eafe:	eba0 030b 	sub.w	r3, r0, fp
 801eb02:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801eb06:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801eb0a:	462e      	mov	r6, r5
 801eb0c:	e5c0      	b.n	801e690 <_svfprintf_r+0x650>
 801eb0e:	4658      	mov	r0, fp
 801eb10:	f7e1 fbc8 	bl	80002a4 <strlen>
 801eb14:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801eb18:	e463      	b.n	801e3e2 <_svfprintf_r+0x3a2>
 801eb1a:	f048 0810 	orr.w	r8, r8, #16
 801eb1e:	f018 0f20 	tst.w	r8, #32
 801eb22:	d007      	beq.n	801eb34 <_svfprintf_r+0xaf4>
 801eb24:	3607      	adds	r6, #7
 801eb26:	f026 0307 	bic.w	r3, r6, #7
 801eb2a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801eb2e:	9306      	str	r3, [sp, #24]
 801eb30:	2301      	movs	r3, #1
 801eb32:	e798      	b.n	801ea66 <_svfprintf_r+0xa26>
 801eb34:	1d33      	adds	r3, r6, #4
 801eb36:	f018 0f10 	tst.w	r8, #16
 801eb3a:	9306      	str	r3, [sp, #24]
 801eb3c:	d001      	beq.n	801eb42 <_svfprintf_r+0xb02>
 801eb3e:	6836      	ldr	r6, [r6, #0]
 801eb40:	e003      	b.n	801eb4a <_svfprintf_r+0xb0a>
 801eb42:	f018 0f40 	tst.w	r8, #64	; 0x40
 801eb46:	d002      	beq.n	801eb4e <_svfprintf_r+0xb0e>
 801eb48:	8836      	ldrh	r6, [r6, #0]
 801eb4a:	2700      	movs	r7, #0
 801eb4c:	e7f0      	b.n	801eb30 <_svfprintf_r+0xaf0>
 801eb4e:	f418 7f00 	tst.w	r8, #512	; 0x200
 801eb52:	d0f4      	beq.n	801eb3e <_svfprintf_r+0xafe>
 801eb54:	7836      	ldrb	r6, [r6, #0]
 801eb56:	e7f8      	b.n	801eb4a <_svfprintf_r+0xb0a>
 801eb58:	4b7e      	ldr	r3, [pc, #504]	; (801ed54 <_svfprintf_r+0xd14>)
 801eb5a:	9316      	str	r3, [sp, #88]	; 0x58
 801eb5c:	f018 0f20 	tst.w	r8, #32
 801eb60:	d019      	beq.n	801eb96 <_svfprintf_r+0xb56>
 801eb62:	3607      	adds	r6, #7
 801eb64:	f026 0307 	bic.w	r3, r6, #7
 801eb68:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801eb6c:	9306      	str	r3, [sp, #24]
 801eb6e:	f018 0f01 	tst.w	r8, #1
 801eb72:	d00a      	beq.n	801eb8a <_svfprintf_r+0xb4a>
 801eb74:	ea56 0307 	orrs.w	r3, r6, r7
 801eb78:	d007      	beq.n	801eb8a <_svfprintf_r+0xb4a>
 801eb7a:	2330      	movs	r3, #48	; 0x30
 801eb7c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801eb80:	9b07      	ldr	r3, [sp, #28]
 801eb82:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801eb86:	f048 0802 	orr.w	r8, r8, #2
 801eb8a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801eb8e:	2302      	movs	r3, #2
 801eb90:	e769      	b.n	801ea66 <_svfprintf_r+0xa26>
 801eb92:	4b6f      	ldr	r3, [pc, #444]	; (801ed50 <_svfprintf_r+0xd10>)
 801eb94:	e7e1      	b.n	801eb5a <_svfprintf_r+0xb1a>
 801eb96:	1d33      	adds	r3, r6, #4
 801eb98:	f018 0f10 	tst.w	r8, #16
 801eb9c:	9306      	str	r3, [sp, #24]
 801eb9e:	d001      	beq.n	801eba4 <_svfprintf_r+0xb64>
 801eba0:	6836      	ldr	r6, [r6, #0]
 801eba2:	e003      	b.n	801ebac <_svfprintf_r+0xb6c>
 801eba4:	f018 0f40 	tst.w	r8, #64	; 0x40
 801eba8:	d002      	beq.n	801ebb0 <_svfprintf_r+0xb70>
 801ebaa:	8836      	ldrh	r6, [r6, #0]
 801ebac:	2700      	movs	r7, #0
 801ebae:	e7de      	b.n	801eb6e <_svfprintf_r+0xb2e>
 801ebb0:	f418 7f00 	tst.w	r8, #512	; 0x200
 801ebb4:	d0f4      	beq.n	801eba0 <_svfprintf_r+0xb60>
 801ebb6:	7836      	ldrb	r6, [r6, #0]
 801ebb8:	e7f8      	b.n	801ebac <_svfprintf_r+0xb6c>
 801ebba:	2f00      	cmp	r7, #0
 801ebbc:	bf08      	it	eq
 801ebbe:	2e0a      	cmpeq	r6, #10
 801ebc0:	d206      	bcs.n	801ebd0 <_svfprintf_r+0xb90>
 801ebc2:	3630      	adds	r6, #48	; 0x30
 801ebc4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801ebc8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801ebcc:	f000 bc06 	b.w	801f3dc <_svfprintf_r+0x139c>
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	9305      	str	r3, [sp, #20]
 801ebd4:	9b03      	ldr	r3, [sp, #12]
 801ebd6:	ad4e      	add	r5, sp, #312	; 0x138
 801ebd8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801ebdc:	220a      	movs	r2, #10
 801ebde:	2300      	movs	r3, #0
 801ebe0:	4630      	mov	r0, r6
 801ebe2:	4639      	mov	r1, r7
 801ebe4:	f7e1 fffa 	bl	8000bdc <__aeabi_uldivmod>
 801ebe8:	9b05      	ldr	r3, [sp, #20]
 801ebea:	3230      	adds	r2, #48	; 0x30
 801ebec:	3301      	adds	r3, #1
 801ebee:	f105 3bff 	add.w	fp, r5, #4294967295
 801ebf2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ebf6:	9305      	str	r3, [sp, #20]
 801ebf8:	f1b8 0f00 	cmp.w	r8, #0
 801ebfc:	d019      	beq.n	801ec32 <_svfprintf_r+0xbf2>
 801ebfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec00:	9a05      	ldr	r2, [sp, #20]
 801ec02:	781b      	ldrb	r3, [r3, #0]
 801ec04:	429a      	cmp	r2, r3
 801ec06:	d114      	bne.n	801ec32 <_svfprintf_r+0xbf2>
 801ec08:	2aff      	cmp	r2, #255	; 0xff
 801ec0a:	d012      	beq.n	801ec32 <_svfprintf_r+0xbf2>
 801ec0c:	2f00      	cmp	r7, #0
 801ec0e:	bf08      	it	eq
 801ec10:	2e0a      	cmpeq	r6, #10
 801ec12:	d30e      	bcc.n	801ec32 <_svfprintf_r+0xbf2>
 801ec14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ec16:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ec18:	ebab 0b03 	sub.w	fp, fp, r3
 801ec1c:	461a      	mov	r2, r3
 801ec1e:	4658      	mov	r0, fp
 801ec20:	f7ff f8a6 	bl	801dd70 <strncpy>
 801ec24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec26:	785d      	ldrb	r5, [r3, #1]
 801ec28:	b195      	cbz	r5, 801ec50 <_svfprintf_r+0xc10>
 801ec2a:	3301      	adds	r3, #1
 801ec2c:	930a      	str	r3, [sp, #40]	; 0x28
 801ec2e:	2300      	movs	r3, #0
 801ec30:	9305      	str	r3, [sp, #20]
 801ec32:	220a      	movs	r2, #10
 801ec34:	2300      	movs	r3, #0
 801ec36:	4630      	mov	r0, r6
 801ec38:	4639      	mov	r1, r7
 801ec3a:	f7e1 ffcf 	bl	8000bdc <__aeabi_uldivmod>
 801ec3e:	2f00      	cmp	r7, #0
 801ec40:	bf08      	it	eq
 801ec42:	2e0a      	cmpeq	r6, #10
 801ec44:	f0c0 83ca 	bcc.w	801f3dc <_svfprintf_r+0x139c>
 801ec48:	4606      	mov	r6, r0
 801ec4a:	460f      	mov	r7, r1
 801ec4c:	465d      	mov	r5, fp
 801ec4e:	e7c5      	b.n	801ebdc <_svfprintf_r+0xb9c>
 801ec50:	9505      	str	r5, [sp, #20]
 801ec52:	e7ee      	b.n	801ec32 <_svfprintf_r+0xbf2>
 801ec54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ec56:	f006 030f 	and.w	r3, r6, #15
 801ec5a:	5cd3      	ldrb	r3, [r2, r3]
 801ec5c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801ec60:	0933      	lsrs	r3, r6, #4
 801ec62:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801ec66:	093a      	lsrs	r2, r7, #4
 801ec68:	461e      	mov	r6, r3
 801ec6a:	4617      	mov	r7, r2
 801ec6c:	ea56 0307 	orrs.w	r3, r6, r7
 801ec70:	d1f0      	bne.n	801ec54 <_svfprintf_r+0xc14>
 801ec72:	e3b3      	b.n	801f3dc <_svfprintf_r+0x139c>
 801ec74:	b933      	cbnz	r3, 801ec84 <_svfprintf_r+0xc44>
 801ec76:	f018 0f01 	tst.w	r8, #1
 801ec7a:	d003      	beq.n	801ec84 <_svfprintf_r+0xc44>
 801ec7c:	2330      	movs	r3, #48	; 0x30
 801ec7e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801ec82:	e7a1      	b.n	801ebc8 <_svfprintf_r+0xb88>
 801ec84:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801ec88:	e3a8      	b.n	801f3dc <_svfprintf_r+0x139c>
 801ec8a:	9b07      	ldr	r3, [sp, #28]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	f000 8373 	beq.w	801f378 <_svfprintf_r+0x1338>
 801ec92:	2000      	movs	r0, #0
 801ec94:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801ec98:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801ec9c:	9606      	str	r6, [sp, #24]
 801ec9e:	f7ff bb34 	b.w	801e30a <_svfprintf_r+0x2ca>
 801eca2:	9e03      	ldr	r6, [sp, #12]
 801eca4:	f7ff bb9e 	b.w	801e3e4 <_svfprintf_r+0x3a4>
 801eca8:	2010      	movs	r0, #16
 801ecaa:	4402      	add	r2, r0
 801ecac:	2b07      	cmp	r3, #7
 801ecae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ecb2:	6060      	str	r0, [r4, #4]
 801ecb4:	dd08      	ble.n	801ecc8 <_svfprintf_r+0xc88>
 801ecb6:	aa22      	add	r2, sp, #136	; 0x88
 801ecb8:	4649      	mov	r1, r9
 801ecba:	4650      	mov	r0, sl
 801ecbc:	f003 fb7b 	bl	80223b6 <__ssprint_r>
 801ecc0:	2800      	cmp	r0, #0
 801ecc2:	f040 8337 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ecc6:	a925      	add	r1, sp, #148	; 0x94
 801ecc8:	3f10      	subs	r7, #16
 801ecca:	460c      	mov	r4, r1
 801eccc:	e4fb      	b.n	801e6c6 <_svfprintf_r+0x686>
 801ecce:	460c      	mov	r4, r1
 801ecd0:	e514      	b.n	801e6fc <_svfprintf_r+0x6bc>
 801ecd2:	aa22      	add	r2, sp, #136	; 0x88
 801ecd4:	4649      	mov	r1, r9
 801ecd6:	4650      	mov	r0, sl
 801ecd8:	f003 fb6d 	bl	80223b6 <__ssprint_r>
 801ecdc:	2800      	cmp	r0, #0
 801ecde:	f040 8329 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ece2:	ac25      	add	r4, sp, #148	; 0x94
 801ece4:	e51c      	b.n	801e720 <_svfprintf_r+0x6e0>
 801ece6:	aa22      	add	r2, sp, #136	; 0x88
 801ece8:	4649      	mov	r1, r9
 801ecea:	4650      	mov	r0, sl
 801ecec:	f003 fb63 	bl	80223b6 <__ssprint_r>
 801ecf0:	2800      	cmp	r0, #0
 801ecf2:	f040 831f 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ecf6:	ac25      	add	r4, sp, #148	; 0x94
 801ecf8:	e522      	b.n	801e740 <_svfprintf_r+0x700>
 801ecfa:	2010      	movs	r0, #16
 801ecfc:	4402      	add	r2, r0
 801ecfe:	2b07      	cmp	r3, #7
 801ed00:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ed04:	6060      	str	r0, [r4, #4]
 801ed06:	dd08      	ble.n	801ed1a <_svfprintf_r+0xcda>
 801ed08:	aa22      	add	r2, sp, #136	; 0x88
 801ed0a:	4649      	mov	r1, r9
 801ed0c:	4650      	mov	r0, sl
 801ed0e:	f003 fb52 	bl	80223b6 <__ssprint_r>
 801ed12:	2800      	cmp	r0, #0
 801ed14:	f040 830e 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ed18:	a925      	add	r1, sp, #148	; 0x94
 801ed1a:	3f10      	subs	r7, #16
 801ed1c:	460c      	mov	r4, r1
 801ed1e:	e517      	b.n	801e750 <_svfprintf_r+0x710>
 801ed20:	460c      	mov	r4, r1
 801ed22:	e530      	b.n	801e786 <_svfprintf_r+0x746>
 801ed24:	2010      	movs	r0, #16
 801ed26:	4402      	add	r2, r0
 801ed28:	2b07      	cmp	r3, #7
 801ed2a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ed2e:	6060      	str	r0, [r4, #4]
 801ed30:	dd08      	ble.n	801ed44 <_svfprintf_r+0xd04>
 801ed32:	aa22      	add	r2, sp, #136	; 0x88
 801ed34:	4649      	mov	r1, r9
 801ed36:	4650      	mov	r0, sl
 801ed38:	f003 fb3d 	bl	80223b6 <__ssprint_r>
 801ed3c:	2800      	cmp	r0, #0
 801ed3e:	f040 82f9 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ed42:	a925      	add	r1, sp, #148	; 0x94
 801ed44:	3e10      	subs	r6, #16
 801ed46:	460c      	mov	r4, r1
 801ed48:	e522      	b.n	801e790 <_svfprintf_r+0x750>
 801ed4a:	460c      	mov	r4, r1
 801ed4c:	e548      	b.n	801e7e0 <_svfprintf_r+0x7a0>
 801ed4e:	bf00      	nop
 801ed50:	080405a4 	.word	0x080405a4
 801ed54:	080405b5 	.word	0x080405b5
 801ed58:	9b07      	ldr	r3, [sp, #28]
 801ed5a:	2b65      	cmp	r3, #101	; 0x65
 801ed5c:	f340 8232 	ble.w	801f1c4 <_svfprintf_r+0x1184>
 801ed60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ed64:	2200      	movs	r2, #0
 801ed66:	2300      	movs	r3, #0
 801ed68:	f7e1 fec8 	bl	8000afc <__aeabi_dcmpeq>
 801ed6c:	2800      	cmp	r0, #0
 801ed6e:	d068      	beq.n	801ee42 <_svfprintf_r+0xe02>
 801ed70:	4b6d      	ldr	r3, [pc, #436]	; (801ef28 <_svfprintf_r+0xee8>)
 801ed72:	6023      	str	r3, [r4, #0]
 801ed74:	2301      	movs	r3, #1
 801ed76:	441e      	add	r6, r3
 801ed78:	6063      	str	r3, [r4, #4]
 801ed7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ed7c:	9624      	str	r6, [sp, #144]	; 0x90
 801ed7e:	3301      	adds	r3, #1
 801ed80:	2b07      	cmp	r3, #7
 801ed82:	9323      	str	r3, [sp, #140]	; 0x8c
 801ed84:	dc37      	bgt.n	801edf6 <_svfprintf_r+0xdb6>
 801ed86:	3408      	adds	r4, #8
 801ed88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ed8a:	9a05      	ldr	r2, [sp, #20]
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	db03      	blt.n	801ed98 <_svfprintf_r+0xd58>
 801ed90:	f018 0f01 	tst.w	r8, #1
 801ed94:	f43f ad36 	beq.w	801e804 <_svfprintf_r+0x7c4>
 801ed98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed9a:	6023      	str	r3, [r4, #0]
 801ed9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eda0:	6063      	str	r3, [r4, #4]
 801eda2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eda4:	4413      	add	r3, r2
 801eda6:	9324      	str	r3, [sp, #144]	; 0x90
 801eda8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801edaa:	3301      	adds	r3, #1
 801edac:	2b07      	cmp	r3, #7
 801edae:	9323      	str	r3, [sp, #140]	; 0x8c
 801edb0:	dc2b      	bgt.n	801ee0a <_svfprintf_r+0xdca>
 801edb2:	3408      	adds	r4, #8
 801edb4:	9b05      	ldr	r3, [sp, #20]
 801edb6:	1e5d      	subs	r5, r3, #1
 801edb8:	2d00      	cmp	r5, #0
 801edba:	f77f ad23 	ble.w	801e804 <_svfprintf_r+0x7c4>
 801edbe:	4e5b      	ldr	r6, [pc, #364]	; (801ef2c <_svfprintf_r+0xeec>)
 801edc0:	2710      	movs	r7, #16
 801edc2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801edc6:	2d10      	cmp	r5, #16
 801edc8:	f103 0301 	add.w	r3, r3, #1
 801edcc:	f104 0108 	add.w	r1, r4, #8
 801edd0:	6026      	str	r6, [r4, #0]
 801edd2:	dc24      	bgt.n	801ee1e <_svfprintf_r+0xdde>
 801edd4:	6065      	str	r5, [r4, #4]
 801edd6:	2b07      	cmp	r3, #7
 801edd8:	4415      	add	r5, r2
 801edda:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801edde:	f340 8288 	ble.w	801f2f2 <_svfprintf_r+0x12b2>
 801ede2:	aa22      	add	r2, sp, #136	; 0x88
 801ede4:	4649      	mov	r1, r9
 801ede6:	4650      	mov	r0, sl
 801ede8:	f003 fae5 	bl	80223b6 <__ssprint_r>
 801edec:	2800      	cmp	r0, #0
 801edee:	f040 82a1 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801edf2:	ac25      	add	r4, sp, #148	; 0x94
 801edf4:	e506      	b.n	801e804 <_svfprintf_r+0x7c4>
 801edf6:	aa22      	add	r2, sp, #136	; 0x88
 801edf8:	4649      	mov	r1, r9
 801edfa:	4650      	mov	r0, sl
 801edfc:	f003 fadb 	bl	80223b6 <__ssprint_r>
 801ee00:	2800      	cmp	r0, #0
 801ee02:	f040 8297 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ee06:	ac25      	add	r4, sp, #148	; 0x94
 801ee08:	e7be      	b.n	801ed88 <_svfprintf_r+0xd48>
 801ee0a:	aa22      	add	r2, sp, #136	; 0x88
 801ee0c:	4649      	mov	r1, r9
 801ee0e:	4650      	mov	r0, sl
 801ee10:	f003 fad1 	bl	80223b6 <__ssprint_r>
 801ee14:	2800      	cmp	r0, #0
 801ee16:	f040 828d 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ee1a:	ac25      	add	r4, sp, #148	; 0x94
 801ee1c:	e7ca      	b.n	801edb4 <_svfprintf_r+0xd74>
 801ee1e:	3210      	adds	r2, #16
 801ee20:	2b07      	cmp	r3, #7
 801ee22:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ee26:	6067      	str	r7, [r4, #4]
 801ee28:	dd08      	ble.n	801ee3c <_svfprintf_r+0xdfc>
 801ee2a:	aa22      	add	r2, sp, #136	; 0x88
 801ee2c:	4649      	mov	r1, r9
 801ee2e:	4650      	mov	r0, sl
 801ee30:	f003 fac1 	bl	80223b6 <__ssprint_r>
 801ee34:	2800      	cmp	r0, #0
 801ee36:	f040 827d 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ee3a:	a925      	add	r1, sp, #148	; 0x94
 801ee3c:	3d10      	subs	r5, #16
 801ee3e:	460c      	mov	r4, r1
 801ee40:	e7bf      	b.n	801edc2 <_svfprintf_r+0xd82>
 801ee42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	dc73      	bgt.n	801ef30 <_svfprintf_r+0xef0>
 801ee48:	4b37      	ldr	r3, [pc, #220]	; (801ef28 <_svfprintf_r+0xee8>)
 801ee4a:	6023      	str	r3, [r4, #0]
 801ee4c:	2301      	movs	r3, #1
 801ee4e:	441e      	add	r6, r3
 801ee50:	6063      	str	r3, [r4, #4]
 801ee52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ee54:	9624      	str	r6, [sp, #144]	; 0x90
 801ee56:	3301      	adds	r3, #1
 801ee58:	2b07      	cmp	r3, #7
 801ee5a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ee5c:	dc3d      	bgt.n	801eeda <_svfprintf_r+0xe9a>
 801ee5e:	3408      	adds	r4, #8
 801ee60:	9905      	ldr	r1, [sp, #20]
 801ee62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ee64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ee66:	430a      	orrs	r2, r1
 801ee68:	f008 0101 	and.w	r1, r8, #1
 801ee6c:	430a      	orrs	r2, r1
 801ee6e:	f43f acc9 	beq.w	801e804 <_svfprintf_r+0x7c4>
 801ee72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee74:	6022      	str	r2, [r4, #0]
 801ee76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee78:	6062      	str	r2, [r4, #4]
 801ee7a:	4413      	add	r3, r2
 801ee7c:	9324      	str	r3, [sp, #144]	; 0x90
 801ee7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ee80:	3301      	adds	r3, #1
 801ee82:	2b07      	cmp	r3, #7
 801ee84:	9323      	str	r3, [sp, #140]	; 0x8c
 801ee86:	dc32      	bgt.n	801eeee <_svfprintf_r+0xeae>
 801ee88:	3408      	adds	r4, #8
 801ee8a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ee8c:	2d00      	cmp	r5, #0
 801ee8e:	da1b      	bge.n	801eec8 <_svfprintf_r+0xe88>
 801ee90:	4e26      	ldr	r6, [pc, #152]	; (801ef2c <_svfprintf_r+0xeec>)
 801ee92:	426d      	negs	r5, r5
 801ee94:	4623      	mov	r3, r4
 801ee96:	2710      	movs	r7, #16
 801ee98:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801ee9c:	2d10      	cmp	r5, #16
 801ee9e:	f102 0201 	add.w	r2, r2, #1
 801eea2:	f104 0408 	add.w	r4, r4, #8
 801eea6:	601e      	str	r6, [r3, #0]
 801eea8:	dc2b      	bgt.n	801ef02 <_svfprintf_r+0xec2>
 801eeaa:	605d      	str	r5, [r3, #4]
 801eeac:	2a07      	cmp	r2, #7
 801eeae:	440d      	add	r5, r1
 801eeb0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801eeb4:	dd08      	ble.n	801eec8 <_svfprintf_r+0xe88>
 801eeb6:	aa22      	add	r2, sp, #136	; 0x88
 801eeb8:	4649      	mov	r1, r9
 801eeba:	4650      	mov	r0, sl
 801eebc:	f003 fa7b 	bl	80223b6 <__ssprint_r>
 801eec0:	2800      	cmp	r0, #0
 801eec2:	f040 8237 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801eec6:	ac25      	add	r4, sp, #148	; 0x94
 801eec8:	9b05      	ldr	r3, [sp, #20]
 801eeca:	9a05      	ldr	r2, [sp, #20]
 801eecc:	6063      	str	r3, [r4, #4]
 801eece:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eed0:	f8c4 b000 	str.w	fp, [r4]
 801eed4:	4413      	add	r3, r2
 801eed6:	9324      	str	r3, [sp, #144]	; 0x90
 801eed8:	e48d      	b.n	801e7f6 <_svfprintf_r+0x7b6>
 801eeda:	aa22      	add	r2, sp, #136	; 0x88
 801eedc:	4649      	mov	r1, r9
 801eede:	4650      	mov	r0, sl
 801eee0:	f003 fa69 	bl	80223b6 <__ssprint_r>
 801eee4:	2800      	cmp	r0, #0
 801eee6:	f040 8225 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801eeea:	ac25      	add	r4, sp, #148	; 0x94
 801eeec:	e7b8      	b.n	801ee60 <_svfprintf_r+0xe20>
 801eeee:	aa22      	add	r2, sp, #136	; 0x88
 801eef0:	4649      	mov	r1, r9
 801eef2:	4650      	mov	r0, sl
 801eef4:	f003 fa5f 	bl	80223b6 <__ssprint_r>
 801eef8:	2800      	cmp	r0, #0
 801eefa:	f040 821b 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801eefe:	ac25      	add	r4, sp, #148	; 0x94
 801ef00:	e7c3      	b.n	801ee8a <_svfprintf_r+0xe4a>
 801ef02:	3110      	adds	r1, #16
 801ef04:	2a07      	cmp	r2, #7
 801ef06:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801ef0a:	605f      	str	r7, [r3, #4]
 801ef0c:	dd08      	ble.n	801ef20 <_svfprintf_r+0xee0>
 801ef0e:	aa22      	add	r2, sp, #136	; 0x88
 801ef10:	4649      	mov	r1, r9
 801ef12:	4650      	mov	r0, sl
 801ef14:	f003 fa4f 	bl	80223b6 <__ssprint_r>
 801ef18:	2800      	cmp	r0, #0
 801ef1a:	f040 820b 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ef1e:	ac25      	add	r4, sp, #148	; 0x94
 801ef20:	3d10      	subs	r5, #16
 801ef22:	4623      	mov	r3, r4
 801ef24:	e7b8      	b.n	801ee98 <_svfprintf_r+0xe58>
 801ef26:	bf00      	nop
 801ef28:	080405c6 	.word	0x080405c6
 801ef2c:	080405d8 	.word	0x080405d8
 801ef30:	9b05      	ldr	r3, [sp, #20]
 801ef32:	42ab      	cmp	r3, r5
 801ef34:	bfa8      	it	ge
 801ef36:	462b      	movge	r3, r5
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	461f      	mov	r7, r3
 801ef3c:	dd0a      	ble.n	801ef54 <_svfprintf_r+0xf14>
 801ef3e:	441e      	add	r6, r3
 801ef40:	e9c4 b300 	strd	fp, r3, [r4]
 801ef44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef46:	9624      	str	r6, [sp, #144]	; 0x90
 801ef48:	3301      	adds	r3, #1
 801ef4a:	2b07      	cmp	r3, #7
 801ef4c:	9323      	str	r3, [sp, #140]	; 0x8c
 801ef4e:	f300 8086 	bgt.w	801f05e <_svfprintf_r+0x101e>
 801ef52:	3408      	adds	r4, #8
 801ef54:	2f00      	cmp	r7, #0
 801ef56:	bfac      	ite	ge
 801ef58:	1bee      	subge	r6, r5, r7
 801ef5a:	462e      	movlt	r6, r5
 801ef5c:	2e00      	cmp	r6, #0
 801ef5e:	dd19      	ble.n	801ef94 <_svfprintf_r+0xf54>
 801ef60:	4f97      	ldr	r7, [pc, #604]	; (801f1c0 <_svfprintf_r+0x1180>)
 801ef62:	6027      	str	r7, [r4, #0]
 801ef64:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ef68:	2e10      	cmp	r6, #16
 801ef6a:	f103 0301 	add.w	r3, r3, #1
 801ef6e:	f104 0108 	add.w	r1, r4, #8
 801ef72:	dc7e      	bgt.n	801f072 <_svfprintf_r+0x1032>
 801ef74:	6066      	str	r6, [r4, #4]
 801ef76:	2b07      	cmp	r3, #7
 801ef78:	4416      	add	r6, r2
 801ef7a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801ef7e:	f340 808b 	ble.w	801f098 <_svfprintf_r+0x1058>
 801ef82:	aa22      	add	r2, sp, #136	; 0x88
 801ef84:	4649      	mov	r1, r9
 801ef86:	4650      	mov	r0, sl
 801ef88:	f003 fa15 	bl	80223b6 <__ssprint_r>
 801ef8c:	2800      	cmp	r0, #0
 801ef8e:	f040 81d1 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801ef92:	ac25      	add	r4, sp, #148	; 0x94
 801ef94:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801ef98:	445d      	add	r5, fp
 801ef9a:	d00b      	beq.n	801efb4 <_svfprintf_r+0xf74>
 801ef9c:	4e88      	ldr	r6, [pc, #544]	; (801f1c0 <_svfprintf_r+0x1180>)
 801ef9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d17b      	bne.n	801f09c <_svfprintf_r+0x105c>
 801efa4:	9b08      	ldr	r3, [sp, #32]
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d17b      	bne.n	801f0a2 <_svfprintf_r+0x1062>
 801efaa:	9b05      	ldr	r3, [sp, #20]
 801efac:	445b      	add	r3, fp
 801efae:	429d      	cmp	r5, r3
 801efb0:	bf28      	it	cs
 801efb2:	461d      	movcs	r5, r3
 801efb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801efb6:	9a05      	ldr	r2, [sp, #20]
 801efb8:	4293      	cmp	r3, r2
 801efba:	db02      	blt.n	801efc2 <_svfprintf_r+0xf82>
 801efbc:	f018 0f01 	tst.w	r8, #1
 801efc0:	d00e      	beq.n	801efe0 <_svfprintf_r+0xfa0>
 801efc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801efc4:	6023      	str	r3, [r4, #0]
 801efc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801efca:	6063      	str	r3, [r4, #4]
 801efcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801efce:	4413      	add	r3, r2
 801efd0:	9324      	str	r3, [sp, #144]	; 0x90
 801efd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801efd4:	3301      	adds	r3, #1
 801efd6:	2b07      	cmp	r3, #7
 801efd8:	9323      	str	r3, [sp, #140]	; 0x8c
 801efda:	f300 80dd 	bgt.w	801f198 <_svfprintf_r+0x1158>
 801efde:	3408      	adds	r4, #8
 801efe0:	9b05      	ldr	r3, [sp, #20]
 801efe2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801efe4:	eb0b 0203 	add.w	r2, fp, r3
 801efe8:	1b9e      	subs	r6, r3, r6
 801efea:	1b52      	subs	r2, r2, r5
 801efec:	4296      	cmp	r6, r2
 801efee:	bfa8      	it	ge
 801eff0:	4616      	movge	r6, r2
 801eff2:	2e00      	cmp	r6, #0
 801eff4:	dd0b      	ble.n	801f00e <_svfprintf_r+0xfce>
 801eff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eff8:	4433      	add	r3, r6
 801effa:	9324      	str	r3, [sp, #144]	; 0x90
 801effc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801effe:	3301      	adds	r3, #1
 801f000:	2b07      	cmp	r3, #7
 801f002:	e9c4 5600 	strd	r5, r6, [r4]
 801f006:	9323      	str	r3, [sp, #140]	; 0x8c
 801f008:	f300 80d0 	bgt.w	801f1ac <_svfprintf_r+0x116c>
 801f00c:	3408      	adds	r4, #8
 801f00e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f010:	9b05      	ldr	r3, [sp, #20]
 801f012:	2e00      	cmp	r6, #0
 801f014:	eba3 0505 	sub.w	r5, r3, r5
 801f018:	bfa8      	it	ge
 801f01a:	1bad      	subge	r5, r5, r6
 801f01c:	2d00      	cmp	r5, #0
 801f01e:	f77f abf1 	ble.w	801e804 <_svfprintf_r+0x7c4>
 801f022:	4e67      	ldr	r6, [pc, #412]	; (801f1c0 <_svfprintf_r+0x1180>)
 801f024:	2710      	movs	r7, #16
 801f026:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f02a:	2d10      	cmp	r5, #16
 801f02c:	f103 0301 	add.w	r3, r3, #1
 801f030:	f104 0108 	add.w	r1, r4, #8
 801f034:	6026      	str	r6, [r4, #0]
 801f036:	f77f aecd 	ble.w	801edd4 <_svfprintf_r+0xd94>
 801f03a:	3210      	adds	r2, #16
 801f03c:	2b07      	cmp	r3, #7
 801f03e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f042:	6067      	str	r7, [r4, #4]
 801f044:	dd08      	ble.n	801f058 <_svfprintf_r+0x1018>
 801f046:	aa22      	add	r2, sp, #136	; 0x88
 801f048:	4649      	mov	r1, r9
 801f04a:	4650      	mov	r0, sl
 801f04c:	f003 f9b3 	bl	80223b6 <__ssprint_r>
 801f050:	2800      	cmp	r0, #0
 801f052:	f040 816f 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f056:	a925      	add	r1, sp, #148	; 0x94
 801f058:	3d10      	subs	r5, #16
 801f05a:	460c      	mov	r4, r1
 801f05c:	e7e3      	b.n	801f026 <_svfprintf_r+0xfe6>
 801f05e:	aa22      	add	r2, sp, #136	; 0x88
 801f060:	4649      	mov	r1, r9
 801f062:	4650      	mov	r0, sl
 801f064:	f003 f9a7 	bl	80223b6 <__ssprint_r>
 801f068:	2800      	cmp	r0, #0
 801f06a:	f040 8163 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f06e:	ac25      	add	r4, sp, #148	; 0x94
 801f070:	e770      	b.n	801ef54 <_svfprintf_r+0xf14>
 801f072:	2010      	movs	r0, #16
 801f074:	4402      	add	r2, r0
 801f076:	2b07      	cmp	r3, #7
 801f078:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f07c:	6060      	str	r0, [r4, #4]
 801f07e:	dd08      	ble.n	801f092 <_svfprintf_r+0x1052>
 801f080:	aa22      	add	r2, sp, #136	; 0x88
 801f082:	4649      	mov	r1, r9
 801f084:	4650      	mov	r0, sl
 801f086:	f003 f996 	bl	80223b6 <__ssprint_r>
 801f08a:	2800      	cmp	r0, #0
 801f08c:	f040 8152 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f090:	a925      	add	r1, sp, #148	; 0x94
 801f092:	3e10      	subs	r6, #16
 801f094:	460c      	mov	r4, r1
 801f096:	e764      	b.n	801ef62 <_svfprintf_r+0xf22>
 801f098:	460c      	mov	r4, r1
 801f09a:	e77b      	b.n	801ef94 <_svfprintf_r+0xf54>
 801f09c:	9b08      	ldr	r3, [sp, #32]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d04a      	beq.n	801f138 <_svfprintf_r+0x10f8>
 801f0a2:	9b08      	ldr	r3, [sp, #32]
 801f0a4:	3b01      	subs	r3, #1
 801f0a6:	9308      	str	r3, [sp, #32]
 801f0a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f0aa:	6023      	str	r3, [r4, #0]
 801f0ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0b0:	6063      	str	r3, [r4, #4]
 801f0b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0b4:	4413      	add	r3, r2
 801f0b6:	9324      	str	r3, [sp, #144]	; 0x90
 801f0b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f0ba:	3301      	adds	r3, #1
 801f0bc:	2b07      	cmp	r3, #7
 801f0be:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0c0:	dc41      	bgt.n	801f146 <_svfprintf_r+0x1106>
 801f0c2:	3408      	adds	r4, #8
 801f0c4:	9b05      	ldr	r3, [sp, #20]
 801f0c6:	445b      	add	r3, fp
 801f0c8:	1b5a      	subs	r2, r3, r5
 801f0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0cc:	781b      	ldrb	r3, [r3, #0]
 801f0ce:	4293      	cmp	r3, r2
 801f0d0:	bfa8      	it	ge
 801f0d2:	4613      	movge	r3, r2
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	461f      	mov	r7, r3
 801f0d8:	dd0a      	ble.n	801f0f0 <_svfprintf_r+0x10b0>
 801f0da:	e9c4 5300 	strd	r5, r3, [r4]
 801f0de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0e0:	443b      	add	r3, r7
 801f0e2:	9324      	str	r3, [sp, #144]	; 0x90
 801f0e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f0e6:	3301      	adds	r3, #1
 801f0e8:	2b07      	cmp	r3, #7
 801f0ea:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0ec:	dc35      	bgt.n	801f15a <_svfprintf_r+0x111a>
 801f0ee:	3408      	adds	r4, #8
 801f0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0f2:	781b      	ldrb	r3, [r3, #0]
 801f0f4:	2f00      	cmp	r7, #0
 801f0f6:	bfac      	ite	ge
 801f0f8:	1bdf      	subge	r7, r3, r7
 801f0fa:	461f      	movlt	r7, r3
 801f0fc:	2f00      	cmp	r7, #0
 801f0fe:	dd17      	ble.n	801f130 <_svfprintf_r+0x10f0>
 801f100:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801f104:	2f10      	cmp	r7, #16
 801f106:	f102 0201 	add.w	r2, r2, #1
 801f10a:	f104 0108 	add.w	r1, r4, #8
 801f10e:	6026      	str	r6, [r4, #0]
 801f110:	dc2d      	bgt.n	801f16e <_svfprintf_r+0x112e>
 801f112:	443b      	add	r3, r7
 801f114:	2a07      	cmp	r2, #7
 801f116:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801f11a:	6067      	str	r7, [r4, #4]
 801f11c:	dd3a      	ble.n	801f194 <_svfprintf_r+0x1154>
 801f11e:	aa22      	add	r2, sp, #136	; 0x88
 801f120:	4649      	mov	r1, r9
 801f122:	4650      	mov	r0, sl
 801f124:	f003 f947 	bl	80223b6 <__ssprint_r>
 801f128:	2800      	cmp	r0, #0
 801f12a:	f040 8103 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f12e:	ac25      	add	r4, sp, #148	; 0x94
 801f130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f132:	781b      	ldrb	r3, [r3, #0]
 801f134:	441d      	add	r5, r3
 801f136:	e732      	b.n	801ef9e <_svfprintf_r+0xf5e>
 801f138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f13a:	3b01      	subs	r3, #1
 801f13c:	930a      	str	r3, [sp, #40]	; 0x28
 801f13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f140:	3b01      	subs	r3, #1
 801f142:	9309      	str	r3, [sp, #36]	; 0x24
 801f144:	e7b0      	b.n	801f0a8 <_svfprintf_r+0x1068>
 801f146:	aa22      	add	r2, sp, #136	; 0x88
 801f148:	4649      	mov	r1, r9
 801f14a:	4650      	mov	r0, sl
 801f14c:	f003 f933 	bl	80223b6 <__ssprint_r>
 801f150:	2800      	cmp	r0, #0
 801f152:	f040 80ef 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f156:	ac25      	add	r4, sp, #148	; 0x94
 801f158:	e7b4      	b.n	801f0c4 <_svfprintf_r+0x1084>
 801f15a:	aa22      	add	r2, sp, #136	; 0x88
 801f15c:	4649      	mov	r1, r9
 801f15e:	4650      	mov	r0, sl
 801f160:	f003 f929 	bl	80223b6 <__ssprint_r>
 801f164:	2800      	cmp	r0, #0
 801f166:	f040 80e5 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f16a:	ac25      	add	r4, sp, #148	; 0x94
 801f16c:	e7c0      	b.n	801f0f0 <_svfprintf_r+0x10b0>
 801f16e:	2010      	movs	r0, #16
 801f170:	4403      	add	r3, r0
 801f172:	2a07      	cmp	r2, #7
 801f174:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801f178:	6060      	str	r0, [r4, #4]
 801f17a:	dd08      	ble.n	801f18e <_svfprintf_r+0x114e>
 801f17c:	aa22      	add	r2, sp, #136	; 0x88
 801f17e:	4649      	mov	r1, r9
 801f180:	4650      	mov	r0, sl
 801f182:	f003 f918 	bl	80223b6 <__ssprint_r>
 801f186:	2800      	cmp	r0, #0
 801f188:	f040 80d4 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f18c:	a925      	add	r1, sp, #148	; 0x94
 801f18e:	3f10      	subs	r7, #16
 801f190:	460c      	mov	r4, r1
 801f192:	e7b5      	b.n	801f100 <_svfprintf_r+0x10c0>
 801f194:	460c      	mov	r4, r1
 801f196:	e7cb      	b.n	801f130 <_svfprintf_r+0x10f0>
 801f198:	aa22      	add	r2, sp, #136	; 0x88
 801f19a:	4649      	mov	r1, r9
 801f19c:	4650      	mov	r0, sl
 801f19e:	f003 f90a 	bl	80223b6 <__ssprint_r>
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	f040 80c6 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f1a8:	ac25      	add	r4, sp, #148	; 0x94
 801f1aa:	e719      	b.n	801efe0 <_svfprintf_r+0xfa0>
 801f1ac:	aa22      	add	r2, sp, #136	; 0x88
 801f1ae:	4649      	mov	r1, r9
 801f1b0:	4650      	mov	r0, sl
 801f1b2:	f003 f900 	bl	80223b6 <__ssprint_r>
 801f1b6:	2800      	cmp	r0, #0
 801f1b8:	f040 80bc 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f1bc:	ac25      	add	r4, sp, #148	; 0x94
 801f1be:	e726      	b.n	801f00e <_svfprintf_r+0xfce>
 801f1c0:	080405d8 	.word	0x080405d8
 801f1c4:	9a05      	ldr	r2, [sp, #20]
 801f1c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f1c8:	2a01      	cmp	r2, #1
 801f1ca:	f106 0601 	add.w	r6, r6, #1
 801f1ce:	f103 0301 	add.w	r3, r3, #1
 801f1d2:	f104 0508 	add.w	r5, r4, #8
 801f1d6:	dc02      	bgt.n	801f1de <_svfprintf_r+0x119e>
 801f1d8:	f018 0f01 	tst.w	r8, #1
 801f1dc:	d07e      	beq.n	801f2dc <_svfprintf_r+0x129c>
 801f1de:	2201      	movs	r2, #1
 801f1e0:	2b07      	cmp	r3, #7
 801f1e2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801f1e6:	f8c4 b000 	str.w	fp, [r4]
 801f1ea:	6062      	str	r2, [r4, #4]
 801f1ec:	dd08      	ble.n	801f200 <_svfprintf_r+0x11c0>
 801f1ee:	aa22      	add	r2, sp, #136	; 0x88
 801f1f0:	4649      	mov	r1, r9
 801f1f2:	4650      	mov	r0, sl
 801f1f4:	f003 f8df 	bl	80223b6 <__ssprint_r>
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	f040 809b 	bne.w	801f334 <_svfprintf_r+0x12f4>
 801f1fe:	ad25      	add	r5, sp, #148	; 0x94
 801f200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f202:	602b      	str	r3, [r5, #0]
 801f204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f208:	606b      	str	r3, [r5, #4]
 801f20a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f20c:	4413      	add	r3, r2
 801f20e:	9324      	str	r3, [sp, #144]	; 0x90
 801f210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f212:	3301      	adds	r3, #1
 801f214:	2b07      	cmp	r3, #7
 801f216:	9323      	str	r3, [sp, #140]	; 0x8c
 801f218:	dc32      	bgt.n	801f280 <_svfprintf_r+0x1240>
 801f21a:	3508      	adds	r5, #8
 801f21c:	9b05      	ldr	r3, [sp, #20]
 801f21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f222:	1e5c      	subs	r4, r3, #1
 801f224:	2200      	movs	r2, #0
 801f226:	2300      	movs	r3, #0
 801f228:	f7e1 fc68 	bl	8000afc <__aeabi_dcmpeq>
 801f22c:	2800      	cmp	r0, #0
 801f22e:	d130      	bne.n	801f292 <_svfprintf_r+0x1252>
 801f230:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f232:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f234:	9a05      	ldr	r2, [sp, #20]
 801f236:	3101      	adds	r1, #1
 801f238:	3b01      	subs	r3, #1
 801f23a:	f10b 0001 	add.w	r0, fp, #1
 801f23e:	4413      	add	r3, r2
 801f240:	2907      	cmp	r1, #7
 801f242:	e9c5 0400 	strd	r0, r4, [r5]
 801f246:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801f24a:	dd50      	ble.n	801f2ee <_svfprintf_r+0x12ae>
 801f24c:	aa22      	add	r2, sp, #136	; 0x88
 801f24e:	4649      	mov	r1, r9
 801f250:	4650      	mov	r0, sl
 801f252:	f003 f8b0 	bl	80223b6 <__ssprint_r>
 801f256:	2800      	cmp	r0, #0
 801f258:	d16c      	bne.n	801f334 <_svfprintf_r+0x12f4>
 801f25a:	ad25      	add	r5, sp, #148	; 0x94
 801f25c:	ab1e      	add	r3, sp, #120	; 0x78
 801f25e:	602b      	str	r3, [r5, #0]
 801f260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f262:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f264:	606b      	str	r3, [r5, #4]
 801f266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f268:	4413      	add	r3, r2
 801f26a:	9324      	str	r3, [sp, #144]	; 0x90
 801f26c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f26e:	3301      	adds	r3, #1
 801f270:	2b07      	cmp	r3, #7
 801f272:	9323      	str	r3, [sp, #140]	; 0x8c
 801f274:	f73f adb5 	bgt.w	801ede2 <_svfprintf_r+0xda2>
 801f278:	f105 0408 	add.w	r4, r5, #8
 801f27c:	f7ff bac2 	b.w	801e804 <_svfprintf_r+0x7c4>
 801f280:	aa22      	add	r2, sp, #136	; 0x88
 801f282:	4649      	mov	r1, r9
 801f284:	4650      	mov	r0, sl
 801f286:	f003 f896 	bl	80223b6 <__ssprint_r>
 801f28a:	2800      	cmp	r0, #0
 801f28c:	d152      	bne.n	801f334 <_svfprintf_r+0x12f4>
 801f28e:	ad25      	add	r5, sp, #148	; 0x94
 801f290:	e7c4      	b.n	801f21c <_svfprintf_r+0x11dc>
 801f292:	2c00      	cmp	r4, #0
 801f294:	dde2      	ble.n	801f25c <_svfprintf_r+0x121c>
 801f296:	4e58      	ldr	r6, [pc, #352]	; (801f3f8 <_svfprintf_r+0x13b8>)
 801f298:	2710      	movs	r7, #16
 801f29a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f29e:	2c10      	cmp	r4, #16
 801f2a0:	f103 0301 	add.w	r3, r3, #1
 801f2a4:	f105 0108 	add.w	r1, r5, #8
 801f2a8:	602e      	str	r6, [r5, #0]
 801f2aa:	dc07      	bgt.n	801f2bc <_svfprintf_r+0x127c>
 801f2ac:	606c      	str	r4, [r5, #4]
 801f2ae:	2b07      	cmp	r3, #7
 801f2b0:	4414      	add	r4, r2
 801f2b2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801f2b6:	dcc9      	bgt.n	801f24c <_svfprintf_r+0x120c>
 801f2b8:	460d      	mov	r5, r1
 801f2ba:	e7cf      	b.n	801f25c <_svfprintf_r+0x121c>
 801f2bc:	3210      	adds	r2, #16
 801f2be:	2b07      	cmp	r3, #7
 801f2c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f2c4:	606f      	str	r7, [r5, #4]
 801f2c6:	dd06      	ble.n	801f2d6 <_svfprintf_r+0x1296>
 801f2c8:	aa22      	add	r2, sp, #136	; 0x88
 801f2ca:	4649      	mov	r1, r9
 801f2cc:	4650      	mov	r0, sl
 801f2ce:	f003 f872 	bl	80223b6 <__ssprint_r>
 801f2d2:	bb78      	cbnz	r0, 801f334 <_svfprintf_r+0x12f4>
 801f2d4:	a925      	add	r1, sp, #148	; 0x94
 801f2d6:	3c10      	subs	r4, #16
 801f2d8:	460d      	mov	r5, r1
 801f2da:	e7de      	b.n	801f29a <_svfprintf_r+0x125a>
 801f2dc:	2201      	movs	r2, #1
 801f2de:	2b07      	cmp	r3, #7
 801f2e0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801f2e4:	f8c4 b000 	str.w	fp, [r4]
 801f2e8:	6062      	str	r2, [r4, #4]
 801f2ea:	ddb7      	ble.n	801f25c <_svfprintf_r+0x121c>
 801f2ec:	e7ae      	b.n	801f24c <_svfprintf_r+0x120c>
 801f2ee:	3508      	adds	r5, #8
 801f2f0:	e7b4      	b.n	801f25c <_svfprintf_r+0x121c>
 801f2f2:	460c      	mov	r4, r1
 801f2f4:	f7ff ba86 	b.w	801e804 <_svfprintf_r+0x7c4>
 801f2f8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801f2fc:	1a9d      	subs	r5, r3, r2
 801f2fe:	2d00      	cmp	r5, #0
 801f300:	f77f aa84 	ble.w	801e80c <_svfprintf_r+0x7cc>
 801f304:	4e3d      	ldr	r6, [pc, #244]	; (801f3fc <_svfprintf_r+0x13bc>)
 801f306:	2710      	movs	r7, #16
 801f308:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f30c:	2d10      	cmp	r5, #16
 801f30e:	f103 0301 	add.w	r3, r3, #1
 801f312:	6026      	str	r6, [r4, #0]
 801f314:	dc18      	bgt.n	801f348 <_svfprintf_r+0x1308>
 801f316:	6065      	str	r5, [r4, #4]
 801f318:	2b07      	cmp	r3, #7
 801f31a:	4415      	add	r5, r2
 801f31c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801f320:	f77f aa74 	ble.w	801e80c <_svfprintf_r+0x7cc>
 801f324:	aa22      	add	r2, sp, #136	; 0x88
 801f326:	4649      	mov	r1, r9
 801f328:	4650      	mov	r0, sl
 801f32a:	f003 f844 	bl	80223b6 <__ssprint_r>
 801f32e:	2800      	cmp	r0, #0
 801f330:	f43f aa6c 	beq.w	801e80c <_svfprintf_r+0x7cc>
 801f334:	9b03      	ldr	r3, [sp, #12]
 801f336:	2b00      	cmp	r3, #0
 801f338:	f43f a88a 	beq.w	801e450 <_svfprintf_r+0x410>
 801f33c:	4619      	mov	r1, r3
 801f33e:	4650      	mov	r0, sl
 801f340:	f002 fb3e 	bl	80219c0 <_free_r>
 801f344:	f7ff b884 	b.w	801e450 <_svfprintf_r+0x410>
 801f348:	3210      	adds	r2, #16
 801f34a:	2b07      	cmp	r3, #7
 801f34c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f350:	6067      	str	r7, [r4, #4]
 801f352:	dc02      	bgt.n	801f35a <_svfprintf_r+0x131a>
 801f354:	3408      	adds	r4, #8
 801f356:	3d10      	subs	r5, #16
 801f358:	e7d6      	b.n	801f308 <_svfprintf_r+0x12c8>
 801f35a:	aa22      	add	r2, sp, #136	; 0x88
 801f35c:	4649      	mov	r1, r9
 801f35e:	4650      	mov	r0, sl
 801f360:	f003 f829 	bl	80223b6 <__ssprint_r>
 801f364:	2800      	cmp	r0, #0
 801f366:	d1e5      	bne.n	801f334 <_svfprintf_r+0x12f4>
 801f368:	ac25      	add	r4, sp, #148	; 0x94
 801f36a:	e7f4      	b.n	801f356 <_svfprintf_r+0x1316>
 801f36c:	9903      	ldr	r1, [sp, #12]
 801f36e:	4650      	mov	r0, sl
 801f370:	f002 fb26 	bl	80219c0 <_free_r>
 801f374:	f7ff ba62 	b.w	801e83c <_svfprintf_r+0x7fc>
 801f378:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	f43f a868 	beq.w	801e450 <_svfprintf_r+0x410>
 801f380:	aa22      	add	r2, sp, #136	; 0x88
 801f382:	4649      	mov	r1, r9
 801f384:	4650      	mov	r0, sl
 801f386:	f003 f816 	bl	80223b6 <__ssprint_r>
 801f38a:	f7ff b861 	b.w	801e450 <_svfprintf_r+0x410>
 801f38e:	ea56 0207 	orrs.w	r2, r6, r7
 801f392:	f8cd 800c 	str.w	r8, [sp, #12]
 801f396:	f43f ab78 	beq.w	801ea8a <_svfprintf_r+0xa4a>
 801f39a:	2b01      	cmp	r3, #1
 801f39c:	f43f ac0d 	beq.w	801ebba <_svfprintf_r+0xb7a>
 801f3a0:	2b02      	cmp	r3, #2
 801f3a2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801f3a6:	f43f ac55 	beq.w	801ec54 <_svfprintf_r+0xc14>
 801f3aa:	08f2      	lsrs	r2, r6, #3
 801f3ac:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801f3b0:	08f8      	lsrs	r0, r7, #3
 801f3b2:	f006 0307 	and.w	r3, r6, #7
 801f3b6:	4607      	mov	r7, r0
 801f3b8:	4616      	mov	r6, r2
 801f3ba:	3330      	adds	r3, #48	; 0x30
 801f3bc:	ea56 0207 	orrs.w	r2, r6, r7
 801f3c0:	4659      	mov	r1, fp
 801f3c2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801f3c6:	d1f0      	bne.n	801f3aa <_svfprintf_r+0x136a>
 801f3c8:	9a03      	ldr	r2, [sp, #12]
 801f3ca:	07d2      	lsls	r2, r2, #31
 801f3cc:	d506      	bpl.n	801f3dc <_svfprintf_r+0x139c>
 801f3ce:	2b30      	cmp	r3, #48	; 0x30
 801f3d0:	d004      	beq.n	801f3dc <_svfprintf_r+0x139c>
 801f3d2:	2330      	movs	r3, #48	; 0x30
 801f3d4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801f3d8:	f1a1 0b02 	sub.w	fp, r1, #2
 801f3dc:	ab4e      	add	r3, sp, #312	; 0x138
 801f3de:	eba3 030b 	sub.w	r3, r3, fp
 801f3e2:	9e04      	ldr	r6, [sp, #16]
 801f3e4:	9304      	str	r3, [sp, #16]
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801f3ec:	9303      	str	r3, [sp, #12]
 801f3ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801f3f2:	461d      	mov	r5, r3
 801f3f4:	f7ff b94c 	b.w	801e690 <_svfprintf_r+0x650>
 801f3f8:	080405d8 	.word	0x080405d8
 801f3fc:	080405c8 	.word	0x080405c8

0801f400 <sysconf>:
 801f400:	2808      	cmp	r0, #8
 801f402:	b508      	push	{r3, lr}
 801f404:	d006      	beq.n	801f414 <sysconf+0x14>
 801f406:	f002 f94b 	bl	80216a0 <__errno>
 801f40a:	2316      	movs	r3, #22
 801f40c:	6003      	str	r3, [r0, #0]
 801f40e:	f04f 30ff 	mov.w	r0, #4294967295
 801f412:	bd08      	pop	{r3, pc}
 801f414:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801f418:	e7fb      	b.n	801f412 <sysconf+0x12>
 801f41a:	0000      	movs	r0, r0
 801f41c:	0000      	movs	r0, r0
	...

0801f420 <_vfprintf_r>:
 801f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f424:	ed2d 8b04 	vpush	{d8-d9}
 801f428:	b0cf      	sub	sp, #316	; 0x13c
 801f42a:	4689      	mov	r9, r1
 801f42c:	9203      	str	r2, [sp, #12]
 801f42e:	461c      	mov	r4, r3
 801f430:	461e      	mov	r6, r3
 801f432:	4682      	mov	sl, r0
 801f434:	f002 fba4 	bl	8021b80 <_localeconv_r>
 801f438:	6803      	ldr	r3, [r0, #0]
 801f43a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f43c:	4618      	mov	r0, r3
 801f43e:	f7e0 ff31 	bl	80002a4 <strlen>
 801f442:	900e      	str	r0, [sp, #56]	; 0x38
 801f444:	f1ba 0f00 	cmp.w	sl, #0
 801f448:	d005      	beq.n	801f456 <_vfprintf_r+0x36>
 801f44a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801f44e:	b913      	cbnz	r3, 801f456 <_vfprintf_r+0x36>
 801f450:	4650      	mov	r0, sl
 801f452:	f002 fa25 	bl	80218a0 <__sinit>
 801f456:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f45a:	07d8      	lsls	r0, r3, #31
 801f45c:	d407      	bmi.n	801f46e <_vfprintf_r+0x4e>
 801f45e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f462:	0599      	lsls	r1, r3, #22
 801f464:	d403      	bmi.n	801f46e <_vfprintf_r+0x4e>
 801f466:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f46a:	f7fd ffa7 	bl	801d3bc <__retarget_lock_acquire_recursive>
 801f46e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801f472:	049a      	lsls	r2, r3, #18
 801f474:	d409      	bmi.n	801f48a <_vfprintf_r+0x6a>
 801f476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801f47a:	f8a9 300c 	strh.w	r3, [r9, #12]
 801f47e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f486:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801f48a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f48e:	071f      	lsls	r7, r3, #28
 801f490:	d502      	bpl.n	801f498 <_vfprintf_r+0x78>
 801f492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f496:	b9d3      	cbnz	r3, 801f4ce <_vfprintf_r+0xae>
 801f498:	4649      	mov	r1, r9
 801f49a:	4650      	mov	r0, sl
 801f49c:	f001 fa36 	bl	802090c <__swsetup_r>
 801f4a0:	b1a8      	cbz	r0, 801f4ce <_vfprintf_r+0xae>
 801f4a2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f4a6:	07dd      	lsls	r5, r3, #31
 801f4a8:	d508      	bpl.n	801f4bc <_vfprintf_r+0x9c>
 801f4aa:	f04f 33ff 	mov.w	r3, #4294967295
 801f4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801f4b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f4b2:	b04f      	add	sp, #316	; 0x13c
 801f4b4:	ecbd 8b04 	vpop	{d8-d9}
 801f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4bc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f4c0:	059c      	lsls	r4, r3, #22
 801f4c2:	d4f2      	bmi.n	801f4aa <_vfprintf_r+0x8a>
 801f4c4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f4c8:	f7fd ff79 	bl	801d3be <__retarget_lock_release_recursive>
 801f4cc:	e7ed      	b.n	801f4aa <_vfprintf_r+0x8a>
 801f4ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f4d2:	f003 021a 	and.w	r2, r3, #26
 801f4d6:	2a0a      	cmp	r2, #10
 801f4d8:	d115      	bne.n	801f506 <_vfprintf_r+0xe6>
 801f4da:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801f4de:	2a00      	cmp	r2, #0
 801f4e0:	db11      	blt.n	801f506 <_vfprintf_r+0xe6>
 801f4e2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801f4e6:	07d0      	lsls	r0, r2, #31
 801f4e8:	d405      	bmi.n	801f4f6 <_vfprintf_r+0xd6>
 801f4ea:	0599      	lsls	r1, r3, #22
 801f4ec:	d403      	bmi.n	801f4f6 <_vfprintf_r+0xd6>
 801f4ee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f4f2:	f7fd ff64 	bl	801d3be <__retarget_lock_release_recursive>
 801f4f6:	9a03      	ldr	r2, [sp, #12]
 801f4f8:	4623      	mov	r3, r4
 801f4fa:	4649      	mov	r1, r9
 801f4fc:	4650      	mov	r0, sl
 801f4fe:	f001 f9c5 	bl	802088c <__sbprintf>
 801f502:	900f      	str	r0, [sp, #60]	; 0x3c
 801f504:	e7d4      	b.n	801f4b0 <_vfprintf_r+0x90>
 801f506:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801f770 <_vfprintf_r+0x350>
 801f50a:	2500      	movs	r5, #0
 801f50c:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801f510:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f514:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801f518:	ac25      	add	r4, sp, #148	; 0x94
 801f51a:	9422      	str	r4, [sp, #136]	; 0x88
 801f51c:	9505      	str	r5, [sp, #20]
 801f51e:	950a      	str	r5, [sp, #40]	; 0x28
 801f520:	9512      	str	r5, [sp, #72]	; 0x48
 801f522:	9514      	str	r5, [sp, #80]	; 0x50
 801f524:	950f      	str	r5, [sp, #60]	; 0x3c
 801f526:	9b03      	ldr	r3, [sp, #12]
 801f528:	461d      	mov	r5, r3
 801f52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f52e:	b10a      	cbz	r2, 801f534 <_vfprintf_r+0x114>
 801f530:	2a25      	cmp	r2, #37	; 0x25
 801f532:	d1f9      	bne.n	801f528 <_vfprintf_r+0x108>
 801f534:	9b03      	ldr	r3, [sp, #12]
 801f536:	1aef      	subs	r7, r5, r3
 801f538:	d00d      	beq.n	801f556 <_vfprintf_r+0x136>
 801f53a:	e9c4 3700 	strd	r3, r7, [r4]
 801f53e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f540:	443b      	add	r3, r7
 801f542:	9324      	str	r3, [sp, #144]	; 0x90
 801f544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f546:	3301      	adds	r3, #1
 801f548:	2b07      	cmp	r3, #7
 801f54a:	9323      	str	r3, [sp, #140]	; 0x8c
 801f54c:	dc79      	bgt.n	801f642 <_vfprintf_r+0x222>
 801f54e:	3408      	adds	r4, #8
 801f550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f552:	443b      	add	r3, r7
 801f554:	930f      	str	r3, [sp, #60]	; 0x3c
 801f556:	782b      	ldrb	r3, [r5, #0]
 801f558:	2b00      	cmp	r3, #0
 801f55a:	f001 8156 	beq.w	802080a <_vfprintf_r+0x13ea>
 801f55e:	2300      	movs	r3, #0
 801f560:	3501      	adds	r5, #1
 801f562:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f566:	f04f 38ff 	mov.w	r8, #4294967295
 801f56a:	9310      	str	r3, [sp, #64]	; 0x40
 801f56c:	469b      	mov	fp, r3
 801f56e:	270a      	movs	r7, #10
 801f570:	212b      	movs	r1, #43	; 0x2b
 801f572:	462a      	mov	r2, r5
 801f574:	f812 3b01 	ldrb.w	r3, [r2], #1
 801f578:	9307      	str	r3, [sp, #28]
 801f57a:	4613      	mov	r3, r2
 801f57c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f57e:	9b07      	ldr	r3, [sp, #28]
 801f580:	3b20      	subs	r3, #32
 801f582:	2b5a      	cmp	r3, #90	; 0x5a
 801f584:	f200 85c0 	bhi.w	8020108 <_vfprintf_r+0xce8>
 801f588:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f58c:	05be007e 	.word	0x05be007e
 801f590:	008605be 	.word	0x008605be
 801f594:	05be05be 	.word	0x05be05be
 801f598:	006505be 	.word	0x006505be
 801f59c:	05be05be 	.word	0x05be05be
 801f5a0:	00930089 	.word	0x00930089
 801f5a4:	009005be 	.word	0x009005be
 801f5a8:	05be0096 	.word	0x05be0096
 801f5ac:	00b200af 	.word	0x00b200af
 801f5b0:	00b200b2 	.word	0x00b200b2
 801f5b4:	00b200b2 	.word	0x00b200b2
 801f5b8:	00b200b2 	.word	0x00b200b2
 801f5bc:	00b200b2 	.word	0x00b200b2
 801f5c0:	05be05be 	.word	0x05be05be
 801f5c4:	05be05be 	.word	0x05be05be
 801f5c8:	05be05be 	.word	0x05be05be
 801f5cc:	012105be 	.word	0x012105be
 801f5d0:	00df05be 	.word	0x00df05be
 801f5d4:	012100f6 	.word	0x012100f6
 801f5d8:	01210121 	.word	0x01210121
 801f5dc:	05be05be 	.word	0x05be05be
 801f5e0:	05be05be 	.word	0x05be05be
 801f5e4:	05be00c2 	.word	0x05be00c2
 801f5e8:	049005be 	.word	0x049005be
 801f5ec:	05be05be 	.word	0x05be05be
 801f5f0:	04d705be 	.word	0x04d705be
 801f5f4:	04fb05be 	.word	0x04fb05be
 801f5f8:	05be05be 	.word	0x05be05be
 801f5fc:	05be051a 	.word	0x05be051a
 801f600:	05be05be 	.word	0x05be05be
 801f604:	05be05be 	.word	0x05be05be
 801f608:	05be05be 	.word	0x05be05be
 801f60c:	012105be 	.word	0x012105be
 801f610:	00df05be 	.word	0x00df05be
 801f614:	012100f8 	.word	0x012100f8
 801f618:	01210121 	.word	0x01210121
 801f61c:	00f800c5 	.word	0x00f800c5
 801f620:	05be00d9 	.word	0x05be00d9
 801f624:	05be00d2 	.word	0x05be00d2
 801f628:	0492046d 	.word	0x0492046d
 801f62c:	00d904c6 	.word	0x00d904c6
 801f630:	04d705be 	.word	0x04d705be
 801f634:	04fd007c 	.word	0x04fd007c
 801f638:	05be05be 	.word	0x05be05be
 801f63c:	05be0537 	.word	0x05be0537
 801f640:	007c      	.short	0x007c
 801f642:	aa22      	add	r2, sp, #136	; 0x88
 801f644:	4649      	mov	r1, r9
 801f646:	4650      	mov	r0, sl
 801f648:	f002 ff30 	bl	80224ac <__sprint_r>
 801f64c:	2800      	cmp	r0, #0
 801f64e:	f040 8130 	bne.w	801f8b2 <_vfprintf_r+0x492>
 801f652:	ac25      	add	r4, sp, #148	; 0x94
 801f654:	e77c      	b.n	801f550 <_vfprintf_r+0x130>
 801f656:	4650      	mov	r0, sl
 801f658:	f002 fa92 	bl	8021b80 <_localeconv_r>
 801f65c:	6843      	ldr	r3, [r0, #4]
 801f65e:	9314      	str	r3, [sp, #80]	; 0x50
 801f660:	4618      	mov	r0, r3
 801f662:	f7e0 fe1f 	bl	80002a4 <strlen>
 801f666:	9012      	str	r0, [sp, #72]	; 0x48
 801f668:	4650      	mov	r0, sl
 801f66a:	f002 fa89 	bl	8021b80 <_localeconv_r>
 801f66e:	6883      	ldr	r3, [r0, #8]
 801f670:	930a      	str	r3, [sp, #40]	; 0x28
 801f672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f674:	212b      	movs	r1, #43	; 0x2b
 801f676:	b12b      	cbz	r3, 801f684 <_vfprintf_r+0x264>
 801f678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f67a:	b11b      	cbz	r3, 801f684 <_vfprintf_r+0x264>
 801f67c:	781b      	ldrb	r3, [r3, #0]
 801f67e:	b10b      	cbz	r3, 801f684 <_vfprintf_r+0x264>
 801f680:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801f684:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f686:	e774      	b.n	801f572 <_vfprintf_r+0x152>
 801f688:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d1f9      	bne.n	801f684 <_vfprintf_r+0x264>
 801f690:	2320      	movs	r3, #32
 801f692:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f696:	e7f5      	b.n	801f684 <_vfprintf_r+0x264>
 801f698:	f04b 0b01 	orr.w	fp, fp, #1
 801f69c:	e7f2      	b.n	801f684 <_vfprintf_r+0x264>
 801f69e:	f856 3b04 	ldr.w	r3, [r6], #4
 801f6a2:	9310      	str	r3, [sp, #64]	; 0x40
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	daed      	bge.n	801f684 <_vfprintf_r+0x264>
 801f6a8:	425b      	negs	r3, r3
 801f6aa:	9310      	str	r3, [sp, #64]	; 0x40
 801f6ac:	f04b 0b04 	orr.w	fp, fp, #4
 801f6b0:	e7e8      	b.n	801f684 <_vfprintf_r+0x264>
 801f6b2:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801f6b6:	e7e5      	b.n	801f684 <_vfprintf_r+0x264>
 801f6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f6be:	9207      	str	r2, [sp, #28]
 801f6c0:	2a2a      	cmp	r2, #42	; 0x2a
 801f6c2:	d10f      	bne.n	801f6e4 <_vfprintf_r+0x2c4>
 801f6c4:	f856 0b04 	ldr.w	r0, [r6], #4
 801f6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f6ca:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801f6ce:	e7d9      	b.n	801f684 <_vfprintf_r+0x264>
 801f6d0:	fb07 2808 	mla	r8, r7, r8, r2
 801f6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f6d8:	9207      	str	r2, [sp, #28]
 801f6da:	9a07      	ldr	r2, [sp, #28]
 801f6dc:	3a30      	subs	r2, #48	; 0x30
 801f6de:	2a09      	cmp	r2, #9
 801f6e0:	d9f6      	bls.n	801f6d0 <_vfprintf_r+0x2b0>
 801f6e2:	e74b      	b.n	801f57c <_vfprintf_r+0x15c>
 801f6e4:	f04f 0800 	mov.w	r8, #0
 801f6e8:	e7f7      	b.n	801f6da <_vfprintf_r+0x2ba>
 801f6ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801f6ee:	e7c9      	b.n	801f684 <_vfprintf_r+0x264>
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6f4:	9210      	str	r2, [sp, #64]	; 0x40
 801f6f6:	9a07      	ldr	r2, [sp, #28]
 801f6f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f6fa:	3a30      	subs	r2, #48	; 0x30
 801f6fc:	fb07 2200 	mla	r2, r7, r0, r2
 801f700:	9210      	str	r2, [sp, #64]	; 0x40
 801f702:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f706:	9207      	str	r2, [sp, #28]
 801f708:	3a30      	subs	r2, #48	; 0x30
 801f70a:	2a09      	cmp	r2, #9
 801f70c:	d9f3      	bls.n	801f6f6 <_vfprintf_r+0x2d6>
 801f70e:	e735      	b.n	801f57c <_vfprintf_r+0x15c>
 801f710:	f04b 0b08 	orr.w	fp, fp, #8
 801f714:	e7b6      	b.n	801f684 <_vfprintf_r+0x264>
 801f716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f718:	781b      	ldrb	r3, [r3, #0]
 801f71a:	2b68      	cmp	r3, #104	; 0x68
 801f71c:	bf01      	itttt	eq
 801f71e:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801f720:	3301      	addeq	r3, #1
 801f722:	930b      	streq	r3, [sp, #44]	; 0x2c
 801f724:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801f728:	bf18      	it	ne
 801f72a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801f72e:	e7a9      	b.n	801f684 <_vfprintf_r+0x264>
 801f730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f732:	781b      	ldrb	r3, [r3, #0]
 801f734:	2b6c      	cmp	r3, #108	; 0x6c
 801f736:	d105      	bne.n	801f744 <_vfprintf_r+0x324>
 801f738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f73a:	3301      	adds	r3, #1
 801f73c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f73e:	f04b 0b20 	orr.w	fp, fp, #32
 801f742:	e79f      	b.n	801f684 <_vfprintf_r+0x264>
 801f744:	f04b 0b10 	orr.w	fp, fp, #16
 801f748:	e79c      	b.n	801f684 <_vfprintf_r+0x264>
 801f74a:	4632      	mov	r2, r6
 801f74c:	2000      	movs	r0, #0
 801f74e:	f852 3b04 	ldr.w	r3, [r2], #4
 801f752:	9206      	str	r2, [sp, #24]
 801f754:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801f758:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801f75c:	ab35      	add	r3, sp, #212	; 0xd4
 801f75e:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801f762:	9004      	str	r0, [sp, #16]
 801f764:	f04f 0801 	mov.w	r8, #1
 801f768:	4606      	mov	r6, r0
 801f76a:	4605      	mov	r5, r0
 801f76c:	9303      	str	r3, [sp, #12]
 801f76e:	e1c3      	b.n	801faf8 <_vfprintf_r+0x6d8>
	...
 801f778:	f04b 0b10 	orr.w	fp, fp, #16
 801f77c:	f01b 0f20 	tst.w	fp, #32
 801f780:	d012      	beq.n	801f7a8 <_vfprintf_r+0x388>
 801f782:	3607      	adds	r6, #7
 801f784:	f026 0307 	bic.w	r3, r6, #7
 801f788:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801f78c:	9306      	str	r3, [sp, #24]
 801f78e:	2e00      	cmp	r6, #0
 801f790:	f177 0300 	sbcs.w	r3, r7, #0
 801f794:	da06      	bge.n	801f7a4 <_vfprintf_r+0x384>
 801f796:	4276      	negs	r6, r6
 801f798:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801f79c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801f7a0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	e392      	b.n	801fece <_vfprintf_r+0xaae>
 801f7a8:	1d33      	adds	r3, r6, #4
 801f7aa:	f01b 0f10 	tst.w	fp, #16
 801f7ae:	9306      	str	r3, [sp, #24]
 801f7b0:	d002      	beq.n	801f7b8 <_vfprintf_r+0x398>
 801f7b2:	6836      	ldr	r6, [r6, #0]
 801f7b4:	17f7      	asrs	r7, r6, #31
 801f7b6:	e7ea      	b.n	801f78e <_vfprintf_r+0x36e>
 801f7b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801f7bc:	6836      	ldr	r6, [r6, #0]
 801f7be:	d001      	beq.n	801f7c4 <_vfprintf_r+0x3a4>
 801f7c0:	b236      	sxth	r6, r6
 801f7c2:	e7f7      	b.n	801f7b4 <_vfprintf_r+0x394>
 801f7c4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801f7c8:	bf18      	it	ne
 801f7ca:	b276      	sxtbne	r6, r6
 801f7cc:	e7f2      	b.n	801f7b4 <_vfprintf_r+0x394>
 801f7ce:	3607      	adds	r6, #7
 801f7d0:	f026 0307 	bic.w	r3, r6, #7
 801f7d4:	ecb3 7b02 	vldmia	r3!, {d7}
 801f7d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f7dc:	9306      	str	r3, [sp, #24]
 801f7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7e0:	ee09 3a10 	vmov	s18, r3
 801f7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f7e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f7ea:	ee09 3a90 	vmov	s19, r3
 801f7ee:	f04f 32ff 	mov.w	r2, #4294967295
 801f7f2:	4b39      	ldr	r3, [pc, #228]	; (801f8d8 <_vfprintf_r+0x4b8>)
 801f7f4:	ec51 0b19 	vmov	r0, r1, d9
 801f7f8:	f7e1 f9b2 	bl	8000b60 <__aeabi_dcmpun>
 801f7fc:	bb20      	cbnz	r0, 801f848 <_vfprintf_r+0x428>
 801f7fe:	4b36      	ldr	r3, [pc, #216]	; (801f8d8 <_vfprintf_r+0x4b8>)
 801f800:	ec51 0b19 	vmov	r0, r1, d9
 801f804:	f04f 32ff 	mov.w	r2, #4294967295
 801f808:	f7e1 f98c 	bl	8000b24 <__aeabi_dcmple>
 801f80c:	b9e0      	cbnz	r0, 801f848 <_vfprintf_r+0x428>
 801f80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f812:	2200      	movs	r2, #0
 801f814:	2300      	movs	r3, #0
 801f816:	f7e1 f97b 	bl	8000b10 <__aeabi_dcmplt>
 801f81a:	b110      	cbz	r0, 801f822 <_vfprintf_r+0x402>
 801f81c:	232d      	movs	r3, #45	; 0x2d
 801f81e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f822:	4a2e      	ldr	r2, [pc, #184]	; (801f8dc <_vfprintf_r+0x4bc>)
 801f824:	482e      	ldr	r0, [pc, #184]	; (801f8e0 <_vfprintf_r+0x4c0>)
 801f826:	9907      	ldr	r1, [sp, #28]
 801f828:	4613      	mov	r3, r2
 801f82a:	2947      	cmp	r1, #71	; 0x47
 801f82c:	bfc8      	it	gt
 801f82e:	4603      	movgt	r3, r0
 801f830:	9303      	str	r3, [sp, #12]
 801f832:	2300      	movs	r3, #0
 801f834:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801f838:	9304      	str	r3, [sp, #16]
 801f83a:	f04f 0803 	mov.w	r8, #3
 801f83e:	461e      	mov	r6, r3
 801f840:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801f844:	461d      	mov	r5, r3
 801f846:	e157      	b.n	801faf8 <_vfprintf_r+0x6d8>
 801f848:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801f84c:	4610      	mov	r0, r2
 801f84e:	4619      	mov	r1, r3
 801f850:	f7e1 f986 	bl	8000b60 <__aeabi_dcmpun>
 801f854:	b140      	cbz	r0, 801f868 <_vfprintf_r+0x448>
 801f856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f858:	4a22      	ldr	r2, [pc, #136]	; (801f8e4 <_vfprintf_r+0x4c4>)
 801f85a:	4823      	ldr	r0, [pc, #140]	; (801f8e8 <_vfprintf_r+0x4c8>)
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	bfbc      	itt	lt
 801f860:	232d      	movlt	r3, #45	; 0x2d
 801f862:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801f866:	e7de      	b.n	801f826 <_vfprintf_r+0x406>
 801f868:	9b07      	ldr	r3, [sp, #28]
 801f86a:	f023 0320 	bic.w	r3, r3, #32
 801f86e:	2b41      	cmp	r3, #65	; 0x41
 801f870:	9308      	str	r3, [sp, #32]
 801f872:	d13b      	bne.n	801f8ec <_vfprintf_r+0x4cc>
 801f874:	2330      	movs	r3, #48	; 0x30
 801f876:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801f87a:	9b07      	ldr	r3, [sp, #28]
 801f87c:	2b61      	cmp	r3, #97	; 0x61
 801f87e:	bf0c      	ite	eq
 801f880:	2378      	moveq	r3, #120	; 0x78
 801f882:	2358      	movne	r3, #88	; 0x58
 801f884:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801f888:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801f88c:	f04b 0b02 	orr.w	fp, fp, #2
 801f890:	f340 8209 	ble.w	801fca6 <_vfprintf_r+0x886>
 801f894:	f108 0101 	add.w	r1, r8, #1
 801f898:	4650      	mov	r0, sl
 801f89a:	f7fd fda1 	bl	801d3e0 <_malloc_r>
 801f89e:	9003      	str	r0, [sp, #12]
 801f8a0:	2800      	cmp	r0, #0
 801f8a2:	f040 8204 	bne.w	801fcae <_vfprintf_r+0x88e>
 801f8a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f8ae:	f8a9 300c 	strh.w	r3, [r9, #12]
 801f8b2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f8b6:	07d9      	lsls	r1, r3, #31
 801f8b8:	d407      	bmi.n	801f8ca <_vfprintf_r+0x4aa>
 801f8ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f8be:	059a      	lsls	r2, r3, #22
 801f8c0:	d403      	bmi.n	801f8ca <_vfprintf_r+0x4aa>
 801f8c2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f8c6:	f7fd fd7a 	bl	801d3be <__retarget_lock_release_recursive>
 801f8ca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f8ce:	065b      	lsls	r3, r3, #25
 801f8d0:	f57f adee 	bpl.w	801f4b0 <_vfprintf_r+0x90>
 801f8d4:	e5e9      	b.n	801f4aa <_vfprintf_r+0x8a>
 801f8d6:	bf00      	nop
 801f8d8:	7fefffff 	.word	0x7fefffff
 801f8dc:	08040594 	.word	0x08040594
 801f8e0:	08040598 	.word	0x08040598
 801f8e4:	0804059c 	.word	0x0804059c
 801f8e8:	080405a0 	.word	0x080405a0
 801f8ec:	f1b8 3fff 	cmp.w	r8, #4294967295
 801f8f0:	f000 81e0 	beq.w	801fcb4 <_vfprintf_r+0x894>
 801f8f4:	9b08      	ldr	r3, [sp, #32]
 801f8f6:	2b47      	cmp	r3, #71	; 0x47
 801f8f8:	f040 81e0 	bne.w	801fcbc <_vfprintf_r+0x89c>
 801f8fc:	f1b8 0f00 	cmp.w	r8, #0
 801f900:	f040 81dc 	bne.w	801fcbc <_vfprintf_r+0x89c>
 801f904:	f8cd 8010 	str.w	r8, [sp, #16]
 801f908:	f04f 0801 	mov.w	r8, #1
 801f90c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801f910:	9311      	str	r3, [sp, #68]	; 0x44
 801f912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f914:	2b00      	cmp	r3, #0
 801f916:	f280 81d3 	bge.w	801fcc0 <_vfprintf_r+0x8a0>
 801f91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f91c:	ee08 3a10 	vmov	s16, r3
 801f920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f922:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f926:	ee08 3a90 	vmov	s17, r3
 801f92a:	232d      	movs	r3, #45	; 0x2d
 801f92c:	9318      	str	r3, [sp, #96]	; 0x60
 801f92e:	9b08      	ldr	r3, [sp, #32]
 801f930:	2b41      	cmp	r3, #65	; 0x41
 801f932:	f040 81e3 	bne.w	801fcfc <_vfprintf_r+0x8dc>
 801f936:	eeb0 0a48 	vmov.f32	s0, s16
 801f93a:	eef0 0a68 	vmov.f32	s1, s17
 801f93e:	a81c      	add	r0, sp, #112	; 0x70
 801f940:	f002 fcbe 	bl	80222c0 <frexp>
 801f944:	2200      	movs	r2, #0
 801f946:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f94a:	ec51 0b10 	vmov	r0, r1, d0
 801f94e:	f7e0 fe6d 	bl	800062c <__aeabi_dmul>
 801f952:	2200      	movs	r2, #0
 801f954:	2300      	movs	r3, #0
 801f956:	4606      	mov	r6, r0
 801f958:	460f      	mov	r7, r1
 801f95a:	f7e1 f8cf 	bl	8000afc <__aeabi_dcmpeq>
 801f95e:	b108      	cbz	r0, 801f964 <_vfprintf_r+0x544>
 801f960:	2301      	movs	r3, #1
 801f962:	931c      	str	r3, [sp, #112]	; 0x70
 801f964:	4bb7      	ldr	r3, [pc, #732]	; (801fc44 <_vfprintf_r+0x824>)
 801f966:	4ab8      	ldr	r2, [pc, #736]	; (801fc48 <_vfprintf_r+0x828>)
 801f968:	9907      	ldr	r1, [sp, #28]
 801f96a:	9d03      	ldr	r5, [sp, #12]
 801f96c:	2961      	cmp	r1, #97	; 0x61
 801f96e:	bf18      	it	ne
 801f970:	461a      	movne	r2, r3
 801f972:	f108 33ff 	add.w	r3, r8, #4294967295
 801f976:	9217      	str	r2, [sp, #92]	; 0x5c
 801f978:	9305      	str	r3, [sp, #20]
 801f97a:	4bb4      	ldr	r3, [pc, #720]	; (801fc4c <_vfprintf_r+0x82c>)
 801f97c:	2200      	movs	r2, #0
 801f97e:	4630      	mov	r0, r6
 801f980:	4639      	mov	r1, r7
 801f982:	f7e0 fe53 	bl	800062c <__aeabi_dmul>
 801f986:	460f      	mov	r7, r1
 801f988:	4606      	mov	r6, r0
 801f98a:	f7e1 f8ff 	bl	8000b8c <__aeabi_d2iz>
 801f98e:	9019      	str	r0, [sp, #100]	; 0x64
 801f990:	f7e0 fde2 	bl	8000558 <__aeabi_i2d>
 801f994:	4602      	mov	r2, r0
 801f996:	460b      	mov	r3, r1
 801f998:	4630      	mov	r0, r6
 801f99a:	4639      	mov	r1, r7
 801f99c:	f7e0 fc8e 	bl	80002bc <__aeabi_dsub>
 801f9a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f9a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f9a4:	5c9b      	ldrb	r3, [r3, r2]
 801f9a6:	f805 3b01 	strb.w	r3, [r5], #1
 801f9aa:	9b05      	ldr	r3, [sp, #20]
 801f9ac:	9309      	str	r3, [sp, #36]	; 0x24
 801f9ae:	1c5a      	adds	r2, r3, #1
 801f9b0:	4606      	mov	r6, r0
 801f9b2:	460f      	mov	r7, r1
 801f9b4:	d007      	beq.n	801f9c6 <_vfprintf_r+0x5a6>
 801f9b6:	3b01      	subs	r3, #1
 801f9b8:	9305      	str	r3, [sp, #20]
 801f9ba:	2200      	movs	r2, #0
 801f9bc:	2300      	movs	r3, #0
 801f9be:	f7e1 f89d 	bl	8000afc <__aeabi_dcmpeq>
 801f9c2:	2800      	cmp	r0, #0
 801f9c4:	d0d9      	beq.n	801f97a <_vfprintf_r+0x55a>
 801f9c6:	4ba2      	ldr	r3, [pc, #648]	; (801fc50 <_vfprintf_r+0x830>)
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	4630      	mov	r0, r6
 801f9cc:	4639      	mov	r1, r7
 801f9ce:	f7e1 f8bd 	bl	8000b4c <__aeabi_dcmpgt>
 801f9d2:	b960      	cbnz	r0, 801f9ee <_vfprintf_r+0x5ce>
 801f9d4:	4b9e      	ldr	r3, [pc, #632]	; (801fc50 <_vfprintf_r+0x830>)
 801f9d6:	2200      	movs	r2, #0
 801f9d8:	4630      	mov	r0, r6
 801f9da:	4639      	mov	r1, r7
 801f9dc:	f7e1 f88e 	bl	8000afc <__aeabi_dcmpeq>
 801f9e0:	2800      	cmp	r0, #0
 801f9e2:	f000 8186 	beq.w	801fcf2 <_vfprintf_r+0x8d2>
 801f9e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f9e8:	07df      	lsls	r7, r3, #31
 801f9ea:	f140 8182 	bpl.w	801fcf2 <_vfprintf_r+0x8d2>
 801f9ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f9f0:	9520      	str	r5, [sp, #128]	; 0x80
 801f9f2:	7bd9      	ldrb	r1, [r3, #15]
 801f9f4:	2030      	movs	r0, #48	; 0x30
 801f9f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f9f8:	1e53      	subs	r3, r2, #1
 801f9fa:	9320      	str	r3, [sp, #128]	; 0x80
 801f9fc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801fa00:	428b      	cmp	r3, r1
 801fa02:	f000 8165 	beq.w	801fcd0 <_vfprintf_r+0x8b0>
 801fa06:	2b39      	cmp	r3, #57	; 0x39
 801fa08:	bf0b      	itete	eq
 801fa0a:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801fa0c:	3301      	addne	r3, #1
 801fa0e:	7a9b      	ldrbeq	r3, [r3, #10]
 801fa10:	b2db      	uxtbne	r3, r3
 801fa12:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fa16:	9b03      	ldr	r3, [sp, #12]
 801fa18:	1aeb      	subs	r3, r5, r3
 801fa1a:	9305      	str	r3, [sp, #20]
 801fa1c:	9b08      	ldr	r3, [sp, #32]
 801fa1e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801fa20:	2b47      	cmp	r3, #71	; 0x47
 801fa22:	f040 81b3 	bne.w	801fd8c <_vfprintf_r+0x96c>
 801fa26:	1cee      	adds	r6, r5, #3
 801fa28:	db02      	blt.n	801fa30 <_vfprintf_r+0x610>
 801fa2a:	4545      	cmp	r5, r8
 801fa2c:	f340 81d5 	ble.w	801fdda <_vfprintf_r+0x9ba>
 801fa30:	9b07      	ldr	r3, [sp, #28]
 801fa32:	3b02      	subs	r3, #2
 801fa34:	9307      	str	r3, [sp, #28]
 801fa36:	9907      	ldr	r1, [sp, #28]
 801fa38:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801fa3c:	f021 0120 	bic.w	r1, r1, #32
 801fa40:	2941      	cmp	r1, #65	; 0x41
 801fa42:	bf08      	it	eq
 801fa44:	320f      	addeq	r2, #15
 801fa46:	f105 33ff 	add.w	r3, r5, #4294967295
 801fa4a:	bf06      	itte	eq
 801fa4c:	b2d2      	uxtbeq	r2, r2
 801fa4e:	2101      	moveq	r1, #1
 801fa50:	2100      	movne	r1, #0
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	931c      	str	r3, [sp, #112]	; 0x70
 801fa56:	bfb8      	it	lt
 801fa58:	f1c5 0301 	rsblt	r3, r5, #1
 801fa5c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801fa60:	bfb4      	ite	lt
 801fa62:	222d      	movlt	r2, #45	; 0x2d
 801fa64:	222b      	movge	r2, #43	; 0x2b
 801fa66:	2b09      	cmp	r3, #9
 801fa68:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801fa6c:	f340 81a4 	ble.w	801fdb8 <_vfprintf_r+0x998>
 801fa70:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801fa74:	260a      	movs	r6, #10
 801fa76:	4611      	mov	r1, r2
 801fa78:	fb93 f5f6 	sdiv	r5, r3, r6
 801fa7c:	fb06 3015 	mls	r0, r6, r5, r3
 801fa80:	3030      	adds	r0, #48	; 0x30
 801fa82:	f801 0c01 	strb.w	r0, [r1, #-1]
 801fa86:	4618      	mov	r0, r3
 801fa88:	2863      	cmp	r0, #99	; 0x63
 801fa8a:	f102 32ff 	add.w	r2, r2, #4294967295
 801fa8e:	462b      	mov	r3, r5
 801fa90:	dcf1      	bgt.n	801fa76 <_vfprintf_r+0x656>
 801fa92:	3330      	adds	r3, #48	; 0x30
 801fa94:	1e88      	subs	r0, r1, #2
 801fa96:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fa9a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801fa9e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801faa2:	4603      	mov	r3, r0
 801faa4:	42ab      	cmp	r3, r5
 801faa6:	f0c0 8182 	bcc.w	801fdae <_vfprintf_r+0x98e>
 801faaa:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801faae:	1a52      	subs	r2, r2, r1
 801fab0:	42a8      	cmp	r0, r5
 801fab2:	bf88      	it	hi
 801fab4:	2200      	movhi	r2, #0
 801fab6:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801faba:	441a      	add	r2, r3
 801fabc:	ab1e      	add	r3, sp, #120	; 0x78
 801fabe:	1ad3      	subs	r3, r2, r3
 801fac0:	9a05      	ldr	r2, [sp, #20]
 801fac2:	9315      	str	r3, [sp, #84]	; 0x54
 801fac4:	2a01      	cmp	r2, #1
 801fac6:	eb03 0802 	add.w	r8, r3, r2
 801faca:	dc02      	bgt.n	801fad2 <_vfprintf_r+0x6b2>
 801facc:	f01b 0f01 	tst.w	fp, #1
 801fad0:	d001      	beq.n	801fad6 <_vfprintf_r+0x6b6>
 801fad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fad4:	4498      	add	r8, r3
 801fad6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801fada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fade:	9311      	str	r3, [sp, #68]	; 0x44
 801fae0:	2300      	movs	r3, #0
 801fae2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801fae6:	461d      	mov	r5, r3
 801fae8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801faea:	b113      	cbz	r3, 801faf2 <_vfprintf_r+0x6d2>
 801faec:	232d      	movs	r3, #45	; 0x2d
 801faee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801faf2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801faf6:	2600      	movs	r6, #0
 801faf8:	4546      	cmp	r6, r8
 801fafa:	4633      	mov	r3, r6
 801fafc:	bfb8      	it	lt
 801fafe:	4643      	movlt	r3, r8
 801fb00:	9311      	str	r3, [sp, #68]	; 0x44
 801fb02:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801fb06:	b113      	cbz	r3, 801fb0e <_vfprintf_r+0x6ee>
 801fb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb0a:	3301      	adds	r3, #1
 801fb0c:	9311      	str	r3, [sp, #68]	; 0x44
 801fb0e:	f01b 0302 	ands.w	r3, fp, #2
 801fb12:	9317      	str	r3, [sp, #92]	; 0x5c
 801fb14:	bf1e      	ittt	ne
 801fb16:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801fb18:	3302      	addne	r3, #2
 801fb1a:	9311      	strne	r3, [sp, #68]	; 0x44
 801fb1c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801fb20:	9318      	str	r3, [sp, #96]	; 0x60
 801fb22:	d11f      	bne.n	801fb64 <_vfprintf_r+0x744>
 801fb24:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801fb28:	1a9f      	subs	r7, r3, r2
 801fb2a:	2f00      	cmp	r7, #0
 801fb2c:	dd1a      	ble.n	801fb64 <_vfprintf_r+0x744>
 801fb2e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fb32:	4848      	ldr	r0, [pc, #288]	; (801fc54 <_vfprintf_r+0x834>)
 801fb34:	6020      	str	r0, [r4, #0]
 801fb36:	2f10      	cmp	r7, #16
 801fb38:	f103 0301 	add.w	r3, r3, #1
 801fb3c:	f104 0108 	add.w	r1, r4, #8
 801fb40:	f300 82f0 	bgt.w	8020124 <_vfprintf_r+0xd04>
 801fb44:	6067      	str	r7, [r4, #4]
 801fb46:	2b07      	cmp	r3, #7
 801fb48:	4417      	add	r7, r2
 801fb4a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801fb4e:	f340 82fc 	ble.w	802014a <_vfprintf_r+0xd2a>
 801fb52:	aa22      	add	r2, sp, #136	; 0x88
 801fb54:	4649      	mov	r1, r9
 801fb56:	4650      	mov	r0, sl
 801fb58:	f002 fca8 	bl	80224ac <__sprint_r>
 801fb5c:	2800      	cmp	r0, #0
 801fb5e:	f040 8632 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 801fb62:	ac25      	add	r4, sp, #148	; 0x94
 801fb64:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801fb68:	b173      	cbz	r3, 801fb88 <_vfprintf_r+0x768>
 801fb6a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801fb6e:	6023      	str	r3, [r4, #0]
 801fb70:	2301      	movs	r3, #1
 801fb72:	6063      	str	r3, [r4, #4]
 801fb74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb76:	3301      	adds	r3, #1
 801fb78:	9324      	str	r3, [sp, #144]	; 0x90
 801fb7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb7c:	3301      	adds	r3, #1
 801fb7e:	2b07      	cmp	r3, #7
 801fb80:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb82:	f300 82e4 	bgt.w	802014e <_vfprintf_r+0xd2e>
 801fb86:	3408      	adds	r4, #8
 801fb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb8a:	b16b      	cbz	r3, 801fba8 <_vfprintf_r+0x788>
 801fb8c:	ab1b      	add	r3, sp, #108	; 0x6c
 801fb8e:	6023      	str	r3, [r4, #0]
 801fb90:	2302      	movs	r3, #2
 801fb92:	6063      	str	r3, [r4, #4]
 801fb94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb96:	3302      	adds	r3, #2
 801fb98:	9324      	str	r3, [sp, #144]	; 0x90
 801fb9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb9c:	3301      	adds	r3, #1
 801fb9e:	2b07      	cmp	r3, #7
 801fba0:	9323      	str	r3, [sp, #140]	; 0x8c
 801fba2:	f300 82de 	bgt.w	8020162 <_vfprintf_r+0xd42>
 801fba6:	3408      	adds	r4, #8
 801fba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fbaa:	2b80      	cmp	r3, #128	; 0x80
 801fbac:	d11f      	bne.n	801fbee <_vfprintf_r+0x7ce>
 801fbae:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801fbb2:	1a9f      	subs	r7, r3, r2
 801fbb4:	2f00      	cmp	r7, #0
 801fbb6:	dd1a      	ble.n	801fbee <_vfprintf_r+0x7ce>
 801fbb8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fbbc:	4826      	ldr	r0, [pc, #152]	; (801fc58 <_vfprintf_r+0x838>)
 801fbbe:	6020      	str	r0, [r4, #0]
 801fbc0:	2f10      	cmp	r7, #16
 801fbc2:	f103 0301 	add.w	r3, r3, #1
 801fbc6:	f104 0108 	add.w	r1, r4, #8
 801fbca:	f300 82d4 	bgt.w	8020176 <_vfprintf_r+0xd56>
 801fbce:	6067      	str	r7, [r4, #4]
 801fbd0:	2b07      	cmp	r3, #7
 801fbd2:	4417      	add	r7, r2
 801fbd4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801fbd8:	f340 82e0 	ble.w	802019c <_vfprintf_r+0xd7c>
 801fbdc:	aa22      	add	r2, sp, #136	; 0x88
 801fbde:	4649      	mov	r1, r9
 801fbe0:	4650      	mov	r0, sl
 801fbe2:	f002 fc63 	bl	80224ac <__sprint_r>
 801fbe6:	2800      	cmp	r0, #0
 801fbe8:	f040 85ed 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 801fbec:	ac25      	add	r4, sp, #148	; 0x94
 801fbee:	eba6 0608 	sub.w	r6, r6, r8
 801fbf2:	2e00      	cmp	r6, #0
 801fbf4:	dd1a      	ble.n	801fc2c <_vfprintf_r+0x80c>
 801fbf6:	4f18      	ldr	r7, [pc, #96]	; (801fc58 <_vfprintf_r+0x838>)
 801fbf8:	6027      	str	r7, [r4, #0]
 801fbfa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fbfe:	2e10      	cmp	r6, #16
 801fc00:	f103 0301 	add.w	r3, r3, #1
 801fc04:	f104 0108 	add.w	r1, r4, #8
 801fc08:	f300 82ca 	bgt.w	80201a0 <_vfprintf_r+0xd80>
 801fc0c:	6066      	str	r6, [r4, #4]
 801fc0e:	2b07      	cmp	r3, #7
 801fc10:	4416      	add	r6, r2
 801fc12:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801fc16:	f340 82d6 	ble.w	80201c6 <_vfprintf_r+0xda6>
 801fc1a:	aa22      	add	r2, sp, #136	; 0x88
 801fc1c:	4649      	mov	r1, r9
 801fc1e:	4650      	mov	r0, sl
 801fc20:	f002 fc44 	bl	80224ac <__sprint_r>
 801fc24:	2800      	cmp	r0, #0
 801fc26:	f040 85ce 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 801fc2a:	ac25      	add	r4, sp, #148	; 0x94
 801fc2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801fc30:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801fc32:	f040 82cf 	bne.w	80201d4 <_vfprintf_r+0xdb4>
 801fc36:	9b03      	ldr	r3, [sp, #12]
 801fc38:	e9c4 3800 	strd	r3, r8, [r4]
 801fc3c:	4446      	add	r6, r8
 801fc3e:	9624      	str	r6, [sp, #144]	; 0x90
 801fc40:	e00c      	b.n	801fc5c <_vfprintf_r+0x83c>
 801fc42:	bf00      	nop
 801fc44:	080405b5 	.word	0x080405b5
 801fc48:	080405a4 	.word	0x080405a4
 801fc4c:	40300000 	.word	0x40300000
 801fc50:	3fe00000 	.word	0x3fe00000
 801fc54:	080405e8 	.word	0x080405e8
 801fc58:	080405f8 	.word	0x080405f8
 801fc5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc5e:	3301      	adds	r3, #1
 801fc60:	2b07      	cmp	r3, #7
 801fc62:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc64:	f300 82fb 	bgt.w	802025e <_vfprintf_r+0xe3e>
 801fc68:	3408      	adds	r4, #8
 801fc6a:	f01b 0f04 	tst.w	fp, #4
 801fc6e:	f040 858c 	bne.w	802078a <_vfprintf_r+0x136a>
 801fc72:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801fc76:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fc78:	428a      	cmp	r2, r1
 801fc7a:	bfac      	ite	ge
 801fc7c:	189b      	addge	r3, r3, r2
 801fc7e:	185b      	addlt	r3, r3, r1
 801fc80:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc84:	b13b      	cbz	r3, 801fc96 <_vfprintf_r+0x876>
 801fc86:	aa22      	add	r2, sp, #136	; 0x88
 801fc88:	4649      	mov	r1, r9
 801fc8a:	4650      	mov	r0, sl
 801fc8c:	f002 fc0e 	bl	80224ac <__sprint_r>
 801fc90:	2800      	cmp	r0, #0
 801fc92:	f040 8598 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 801fc96:	2300      	movs	r3, #0
 801fc98:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc9a:	9b04      	ldr	r3, [sp, #16]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	f040 85ae 	bne.w	80207fe <_vfprintf_r+0x13de>
 801fca2:	ac25      	add	r4, sp, #148	; 0x94
 801fca4:	e0eb      	b.n	801fe7e <_vfprintf_r+0xa5e>
 801fca6:	ab35      	add	r3, sp, #212	; 0xd4
 801fca8:	9004      	str	r0, [sp, #16]
 801fcaa:	9303      	str	r3, [sp, #12]
 801fcac:	e62e      	b.n	801f90c <_vfprintf_r+0x4ec>
 801fcae:	9b03      	ldr	r3, [sp, #12]
 801fcb0:	9304      	str	r3, [sp, #16]
 801fcb2:	e62b      	b.n	801f90c <_vfprintf_r+0x4ec>
 801fcb4:	9004      	str	r0, [sp, #16]
 801fcb6:	f04f 0806 	mov.w	r8, #6
 801fcba:	e627      	b.n	801f90c <_vfprintf_r+0x4ec>
 801fcbc:	9004      	str	r0, [sp, #16]
 801fcbe:	e625      	b.n	801f90c <_vfprintf_r+0x4ec>
 801fcc0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	eeb0 8a47 	vmov.f32	s16, s14
 801fcca:	eef0 8a67 	vmov.f32	s17, s15
 801fcce:	e62d      	b.n	801f92c <_vfprintf_r+0x50c>
 801fcd0:	f802 0c01 	strb.w	r0, [r2, #-1]
 801fcd4:	e68f      	b.n	801f9f6 <_vfprintf_r+0x5d6>
 801fcd6:	f803 0b01 	strb.w	r0, [r3], #1
 801fcda:	1aca      	subs	r2, r1, r3
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	dafa      	bge.n	801fcd6 <_vfprintf_r+0x8b6>
 801fce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fce4:	3201      	adds	r2, #1
 801fce6:	f103 0301 	add.w	r3, r3, #1
 801fcea:	bfb8      	it	lt
 801fcec:	2300      	movlt	r3, #0
 801fcee:	441d      	add	r5, r3
 801fcf0:	e691      	b.n	801fa16 <_vfprintf_r+0x5f6>
 801fcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fcf4:	462b      	mov	r3, r5
 801fcf6:	18a9      	adds	r1, r5, r2
 801fcf8:	2030      	movs	r0, #48	; 0x30
 801fcfa:	e7ee      	b.n	801fcda <_vfprintf_r+0x8ba>
 801fcfc:	9b08      	ldr	r3, [sp, #32]
 801fcfe:	2b46      	cmp	r3, #70	; 0x46
 801fd00:	d005      	beq.n	801fd0e <_vfprintf_r+0x8ee>
 801fd02:	2b45      	cmp	r3, #69	; 0x45
 801fd04:	d11b      	bne.n	801fd3e <_vfprintf_r+0x91e>
 801fd06:	f108 0501 	add.w	r5, r8, #1
 801fd0a:	2102      	movs	r1, #2
 801fd0c:	e001      	b.n	801fd12 <_vfprintf_r+0x8f2>
 801fd0e:	4645      	mov	r5, r8
 801fd10:	2103      	movs	r1, #3
 801fd12:	ab20      	add	r3, sp, #128	; 0x80
 801fd14:	9301      	str	r3, [sp, #4]
 801fd16:	ab1d      	add	r3, sp, #116	; 0x74
 801fd18:	9300      	str	r3, [sp, #0]
 801fd1a:	462a      	mov	r2, r5
 801fd1c:	ab1c      	add	r3, sp, #112	; 0x70
 801fd1e:	4650      	mov	r0, sl
 801fd20:	eeb0 0a48 	vmov.f32	s0, s16
 801fd24:	eef0 0a68 	vmov.f32	s1, s17
 801fd28:	f000 fee6 	bl	8020af8 <_dtoa_r>
 801fd2c:	9b08      	ldr	r3, [sp, #32]
 801fd2e:	9003      	str	r0, [sp, #12]
 801fd30:	2b47      	cmp	r3, #71	; 0x47
 801fd32:	d106      	bne.n	801fd42 <_vfprintf_r+0x922>
 801fd34:	f01b 0f01 	tst.w	fp, #1
 801fd38:	d103      	bne.n	801fd42 <_vfprintf_r+0x922>
 801fd3a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801fd3c:	e66b      	b.n	801fa16 <_vfprintf_r+0x5f6>
 801fd3e:	4645      	mov	r5, r8
 801fd40:	e7e3      	b.n	801fd0a <_vfprintf_r+0x8ea>
 801fd42:	9b03      	ldr	r3, [sp, #12]
 801fd44:	195e      	adds	r6, r3, r5
 801fd46:	9b08      	ldr	r3, [sp, #32]
 801fd48:	2b46      	cmp	r3, #70	; 0x46
 801fd4a:	d10f      	bne.n	801fd6c <_vfprintf_r+0x94c>
 801fd4c:	9b03      	ldr	r3, [sp, #12]
 801fd4e:	781b      	ldrb	r3, [r3, #0]
 801fd50:	2b30      	cmp	r3, #48	; 0x30
 801fd52:	d109      	bne.n	801fd68 <_vfprintf_r+0x948>
 801fd54:	ec51 0b18 	vmov	r0, r1, d8
 801fd58:	2200      	movs	r2, #0
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	f7e0 fece 	bl	8000afc <__aeabi_dcmpeq>
 801fd60:	b910      	cbnz	r0, 801fd68 <_vfprintf_r+0x948>
 801fd62:	f1c5 0501 	rsb	r5, r5, #1
 801fd66:	951c      	str	r5, [sp, #112]	; 0x70
 801fd68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd6a:	441e      	add	r6, r3
 801fd6c:	ec51 0b18 	vmov	r0, r1, d8
 801fd70:	2200      	movs	r2, #0
 801fd72:	2300      	movs	r3, #0
 801fd74:	f7e0 fec2 	bl	8000afc <__aeabi_dcmpeq>
 801fd78:	b100      	cbz	r0, 801fd7c <_vfprintf_r+0x95c>
 801fd7a:	9620      	str	r6, [sp, #128]	; 0x80
 801fd7c:	2230      	movs	r2, #48	; 0x30
 801fd7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd80:	429e      	cmp	r6, r3
 801fd82:	d9da      	bls.n	801fd3a <_vfprintf_r+0x91a>
 801fd84:	1c59      	adds	r1, r3, #1
 801fd86:	9120      	str	r1, [sp, #128]	; 0x80
 801fd88:	701a      	strb	r2, [r3, #0]
 801fd8a:	e7f8      	b.n	801fd7e <_vfprintf_r+0x95e>
 801fd8c:	9b08      	ldr	r3, [sp, #32]
 801fd8e:	2b46      	cmp	r3, #70	; 0x46
 801fd90:	f47f ae51 	bne.w	801fa36 <_vfprintf_r+0x616>
 801fd94:	f00b 0301 	and.w	r3, fp, #1
 801fd98:	2d00      	cmp	r5, #0
 801fd9a:	ea43 0308 	orr.w	r3, r3, r8
 801fd9e:	dd18      	ble.n	801fdd2 <_vfprintf_r+0x9b2>
 801fda0:	b383      	cbz	r3, 801fe04 <_vfprintf_r+0x9e4>
 801fda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fda4:	18eb      	adds	r3, r5, r3
 801fda6:	4498      	add	r8, r3
 801fda8:	2366      	movs	r3, #102	; 0x66
 801fdaa:	9307      	str	r3, [sp, #28]
 801fdac:	e030      	b.n	801fe10 <_vfprintf_r+0x9f0>
 801fdae:	f813 6b01 	ldrb.w	r6, [r3], #1
 801fdb2:	f802 6b01 	strb.w	r6, [r2], #1
 801fdb6:	e675      	b.n	801faa4 <_vfprintf_r+0x684>
 801fdb8:	b941      	cbnz	r1, 801fdcc <_vfprintf_r+0x9ac>
 801fdba:	2230      	movs	r2, #48	; 0x30
 801fdbc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801fdc0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801fdc4:	3330      	adds	r3, #48	; 0x30
 801fdc6:	f802 3b01 	strb.w	r3, [r2], #1
 801fdca:	e677      	b.n	801fabc <_vfprintf_r+0x69c>
 801fdcc:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801fdd0:	e7f8      	b.n	801fdc4 <_vfprintf_r+0x9a4>
 801fdd2:	b1cb      	cbz	r3, 801fe08 <_vfprintf_r+0x9e8>
 801fdd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdd6:	3301      	adds	r3, #1
 801fdd8:	e7e5      	b.n	801fda6 <_vfprintf_r+0x986>
 801fdda:	9b05      	ldr	r3, [sp, #20]
 801fddc:	429d      	cmp	r5, r3
 801fdde:	db07      	blt.n	801fdf0 <_vfprintf_r+0x9d0>
 801fde0:	f01b 0f01 	tst.w	fp, #1
 801fde4:	d029      	beq.n	801fe3a <_vfprintf_r+0xa1a>
 801fde6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fde8:	eb05 0803 	add.w	r8, r5, r3
 801fdec:	2367      	movs	r3, #103	; 0x67
 801fdee:	e7dc      	b.n	801fdaa <_vfprintf_r+0x98a>
 801fdf0:	9b05      	ldr	r3, [sp, #20]
 801fdf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdf4:	2d00      	cmp	r5, #0
 801fdf6:	eb03 0802 	add.w	r8, r3, r2
 801fdfa:	dcf7      	bgt.n	801fdec <_vfprintf_r+0x9cc>
 801fdfc:	f1c5 0301 	rsb	r3, r5, #1
 801fe00:	4498      	add	r8, r3
 801fe02:	e7f3      	b.n	801fdec <_vfprintf_r+0x9cc>
 801fe04:	46a8      	mov	r8, r5
 801fe06:	e7cf      	b.n	801fda8 <_vfprintf_r+0x988>
 801fe08:	2366      	movs	r3, #102	; 0x66
 801fe0a:	9307      	str	r3, [sp, #28]
 801fe0c:	f04f 0801 	mov.w	r8, #1
 801fe10:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801fe14:	9309      	str	r3, [sp, #36]	; 0x24
 801fe16:	d023      	beq.n	801fe60 <_vfprintf_r+0xa40>
 801fe18:	2300      	movs	r3, #0
 801fe1a:	2d00      	cmp	r5, #0
 801fe1c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801fe20:	f77f ae62 	ble.w	801fae8 <_vfprintf_r+0x6c8>
 801fe24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe26:	781b      	ldrb	r3, [r3, #0]
 801fe28:	2bff      	cmp	r3, #255	; 0xff
 801fe2a:	d108      	bne.n	801fe3e <_vfprintf_r+0xa1e>
 801fe2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fe30:	4413      	add	r3, r2
 801fe32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fe34:	fb02 8803 	mla	r8, r2, r3, r8
 801fe38:	e656      	b.n	801fae8 <_vfprintf_r+0x6c8>
 801fe3a:	46a8      	mov	r8, r5
 801fe3c:	e7d6      	b.n	801fdec <_vfprintf_r+0x9cc>
 801fe3e:	42ab      	cmp	r3, r5
 801fe40:	daf4      	bge.n	801fe2c <_vfprintf_r+0xa0c>
 801fe42:	1aed      	subs	r5, r5, r3
 801fe44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe46:	785b      	ldrb	r3, [r3, #1]
 801fe48:	b133      	cbz	r3, 801fe58 <_vfprintf_r+0xa38>
 801fe4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe4c:	3301      	adds	r3, #1
 801fe4e:	9309      	str	r3, [sp, #36]	; 0x24
 801fe50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe52:	3301      	adds	r3, #1
 801fe54:	930a      	str	r3, [sp, #40]	; 0x28
 801fe56:	e7e5      	b.n	801fe24 <_vfprintf_r+0xa04>
 801fe58:	9b08      	ldr	r3, [sp, #32]
 801fe5a:	3301      	adds	r3, #1
 801fe5c:	9308      	str	r3, [sp, #32]
 801fe5e:	e7e1      	b.n	801fe24 <_vfprintf_r+0xa04>
 801fe60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe62:	9308      	str	r3, [sp, #32]
 801fe64:	e640      	b.n	801fae8 <_vfprintf_r+0x6c8>
 801fe66:	4632      	mov	r2, r6
 801fe68:	f01b 0f20 	tst.w	fp, #32
 801fe6c:	f852 3b04 	ldr.w	r3, [r2], #4
 801fe70:	9206      	str	r2, [sp, #24]
 801fe72:	d009      	beq.n	801fe88 <_vfprintf_r+0xa68>
 801fe74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe76:	4610      	mov	r0, r2
 801fe78:	17d1      	asrs	r1, r2, #31
 801fe7a:	e9c3 0100 	strd	r0, r1, [r3]
 801fe7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe80:	9e06      	ldr	r6, [sp, #24]
 801fe82:	9303      	str	r3, [sp, #12]
 801fe84:	f7ff bb4f 	b.w	801f526 <_vfprintf_r+0x106>
 801fe88:	f01b 0f10 	tst.w	fp, #16
 801fe8c:	d002      	beq.n	801fe94 <_vfprintf_r+0xa74>
 801fe8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe90:	601a      	str	r2, [r3, #0]
 801fe92:	e7f4      	b.n	801fe7e <_vfprintf_r+0xa5e>
 801fe94:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801fe98:	d002      	beq.n	801fea0 <_vfprintf_r+0xa80>
 801fe9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe9c:	801a      	strh	r2, [r3, #0]
 801fe9e:	e7ee      	b.n	801fe7e <_vfprintf_r+0xa5e>
 801fea0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801fea4:	d0f3      	beq.n	801fe8e <_vfprintf_r+0xa6e>
 801fea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fea8:	701a      	strb	r2, [r3, #0]
 801feaa:	e7e8      	b.n	801fe7e <_vfprintf_r+0xa5e>
 801feac:	f04b 0b10 	orr.w	fp, fp, #16
 801feb0:	f01b 0f20 	tst.w	fp, #32
 801feb4:	d01e      	beq.n	801fef4 <_vfprintf_r+0xad4>
 801feb6:	3607      	adds	r6, #7
 801feb8:	f026 0307 	bic.w	r3, r6, #7
 801febc:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801fec0:	9306      	str	r3, [sp, #24]
 801fec2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801fec6:	2300      	movs	r3, #0
 801fec8:	2200      	movs	r2, #0
 801feca:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801fece:	f1b8 3fff 	cmp.w	r8, #4294967295
 801fed2:	f000 84a9 	beq.w	8020828 <_vfprintf_r+0x1408>
 801fed6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801feda:	9204      	str	r2, [sp, #16]
 801fedc:	ea56 0207 	orrs.w	r2, r6, r7
 801fee0:	f040 84a8 	bne.w	8020834 <_vfprintf_r+0x1414>
 801fee4:	f1b8 0f00 	cmp.w	r8, #0
 801fee8:	f000 8104 	beq.w	80200f4 <_vfprintf_r+0xcd4>
 801feec:	2b01      	cmp	r3, #1
 801feee:	f040 84a4 	bne.w	802083a <_vfprintf_r+0x141a>
 801fef2:	e09a      	b.n	802002a <_vfprintf_r+0xc0a>
 801fef4:	1d33      	adds	r3, r6, #4
 801fef6:	f01b 0f10 	tst.w	fp, #16
 801fefa:	9306      	str	r3, [sp, #24]
 801fefc:	d001      	beq.n	801ff02 <_vfprintf_r+0xae2>
 801fefe:	6836      	ldr	r6, [r6, #0]
 801ff00:	e003      	b.n	801ff0a <_vfprintf_r+0xaea>
 801ff02:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801ff06:	d002      	beq.n	801ff0e <_vfprintf_r+0xaee>
 801ff08:	8836      	ldrh	r6, [r6, #0]
 801ff0a:	2700      	movs	r7, #0
 801ff0c:	e7d9      	b.n	801fec2 <_vfprintf_r+0xaa2>
 801ff0e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801ff12:	d0f4      	beq.n	801fefe <_vfprintf_r+0xade>
 801ff14:	7836      	ldrb	r6, [r6, #0]
 801ff16:	e7f8      	b.n	801ff0a <_vfprintf_r+0xaea>
 801ff18:	4633      	mov	r3, r6
 801ff1a:	2278      	movs	r2, #120	; 0x78
 801ff1c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ff20:	9306      	str	r3, [sp, #24]
 801ff22:	f647 0330 	movw	r3, #30768	; 0x7830
 801ff26:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801ff2a:	4ba8      	ldr	r3, [pc, #672]	; (80201cc <_vfprintf_r+0xdac>)
 801ff2c:	9316      	str	r3, [sp, #88]	; 0x58
 801ff2e:	2700      	movs	r7, #0
 801ff30:	f04b 0b02 	orr.w	fp, fp, #2
 801ff34:	2302      	movs	r3, #2
 801ff36:	9207      	str	r2, [sp, #28]
 801ff38:	e7c6      	b.n	801fec8 <_vfprintf_r+0xaa8>
 801ff3a:	4632      	mov	r2, r6
 801ff3c:	2500      	movs	r5, #0
 801ff3e:	f852 3b04 	ldr.w	r3, [r2], #4
 801ff42:	9303      	str	r3, [sp, #12]
 801ff44:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ff48:	9206      	str	r2, [sp, #24]
 801ff4a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801ff4e:	d010      	beq.n	801ff72 <_vfprintf_r+0xb52>
 801ff50:	9803      	ldr	r0, [sp, #12]
 801ff52:	4642      	mov	r2, r8
 801ff54:	4629      	mov	r1, r5
 801ff56:	f7e0 f94b 	bl	80001f0 <memchr>
 801ff5a:	9004      	str	r0, [sp, #16]
 801ff5c:	2800      	cmp	r0, #0
 801ff5e:	f000 80df 	beq.w	8020120 <_vfprintf_r+0xd00>
 801ff62:	9a03      	ldr	r2, [sp, #12]
 801ff64:	9504      	str	r5, [sp, #16]
 801ff66:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801ff6a:	eba0 0802 	sub.w	r8, r0, r2
 801ff6e:	462e      	mov	r6, r5
 801ff70:	e5c2      	b.n	801faf8 <_vfprintf_r+0x6d8>
 801ff72:	9803      	ldr	r0, [sp, #12]
 801ff74:	f7e0 f996 	bl	80002a4 <strlen>
 801ff78:	462e      	mov	r6, r5
 801ff7a:	4680      	mov	r8, r0
 801ff7c:	9504      	str	r5, [sp, #16]
 801ff7e:	4633      	mov	r3, r6
 801ff80:	e45e      	b.n	801f840 <_vfprintf_r+0x420>
 801ff82:	f04b 0b10 	orr.w	fp, fp, #16
 801ff86:	f01b 0f20 	tst.w	fp, #32
 801ff8a:	d007      	beq.n	801ff9c <_vfprintf_r+0xb7c>
 801ff8c:	3607      	adds	r6, #7
 801ff8e:	f026 0307 	bic.w	r3, r6, #7
 801ff92:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ff96:	9306      	str	r3, [sp, #24]
 801ff98:	2301      	movs	r3, #1
 801ff9a:	e795      	b.n	801fec8 <_vfprintf_r+0xaa8>
 801ff9c:	1d33      	adds	r3, r6, #4
 801ff9e:	f01b 0f10 	tst.w	fp, #16
 801ffa2:	9306      	str	r3, [sp, #24]
 801ffa4:	d001      	beq.n	801ffaa <_vfprintf_r+0xb8a>
 801ffa6:	6836      	ldr	r6, [r6, #0]
 801ffa8:	e003      	b.n	801ffb2 <_vfprintf_r+0xb92>
 801ffaa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801ffae:	d002      	beq.n	801ffb6 <_vfprintf_r+0xb96>
 801ffb0:	8836      	ldrh	r6, [r6, #0]
 801ffb2:	2700      	movs	r7, #0
 801ffb4:	e7f0      	b.n	801ff98 <_vfprintf_r+0xb78>
 801ffb6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801ffba:	d0f4      	beq.n	801ffa6 <_vfprintf_r+0xb86>
 801ffbc:	7836      	ldrb	r6, [r6, #0]
 801ffbe:	e7f8      	b.n	801ffb2 <_vfprintf_r+0xb92>
 801ffc0:	4b83      	ldr	r3, [pc, #524]	; (80201d0 <_vfprintf_r+0xdb0>)
 801ffc2:	9316      	str	r3, [sp, #88]	; 0x58
 801ffc4:	f01b 0f20 	tst.w	fp, #32
 801ffc8:	d019      	beq.n	801fffe <_vfprintf_r+0xbde>
 801ffca:	3607      	adds	r6, #7
 801ffcc:	f026 0307 	bic.w	r3, r6, #7
 801ffd0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ffd4:	9306      	str	r3, [sp, #24]
 801ffd6:	f01b 0f01 	tst.w	fp, #1
 801ffda:	d00a      	beq.n	801fff2 <_vfprintf_r+0xbd2>
 801ffdc:	ea56 0307 	orrs.w	r3, r6, r7
 801ffe0:	d007      	beq.n	801fff2 <_vfprintf_r+0xbd2>
 801ffe2:	2330      	movs	r3, #48	; 0x30
 801ffe4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801ffe8:	9b07      	ldr	r3, [sp, #28]
 801ffea:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801ffee:	f04b 0b02 	orr.w	fp, fp, #2
 801fff2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801fff6:	2302      	movs	r3, #2
 801fff8:	e766      	b.n	801fec8 <_vfprintf_r+0xaa8>
 801fffa:	4b74      	ldr	r3, [pc, #464]	; (80201cc <_vfprintf_r+0xdac>)
 801fffc:	e7e1      	b.n	801ffc2 <_vfprintf_r+0xba2>
 801fffe:	1d33      	adds	r3, r6, #4
 8020000:	f01b 0f10 	tst.w	fp, #16
 8020004:	9306      	str	r3, [sp, #24]
 8020006:	d001      	beq.n	802000c <_vfprintf_r+0xbec>
 8020008:	6836      	ldr	r6, [r6, #0]
 802000a:	e003      	b.n	8020014 <_vfprintf_r+0xbf4>
 802000c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8020010:	d002      	beq.n	8020018 <_vfprintf_r+0xbf8>
 8020012:	8836      	ldrh	r6, [r6, #0]
 8020014:	2700      	movs	r7, #0
 8020016:	e7de      	b.n	801ffd6 <_vfprintf_r+0xbb6>
 8020018:	f41b 7f00 	tst.w	fp, #512	; 0x200
 802001c:	d0f4      	beq.n	8020008 <_vfprintf_r+0xbe8>
 802001e:	7836      	ldrb	r6, [r6, #0]
 8020020:	e7f8      	b.n	8020014 <_vfprintf_r+0xbf4>
 8020022:	2f00      	cmp	r7, #0
 8020024:	bf08      	it	eq
 8020026:	2e0a      	cmpeq	r6, #10
 8020028:	d206      	bcs.n	8020038 <_vfprintf_r+0xc18>
 802002a:	3630      	adds	r6, #48	; 0x30
 802002c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8020030:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8020034:	f000 bc23 	b.w	802087e <_vfprintf_r+0x145e>
 8020038:	2300      	movs	r3, #0
 802003a:	9305      	str	r3, [sp, #20]
 802003c:	9b04      	ldr	r3, [sp, #16]
 802003e:	ad4e      	add	r5, sp, #312	; 0x138
 8020040:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8020044:	1e6b      	subs	r3, r5, #1
 8020046:	9303      	str	r3, [sp, #12]
 8020048:	220a      	movs	r2, #10
 802004a:	2300      	movs	r3, #0
 802004c:	4630      	mov	r0, r6
 802004e:	4639      	mov	r1, r7
 8020050:	f7e0 fdc4 	bl	8000bdc <__aeabi_uldivmod>
 8020054:	9b05      	ldr	r3, [sp, #20]
 8020056:	3230      	adds	r2, #48	; 0x30
 8020058:	3301      	adds	r3, #1
 802005a:	f805 2c01 	strb.w	r2, [r5, #-1]
 802005e:	9305      	str	r3, [sp, #20]
 8020060:	f1bb 0f00 	cmp.w	fp, #0
 8020064:	d019      	beq.n	802009a <_vfprintf_r+0xc7a>
 8020066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020068:	9a05      	ldr	r2, [sp, #20]
 802006a:	781b      	ldrb	r3, [r3, #0]
 802006c:	429a      	cmp	r2, r3
 802006e:	d114      	bne.n	802009a <_vfprintf_r+0xc7a>
 8020070:	2aff      	cmp	r2, #255	; 0xff
 8020072:	d012      	beq.n	802009a <_vfprintf_r+0xc7a>
 8020074:	2f00      	cmp	r7, #0
 8020076:	bf08      	it	eq
 8020078:	2e0a      	cmpeq	r6, #10
 802007a:	d30e      	bcc.n	802009a <_vfprintf_r+0xc7a>
 802007c:	9b03      	ldr	r3, [sp, #12]
 802007e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020080:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020082:	1a9b      	subs	r3, r3, r2
 8020084:	4618      	mov	r0, r3
 8020086:	9303      	str	r3, [sp, #12]
 8020088:	f7fd fe72 	bl	801dd70 <strncpy>
 802008c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802008e:	785d      	ldrb	r5, [r3, #1]
 8020090:	b1e5      	cbz	r5, 80200cc <_vfprintf_r+0xcac>
 8020092:	3301      	adds	r3, #1
 8020094:	930a      	str	r3, [sp, #40]	; 0x28
 8020096:	2300      	movs	r3, #0
 8020098:	9305      	str	r3, [sp, #20]
 802009a:	220a      	movs	r2, #10
 802009c:	2300      	movs	r3, #0
 802009e:	4630      	mov	r0, r6
 80200a0:	4639      	mov	r1, r7
 80200a2:	f7e0 fd9b 	bl	8000bdc <__aeabi_uldivmod>
 80200a6:	2f00      	cmp	r7, #0
 80200a8:	bf08      	it	eq
 80200aa:	2e0a      	cmpeq	r6, #10
 80200ac:	d20a      	bcs.n	80200c4 <_vfprintf_r+0xca4>
 80200ae:	9b03      	ldr	r3, [sp, #12]
 80200b0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80200b4:	aa4e      	add	r2, sp, #312	; 0x138
 80200b6:	4646      	mov	r6, r8
 80200b8:	eba2 0803 	sub.w	r8, r2, r3
 80200bc:	2300      	movs	r3, #0
 80200be:	9304      	str	r3, [sp, #16]
 80200c0:	f7ff bbbe 	b.w	801f840 <_vfprintf_r+0x420>
 80200c4:	9d03      	ldr	r5, [sp, #12]
 80200c6:	4606      	mov	r6, r0
 80200c8:	460f      	mov	r7, r1
 80200ca:	e7bb      	b.n	8020044 <_vfprintf_r+0xc24>
 80200cc:	9505      	str	r5, [sp, #20]
 80200ce:	e7e4      	b.n	802009a <_vfprintf_r+0xc7a>
 80200d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80200d2:	f006 030f 	and.w	r3, r6, #15
 80200d6:	5cd3      	ldrb	r3, [r2, r3]
 80200d8:	9a03      	ldr	r2, [sp, #12]
 80200da:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80200de:	0933      	lsrs	r3, r6, #4
 80200e0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80200e4:	9203      	str	r2, [sp, #12]
 80200e6:	093a      	lsrs	r2, r7, #4
 80200e8:	461e      	mov	r6, r3
 80200ea:	4617      	mov	r7, r2
 80200ec:	ea56 0307 	orrs.w	r3, r6, r7
 80200f0:	d1ee      	bne.n	80200d0 <_vfprintf_r+0xcb0>
 80200f2:	e7dc      	b.n	80200ae <_vfprintf_r+0xc8e>
 80200f4:	b933      	cbnz	r3, 8020104 <_vfprintf_r+0xce4>
 80200f6:	f01b 0f01 	tst.w	fp, #1
 80200fa:	d003      	beq.n	8020104 <_vfprintf_r+0xce4>
 80200fc:	2330      	movs	r3, #48	; 0x30
 80200fe:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8020102:	e795      	b.n	8020030 <_vfprintf_r+0xc10>
 8020104:	ab4e      	add	r3, sp, #312	; 0x138
 8020106:	e3ba      	b.n	802087e <_vfprintf_r+0x145e>
 8020108:	9b07      	ldr	r3, [sp, #28]
 802010a:	2b00      	cmp	r3, #0
 802010c:	f000 837d 	beq.w	802080a <_vfprintf_r+0x13ea>
 8020110:	2000      	movs	r0, #0
 8020112:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8020116:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 802011a:	9606      	str	r6, [sp, #24]
 802011c:	f7ff bb1e 	b.w	801f75c <_vfprintf_r+0x33c>
 8020120:	9e04      	ldr	r6, [sp, #16]
 8020122:	e72c      	b.n	801ff7e <_vfprintf_r+0xb5e>
 8020124:	2010      	movs	r0, #16
 8020126:	4402      	add	r2, r0
 8020128:	2b07      	cmp	r3, #7
 802012a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802012e:	6060      	str	r0, [r4, #4]
 8020130:	dd08      	ble.n	8020144 <_vfprintf_r+0xd24>
 8020132:	aa22      	add	r2, sp, #136	; 0x88
 8020134:	4649      	mov	r1, r9
 8020136:	4650      	mov	r0, sl
 8020138:	f002 f9b8 	bl	80224ac <__sprint_r>
 802013c:	2800      	cmp	r0, #0
 802013e:	f040 8342 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020142:	a925      	add	r1, sp, #148	; 0x94
 8020144:	3f10      	subs	r7, #16
 8020146:	460c      	mov	r4, r1
 8020148:	e4f1      	b.n	801fb2e <_vfprintf_r+0x70e>
 802014a:	460c      	mov	r4, r1
 802014c:	e50a      	b.n	801fb64 <_vfprintf_r+0x744>
 802014e:	aa22      	add	r2, sp, #136	; 0x88
 8020150:	4649      	mov	r1, r9
 8020152:	4650      	mov	r0, sl
 8020154:	f002 f9aa 	bl	80224ac <__sprint_r>
 8020158:	2800      	cmp	r0, #0
 802015a:	f040 8334 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802015e:	ac25      	add	r4, sp, #148	; 0x94
 8020160:	e512      	b.n	801fb88 <_vfprintf_r+0x768>
 8020162:	aa22      	add	r2, sp, #136	; 0x88
 8020164:	4649      	mov	r1, r9
 8020166:	4650      	mov	r0, sl
 8020168:	f002 f9a0 	bl	80224ac <__sprint_r>
 802016c:	2800      	cmp	r0, #0
 802016e:	f040 832a 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020172:	ac25      	add	r4, sp, #148	; 0x94
 8020174:	e518      	b.n	801fba8 <_vfprintf_r+0x788>
 8020176:	2010      	movs	r0, #16
 8020178:	4402      	add	r2, r0
 802017a:	2b07      	cmp	r3, #7
 802017c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020180:	6060      	str	r0, [r4, #4]
 8020182:	dd08      	ble.n	8020196 <_vfprintf_r+0xd76>
 8020184:	aa22      	add	r2, sp, #136	; 0x88
 8020186:	4649      	mov	r1, r9
 8020188:	4650      	mov	r0, sl
 802018a:	f002 f98f 	bl	80224ac <__sprint_r>
 802018e:	2800      	cmp	r0, #0
 8020190:	f040 8319 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020194:	a925      	add	r1, sp, #148	; 0x94
 8020196:	3f10      	subs	r7, #16
 8020198:	460c      	mov	r4, r1
 802019a:	e50d      	b.n	801fbb8 <_vfprintf_r+0x798>
 802019c:	460c      	mov	r4, r1
 802019e:	e526      	b.n	801fbee <_vfprintf_r+0x7ce>
 80201a0:	2010      	movs	r0, #16
 80201a2:	4402      	add	r2, r0
 80201a4:	2b07      	cmp	r3, #7
 80201a6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80201aa:	6060      	str	r0, [r4, #4]
 80201ac:	dd08      	ble.n	80201c0 <_vfprintf_r+0xda0>
 80201ae:	aa22      	add	r2, sp, #136	; 0x88
 80201b0:	4649      	mov	r1, r9
 80201b2:	4650      	mov	r0, sl
 80201b4:	f002 f97a 	bl	80224ac <__sprint_r>
 80201b8:	2800      	cmp	r0, #0
 80201ba:	f040 8304 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80201be:	a925      	add	r1, sp, #148	; 0x94
 80201c0:	3e10      	subs	r6, #16
 80201c2:	460c      	mov	r4, r1
 80201c4:	e518      	b.n	801fbf8 <_vfprintf_r+0x7d8>
 80201c6:	460c      	mov	r4, r1
 80201c8:	e530      	b.n	801fc2c <_vfprintf_r+0x80c>
 80201ca:	bf00      	nop
 80201cc:	080405a4 	.word	0x080405a4
 80201d0:	080405b5 	.word	0x080405b5
 80201d4:	9b07      	ldr	r3, [sp, #28]
 80201d6:	2b65      	cmp	r3, #101	; 0x65
 80201d8:	f340 8242 	ble.w	8020660 <_vfprintf_r+0x1240>
 80201dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80201e0:	2200      	movs	r2, #0
 80201e2:	2300      	movs	r3, #0
 80201e4:	f7e0 fc8a 	bl	8000afc <__aeabi_dcmpeq>
 80201e8:	2800      	cmp	r0, #0
 80201ea:	d068      	beq.n	80202be <_vfprintf_r+0xe9e>
 80201ec:	4b6d      	ldr	r3, [pc, #436]	; (80203a4 <_vfprintf_r+0xf84>)
 80201ee:	6023      	str	r3, [r4, #0]
 80201f0:	2301      	movs	r3, #1
 80201f2:	441e      	add	r6, r3
 80201f4:	6063      	str	r3, [r4, #4]
 80201f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80201f8:	9624      	str	r6, [sp, #144]	; 0x90
 80201fa:	3301      	adds	r3, #1
 80201fc:	2b07      	cmp	r3, #7
 80201fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8020200:	dc37      	bgt.n	8020272 <_vfprintf_r+0xe52>
 8020202:	3408      	adds	r4, #8
 8020204:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020206:	9a05      	ldr	r2, [sp, #20]
 8020208:	4293      	cmp	r3, r2
 802020a:	db03      	blt.n	8020214 <_vfprintf_r+0xdf4>
 802020c:	f01b 0f01 	tst.w	fp, #1
 8020210:	f43f ad2b 	beq.w	801fc6a <_vfprintf_r+0x84a>
 8020214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020216:	6023      	str	r3, [r4, #0]
 8020218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802021a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802021c:	6063      	str	r3, [r4, #4]
 802021e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020220:	4413      	add	r3, r2
 8020222:	9324      	str	r3, [sp, #144]	; 0x90
 8020224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020226:	3301      	adds	r3, #1
 8020228:	2b07      	cmp	r3, #7
 802022a:	9323      	str	r3, [sp, #140]	; 0x8c
 802022c:	dc2b      	bgt.n	8020286 <_vfprintf_r+0xe66>
 802022e:	3408      	adds	r4, #8
 8020230:	9b05      	ldr	r3, [sp, #20]
 8020232:	1e5d      	subs	r5, r3, #1
 8020234:	2d00      	cmp	r5, #0
 8020236:	f77f ad18 	ble.w	801fc6a <_vfprintf_r+0x84a>
 802023a:	4e5b      	ldr	r6, [pc, #364]	; (80203a8 <_vfprintf_r+0xf88>)
 802023c:	2710      	movs	r7, #16
 802023e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020242:	2d10      	cmp	r5, #16
 8020244:	f103 0301 	add.w	r3, r3, #1
 8020248:	f104 0108 	add.w	r1, r4, #8
 802024c:	6026      	str	r6, [r4, #0]
 802024e:	dc24      	bgt.n	802029a <_vfprintf_r+0xe7a>
 8020250:	6065      	str	r5, [r4, #4]
 8020252:	2b07      	cmp	r3, #7
 8020254:	4415      	add	r5, r2
 8020256:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 802025a:	f340 8293 	ble.w	8020784 <_vfprintf_r+0x1364>
 802025e:	aa22      	add	r2, sp, #136	; 0x88
 8020260:	4649      	mov	r1, r9
 8020262:	4650      	mov	r0, sl
 8020264:	f002 f922 	bl	80224ac <__sprint_r>
 8020268:	2800      	cmp	r0, #0
 802026a:	f040 82ac 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802026e:	ac25      	add	r4, sp, #148	; 0x94
 8020270:	e4fb      	b.n	801fc6a <_vfprintf_r+0x84a>
 8020272:	aa22      	add	r2, sp, #136	; 0x88
 8020274:	4649      	mov	r1, r9
 8020276:	4650      	mov	r0, sl
 8020278:	f002 f918 	bl	80224ac <__sprint_r>
 802027c:	2800      	cmp	r0, #0
 802027e:	f040 82a2 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020282:	ac25      	add	r4, sp, #148	; 0x94
 8020284:	e7be      	b.n	8020204 <_vfprintf_r+0xde4>
 8020286:	aa22      	add	r2, sp, #136	; 0x88
 8020288:	4649      	mov	r1, r9
 802028a:	4650      	mov	r0, sl
 802028c:	f002 f90e 	bl	80224ac <__sprint_r>
 8020290:	2800      	cmp	r0, #0
 8020292:	f040 8298 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020296:	ac25      	add	r4, sp, #148	; 0x94
 8020298:	e7ca      	b.n	8020230 <_vfprintf_r+0xe10>
 802029a:	3210      	adds	r2, #16
 802029c:	2b07      	cmp	r3, #7
 802029e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80202a2:	6067      	str	r7, [r4, #4]
 80202a4:	dd08      	ble.n	80202b8 <_vfprintf_r+0xe98>
 80202a6:	aa22      	add	r2, sp, #136	; 0x88
 80202a8:	4649      	mov	r1, r9
 80202aa:	4650      	mov	r0, sl
 80202ac:	f002 f8fe 	bl	80224ac <__sprint_r>
 80202b0:	2800      	cmp	r0, #0
 80202b2:	f040 8288 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80202b6:	a925      	add	r1, sp, #148	; 0x94
 80202b8:	3d10      	subs	r5, #16
 80202ba:	460c      	mov	r4, r1
 80202bc:	e7bf      	b.n	802023e <_vfprintf_r+0xe1e>
 80202be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	dc73      	bgt.n	80203ac <_vfprintf_r+0xf8c>
 80202c4:	4b37      	ldr	r3, [pc, #220]	; (80203a4 <_vfprintf_r+0xf84>)
 80202c6:	6023      	str	r3, [r4, #0]
 80202c8:	2301      	movs	r3, #1
 80202ca:	441e      	add	r6, r3
 80202cc:	6063      	str	r3, [r4, #4]
 80202ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80202d0:	9624      	str	r6, [sp, #144]	; 0x90
 80202d2:	3301      	adds	r3, #1
 80202d4:	2b07      	cmp	r3, #7
 80202d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80202d8:	dc3d      	bgt.n	8020356 <_vfprintf_r+0xf36>
 80202da:	3408      	adds	r4, #8
 80202dc:	9905      	ldr	r1, [sp, #20]
 80202de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80202e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202e2:	430a      	orrs	r2, r1
 80202e4:	f00b 0101 	and.w	r1, fp, #1
 80202e8:	430a      	orrs	r2, r1
 80202ea:	f43f acbe 	beq.w	801fc6a <_vfprintf_r+0x84a>
 80202ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202f0:	6022      	str	r2, [r4, #0]
 80202f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80202f4:	6062      	str	r2, [r4, #4]
 80202f6:	4413      	add	r3, r2
 80202f8:	9324      	str	r3, [sp, #144]	; 0x90
 80202fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80202fc:	3301      	adds	r3, #1
 80202fe:	2b07      	cmp	r3, #7
 8020300:	9323      	str	r3, [sp, #140]	; 0x8c
 8020302:	dc32      	bgt.n	802036a <_vfprintf_r+0xf4a>
 8020304:	3408      	adds	r4, #8
 8020306:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020308:	2d00      	cmp	r5, #0
 802030a:	da1b      	bge.n	8020344 <_vfprintf_r+0xf24>
 802030c:	4e26      	ldr	r6, [pc, #152]	; (80203a8 <_vfprintf_r+0xf88>)
 802030e:	426d      	negs	r5, r5
 8020310:	4623      	mov	r3, r4
 8020312:	2710      	movs	r7, #16
 8020314:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8020318:	2d10      	cmp	r5, #16
 802031a:	f102 0201 	add.w	r2, r2, #1
 802031e:	f104 0408 	add.w	r4, r4, #8
 8020322:	601e      	str	r6, [r3, #0]
 8020324:	dc2b      	bgt.n	802037e <_vfprintf_r+0xf5e>
 8020326:	605d      	str	r5, [r3, #4]
 8020328:	2a07      	cmp	r2, #7
 802032a:	440d      	add	r5, r1
 802032c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8020330:	dd08      	ble.n	8020344 <_vfprintf_r+0xf24>
 8020332:	aa22      	add	r2, sp, #136	; 0x88
 8020334:	4649      	mov	r1, r9
 8020336:	4650      	mov	r0, sl
 8020338:	f002 f8b8 	bl	80224ac <__sprint_r>
 802033c:	2800      	cmp	r0, #0
 802033e:	f040 8242 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020342:	ac25      	add	r4, sp, #148	; 0x94
 8020344:	9b03      	ldr	r3, [sp, #12]
 8020346:	6023      	str	r3, [r4, #0]
 8020348:	9b05      	ldr	r3, [sp, #20]
 802034a:	9a05      	ldr	r2, [sp, #20]
 802034c:	6063      	str	r3, [r4, #4]
 802034e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020350:	4413      	add	r3, r2
 8020352:	9324      	str	r3, [sp, #144]	; 0x90
 8020354:	e482      	b.n	801fc5c <_vfprintf_r+0x83c>
 8020356:	aa22      	add	r2, sp, #136	; 0x88
 8020358:	4649      	mov	r1, r9
 802035a:	4650      	mov	r0, sl
 802035c:	f002 f8a6 	bl	80224ac <__sprint_r>
 8020360:	2800      	cmp	r0, #0
 8020362:	f040 8230 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020366:	ac25      	add	r4, sp, #148	; 0x94
 8020368:	e7b8      	b.n	80202dc <_vfprintf_r+0xebc>
 802036a:	aa22      	add	r2, sp, #136	; 0x88
 802036c:	4649      	mov	r1, r9
 802036e:	4650      	mov	r0, sl
 8020370:	f002 f89c 	bl	80224ac <__sprint_r>
 8020374:	2800      	cmp	r0, #0
 8020376:	f040 8226 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802037a:	ac25      	add	r4, sp, #148	; 0x94
 802037c:	e7c3      	b.n	8020306 <_vfprintf_r+0xee6>
 802037e:	3110      	adds	r1, #16
 8020380:	2a07      	cmp	r2, #7
 8020382:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8020386:	605f      	str	r7, [r3, #4]
 8020388:	dd08      	ble.n	802039c <_vfprintf_r+0xf7c>
 802038a:	aa22      	add	r2, sp, #136	; 0x88
 802038c:	4649      	mov	r1, r9
 802038e:	4650      	mov	r0, sl
 8020390:	f002 f88c 	bl	80224ac <__sprint_r>
 8020394:	2800      	cmp	r0, #0
 8020396:	f040 8216 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802039a:	ac25      	add	r4, sp, #148	; 0x94
 802039c:	3d10      	subs	r5, #16
 802039e:	4623      	mov	r3, r4
 80203a0:	e7b8      	b.n	8020314 <_vfprintf_r+0xef4>
 80203a2:	bf00      	nop
 80203a4:	080405c6 	.word	0x080405c6
 80203a8:	080405f8 	.word	0x080405f8
 80203ac:	9b05      	ldr	r3, [sp, #20]
 80203ae:	42ab      	cmp	r3, r5
 80203b0:	bfa8      	it	ge
 80203b2:	462b      	movge	r3, r5
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	461f      	mov	r7, r3
 80203b8:	dd0b      	ble.n	80203d2 <_vfprintf_r+0xfb2>
 80203ba:	9b03      	ldr	r3, [sp, #12]
 80203bc:	e9c4 3700 	strd	r3, r7, [r4]
 80203c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80203c2:	3301      	adds	r3, #1
 80203c4:	443e      	add	r6, r7
 80203c6:	2b07      	cmp	r3, #7
 80203c8:	9624      	str	r6, [sp, #144]	; 0x90
 80203ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80203cc:	f300 808c 	bgt.w	80204e8 <_vfprintf_r+0x10c8>
 80203d0:	3408      	adds	r4, #8
 80203d2:	2f00      	cmp	r7, #0
 80203d4:	bfac      	ite	ge
 80203d6:	1bee      	subge	r6, r5, r7
 80203d8:	462e      	movlt	r6, r5
 80203da:	2e00      	cmp	r6, #0
 80203dc:	dd1c      	ble.n	8020418 <_vfprintf_r+0xff8>
 80203de:	4f9f      	ldr	r7, [pc, #636]	; (802065c <_vfprintf_r+0x123c>)
 80203e0:	f04f 0810 	mov.w	r8, #16
 80203e4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80203e8:	2e10      	cmp	r6, #16
 80203ea:	f103 0301 	add.w	r3, r3, #1
 80203ee:	f104 0108 	add.w	r1, r4, #8
 80203f2:	6027      	str	r7, [r4, #0]
 80203f4:	f300 8082 	bgt.w	80204fc <_vfprintf_r+0x10dc>
 80203f8:	6066      	str	r6, [r4, #4]
 80203fa:	2b07      	cmp	r3, #7
 80203fc:	4416      	add	r6, r2
 80203fe:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020402:	f340 808e 	ble.w	8020522 <_vfprintf_r+0x1102>
 8020406:	aa22      	add	r2, sp, #136	; 0x88
 8020408:	4649      	mov	r1, r9
 802040a:	4650      	mov	r0, sl
 802040c:	f002 f84e 	bl	80224ac <__sprint_r>
 8020410:	2800      	cmp	r0, #0
 8020412:	f040 81d8 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020416:	ac25      	add	r4, sp, #148	; 0x94
 8020418:	9b03      	ldr	r3, [sp, #12]
 802041a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 802041e:	441d      	add	r5, r3
 8020420:	d00d      	beq.n	802043e <_vfprintf_r+0x101e>
 8020422:	4e8e      	ldr	r6, [pc, #568]	; (802065c <_vfprintf_r+0x123c>)
 8020424:	2710      	movs	r7, #16
 8020426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020428:	2b00      	cmp	r3, #0
 802042a:	d17c      	bne.n	8020526 <_vfprintf_r+0x1106>
 802042c:	9b08      	ldr	r3, [sp, #32]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d17c      	bne.n	802052c <_vfprintf_r+0x110c>
 8020432:	9b03      	ldr	r3, [sp, #12]
 8020434:	9a05      	ldr	r2, [sp, #20]
 8020436:	4413      	add	r3, r2
 8020438:	429d      	cmp	r5, r3
 802043a:	bf28      	it	cs
 802043c:	461d      	movcs	r5, r3
 802043e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020440:	9a05      	ldr	r2, [sp, #20]
 8020442:	4293      	cmp	r3, r2
 8020444:	db02      	blt.n	802044c <_vfprintf_r+0x102c>
 8020446:	f01b 0f01 	tst.w	fp, #1
 802044a:	d00e      	beq.n	802046a <_vfprintf_r+0x104a>
 802044c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802044e:	6023      	str	r3, [r4, #0]
 8020450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020454:	6063      	str	r3, [r4, #4]
 8020456:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020458:	4413      	add	r3, r2
 802045a:	9324      	str	r3, [sp, #144]	; 0x90
 802045c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802045e:	3301      	adds	r3, #1
 8020460:	2b07      	cmp	r3, #7
 8020462:	9323      	str	r3, [sp, #140]	; 0x8c
 8020464:	f300 80e5 	bgt.w	8020632 <_vfprintf_r+0x1212>
 8020468:	3408      	adds	r4, #8
 802046a:	9905      	ldr	r1, [sp, #20]
 802046c:	9b03      	ldr	r3, [sp, #12]
 802046e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8020470:	440b      	add	r3, r1
 8020472:	1b8e      	subs	r6, r1, r6
 8020474:	1b5a      	subs	r2, r3, r5
 8020476:	4296      	cmp	r6, r2
 8020478:	bfa8      	it	ge
 802047a:	4616      	movge	r6, r2
 802047c:	2e00      	cmp	r6, #0
 802047e:	dd0b      	ble.n	8020498 <_vfprintf_r+0x1078>
 8020480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020482:	4433      	add	r3, r6
 8020484:	9324      	str	r3, [sp, #144]	; 0x90
 8020486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020488:	3301      	adds	r3, #1
 802048a:	2b07      	cmp	r3, #7
 802048c:	e9c4 5600 	strd	r5, r6, [r4]
 8020490:	9323      	str	r3, [sp, #140]	; 0x8c
 8020492:	f300 80d8 	bgt.w	8020646 <_vfprintf_r+0x1226>
 8020496:	3408      	adds	r4, #8
 8020498:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802049a:	9b05      	ldr	r3, [sp, #20]
 802049c:	2e00      	cmp	r6, #0
 802049e:	eba3 0505 	sub.w	r5, r3, r5
 80204a2:	bfa8      	it	ge
 80204a4:	1bad      	subge	r5, r5, r6
 80204a6:	2d00      	cmp	r5, #0
 80204a8:	f77f abdf 	ble.w	801fc6a <_vfprintf_r+0x84a>
 80204ac:	4e6b      	ldr	r6, [pc, #428]	; (802065c <_vfprintf_r+0x123c>)
 80204ae:	2710      	movs	r7, #16
 80204b0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80204b4:	2d10      	cmp	r5, #16
 80204b6:	f103 0301 	add.w	r3, r3, #1
 80204ba:	f104 0108 	add.w	r1, r4, #8
 80204be:	6026      	str	r6, [r4, #0]
 80204c0:	f77f aec6 	ble.w	8020250 <_vfprintf_r+0xe30>
 80204c4:	3210      	adds	r2, #16
 80204c6:	2b07      	cmp	r3, #7
 80204c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80204cc:	6067      	str	r7, [r4, #4]
 80204ce:	dd08      	ble.n	80204e2 <_vfprintf_r+0x10c2>
 80204d0:	aa22      	add	r2, sp, #136	; 0x88
 80204d2:	4649      	mov	r1, r9
 80204d4:	4650      	mov	r0, sl
 80204d6:	f001 ffe9 	bl	80224ac <__sprint_r>
 80204da:	2800      	cmp	r0, #0
 80204dc:	f040 8173 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80204e0:	a925      	add	r1, sp, #148	; 0x94
 80204e2:	3d10      	subs	r5, #16
 80204e4:	460c      	mov	r4, r1
 80204e6:	e7e3      	b.n	80204b0 <_vfprintf_r+0x1090>
 80204e8:	aa22      	add	r2, sp, #136	; 0x88
 80204ea:	4649      	mov	r1, r9
 80204ec:	4650      	mov	r0, sl
 80204ee:	f001 ffdd 	bl	80224ac <__sprint_r>
 80204f2:	2800      	cmp	r0, #0
 80204f4:	f040 8167 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80204f8:	ac25      	add	r4, sp, #148	; 0x94
 80204fa:	e76a      	b.n	80203d2 <_vfprintf_r+0xfb2>
 80204fc:	3210      	adds	r2, #16
 80204fe:	2b07      	cmp	r3, #7
 8020500:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020504:	f8c4 8004 	str.w	r8, [r4, #4]
 8020508:	dd08      	ble.n	802051c <_vfprintf_r+0x10fc>
 802050a:	aa22      	add	r2, sp, #136	; 0x88
 802050c:	4649      	mov	r1, r9
 802050e:	4650      	mov	r0, sl
 8020510:	f001 ffcc 	bl	80224ac <__sprint_r>
 8020514:	2800      	cmp	r0, #0
 8020516:	f040 8156 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802051a:	a925      	add	r1, sp, #148	; 0x94
 802051c:	3e10      	subs	r6, #16
 802051e:	460c      	mov	r4, r1
 8020520:	e760      	b.n	80203e4 <_vfprintf_r+0xfc4>
 8020522:	460c      	mov	r4, r1
 8020524:	e778      	b.n	8020418 <_vfprintf_r+0xff8>
 8020526:	9b08      	ldr	r3, [sp, #32]
 8020528:	2b00      	cmp	r3, #0
 802052a:	d052      	beq.n	80205d2 <_vfprintf_r+0x11b2>
 802052c:	9b08      	ldr	r3, [sp, #32]
 802052e:	3b01      	subs	r3, #1
 8020530:	9308      	str	r3, [sp, #32]
 8020532:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020534:	6023      	str	r3, [r4, #0]
 8020536:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802053a:	6063      	str	r3, [r4, #4]
 802053c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802053e:	4413      	add	r3, r2
 8020540:	9324      	str	r3, [sp, #144]	; 0x90
 8020542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020544:	3301      	adds	r3, #1
 8020546:	2b07      	cmp	r3, #7
 8020548:	9323      	str	r3, [sp, #140]	; 0x8c
 802054a:	dc49      	bgt.n	80205e0 <_vfprintf_r+0x11c0>
 802054c:	3408      	adds	r4, #8
 802054e:	9b03      	ldr	r3, [sp, #12]
 8020550:	9a05      	ldr	r2, [sp, #20]
 8020552:	eb03 0802 	add.w	r8, r3, r2
 8020556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020558:	781b      	ldrb	r3, [r3, #0]
 802055a:	eba8 0805 	sub.w	r8, r8, r5
 802055e:	4598      	cmp	r8, r3
 8020560:	bfa8      	it	ge
 8020562:	4698      	movge	r8, r3
 8020564:	f1b8 0f00 	cmp.w	r8, #0
 8020568:	dd0a      	ble.n	8020580 <_vfprintf_r+0x1160>
 802056a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802056c:	4443      	add	r3, r8
 802056e:	9324      	str	r3, [sp, #144]	; 0x90
 8020570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020572:	3301      	adds	r3, #1
 8020574:	2b07      	cmp	r3, #7
 8020576:	e9c4 5800 	strd	r5, r8, [r4]
 802057a:	9323      	str	r3, [sp, #140]	; 0x8c
 802057c:	dc3a      	bgt.n	80205f4 <_vfprintf_r+0x11d4>
 802057e:	3408      	adds	r4, #8
 8020580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020582:	781b      	ldrb	r3, [r3, #0]
 8020584:	f1b8 0f00 	cmp.w	r8, #0
 8020588:	bfac      	ite	ge
 802058a:	eba3 0808 	subge.w	r8, r3, r8
 802058e:	4698      	movlt	r8, r3
 8020590:	f1b8 0f00 	cmp.w	r8, #0
 8020594:	dd19      	ble.n	80205ca <_vfprintf_r+0x11aa>
 8020596:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 802059a:	f1b8 0f10 	cmp.w	r8, #16
 802059e:	f102 0201 	add.w	r2, r2, #1
 80205a2:	f104 0108 	add.w	r1, r4, #8
 80205a6:	6026      	str	r6, [r4, #0]
 80205a8:	dc2e      	bgt.n	8020608 <_vfprintf_r+0x11e8>
 80205aa:	4443      	add	r3, r8
 80205ac:	2a07      	cmp	r2, #7
 80205ae:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80205b2:	f8c4 8004 	str.w	r8, [r4, #4]
 80205b6:	dd3a      	ble.n	802062e <_vfprintf_r+0x120e>
 80205b8:	aa22      	add	r2, sp, #136	; 0x88
 80205ba:	4649      	mov	r1, r9
 80205bc:	4650      	mov	r0, sl
 80205be:	f001 ff75 	bl	80224ac <__sprint_r>
 80205c2:	2800      	cmp	r0, #0
 80205c4:	f040 80ff 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80205c8:	ac25      	add	r4, sp, #148	; 0x94
 80205ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205cc:	781b      	ldrb	r3, [r3, #0]
 80205ce:	441d      	add	r5, r3
 80205d0:	e729      	b.n	8020426 <_vfprintf_r+0x1006>
 80205d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205d4:	3b01      	subs	r3, #1
 80205d6:	930a      	str	r3, [sp, #40]	; 0x28
 80205d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205da:	3b01      	subs	r3, #1
 80205dc:	9309      	str	r3, [sp, #36]	; 0x24
 80205de:	e7a8      	b.n	8020532 <_vfprintf_r+0x1112>
 80205e0:	aa22      	add	r2, sp, #136	; 0x88
 80205e2:	4649      	mov	r1, r9
 80205e4:	4650      	mov	r0, sl
 80205e6:	f001 ff61 	bl	80224ac <__sprint_r>
 80205ea:	2800      	cmp	r0, #0
 80205ec:	f040 80eb 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 80205f0:	ac25      	add	r4, sp, #148	; 0x94
 80205f2:	e7ac      	b.n	802054e <_vfprintf_r+0x112e>
 80205f4:	aa22      	add	r2, sp, #136	; 0x88
 80205f6:	4649      	mov	r1, r9
 80205f8:	4650      	mov	r0, sl
 80205fa:	f001 ff57 	bl	80224ac <__sprint_r>
 80205fe:	2800      	cmp	r0, #0
 8020600:	f040 80e1 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020604:	ac25      	add	r4, sp, #148	; 0x94
 8020606:	e7bb      	b.n	8020580 <_vfprintf_r+0x1160>
 8020608:	3310      	adds	r3, #16
 802060a:	2a07      	cmp	r2, #7
 802060c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8020610:	6067      	str	r7, [r4, #4]
 8020612:	dd08      	ble.n	8020626 <_vfprintf_r+0x1206>
 8020614:	aa22      	add	r2, sp, #136	; 0x88
 8020616:	4649      	mov	r1, r9
 8020618:	4650      	mov	r0, sl
 802061a:	f001 ff47 	bl	80224ac <__sprint_r>
 802061e:	2800      	cmp	r0, #0
 8020620:	f040 80d1 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020624:	a925      	add	r1, sp, #148	; 0x94
 8020626:	f1a8 0810 	sub.w	r8, r8, #16
 802062a:	460c      	mov	r4, r1
 802062c:	e7b3      	b.n	8020596 <_vfprintf_r+0x1176>
 802062e:	460c      	mov	r4, r1
 8020630:	e7cb      	b.n	80205ca <_vfprintf_r+0x11aa>
 8020632:	aa22      	add	r2, sp, #136	; 0x88
 8020634:	4649      	mov	r1, r9
 8020636:	4650      	mov	r0, sl
 8020638:	f001 ff38 	bl	80224ac <__sprint_r>
 802063c:	2800      	cmp	r0, #0
 802063e:	f040 80c2 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020642:	ac25      	add	r4, sp, #148	; 0x94
 8020644:	e711      	b.n	802046a <_vfprintf_r+0x104a>
 8020646:	aa22      	add	r2, sp, #136	; 0x88
 8020648:	4649      	mov	r1, r9
 802064a:	4650      	mov	r0, sl
 802064c:	f001 ff2e 	bl	80224ac <__sprint_r>
 8020650:	2800      	cmp	r0, #0
 8020652:	f040 80b8 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 8020656:	ac25      	add	r4, sp, #148	; 0x94
 8020658:	e71e      	b.n	8020498 <_vfprintf_r+0x1078>
 802065a:	bf00      	nop
 802065c:	080405f8 	.word	0x080405f8
 8020660:	9a05      	ldr	r2, [sp, #20]
 8020662:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020664:	2a01      	cmp	r2, #1
 8020666:	9a03      	ldr	r2, [sp, #12]
 8020668:	6022      	str	r2, [r4, #0]
 802066a:	f106 0601 	add.w	r6, r6, #1
 802066e:	f103 0301 	add.w	r3, r3, #1
 8020672:	f04f 0201 	mov.w	r2, #1
 8020676:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 802067a:	f104 0508 	add.w	r5, r4, #8
 802067e:	6062      	str	r2, [r4, #4]
 8020680:	dc02      	bgt.n	8020688 <_vfprintf_r+0x1268>
 8020682:	f01b 0f01 	tst.w	fp, #1
 8020686:	d078      	beq.n	802077a <_vfprintf_r+0x135a>
 8020688:	2b07      	cmp	r3, #7
 802068a:	dd08      	ble.n	802069e <_vfprintf_r+0x127e>
 802068c:	aa22      	add	r2, sp, #136	; 0x88
 802068e:	4649      	mov	r1, r9
 8020690:	4650      	mov	r0, sl
 8020692:	f001 ff0b 	bl	80224ac <__sprint_r>
 8020696:	2800      	cmp	r0, #0
 8020698:	f040 8095 	bne.w	80207c6 <_vfprintf_r+0x13a6>
 802069c:	ad25      	add	r5, sp, #148	; 0x94
 802069e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80206a0:	602b      	str	r3, [r5, #0]
 80206a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80206a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80206a6:	606b      	str	r3, [r5, #4]
 80206a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206aa:	4413      	add	r3, r2
 80206ac:	9324      	str	r3, [sp, #144]	; 0x90
 80206ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80206b0:	3301      	adds	r3, #1
 80206b2:	2b07      	cmp	r3, #7
 80206b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80206b6:	dc32      	bgt.n	802071e <_vfprintf_r+0x12fe>
 80206b8:	3508      	adds	r5, #8
 80206ba:	9b05      	ldr	r3, [sp, #20]
 80206bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80206c0:	1e5c      	subs	r4, r3, #1
 80206c2:	2200      	movs	r2, #0
 80206c4:	2300      	movs	r3, #0
 80206c6:	f7e0 fa19 	bl	8000afc <__aeabi_dcmpeq>
 80206ca:	2800      	cmp	r0, #0
 80206cc:	d130      	bne.n	8020730 <_vfprintf_r+0x1310>
 80206ce:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80206d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206d2:	9803      	ldr	r0, [sp, #12]
 80206d4:	9a05      	ldr	r2, [sp, #20]
 80206d6:	3101      	adds	r1, #1
 80206d8:	3b01      	subs	r3, #1
 80206da:	3001      	adds	r0, #1
 80206dc:	4413      	add	r3, r2
 80206de:	2907      	cmp	r1, #7
 80206e0:	e9c5 0400 	strd	r0, r4, [r5]
 80206e4:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80206e8:	dd4a      	ble.n	8020780 <_vfprintf_r+0x1360>
 80206ea:	aa22      	add	r2, sp, #136	; 0x88
 80206ec:	4649      	mov	r1, r9
 80206ee:	4650      	mov	r0, sl
 80206f0:	f001 fedc 	bl	80224ac <__sprint_r>
 80206f4:	2800      	cmp	r0, #0
 80206f6:	d166      	bne.n	80207c6 <_vfprintf_r+0x13a6>
 80206f8:	ad25      	add	r5, sp, #148	; 0x94
 80206fa:	ab1e      	add	r3, sp, #120	; 0x78
 80206fc:	602b      	str	r3, [r5, #0]
 80206fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020700:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020702:	606b      	str	r3, [r5, #4]
 8020704:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020706:	4413      	add	r3, r2
 8020708:	9324      	str	r3, [sp, #144]	; 0x90
 802070a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802070c:	3301      	adds	r3, #1
 802070e:	2b07      	cmp	r3, #7
 8020710:	9323      	str	r3, [sp, #140]	; 0x8c
 8020712:	f73f ada4 	bgt.w	802025e <_vfprintf_r+0xe3e>
 8020716:	f105 0408 	add.w	r4, r5, #8
 802071a:	f7ff baa6 	b.w	801fc6a <_vfprintf_r+0x84a>
 802071e:	aa22      	add	r2, sp, #136	; 0x88
 8020720:	4649      	mov	r1, r9
 8020722:	4650      	mov	r0, sl
 8020724:	f001 fec2 	bl	80224ac <__sprint_r>
 8020728:	2800      	cmp	r0, #0
 802072a:	d14c      	bne.n	80207c6 <_vfprintf_r+0x13a6>
 802072c:	ad25      	add	r5, sp, #148	; 0x94
 802072e:	e7c4      	b.n	80206ba <_vfprintf_r+0x129a>
 8020730:	2c00      	cmp	r4, #0
 8020732:	dde2      	ble.n	80206fa <_vfprintf_r+0x12da>
 8020734:	4e53      	ldr	r6, [pc, #332]	; (8020884 <_vfprintf_r+0x1464>)
 8020736:	2710      	movs	r7, #16
 8020738:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802073c:	2c10      	cmp	r4, #16
 802073e:	f103 0301 	add.w	r3, r3, #1
 8020742:	f105 0108 	add.w	r1, r5, #8
 8020746:	602e      	str	r6, [r5, #0]
 8020748:	dc07      	bgt.n	802075a <_vfprintf_r+0x133a>
 802074a:	606c      	str	r4, [r5, #4]
 802074c:	2b07      	cmp	r3, #7
 802074e:	4414      	add	r4, r2
 8020750:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8020754:	dcc9      	bgt.n	80206ea <_vfprintf_r+0x12ca>
 8020756:	460d      	mov	r5, r1
 8020758:	e7cf      	b.n	80206fa <_vfprintf_r+0x12da>
 802075a:	3210      	adds	r2, #16
 802075c:	2b07      	cmp	r3, #7
 802075e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020762:	606f      	str	r7, [r5, #4]
 8020764:	dd06      	ble.n	8020774 <_vfprintf_r+0x1354>
 8020766:	aa22      	add	r2, sp, #136	; 0x88
 8020768:	4649      	mov	r1, r9
 802076a:	4650      	mov	r0, sl
 802076c:	f001 fe9e 	bl	80224ac <__sprint_r>
 8020770:	bb48      	cbnz	r0, 80207c6 <_vfprintf_r+0x13a6>
 8020772:	a925      	add	r1, sp, #148	; 0x94
 8020774:	3c10      	subs	r4, #16
 8020776:	460d      	mov	r5, r1
 8020778:	e7de      	b.n	8020738 <_vfprintf_r+0x1318>
 802077a:	2b07      	cmp	r3, #7
 802077c:	ddbd      	ble.n	80206fa <_vfprintf_r+0x12da>
 802077e:	e7b4      	b.n	80206ea <_vfprintf_r+0x12ca>
 8020780:	3508      	adds	r5, #8
 8020782:	e7ba      	b.n	80206fa <_vfprintf_r+0x12da>
 8020784:	460c      	mov	r4, r1
 8020786:	f7ff ba70 	b.w	801fc6a <_vfprintf_r+0x84a>
 802078a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 802078e:	1a9d      	subs	r5, r3, r2
 8020790:	2d00      	cmp	r5, #0
 8020792:	f77f aa6e 	ble.w	801fc72 <_vfprintf_r+0x852>
 8020796:	4e3c      	ldr	r6, [pc, #240]	; (8020888 <_vfprintf_r+0x1468>)
 8020798:	2710      	movs	r7, #16
 802079a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802079e:	2d10      	cmp	r5, #16
 80207a0:	f103 0301 	add.w	r3, r3, #1
 80207a4:	6026      	str	r6, [r4, #0]
 80207a6:	dc18      	bgt.n	80207da <_vfprintf_r+0x13ba>
 80207a8:	6065      	str	r5, [r4, #4]
 80207aa:	2b07      	cmp	r3, #7
 80207ac:	4415      	add	r5, r2
 80207ae:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80207b2:	f77f aa5e 	ble.w	801fc72 <_vfprintf_r+0x852>
 80207b6:	aa22      	add	r2, sp, #136	; 0x88
 80207b8:	4649      	mov	r1, r9
 80207ba:	4650      	mov	r0, sl
 80207bc:	f001 fe76 	bl	80224ac <__sprint_r>
 80207c0:	2800      	cmp	r0, #0
 80207c2:	f43f aa56 	beq.w	801fc72 <_vfprintf_r+0x852>
 80207c6:	9b04      	ldr	r3, [sp, #16]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	f43f a872 	beq.w	801f8b2 <_vfprintf_r+0x492>
 80207ce:	4619      	mov	r1, r3
 80207d0:	4650      	mov	r0, sl
 80207d2:	f001 f8f5 	bl	80219c0 <_free_r>
 80207d6:	f7ff b86c 	b.w	801f8b2 <_vfprintf_r+0x492>
 80207da:	3210      	adds	r2, #16
 80207dc:	2b07      	cmp	r3, #7
 80207de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80207e2:	6067      	str	r7, [r4, #4]
 80207e4:	dc02      	bgt.n	80207ec <_vfprintf_r+0x13cc>
 80207e6:	3408      	adds	r4, #8
 80207e8:	3d10      	subs	r5, #16
 80207ea:	e7d6      	b.n	802079a <_vfprintf_r+0x137a>
 80207ec:	aa22      	add	r2, sp, #136	; 0x88
 80207ee:	4649      	mov	r1, r9
 80207f0:	4650      	mov	r0, sl
 80207f2:	f001 fe5b 	bl	80224ac <__sprint_r>
 80207f6:	2800      	cmp	r0, #0
 80207f8:	d1e5      	bne.n	80207c6 <_vfprintf_r+0x13a6>
 80207fa:	ac25      	add	r4, sp, #148	; 0x94
 80207fc:	e7f4      	b.n	80207e8 <_vfprintf_r+0x13c8>
 80207fe:	9904      	ldr	r1, [sp, #16]
 8020800:	4650      	mov	r0, sl
 8020802:	f001 f8dd 	bl	80219c0 <_free_r>
 8020806:	f7ff ba4c 	b.w	801fca2 <_vfprintf_r+0x882>
 802080a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802080c:	b91b      	cbnz	r3, 8020816 <_vfprintf_r+0x13f6>
 802080e:	2300      	movs	r3, #0
 8020810:	9323      	str	r3, [sp, #140]	; 0x8c
 8020812:	f7ff b84e 	b.w	801f8b2 <_vfprintf_r+0x492>
 8020816:	aa22      	add	r2, sp, #136	; 0x88
 8020818:	4649      	mov	r1, r9
 802081a:	4650      	mov	r0, sl
 802081c:	f001 fe46 	bl	80224ac <__sprint_r>
 8020820:	2800      	cmp	r0, #0
 8020822:	d0f4      	beq.n	802080e <_vfprintf_r+0x13ee>
 8020824:	f7ff b845 	b.w	801f8b2 <_vfprintf_r+0x492>
 8020828:	ea56 0207 	orrs.w	r2, r6, r7
 802082c:	f8cd b010 	str.w	fp, [sp, #16]
 8020830:	f43f ab5c 	beq.w	801feec <_vfprintf_r+0xacc>
 8020834:	2b01      	cmp	r3, #1
 8020836:	f43f abf4 	beq.w	8020022 <_vfprintf_r+0xc02>
 802083a:	2b02      	cmp	r3, #2
 802083c:	ab4e      	add	r3, sp, #312	; 0x138
 802083e:	9303      	str	r3, [sp, #12]
 8020840:	f43f ac46 	beq.w	80200d0 <_vfprintf_r+0xcb0>
 8020844:	9903      	ldr	r1, [sp, #12]
 8020846:	f006 0307 	and.w	r3, r6, #7
 802084a:	460a      	mov	r2, r1
 802084c:	3330      	adds	r3, #48	; 0x30
 802084e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8020852:	9203      	str	r2, [sp, #12]
 8020854:	08f2      	lsrs	r2, r6, #3
 8020856:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 802085a:	08f8      	lsrs	r0, r7, #3
 802085c:	4616      	mov	r6, r2
 802085e:	4607      	mov	r7, r0
 8020860:	ea56 0207 	orrs.w	r2, r6, r7
 8020864:	d1ee      	bne.n	8020844 <_vfprintf_r+0x1424>
 8020866:	9a04      	ldr	r2, [sp, #16]
 8020868:	07d0      	lsls	r0, r2, #31
 802086a:	f57f ac20 	bpl.w	80200ae <_vfprintf_r+0xc8e>
 802086e:	2b30      	cmp	r3, #48	; 0x30
 8020870:	f43f ac1d 	beq.w	80200ae <_vfprintf_r+0xc8e>
 8020874:	9a03      	ldr	r2, [sp, #12]
 8020876:	2330      	movs	r3, #48	; 0x30
 8020878:	f802 3c01 	strb.w	r3, [r2, #-1]
 802087c:	1e8b      	subs	r3, r1, #2
 802087e:	9303      	str	r3, [sp, #12]
 8020880:	e415      	b.n	80200ae <_vfprintf_r+0xc8e>
 8020882:	bf00      	nop
 8020884:	080405f8 	.word	0x080405f8
 8020888:	080405e8 	.word	0x080405e8

0802088c <__sbprintf>:
 802088c:	b570      	push	{r4, r5, r6, lr}
 802088e:	460c      	mov	r4, r1
 8020890:	8989      	ldrh	r1, [r1, #12]
 8020892:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8020896:	f021 0102 	bic.w	r1, r1, #2
 802089a:	f8ad 1014 	strh.w	r1, [sp, #20]
 802089e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80208a0:	911b      	str	r1, [sp, #108]	; 0x6c
 80208a2:	89e1      	ldrh	r1, [r4, #14]
 80208a4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80208a8:	69e1      	ldr	r1, [r4, #28]
 80208aa:	9109      	str	r1, [sp, #36]	; 0x24
 80208ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80208ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80208b0:	a91c      	add	r1, sp, #112	; 0x70
 80208b2:	9102      	str	r1, [sp, #8]
 80208b4:	9106      	str	r1, [sp, #24]
 80208b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80208ba:	4606      	mov	r6, r0
 80208bc:	9104      	str	r1, [sp, #16]
 80208be:	9107      	str	r1, [sp, #28]
 80208c0:	a818      	add	r0, sp, #96	; 0x60
 80208c2:	2100      	movs	r1, #0
 80208c4:	e9cd 3200 	strd	r3, r2, [sp]
 80208c8:	9108      	str	r1, [sp, #32]
 80208ca:	f7fc fd75 	bl	801d3b8 <__retarget_lock_init_recursive>
 80208ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80208d2:	a902      	add	r1, sp, #8
 80208d4:	4630      	mov	r0, r6
 80208d6:	f7fe fda3 	bl	801f420 <_vfprintf_r>
 80208da:	1e05      	subs	r5, r0, #0
 80208dc:	db07      	blt.n	80208ee <__sbprintf+0x62>
 80208de:	a902      	add	r1, sp, #8
 80208e0:	4630      	mov	r0, r6
 80208e2:	f000 ff71 	bl	80217c8 <_fflush_r>
 80208e6:	2800      	cmp	r0, #0
 80208e8:	bf18      	it	ne
 80208ea:	f04f 35ff 	movne.w	r5, #4294967295
 80208ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80208f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80208f4:	065b      	lsls	r3, r3, #25
 80208f6:	bf42      	ittt	mi
 80208f8:	89a3      	ldrhmi	r3, [r4, #12]
 80208fa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80208fe:	81a3      	strhmi	r3, [r4, #12]
 8020900:	f7fc fd5b 	bl	801d3ba <__retarget_lock_close_recursive>
 8020904:	4628      	mov	r0, r5
 8020906:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802090a:	bd70      	pop	{r4, r5, r6, pc}

0802090c <__swsetup_r>:
 802090c:	b538      	push	{r3, r4, r5, lr}
 802090e:	4b2a      	ldr	r3, [pc, #168]	; (80209b8 <__swsetup_r+0xac>)
 8020910:	4605      	mov	r5, r0
 8020912:	6818      	ldr	r0, [r3, #0]
 8020914:	460c      	mov	r4, r1
 8020916:	b118      	cbz	r0, 8020920 <__swsetup_r+0x14>
 8020918:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802091a:	b90b      	cbnz	r3, 8020920 <__swsetup_r+0x14>
 802091c:	f000 ffc0 	bl	80218a0 <__sinit>
 8020920:	89a3      	ldrh	r3, [r4, #12]
 8020922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020926:	0718      	lsls	r0, r3, #28
 8020928:	d422      	bmi.n	8020970 <__swsetup_r+0x64>
 802092a:	06d9      	lsls	r1, r3, #27
 802092c:	d407      	bmi.n	802093e <__swsetup_r+0x32>
 802092e:	2309      	movs	r3, #9
 8020930:	602b      	str	r3, [r5, #0]
 8020932:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020936:	81a3      	strh	r3, [r4, #12]
 8020938:	f04f 30ff 	mov.w	r0, #4294967295
 802093c:	e034      	b.n	80209a8 <__swsetup_r+0x9c>
 802093e:	0758      	lsls	r0, r3, #29
 8020940:	d512      	bpl.n	8020968 <__swsetup_r+0x5c>
 8020942:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020944:	b141      	cbz	r1, 8020958 <__swsetup_r+0x4c>
 8020946:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802094a:	4299      	cmp	r1, r3
 802094c:	d002      	beq.n	8020954 <__swsetup_r+0x48>
 802094e:	4628      	mov	r0, r5
 8020950:	f001 f836 	bl	80219c0 <_free_r>
 8020954:	2300      	movs	r3, #0
 8020956:	6323      	str	r3, [r4, #48]	; 0x30
 8020958:	89a3      	ldrh	r3, [r4, #12]
 802095a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802095e:	81a3      	strh	r3, [r4, #12]
 8020960:	2300      	movs	r3, #0
 8020962:	6063      	str	r3, [r4, #4]
 8020964:	6923      	ldr	r3, [r4, #16]
 8020966:	6023      	str	r3, [r4, #0]
 8020968:	89a3      	ldrh	r3, [r4, #12]
 802096a:	f043 0308 	orr.w	r3, r3, #8
 802096e:	81a3      	strh	r3, [r4, #12]
 8020970:	6923      	ldr	r3, [r4, #16]
 8020972:	b94b      	cbnz	r3, 8020988 <__swsetup_r+0x7c>
 8020974:	89a3      	ldrh	r3, [r4, #12]
 8020976:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802097a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802097e:	d003      	beq.n	8020988 <__swsetup_r+0x7c>
 8020980:	4621      	mov	r1, r4
 8020982:	4628      	mov	r0, r5
 8020984:	f001 f92c 	bl	8021be0 <__smakebuf_r>
 8020988:	89a0      	ldrh	r0, [r4, #12]
 802098a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802098e:	f010 0301 	ands.w	r3, r0, #1
 8020992:	d00a      	beq.n	80209aa <__swsetup_r+0x9e>
 8020994:	2300      	movs	r3, #0
 8020996:	60a3      	str	r3, [r4, #8]
 8020998:	6963      	ldr	r3, [r4, #20]
 802099a:	425b      	negs	r3, r3
 802099c:	61a3      	str	r3, [r4, #24]
 802099e:	6923      	ldr	r3, [r4, #16]
 80209a0:	b943      	cbnz	r3, 80209b4 <__swsetup_r+0xa8>
 80209a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80209a6:	d1c4      	bne.n	8020932 <__swsetup_r+0x26>
 80209a8:	bd38      	pop	{r3, r4, r5, pc}
 80209aa:	0781      	lsls	r1, r0, #30
 80209ac:	bf58      	it	pl
 80209ae:	6963      	ldrpl	r3, [r4, #20]
 80209b0:	60a3      	str	r3, [r4, #8]
 80209b2:	e7f4      	b.n	802099e <__swsetup_r+0x92>
 80209b4:	2000      	movs	r0, #0
 80209b6:	e7f7      	b.n	80209a8 <__swsetup_r+0x9c>
 80209b8:	20000044 	.word	0x20000044

080209bc <register_fini>:
 80209bc:	4b02      	ldr	r3, [pc, #8]	; (80209c8 <register_fini+0xc>)
 80209be:	b113      	cbz	r3, 80209c6 <register_fini+0xa>
 80209c0:	4802      	ldr	r0, [pc, #8]	; (80209cc <register_fini+0x10>)
 80209c2:	f000 b805 	b.w	80209d0 <atexit>
 80209c6:	4770      	bx	lr
 80209c8:	00000000 	.word	0x00000000
 80209cc:	080218f1 	.word	0x080218f1

080209d0 <atexit>:
 80209d0:	2300      	movs	r3, #0
 80209d2:	4601      	mov	r1, r0
 80209d4:	461a      	mov	r2, r3
 80209d6:	4618      	mov	r0, r3
 80209d8:	f002 ba74 	b.w	8022ec4 <__register_exitproc>

080209dc <quorem>:
 80209dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209e0:	6903      	ldr	r3, [r0, #16]
 80209e2:	690c      	ldr	r4, [r1, #16]
 80209e4:	42a3      	cmp	r3, r4
 80209e6:	4607      	mov	r7, r0
 80209e8:	f2c0 8081 	blt.w	8020aee <quorem+0x112>
 80209ec:	3c01      	subs	r4, #1
 80209ee:	f101 0814 	add.w	r8, r1, #20
 80209f2:	f100 0514 	add.w	r5, r0, #20
 80209f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80209fa:	9301      	str	r3, [sp, #4]
 80209fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020a04:	3301      	adds	r3, #1
 8020a06:	429a      	cmp	r2, r3
 8020a08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020a0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8020a14:	d331      	bcc.n	8020a7a <quorem+0x9e>
 8020a16:	f04f 0e00 	mov.w	lr, #0
 8020a1a:	4640      	mov	r0, r8
 8020a1c:	46ac      	mov	ip, r5
 8020a1e:	46f2      	mov	sl, lr
 8020a20:	f850 2b04 	ldr.w	r2, [r0], #4
 8020a24:	b293      	uxth	r3, r2
 8020a26:	fb06 e303 	mla	r3, r6, r3, lr
 8020a2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020a2e:	b29b      	uxth	r3, r3
 8020a30:	ebaa 0303 	sub.w	r3, sl, r3
 8020a34:	0c12      	lsrs	r2, r2, #16
 8020a36:	f8dc a000 	ldr.w	sl, [ip]
 8020a3a:	fb06 e202 	mla	r2, r6, r2, lr
 8020a3e:	fa13 f38a 	uxtah	r3, r3, sl
 8020a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020a46:	fa1f fa82 	uxth.w	sl, r2
 8020a4a:	f8dc 2000 	ldr.w	r2, [ip]
 8020a4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020a52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020a56:	b29b      	uxth	r3, r3
 8020a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020a5c:	4581      	cmp	r9, r0
 8020a5e:	f84c 3b04 	str.w	r3, [ip], #4
 8020a62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020a66:	d2db      	bcs.n	8020a20 <quorem+0x44>
 8020a68:	f855 300b 	ldr.w	r3, [r5, fp]
 8020a6c:	b92b      	cbnz	r3, 8020a7a <quorem+0x9e>
 8020a6e:	9b01      	ldr	r3, [sp, #4]
 8020a70:	3b04      	subs	r3, #4
 8020a72:	429d      	cmp	r5, r3
 8020a74:	461a      	mov	r2, r3
 8020a76:	d32e      	bcc.n	8020ad6 <quorem+0xfa>
 8020a78:	613c      	str	r4, [r7, #16]
 8020a7a:	4638      	mov	r0, r7
 8020a7c:	f001 fb20 	bl	80220c0 <__mcmp>
 8020a80:	2800      	cmp	r0, #0
 8020a82:	db24      	blt.n	8020ace <quorem+0xf2>
 8020a84:	3601      	adds	r6, #1
 8020a86:	4628      	mov	r0, r5
 8020a88:	f04f 0c00 	mov.w	ip, #0
 8020a8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020a90:	f8d0 e000 	ldr.w	lr, [r0]
 8020a94:	b293      	uxth	r3, r2
 8020a96:	ebac 0303 	sub.w	r3, ip, r3
 8020a9a:	0c12      	lsrs	r2, r2, #16
 8020a9c:	fa13 f38e 	uxtah	r3, r3, lr
 8020aa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020aa8:	b29b      	uxth	r3, r3
 8020aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020aae:	45c1      	cmp	r9, r8
 8020ab0:	f840 3b04 	str.w	r3, [r0], #4
 8020ab4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020ab8:	d2e8      	bcs.n	8020a8c <quorem+0xb0>
 8020aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ac2:	b922      	cbnz	r2, 8020ace <quorem+0xf2>
 8020ac4:	3b04      	subs	r3, #4
 8020ac6:	429d      	cmp	r5, r3
 8020ac8:	461a      	mov	r2, r3
 8020aca:	d30a      	bcc.n	8020ae2 <quorem+0x106>
 8020acc:	613c      	str	r4, [r7, #16]
 8020ace:	4630      	mov	r0, r6
 8020ad0:	b003      	add	sp, #12
 8020ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ad6:	6812      	ldr	r2, [r2, #0]
 8020ad8:	3b04      	subs	r3, #4
 8020ada:	2a00      	cmp	r2, #0
 8020adc:	d1cc      	bne.n	8020a78 <quorem+0x9c>
 8020ade:	3c01      	subs	r4, #1
 8020ae0:	e7c7      	b.n	8020a72 <quorem+0x96>
 8020ae2:	6812      	ldr	r2, [r2, #0]
 8020ae4:	3b04      	subs	r3, #4
 8020ae6:	2a00      	cmp	r2, #0
 8020ae8:	d1f0      	bne.n	8020acc <quorem+0xf0>
 8020aea:	3c01      	subs	r4, #1
 8020aec:	e7eb      	b.n	8020ac6 <quorem+0xea>
 8020aee:	2000      	movs	r0, #0
 8020af0:	e7ee      	b.n	8020ad0 <quorem+0xf4>
 8020af2:	0000      	movs	r0, r0
 8020af4:	0000      	movs	r0, r0
	...

08020af8 <_dtoa_r>:
 8020af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020afc:	ed2d 8b02 	vpush	{d8}
 8020b00:	b095      	sub	sp, #84	; 0x54
 8020b02:	ec57 6b10 	vmov	r6, r7, d0
 8020b06:	9105      	str	r1, [sp, #20]
 8020b08:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020b0a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8020b0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020b12:	4604      	mov	r4, r0
 8020b14:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b16:	b141      	cbz	r1, 8020b2a <_dtoa_r+0x32>
 8020b18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020b1a:	604a      	str	r2, [r1, #4]
 8020b1c:	2301      	movs	r3, #1
 8020b1e:	4093      	lsls	r3, r2
 8020b20:	608b      	str	r3, [r1, #8]
 8020b22:	f001 f8c2 	bl	8021caa <_Bfree>
 8020b26:	2300      	movs	r3, #0
 8020b28:	6423      	str	r3, [r4, #64]	; 0x40
 8020b2a:	1e3b      	subs	r3, r7, #0
 8020b2c:	bfb9      	ittee	lt
 8020b2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020b32:	9303      	strlt	r3, [sp, #12]
 8020b34:	2300      	movge	r3, #0
 8020b36:	602b      	strge	r3, [r5, #0]
 8020b38:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8020b3c:	4ba2      	ldr	r3, [pc, #648]	; (8020dc8 <_dtoa_r+0x2d0>)
 8020b3e:	bfbc      	itt	lt
 8020b40:	2201      	movlt	r2, #1
 8020b42:	602a      	strlt	r2, [r5, #0]
 8020b44:	ea33 0309 	bics.w	r3, r3, r9
 8020b48:	d11b      	bne.n	8020b82 <_dtoa_r+0x8a>
 8020b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b4c:	f242 730f 	movw	r3, #9999	; 0x270f
 8020b50:	6013      	str	r3, [r2, #0]
 8020b52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020b56:	4333      	orrs	r3, r6
 8020b58:	f000 8578 	beq.w	802164c <_dtoa_r+0xb54>
 8020b5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020b5e:	b90b      	cbnz	r3, 8020b64 <_dtoa_r+0x6c>
 8020b60:	4b9a      	ldr	r3, [pc, #616]	; (8020dcc <_dtoa_r+0x2d4>)
 8020b62:	e024      	b.n	8020bae <_dtoa_r+0xb6>
 8020b64:	4b99      	ldr	r3, [pc, #612]	; (8020dcc <_dtoa_r+0x2d4>)
 8020b66:	9300      	str	r3, [sp, #0]
 8020b68:	3303      	adds	r3, #3
 8020b6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020b6c:	6013      	str	r3, [r2, #0]
 8020b6e:	9800      	ldr	r0, [sp, #0]
 8020b70:	b015      	add	sp, #84	; 0x54
 8020b72:	ecbd 8b02 	vpop	{d8}
 8020b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b7a:	4b95      	ldr	r3, [pc, #596]	; (8020dd0 <_dtoa_r+0x2d8>)
 8020b7c:	9300      	str	r3, [sp, #0]
 8020b7e:	3308      	adds	r3, #8
 8020b80:	e7f3      	b.n	8020b6a <_dtoa_r+0x72>
 8020b82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020b86:	2200      	movs	r2, #0
 8020b88:	ec51 0b17 	vmov	r0, r1, d7
 8020b8c:	2300      	movs	r3, #0
 8020b8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020b92:	f7df ffb3 	bl	8000afc <__aeabi_dcmpeq>
 8020b96:	4680      	mov	r8, r0
 8020b98:	b158      	cbz	r0, 8020bb2 <_dtoa_r+0xba>
 8020b9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b9c:	2301      	movs	r3, #1
 8020b9e:	6013      	str	r3, [r2, #0]
 8020ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	f000 854f 	beq.w	8021646 <_dtoa_r+0xb4e>
 8020ba8:	488a      	ldr	r0, [pc, #552]	; (8020dd4 <_dtoa_r+0x2dc>)
 8020baa:	6018      	str	r0, [r3, #0]
 8020bac:	1e43      	subs	r3, r0, #1
 8020bae:	9300      	str	r3, [sp, #0]
 8020bb0:	e7dd      	b.n	8020b6e <_dtoa_r+0x76>
 8020bb2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020bb6:	aa12      	add	r2, sp, #72	; 0x48
 8020bb8:	a913      	add	r1, sp, #76	; 0x4c
 8020bba:	4620      	mov	r0, r4
 8020bbc:	f001 fb24 	bl	8022208 <__d2b>
 8020bc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020bc4:	4683      	mov	fp, r0
 8020bc6:	2d00      	cmp	r5, #0
 8020bc8:	d07c      	beq.n	8020cc4 <_dtoa_r+0x1cc>
 8020bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bcc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020bd4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8020bd8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020bdc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020be0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020be4:	4b7c      	ldr	r3, [pc, #496]	; (8020dd8 <_dtoa_r+0x2e0>)
 8020be6:	2200      	movs	r2, #0
 8020be8:	4630      	mov	r0, r6
 8020bea:	4639      	mov	r1, r7
 8020bec:	f7df fb66 	bl	80002bc <__aeabi_dsub>
 8020bf0:	a36f      	add	r3, pc, #444	; (adr r3, 8020db0 <_dtoa_r+0x2b8>)
 8020bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf6:	f7df fd19 	bl	800062c <__aeabi_dmul>
 8020bfa:	a36f      	add	r3, pc, #444	; (adr r3, 8020db8 <_dtoa_r+0x2c0>)
 8020bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c00:	f7df fb5e 	bl	80002c0 <__adddf3>
 8020c04:	4606      	mov	r6, r0
 8020c06:	4628      	mov	r0, r5
 8020c08:	460f      	mov	r7, r1
 8020c0a:	f7df fca5 	bl	8000558 <__aeabi_i2d>
 8020c0e:	a36c      	add	r3, pc, #432	; (adr r3, 8020dc0 <_dtoa_r+0x2c8>)
 8020c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c14:	f7df fd0a 	bl	800062c <__aeabi_dmul>
 8020c18:	4602      	mov	r2, r0
 8020c1a:	460b      	mov	r3, r1
 8020c1c:	4630      	mov	r0, r6
 8020c1e:	4639      	mov	r1, r7
 8020c20:	f7df fb4e 	bl	80002c0 <__adddf3>
 8020c24:	4606      	mov	r6, r0
 8020c26:	460f      	mov	r7, r1
 8020c28:	f7df ffb0 	bl	8000b8c <__aeabi_d2iz>
 8020c2c:	2200      	movs	r2, #0
 8020c2e:	4682      	mov	sl, r0
 8020c30:	2300      	movs	r3, #0
 8020c32:	4630      	mov	r0, r6
 8020c34:	4639      	mov	r1, r7
 8020c36:	f7df ff6b 	bl	8000b10 <__aeabi_dcmplt>
 8020c3a:	b148      	cbz	r0, 8020c50 <_dtoa_r+0x158>
 8020c3c:	4650      	mov	r0, sl
 8020c3e:	f7df fc8b 	bl	8000558 <__aeabi_i2d>
 8020c42:	4632      	mov	r2, r6
 8020c44:	463b      	mov	r3, r7
 8020c46:	f7df ff59 	bl	8000afc <__aeabi_dcmpeq>
 8020c4a:	b908      	cbnz	r0, 8020c50 <_dtoa_r+0x158>
 8020c4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020c50:	f1ba 0f16 	cmp.w	sl, #22
 8020c54:	d854      	bhi.n	8020d00 <_dtoa_r+0x208>
 8020c56:	4b61      	ldr	r3, [pc, #388]	; (8020ddc <_dtoa_r+0x2e4>)
 8020c58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020c64:	f7df ff54 	bl	8000b10 <__aeabi_dcmplt>
 8020c68:	2800      	cmp	r0, #0
 8020c6a:	d04b      	beq.n	8020d04 <_dtoa_r+0x20c>
 8020c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020c70:	2300      	movs	r3, #0
 8020c72:	930e      	str	r3, [sp, #56]	; 0x38
 8020c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c76:	1b5d      	subs	r5, r3, r5
 8020c78:	1e6b      	subs	r3, r5, #1
 8020c7a:	9304      	str	r3, [sp, #16]
 8020c7c:	bf43      	ittte	mi
 8020c7e:	2300      	movmi	r3, #0
 8020c80:	f1c5 0801 	rsbmi	r8, r5, #1
 8020c84:	9304      	strmi	r3, [sp, #16]
 8020c86:	f04f 0800 	movpl.w	r8, #0
 8020c8a:	f1ba 0f00 	cmp.w	sl, #0
 8020c8e:	db3b      	blt.n	8020d08 <_dtoa_r+0x210>
 8020c90:	9b04      	ldr	r3, [sp, #16]
 8020c92:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020c96:	4453      	add	r3, sl
 8020c98:	9304      	str	r3, [sp, #16]
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	9306      	str	r3, [sp, #24]
 8020c9e:	9b05      	ldr	r3, [sp, #20]
 8020ca0:	2b09      	cmp	r3, #9
 8020ca2:	d86a      	bhi.n	8020d7a <_dtoa_r+0x282>
 8020ca4:	2b05      	cmp	r3, #5
 8020ca6:	bfc4      	itt	gt
 8020ca8:	3b04      	subgt	r3, #4
 8020caa:	9305      	strgt	r3, [sp, #20]
 8020cac:	9b05      	ldr	r3, [sp, #20]
 8020cae:	f1a3 0302 	sub.w	r3, r3, #2
 8020cb2:	bfcc      	ite	gt
 8020cb4:	2500      	movgt	r5, #0
 8020cb6:	2501      	movle	r5, #1
 8020cb8:	2b03      	cmp	r3, #3
 8020cba:	d86a      	bhi.n	8020d92 <_dtoa_r+0x29a>
 8020cbc:	e8df f003 	tbb	[pc, r3]
 8020cc0:	5b4d4f2c 	.word	0x5b4d4f2c
 8020cc4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8020cc8:	441d      	add	r5, r3
 8020cca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020cce:	2b20      	cmp	r3, #32
 8020cd0:	bfc1      	itttt	gt
 8020cd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020cd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020cda:	fa09 f303 	lslgt.w	r3, r9, r3
 8020cde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020ce2:	bfda      	itte	le
 8020ce4:	f1c3 0320 	rsble	r3, r3, #32
 8020ce8:	fa06 f003 	lslle.w	r0, r6, r3
 8020cec:	4318      	orrgt	r0, r3
 8020cee:	f7df fc23 	bl	8000538 <__aeabi_ui2d>
 8020cf2:	2301      	movs	r3, #1
 8020cf4:	4606      	mov	r6, r0
 8020cf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020cfa:	3d01      	subs	r5, #1
 8020cfc:	9310      	str	r3, [sp, #64]	; 0x40
 8020cfe:	e771      	b.n	8020be4 <_dtoa_r+0xec>
 8020d00:	2301      	movs	r3, #1
 8020d02:	e7b6      	b.n	8020c72 <_dtoa_r+0x17a>
 8020d04:	900e      	str	r0, [sp, #56]	; 0x38
 8020d06:	e7b5      	b.n	8020c74 <_dtoa_r+0x17c>
 8020d08:	f1ca 0300 	rsb	r3, sl, #0
 8020d0c:	9306      	str	r3, [sp, #24]
 8020d0e:	2300      	movs	r3, #0
 8020d10:	eba8 080a 	sub.w	r8, r8, sl
 8020d14:	930d      	str	r3, [sp, #52]	; 0x34
 8020d16:	e7c2      	b.n	8020c9e <_dtoa_r+0x1a6>
 8020d18:	2300      	movs	r3, #0
 8020d1a:	9308      	str	r3, [sp, #32]
 8020d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	dc3a      	bgt.n	8020d98 <_dtoa_r+0x2a0>
 8020d22:	f04f 0901 	mov.w	r9, #1
 8020d26:	f8cd 9004 	str.w	r9, [sp, #4]
 8020d2a:	464b      	mov	r3, r9
 8020d2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020d30:	2200      	movs	r2, #0
 8020d32:	6462      	str	r2, [r4, #68]	; 0x44
 8020d34:	2204      	movs	r2, #4
 8020d36:	f102 0014 	add.w	r0, r2, #20
 8020d3a:	4298      	cmp	r0, r3
 8020d3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8020d3e:	d931      	bls.n	8020da4 <_dtoa_r+0x2ac>
 8020d40:	4620      	mov	r0, r4
 8020d42:	f000 ff8d 	bl	8021c60 <_Balloc>
 8020d46:	9000      	str	r0, [sp, #0]
 8020d48:	2800      	cmp	r0, #0
 8020d4a:	d14d      	bne.n	8020de8 <_dtoa_r+0x2f0>
 8020d4c:	4b24      	ldr	r3, [pc, #144]	; (8020de0 <_dtoa_r+0x2e8>)
 8020d4e:	4602      	mov	r2, r0
 8020d50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020d54:	4823      	ldr	r0, [pc, #140]	; (8020de4 <_dtoa_r+0x2ec>)
 8020d56:	f002 f8f5 	bl	8022f44 <__assert_func>
 8020d5a:	2301      	movs	r3, #1
 8020d5c:	e7dd      	b.n	8020d1a <_dtoa_r+0x222>
 8020d5e:	2300      	movs	r3, #0
 8020d60:	9308      	str	r3, [sp, #32]
 8020d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d64:	eb0a 0903 	add.w	r9, sl, r3
 8020d68:	f109 0301 	add.w	r3, r9, #1
 8020d6c:	2b01      	cmp	r3, #1
 8020d6e:	9301      	str	r3, [sp, #4]
 8020d70:	bfb8      	it	lt
 8020d72:	2301      	movlt	r3, #1
 8020d74:	e7dc      	b.n	8020d30 <_dtoa_r+0x238>
 8020d76:	2301      	movs	r3, #1
 8020d78:	e7f2      	b.n	8020d60 <_dtoa_r+0x268>
 8020d7a:	2501      	movs	r5, #1
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	9305      	str	r3, [sp, #20]
 8020d80:	9508      	str	r5, [sp, #32]
 8020d82:	f04f 39ff 	mov.w	r9, #4294967295
 8020d86:	2200      	movs	r2, #0
 8020d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8020d8c:	2312      	movs	r3, #18
 8020d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8020d90:	e7ce      	b.n	8020d30 <_dtoa_r+0x238>
 8020d92:	2301      	movs	r3, #1
 8020d94:	9308      	str	r3, [sp, #32]
 8020d96:	e7f4      	b.n	8020d82 <_dtoa_r+0x28a>
 8020d98:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8020da0:	464b      	mov	r3, r9
 8020da2:	e7c5      	b.n	8020d30 <_dtoa_r+0x238>
 8020da4:	3101      	adds	r1, #1
 8020da6:	6461      	str	r1, [r4, #68]	; 0x44
 8020da8:	0052      	lsls	r2, r2, #1
 8020daa:	e7c4      	b.n	8020d36 <_dtoa_r+0x23e>
 8020dac:	f3af 8000 	nop.w
 8020db0:	636f4361 	.word	0x636f4361
 8020db4:	3fd287a7 	.word	0x3fd287a7
 8020db8:	8b60c8b3 	.word	0x8b60c8b3
 8020dbc:	3fc68a28 	.word	0x3fc68a28
 8020dc0:	509f79fb 	.word	0x509f79fb
 8020dc4:	3fd34413 	.word	0x3fd34413
 8020dc8:	7ff00000 	.word	0x7ff00000
 8020dcc:	08040608 	.word	0x08040608
 8020dd0:	0804060c 	.word	0x0804060c
 8020dd4:	080405c7 	.word	0x080405c7
 8020dd8:	3ff80000 	.word	0x3ff80000
 8020ddc:	08040710 	.word	0x08040710
 8020de0:	08040615 	.word	0x08040615
 8020de4:	08040626 	.word	0x08040626
 8020de8:	9b00      	ldr	r3, [sp, #0]
 8020dea:	6423      	str	r3, [r4, #64]	; 0x40
 8020dec:	9b01      	ldr	r3, [sp, #4]
 8020dee:	2b0e      	cmp	r3, #14
 8020df0:	f200 80ad 	bhi.w	8020f4e <_dtoa_r+0x456>
 8020df4:	2d00      	cmp	r5, #0
 8020df6:	f000 80aa 	beq.w	8020f4e <_dtoa_r+0x456>
 8020dfa:	f1ba 0f00 	cmp.w	sl, #0
 8020dfe:	dd36      	ble.n	8020e6e <_dtoa_r+0x376>
 8020e00:	4ac2      	ldr	r2, [pc, #776]	; (802110c <_dtoa_r+0x614>)
 8020e02:	f00a 030f 	and.w	r3, sl, #15
 8020e06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020e0a:	ed93 7b00 	vldr	d7, [r3]
 8020e0e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8020e12:	ea4f 172a 	mov.w	r7, sl, asr #4
 8020e16:	eeb0 8a47 	vmov.f32	s16, s14
 8020e1a:	eef0 8a67 	vmov.f32	s17, s15
 8020e1e:	d016      	beq.n	8020e4e <_dtoa_r+0x356>
 8020e20:	4bbb      	ldr	r3, [pc, #748]	; (8021110 <_dtoa_r+0x618>)
 8020e22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020e26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020e2a:	f7df fd29 	bl	8000880 <__aeabi_ddiv>
 8020e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020e32:	f007 070f 	and.w	r7, r7, #15
 8020e36:	2503      	movs	r5, #3
 8020e38:	4eb5      	ldr	r6, [pc, #724]	; (8021110 <_dtoa_r+0x618>)
 8020e3a:	b957      	cbnz	r7, 8020e52 <_dtoa_r+0x35a>
 8020e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020e40:	ec53 2b18 	vmov	r2, r3, d8
 8020e44:	f7df fd1c 	bl	8000880 <__aeabi_ddiv>
 8020e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020e4c:	e029      	b.n	8020ea2 <_dtoa_r+0x3aa>
 8020e4e:	2502      	movs	r5, #2
 8020e50:	e7f2      	b.n	8020e38 <_dtoa_r+0x340>
 8020e52:	07f9      	lsls	r1, r7, #31
 8020e54:	d508      	bpl.n	8020e68 <_dtoa_r+0x370>
 8020e56:	ec51 0b18 	vmov	r0, r1, d8
 8020e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020e5e:	f7df fbe5 	bl	800062c <__aeabi_dmul>
 8020e62:	ec41 0b18 	vmov	d8, r0, r1
 8020e66:	3501      	adds	r5, #1
 8020e68:	107f      	asrs	r7, r7, #1
 8020e6a:	3608      	adds	r6, #8
 8020e6c:	e7e5      	b.n	8020e3a <_dtoa_r+0x342>
 8020e6e:	f000 80a6 	beq.w	8020fbe <_dtoa_r+0x4c6>
 8020e72:	f1ca 0600 	rsb	r6, sl, #0
 8020e76:	4ba5      	ldr	r3, [pc, #660]	; (802110c <_dtoa_r+0x614>)
 8020e78:	4fa5      	ldr	r7, [pc, #660]	; (8021110 <_dtoa_r+0x618>)
 8020e7a:	f006 020f 	and.w	r2, r6, #15
 8020e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020e8a:	f7df fbcf 	bl	800062c <__aeabi_dmul>
 8020e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020e92:	1136      	asrs	r6, r6, #4
 8020e94:	2300      	movs	r3, #0
 8020e96:	2502      	movs	r5, #2
 8020e98:	2e00      	cmp	r6, #0
 8020e9a:	f040 8085 	bne.w	8020fa8 <_dtoa_r+0x4b0>
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d1d2      	bne.n	8020e48 <_dtoa_r+0x350>
 8020ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	f000 808c 	beq.w	8020fc2 <_dtoa_r+0x4ca>
 8020eaa:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020eae:	4b99      	ldr	r3, [pc, #612]	; (8021114 <_dtoa_r+0x61c>)
 8020eb0:	2200      	movs	r2, #0
 8020eb2:	4630      	mov	r0, r6
 8020eb4:	4639      	mov	r1, r7
 8020eb6:	f7df fe2b 	bl	8000b10 <__aeabi_dcmplt>
 8020eba:	2800      	cmp	r0, #0
 8020ebc:	f000 8081 	beq.w	8020fc2 <_dtoa_r+0x4ca>
 8020ec0:	9b01      	ldr	r3, [sp, #4]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d07d      	beq.n	8020fc2 <_dtoa_r+0x4ca>
 8020ec6:	f1b9 0f00 	cmp.w	r9, #0
 8020eca:	dd3c      	ble.n	8020f46 <_dtoa_r+0x44e>
 8020ecc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020ed0:	9307      	str	r3, [sp, #28]
 8020ed2:	2200      	movs	r2, #0
 8020ed4:	4b90      	ldr	r3, [pc, #576]	; (8021118 <_dtoa_r+0x620>)
 8020ed6:	4630      	mov	r0, r6
 8020ed8:	4639      	mov	r1, r7
 8020eda:	f7df fba7 	bl	800062c <__aeabi_dmul>
 8020ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020ee2:	3501      	adds	r5, #1
 8020ee4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020eec:	4628      	mov	r0, r5
 8020eee:	f7df fb33 	bl	8000558 <__aeabi_i2d>
 8020ef2:	4632      	mov	r2, r6
 8020ef4:	463b      	mov	r3, r7
 8020ef6:	f7df fb99 	bl	800062c <__aeabi_dmul>
 8020efa:	4b88      	ldr	r3, [pc, #544]	; (802111c <_dtoa_r+0x624>)
 8020efc:	2200      	movs	r2, #0
 8020efe:	f7df f9df 	bl	80002c0 <__adddf3>
 8020f02:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8020f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020f0a:	9303      	str	r3, [sp, #12]
 8020f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d15c      	bne.n	8020fcc <_dtoa_r+0x4d4>
 8020f12:	4b83      	ldr	r3, [pc, #524]	; (8021120 <_dtoa_r+0x628>)
 8020f14:	2200      	movs	r2, #0
 8020f16:	4630      	mov	r0, r6
 8020f18:	4639      	mov	r1, r7
 8020f1a:	f7df f9cf 	bl	80002bc <__aeabi_dsub>
 8020f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020f22:	4606      	mov	r6, r0
 8020f24:	460f      	mov	r7, r1
 8020f26:	f7df fe11 	bl	8000b4c <__aeabi_dcmpgt>
 8020f2a:	2800      	cmp	r0, #0
 8020f2c:	f040 8295 	bne.w	802145a <_dtoa_r+0x962>
 8020f30:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8020f34:	4630      	mov	r0, r6
 8020f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020f3a:	4639      	mov	r1, r7
 8020f3c:	f7df fde8 	bl	8000b10 <__aeabi_dcmplt>
 8020f40:	2800      	cmp	r0, #0
 8020f42:	f040 8287 	bne.w	8021454 <_dtoa_r+0x95c>
 8020f46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	f2c0 8157 	blt.w	8021204 <_dtoa_r+0x70c>
 8020f56:	f1ba 0f0e 	cmp.w	sl, #14
 8020f5a:	f300 8153 	bgt.w	8021204 <_dtoa_r+0x70c>
 8020f5e:	4b6b      	ldr	r3, [pc, #428]	; (802110c <_dtoa_r+0x614>)
 8020f60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	f280 80e2 	bge.w	8021134 <_dtoa_r+0x63c>
 8020f70:	9b01      	ldr	r3, [sp, #4]
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	f300 80de 	bgt.w	8021134 <_dtoa_r+0x63c>
 8020f78:	f040 826c 	bne.w	8021454 <_dtoa_r+0x95c>
 8020f7c:	4b68      	ldr	r3, [pc, #416]	; (8021120 <_dtoa_r+0x628>)
 8020f7e:	2200      	movs	r2, #0
 8020f80:	4640      	mov	r0, r8
 8020f82:	4649      	mov	r1, r9
 8020f84:	f7df fb52 	bl	800062c <__aeabi_dmul>
 8020f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020f8c:	f7df fdd4 	bl	8000b38 <__aeabi_dcmpge>
 8020f90:	9e01      	ldr	r6, [sp, #4]
 8020f92:	4637      	mov	r7, r6
 8020f94:	2800      	cmp	r0, #0
 8020f96:	f040 8242 	bne.w	802141e <_dtoa_r+0x926>
 8020f9a:	9d00      	ldr	r5, [sp, #0]
 8020f9c:	2331      	movs	r3, #49	; 0x31
 8020f9e:	f805 3b01 	strb.w	r3, [r5], #1
 8020fa2:	f10a 0a01 	add.w	sl, sl, #1
 8020fa6:	e23e      	b.n	8021426 <_dtoa_r+0x92e>
 8020fa8:	07f2      	lsls	r2, r6, #31
 8020faa:	d505      	bpl.n	8020fb8 <_dtoa_r+0x4c0>
 8020fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020fb0:	f7df fb3c 	bl	800062c <__aeabi_dmul>
 8020fb4:	3501      	adds	r5, #1
 8020fb6:	2301      	movs	r3, #1
 8020fb8:	1076      	asrs	r6, r6, #1
 8020fba:	3708      	adds	r7, #8
 8020fbc:	e76c      	b.n	8020e98 <_dtoa_r+0x3a0>
 8020fbe:	2502      	movs	r5, #2
 8020fc0:	e76f      	b.n	8020ea2 <_dtoa_r+0x3aa>
 8020fc2:	9b01      	ldr	r3, [sp, #4]
 8020fc4:	f8cd a01c 	str.w	sl, [sp, #28]
 8020fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8020fca:	e78d      	b.n	8020ee8 <_dtoa_r+0x3f0>
 8020fcc:	9900      	ldr	r1, [sp, #0]
 8020fce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020fd2:	4b4e      	ldr	r3, [pc, #312]	; (802110c <_dtoa_r+0x614>)
 8020fd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020fd8:	4401      	add	r1, r0
 8020fda:	9102      	str	r1, [sp, #8]
 8020fdc:	9908      	ldr	r1, [sp, #32]
 8020fde:	eeb0 8a47 	vmov.f32	s16, s14
 8020fe2:	eef0 8a67 	vmov.f32	s17, s15
 8020fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020fee:	2900      	cmp	r1, #0
 8020ff0:	d045      	beq.n	802107e <_dtoa_r+0x586>
 8020ff2:	494c      	ldr	r1, [pc, #304]	; (8021124 <_dtoa_r+0x62c>)
 8020ff4:	2000      	movs	r0, #0
 8020ff6:	f7df fc43 	bl	8000880 <__aeabi_ddiv>
 8020ffa:	ec53 2b18 	vmov	r2, r3, d8
 8020ffe:	f7df f95d 	bl	80002bc <__aeabi_dsub>
 8021002:	9d00      	ldr	r5, [sp, #0]
 8021004:	ec41 0b18 	vmov	d8, r0, r1
 8021008:	4639      	mov	r1, r7
 802100a:	4630      	mov	r0, r6
 802100c:	f7df fdbe 	bl	8000b8c <__aeabi_d2iz>
 8021010:	900c      	str	r0, [sp, #48]	; 0x30
 8021012:	f7df faa1 	bl	8000558 <__aeabi_i2d>
 8021016:	4602      	mov	r2, r0
 8021018:	460b      	mov	r3, r1
 802101a:	4630      	mov	r0, r6
 802101c:	4639      	mov	r1, r7
 802101e:	f7df f94d 	bl	80002bc <__aeabi_dsub>
 8021022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021024:	3330      	adds	r3, #48	; 0x30
 8021026:	f805 3b01 	strb.w	r3, [r5], #1
 802102a:	ec53 2b18 	vmov	r2, r3, d8
 802102e:	4606      	mov	r6, r0
 8021030:	460f      	mov	r7, r1
 8021032:	f7df fd6d 	bl	8000b10 <__aeabi_dcmplt>
 8021036:	2800      	cmp	r0, #0
 8021038:	d165      	bne.n	8021106 <_dtoa_r+0x60e>
 802103a:	4632      	mov	r2, r6
 802103c:	463b      	mov	r3, r7
 802103e:	4935      	ldr	r1, [pc, #212]	; (8021114 <_dtoa_r+0x61c>)
 8021040:	2000      	movs	r0, #0
 8021042:	f7df f93b 	bl	80002bc <__aeabi_dsub>
 8021046:	ec53 2b18 	vmov	r2, r3, d8
 802104a:	f7df fd61 	bl	8000b10 <__aeabi_dcmplt>
 802104e:	2800      	cmp	r0, #0
 8021050:	f040 80b8 	bne.w	80211c4 <_dtoa_r+0x6cc>
 8021054:	9b02      	ldr	r3, [sp, #8]
 8021056:	429d      	cmp	r5, r3
 8021058:	f43f af75 	beq.w	8020f46 <_dtoa_r+0x44e>
 802105c:	4b2e      	ldr	r3, [pc, #184]	; (8021118 <_dtoa_r+0x620>)
 802105e:	ec51 0b18 	vmov	r0, r1, d8
 8021062:	2200      	movs	r2, #0
 8021064:	f7df fae2 	bl	800062c <__aeabi_dmul>
 8021068:	4b2b      	ldr	r3, [pc, #172]	; (8021118 <_dtoa_r+0x620>)
 802106a:	ec41 0b18 	vmov	d8, r0, r1
 802106e:	2200      	movs	r2, #0
 8021070:	4630      	mov	r0, r6
 8021072:	4639      	mov	r1, r7
 8021074:	f7df fada 	bl	800062c <__aeabi_dmul>
 8021078:	4606      	mov	r6, r0
 802107a:	460f      	mov	r7, r1
 802107c:	e7c4      	b.n	8021008 <_dtoa_r+0x510>
 802107e:	ec51 0b17 	vmov	r0, r1, d7
 8021082:	f7df fad3 	bl	800062c <__aeabi_dmul>
 8021086:	9b02      	ldr	r3, [sp, #8]
 8021088:	9d00      	ldr	r5, [sp, #0]
 802108a:	930c      	str	r3, [sp, #48]	; 0x30
 802108c:	ec41 0b18 	vmov	d8, r0, r1
 8021090:	4639      	mov	r1, r7
 8021092:	4630      	mov	r0, r6
 8021094:	f7df fd7a 	bl	8000b8c <__aeabi_d2iz>
 8021098:	9011      	str	r0, [sp, #68]	; 0x44
 802109a:	f7df fa5d 	bl	8000558 <__aeabi_i2d>
 802109e:	4602      	mov	r2, r0
 80210a0:	460b      	mov	r3, r1
 80210a2:	4630      	mov	r0, r6
 80210a4:	4639      	mov	r1, r7
 80210a6:	f7df f909 	bl	80002bc <__aeabi_dsub>
 80210aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80210ac:	3330      	adds	r3, #48	; 0x30
 80210ae:	f805 3b01 	strb.w	r3, [r5], #1
 80210b2:	9b02      	ldr	r3, [sp, #8]
 80210b4:	429d      	cmp	r5, r3
 80210b6:	4606      	mov	r6, r0
 80210b8:	460f      	mov	r7, r1
 80210ba:	f04f 0200 	mov.w	r2, #0
 80210be:	d133      	bne.n	8021128 <_dtoa_r+0x630>
 80210c0:	4b18      	ldr	r3, [pc, #96]	; (8021124 <_dtoa_r+0x62c>)
 80210c2:	ec51 0b18 	vmov	r0, r1, d8
 80210c6:	f7df f8fb 	bl	80002c0 <__adddf3>
 80210ca:	4602      	mov	r2, r0
 80210cc:	460b      	mov	r3, r1
 80210ce:	4630      	mov	r0, r6
 80210d0:	4639      	mov	r1, r7
 80210d2:	f7df fd3b 	bl	8000b4c <__aeabi_dcmpgt>
 80210d6:	2800      	cmp	r0, #0
 80210d8:	d174      	bne.n	80211c4 <_dtoa_r+0x6cc>
 80210da:	ec53 2b18 	vmov	r2, r3, d8
 80210de:	4911      	ldr	r1, [pc, #68]	; (8021124 <_dtoa_r+0x62c>)
 80210e0:	2000      	movs	r0, #0
 80210e2:	f7df f8eb 	bl	80002bc <__aeabi_dsub>
 80210e6:	4602      	mov	r2, r0
 80210e8:	460b      	mov	r3, r1
 80210ea:	4630      	mov	r0, r6
 80210ec:	4639      	mov	r1, r7
 80210ee:	f7df fd0f 	bl	8000b10 <__aeabi_dcmplt>
 80210f2:	2800      	cmp	r0, #0
 80210f4:	f43f af27 	beq.w	8020f46 <_dtoa_r+0x44e>
 80210f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80210fa:	1e6b      	subs	r3, r5, #1
 80210fc:	930c      	str	r3, [sp, #48]	; 0x30
 80210fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021102:	2b30      	cmp	r3, #48	; 0x30
 8021104:	d0f8      	beq.n	80210f8 <_dtoa_r+0x600>
 8021106:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802110a:	e049      	b.n	80211a0 <_dtoa_r+0x6a8>
 802110c:	08040710 	.word	0x08040710
 8021110:	080406e8 	.word	0x080406e8
 8021114:	3ff00000 	.word	0x3ff00000
 8021118:	40240000 	.word	0x40240000
 802111c:	401c0000 	.word	0x401c0000
 8021120:	40140000 	.word	0x40140000
 8021124:	3fe00000 	.word	0x3fe00000
 8021128:	4baf      	ldr	r3, [pc, #700]	; (80213e8 <_dtoa_r+0x8f0>)
 802112a:	f7df fa7f 	bl	800062c <__aeabi_dmul>
 802112e:	4606      	mov	r6, r0
 8021130:	460f      	mov	r7, r1
 8021132:	e7ad      	b.n	8021090 <_dtoa_r+0x598>
 8021134:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021138:	9d00      	ldr	r5, [sp, #0]
 802113a:	4642      	mov	r2, r8
 802113c:	464b      	mov	r3, r9
 802113e:	4630      	mov	r0, r6
 8021140:	4639      	mov	r1, r7
 8021142:	f7df fb9d 	bl	8000880 <__aeabi_ddiv>
 8021146:	f7df fd21 	bl	8000b8c <__aeabi_d2iz>
 802114a:	9002      	str	r0, [sp, #8]
 802114c:	f7df fa04 	bl	8000558 <__aeabi_i2d>
 8021150:	4642      	mov	r2, r8
 8021152:	464b      	mov	r3, r9
 8021154:	f7df fa6a 	bl	800062c <__aeabi_dmul>
 8021158:	4602      	mov	r2, r0
 802115a:	460b      	mov	r3, r1
 802115c:	4630      	mov	r0, r6
 802115e:	4639      	mov	r1, r7
 8021160:	f7df f8ac 	bl	80002bc <__aeabi_dsub>
 8021164:	9e02      	ldr	r6, [sp, #8]
 8021166:	9f01      	ldr	r7, [sp, #4]
 8021168:	3630      	adds	r6, #48	; 0x30
 802116a:	f805 6b01 	strb.w	r6, [r5], #1
 802116e:	9e00      	ldr	r6, [sp, #0]
 8021170:	1bae      	subs	r6, r5, r6
 8021172:	42b7      	cmp	r7, r6
 8021174:	4602      	mov	r2, r0
 8021176:	460b      	mov	r3, r1
 8021178:	d137      	bne.n	80211ea <_dtoa_r+0x6f2>
 802117a:	f7df f8a1 	bl	80002c0 <__adddf3>
 802117e:	4642      	mov	r2, r8
 8021180:	464b      	mov	r3, r9
 8021182:	4606      	mov	r6, r0
 8021184:	460f      	mov	r7, r1
 8021186:	f7df fce1 	bl	8000b4c <__aeabi_dcmpgt>
 802118a:	b9c8      	cbnz	r0, 80211c0 <_dtoa_r+0x6c8>
 802118c:	4642      	mov	r2, r8
 802118e:	464b      	mov	r3, r9
 8021190:	4630      	mov	r0, r6
 8021192:	4639      	mov	r1, r7
 8021194:	f7df fcb2 	bl	8000afc <__aeabi_dcmpeq>
 8021198:	b110      	cbz	r0, 80211a0 <_dtoa_r+0x6a8>
 802119a:	9b02      	ldr	r3, [sp, #8]
 802119c:	07d9      	lsls	r1, r3, #31
 802119e:	d40f      	bmi.n	80211c0 <_dtoa_r+0x6c8>
 80211a0:	4620      	mov	r0, r4
 80211a2:	4659      	mov	r1, fp
 80211a4:	f000 fd81 	bl	8021caa <_Bfree>
 80211a8:	2300      	movs	r3, #0
 80211aa:	702b      	strb	r3, [r5, #0]
 80211ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80211ae:	f10a 0001 	add.w	r0, sl, #1
 80211b2:	6018      	str	r0, [r3, #0]
 80211b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	f43f acd9 	beq.w	8020b6e <_dtoa_r+0x76>
 80211bc:	601d      	str	r5, [r3, #0]
 80211be:	e4d6      	b.n	8020b6e <_dtoa_r+0x76>
 80211c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80211c4:	462b      	mov	r3, r5
 80211c6:	461d      	mov	r5, r3
 80211c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80211cc:	2a39      	cmp	r2, #57	; 0x39
 80211ce:	d108      	bne.n	80211e2 <_dtoa_r+0x6ea>
 80211d0:	9a00      	ldr	r2, [sp, #0]
 80211d2:	429a      	cmp	r2, r3
 80211d4:	d1f7      	bne.n	80211c6 <_dtoa_r+0x6ce>
 80211d6:	9a07      	ldr	r2, [sp, #28]
 80211d8:	9900      	ldr	r1, [sp, #0]
 80211da:	3201      	adds	r2, #1
 80211dc:	9207      	str	r2, [sp, #28]
 80211de:	2230      	movs	r2, #48	; 0x30
 80211e0:	700a      	strb	r2, [r1, #0]
 80211e2:	781a      	ldrb	r2, [r3, #0]
 80211e4:	3201      	adds	r2, #1
 80211e6:	701a      	strb	r2, [r3, #0]
 80211e8:	e78d      	b.n	8021106 <_dtoa_r+0x60e>
 80211ea:	4b7f      	ldr	r3, [pc, #508]	; (80213e8 <_dtoa_r+0x8f0>)
 80211ec:	2200      	movs	r2, #0
 80211ee:	f7df fa1d 	bl	800062c <__aeabi_dmul>
 80211f2:	2200      	movs	r2, #0
 80211f4:	2300      	movs	r3, #0
 80211f6:	4606      	mov	r6, r0
 80211f8:	460f      	mov	r7, r1
 80211fa:	f7df fc7f 	bl	8000afc <__aeabi_dcmpeq>
 80211fe:	2800      	cmp	r0, #0
 8021200:	d09b      	beq.n	802113a <_dtoa_r+0x642>
 8021202:	e7cd      	b.n	80211a0 <_dtoa_r+0x6a8>
 8021204:	9a08      	ldr	r2, [sp, #32]
 8021206:	2a00      	cmp	r2, #0
 8021208:	f000 80c4 	beq.w	8021394 <_dtoa_r+0x89c>
 802120c:	9a05      	ldr	r2, [sp, #20]
 802120e:	2a01      	cmp	r2, #1
 8021210:	f300 80a8 	bgt.w	8021364 <_dtoa_r+0x86c>
 8021214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021216:	2a00      	cmp	r2, #0
 8021218:	f000 80a0 	beq.w	802135c <_dtoa_r+0x864>
 802121c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021220:	9e06      	ldr	r6, [sp, #24]
 8021222:	4645      	mov	r5, r8
 8021224:	9a04      	ldr	r2, [sp, #16]
 8021226:	2101      	movs	r1, #1
 8021228:	441a      	add	r2, r3
 802122a:	4620      	mov	r0, r4
 802122c:	4498      	add	r8, r3
 802122e:	9204      	str	r2, [sp, #16]
 8021230:	f000 fdde 	bl	8021df0 <__i2b>
 8021234:	4607      	mov	r7, r0
 8021236:	2d00      	cmp	r5, #0
 8021238:	dd0b      	ble.n	8021252 <_dtoa_r+0x75a>
 802123a:	9b04      	ldr	r3, [sp, #16]
 802123c:	2b00      	cmp	r3, #0
 802123e:	dd08      	ble.n	8021252 <_dtoa_r+0x75a>
 8021240:	42ab      	cmp	r3, r5
 8021242:	9a04      	ldr	r2, [sp, #16]
 8021244:	bfa8      	it	ge
 8021246:	462b      	movge	r3, r5
 8021248:	eba8 0803 	sub.w	r8, r8, r3
 802124c:	1aed      	subs	r5, r5, r3
 802124e:	1ad3      	subs	r3, r2, r3
 8021250:	9304      	str	r3, [sp, #16]
 8021252:	9b06      	ldr	r3, [sp, #24]
 8021254:	b1fb      	cbz	r3, 8021296 <_dtoa_r+0x79e>
 8021256:	9b08      	ldr	r3, [sp, #32]
 8021258:	2b00      	cmp	r3, #0
 802125a:	f000 809f 	beq.w	802139c <_dtoa_r+0x8a4>
 802125e:	2e00      	cmp	r6, #0
 8021260:	dd11      	ble.n	8021286 <_dtoa_r+0x78e>
 8021262:	4639      	mov	r1, r7
 8021264:	4632      	mov	r2, r6
 8021266:	4620      	mov	r0, r4
 8021268:	f000 fe7e 	bl	8021f68 <__pow5mult>
 802126c:	465a      	mov	r2, fp
 802126e:	4601      	mov	r1, r0
 8021270:	4607      	mov	r7, r0
 8021272:	4620      	mov	r0, r4
 8021274:	f000 fdd2 	bl	8021e1c <__multiply>
 8021278:	4659      	mov	r1, fp
 802127a:	9007      	str	r0, [sp, #28]
 802127c:	4620      	mov	r0, r4
 802127e:	f000 fd14 	bl	8021caa <_Bfree>
 8021282:	9b07      	ldr	r3, [sp, #28]
 8021284:	469b      	mov	fp, r3
 8021286:	9b06      	ldr	r3, [sp, #24]
 8021288:	1b9a      	subs	r2, r3, r6
 802128a:	d004      	beq.n	8021296 <_dtoa_r+0x79e>
 802128c:	4659      	mov	r1, fp
 802128e:	4620      	mov	r0, r4
 8021290:	f000 fe6a 	bl	8021f68 <__pow5mult>
 8021294:	4683      	mov	fp, r0
 8021296:	2101      	movs	r1, #1
 8021298:	4620      	mov	r0, r4
 802129a:	f000 fda9 	bl	8021df0 <__i2b>
 802129e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	4606      	mov	r6, r0
 80212a4:	dd7c      	ble.n	80213a0 <_dtoa_r+0x8a8>
 80212a6:	461a      	mov	r2, r3
 80212a8:	4601      	mov	r1, r0
 80212aa:	4620      	mov	r0, r4
 80212ac:	f000 fe5c 	bl	8021f68 <__pow5mult>
 80212b0:	9b05      	ldr	r3, [sp, #20]
 80212b2:	2b01      	cmp	r3, #1
 80212b4:	4606      	mov	r6, r0
 80212b6:	dd76      	ble.n	80213a6 <_dtoa_r+0x8ae>
 80212b8:	2300      	movs	r3, #0
 80212ba:	9306      	str	r3, [sp, #24]
 80212bc:	6933      	ldr	r3, [r6, #16]
 80212be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80212c2:	6918      	ldr	r0, [r3, #16]
 80212c4:	f000 fd44 	bl	8021d50 <__hi0bits>
 80212c8:	f1c0 0020 	rsb	r0, r0, #32
 80212cc:	9b04      	ldr	r3, [sp, #16]
 80212ce:	4418      	add	r0, r3
 80212d0:	f010 001f 	ands.w	r0, r0, #31
 80212d4:	f000 8086 	beq.w	80213e4 <_dtoa_r+0x8ec>
 80212d8:	f1c0 0320 	rsb	r3, r0, #32
 80212dc:	2b04      	cmp	r3, #4
 80212de:	dd7f      	ble.n	80213e0 <_dtoa_r+0x8e8>
 80212e0:	f1c0 001c 	rsb	r0, r0, #28
 80212e4:	9b04      	ldr	r3, [sp, #16]
 80212e6:	4403      	add	r3, r0
 80212e8:	4480      	add	r8, r0
 80212ea:	4405      	add	r5, r0
 80212ec:	9304      	str	r3, [sp, #16]
 80212ee:	f1b8 0f00 	cmp.w	r8, #0
 80212f2:	dd05      	ble.n	8021300 <_dtoa_r+0x808>
 80212f4:	4659      	mov	r1, fp
 80212f6:	4642      	mov	r2, r8
 80212f8:	4620      	mov	r0, r4
 80212fa:	f000 fe75 	bl	8021fe8 <__lshift>
 80212fe:	4683      	mov	fp, r0
 8021300:	9b04      	ldr	r3, [sp, #16]
 8021302:	2b00      	cmp	r3, #0
 8021304:	dd05      	ble.n	8021312 <_dtoa_r+0x81a>
 8021306:	4631      	mov	r1, r6
 8021308:	461a      	mov	r2, r3
 802130a:	4620      	mov	r0, r4
 802130c:	f000 fe6c 	bl	8021fe8 <__lshift>
 8021310:	4606      	mov	r6, r0
 8021312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021314:	2b00      	cmp	r3, #0
 8021316:	d069      	beq.n	80213ec <_dtoa_r+0x8f4>
 8021318:	4631      	mov	r1, r6
 802131a:	4658      	mov	r0, fp
 802131c:	f000 fed0 	bl	80220c0 <__mcmp>
 8021320:	2800      	cmp	r0, #0
 8021322:	da63      	bge.n	80213ec <_dtoa_r+0x8f4>
 8021324:	2300      	movs	r3, #0
 8021326:	4659      	mov	r1, fp
 8021328:	220a      	movs	r2, #10
 802132a:	4620      	mov	r0, r4
 802132c:	f000 fcc6 	bl	8021cbc <__multadd>
 8021330:	9b08      	ldr	r3, [sp, #32]
 8021332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021336:	4683      	mov	fp, r0
 8021338:	2b00      	cmp	r3, #0
 802133a:	f000 818e 	beq.w	802165a <_dtoa_r+0xb62>
 802133e:	4639      	mov	r1, r7
 8021340:	2300      	movs	r3, #0
 8021342:	220a      	movs	r2, #10
 8021344:	4620      	mov	r0, r4
 8021346:	f000 fcb9 	bl	8021cbc <__multadd>
 802134a:	f1b9 0f00 	cmp.w	r9, #0
 802134e:	4607      	mov	r7, r0
 8021350:	f300 808e 	bgt.w	8021470 <_dtoa_r+0x978>
 8021354:	9b05      	ldr	r3, [sp, #20]
 8021356:	2b02      	cmp	r3, #2
 8021358:	dc50      	bgt.n	80213fc <_dtoa_r+0x904>
 802135a:	e089      	b.n	8021470 <_dtoa_r+0x978>
 802135c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802135e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021362:	e75d      	b.n	8021220 <_dtoa_r+0x728>
 8021364:	9b01      	ldr	r3, [sp, #4]
 8021366:	1e5e      	subs	r6, r3, #1
 8021368:	9b06      	ldr	r3, [sp, #24]
 802136a:	42b3      	cmp	r3, r6
 802136c:	bfbf      	itttt	lt
 802136e:	9b06      	ldrlt	r3, [sp, #24]
 8021370:	9606      	strlt	r6, [sp, #24]
 8021372:	1af2      	sublt	r2, r6, r3
 8021374:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021376:	bfb6      	itet	lt
 8021378:	189b      	addlt	r3, r3, r2
 802137a:	1b9e      	subge	r6, r3, r6
 802137c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802137e:	9b01      	ldr	r3, [sp, #4]
 8021380:	bfb8      	it	lt
 8021382:	2600      	movlt	r6, #0
 8021384:	2b00      	cmp	r3, #0
 8021386:	bfb5      	itete	lt
 8021388:	eba8 0503 	sublt.w	r5, r8, r3
 802138c:	9b01      	ldrge	r3, [sp, #4]
 802138e:	2300      	movlt	r3, #0
 8021390:	4645      	movge	r5, r8
 8021392:	e747      	b.n	8021224 <_dtoa_r+0x72c>
 8021394:	9e06      	ldr	r6, [sp, #24]
 8021396:	9f08      	ldr	r7, [sp, #32]
 8021398:	4645      	mov	r5, r8
 802139a:	e74c      	b.n	8021236 <_dtoa_r+0x73e>
 802139c:	9a06      	ldr	r2, [sp, #24]
 802139e:	e775      	b.n	802128c <_dtoa_r+0x794>
 80213a0:	9b05      	ldr	r3, [sp, #20]
 80213a2:	2b01      	cmp	r3, #1
 80213a4:	dc18      	bgt.n	80213d8 <_dtoa_r+0x8e0>
 80213a6:	9b02      	ldr	r3, [sp, #8]
 80213a8:	b9b3      	cbnz	r3, 80213d8 <_dtoa_r+0x8e0>
 80213aa:	9b03      	ldr	r3, [sp, #12]
 80213ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80213b0:	b9a3      	cbnz	r3, 80213dc <_dtoa_r+0x8e4>
 80213b2:	9b03      	ldr	r3, [sp, #12]
 80213b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80213b8:	0d1b      	lsrs	r3, r3, #20
 80213ba:	051b      	lsls	r3, r3, #20
 80213bc:	b12b      	cbz	r3, 80213ca <_dtoa_r+0x8d2>
 80213be:	9b04      	ldr	r3, [sp, #16]
 80213c0:	3301      	adds	r3, #1
 80213c2:	9304      	str	r3, [sp, #16]
 80213c4:	f108 0801 	add.w	r8, r8, #1
 80213c8:	2301      	movs	r3, #1
 80213ca:	9306      	str	r3, [sp, #24]
 80213cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	f47f af74 	bne.w	80212bc <_dtoa_r+0x7c4>
 80213d4:	2001      	movs	r0, #1
 80213d6:	e779      	b.n	80212cc <_dtoa_r+0x7d4>
 80213d8:	2300      	movs	r3, #0
 80213da:	e7f6      	b.n	80213ca <_dtoa_r+0x8d2>
 80213dc:	9b02      	ldr	r3, [sp, #8]
 80213de:	e7f4      	b.n	80213ca <_dtoa_r+0x8d2>
 80213e0:	d085      	beq.n	80212ee <_dtoa_r+0x7f6>
 80213e2:	4618      	mov	r0, r3
 80213e4:	301c      	adds	r0, #28
 80213e6:	e77d      	b.n	80212e4 <_dtoa_r+0x7ec>
 80213e8:	40240000 	.word	0x40240000
 80213ec:	9b01      	ldr	r3, [sp, #4]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	dc38      	bgt.n	8021464 <_dtoa_r+0x96c>
 80213f2:	9b05      	ldr	r3, [sp, #20]
 80213f4:	2b02      	cmp	r3, #2
 80213f6:	dd35      	ble.n	8021464 <_dtoa_r+0x96c>
 80213f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80213fc:	f1b9 0f00 	cmp.w	r9, #0
 8021400:	d10d      	bne.n	802141e <_dtoa_r+0x926>
 8021402:	4631      	mov	r1, r6
 8021404:	464b      	mov	r3, r9
 8021406:	2205      	movs	r2, #5
 8021408:	4620      	mov	r0, r4
 802140a:	f000 fc57 	bl	8021cbc <__multadd>
 802140e:	4601      	mov	r1, r0
 8021410:	4606      	mov	r6, r0
 8021412:	4658      	mov	r0, fp
 8021414:	f000 fe54 	bl	80220c0 <__mcmp>
 8021418:	2800      	cmp	r0, #0
 802141a:	f73f adbe 	bgt.w	8020f9a <_dtoa_r+0x4a2>
 802141e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021420:	9d00      	ldr	r5, [sp, #0]
 8021422:	ea6f 0a03 	mvn.w	sl, r3
 8021426:	f04f 0800 	mov.w	r8, #0
 802142a:	4631      	mov	r1, r6
 802142c:	4620      	mov	r0, r4
 802142e:	f000 fc3c 	bl	8021caa <_Bfree>
 8021432:	2f00      	cmp	r7, #0
 8021434:	f43f aeb4 	beq.w	80211a0 <_dtoa_r+0x6a8>
 8021438:	f1b8 0f00 	cmp.w	r8, #0
 802143c:	d005      	beq.n	802144a <_dtoa_r+0x952>
 802143e:	45b8      	cmp	r8, r7
 8021440:	d003      	beq.n	802144a <_dtoa_r+0x952>
 8021442:	4641      	mov	r1, r8
 8021444:	4620      	mov	r0, r4
 8021446:	f000 fc30 	bl	8021caa <_Bfree>
 802144a:	4639      	mov	r1, r7
 802144c:	4620      	mov	r0, r4
 802144e:	f000 fc2c 	bl	8021caa <_Bfree>
 8021452:	e6a5      	b.n	80211a0 <_dtoa_r+0x6a8>
 8021454:	2600      	movs	r6, #0
 8021456:	4637      	mov	r7, r6
 8021458:	e7e1      	b.n	802141e <_dtoa_r+0x926>
 802145a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802145c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021460:	4637      	mov	r7, r6
 8021462:	e59a      	b.n	8020f9a <_dtoa_r+0x4a2>
 8021464:	9b08      	ldr	r3, [sp, #32]
 8021466:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802146a:	2b00      	cmp	r3, #0
 802146c:	f000 80fc 	beq.w	8021668 <_dtoa_r+0xb70>
 8021470:	2d00      	cmp	r5, #0
 8021472:	dd05      	ble.n	8021480 <_dtoa_r+0x988>
 8021474:	4639      	mov	r1, r7
 8021476:	462a      	mov	r2, r5
 8021478:	4620      	mov	r0, r4
 802147a:	f000 fdb5 	bl	8021fe8 <__lshift>
 802147e:	4607      	mov	r7, r0
 8021480:	9b06      	ldr	r3, [sp, #24]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d05b      	beq.n	802153e <_dtoa_r+0xa46>
 8021486:	6879      	ldr	r1, [r7, #4]
 8021488:	4620      	mov	r0, r4
 802148a:	f000 fbe9 	bl	8021c60 <_Balloc>
 802148e:	4605      	mov	r5, r0
 8021490:	b920      	cbnz	r0, 802149c <_dtoa_r+0x9a4>
 8021492:	4b80      	ldr	r3, [pc, #512]	; (8021694 <_dtoa_r+0xb9c>)
 8021494:	4602      	mov	r2, r0
 8021496:	f240 21ea 	movw	r1, #746	; 0x2ea
 802149a:	e45b      	b.n	8020d54 <_dtoa_r+0x25c>
 802149c:	693a      	ldr	r2, [r7, #16]
 802149e:	3202      	adds	r2, #2
 80214a0:	0092      	lsls	r2, r2, #2
 80214a2:	f107 010c 	add.w	r1, r7, #12
 80214a6:	300c      	adds	r0, #12
 80214a8:	f7fc f9ea 	bl	801d880 <memcpy>
 80214ac:	2201      	movs	r2, #1
 80214ae:	4629      	mov	r1, r5
 80214b0:	4620      	mov	r0, r4
 80214b2:	f000 fd99 	bl	8021fe8 <__lshift>
 80214b6:	9b00      	ldr	r3, [sp, #0]
 80214b8:	3301      	adds	r3, #1
 80214ba:	9301      	str	r3, [sp, #4]
 80214bc:	9b00      	ldr	r3, [sp, #0]
 80214be:	444b      	add	r3, r9
 80214c0:	9307      	str	r3, [sp, #28]
 80214c2:	9b02      	ldr	r3, [sp, #8]
 80214c4:	f003 0301 	and.w	r3, r3, #1
 80214c8:	46b8      	mov	r8, r7
 80214ca:	9306      	str	r3, [sp, #24]
 80214cc:	4607      	mov	r7, r0
 80214ce:	9b01      	ldr	r3, [sp, #4]
 80214d0:	4631      	mov	r1, r6
 80214d2:	3b01      	subs	r3, #1
 80214d4:	4658      	mov	r0, fp
 80214d6:	9302      	str	r3, [sp, #8]
 80214d8:	f7ff fa80 	bl	80209dc <quorem>
 80214dc:	4603      	mov	r3, r0
 80214de:	3330      	adds	r3, #48	; 0x30
 80214e0:	9004      	str	r0, [sp, #16]
 80214e2:	4641      	mov	r1, r8
 80214e4:	4658      	mov	r0, fp
 80214e6:	9308      	str	r3, [sp, #32]
 80214e8:	f000 fdea 	bl	80220c0 <__mcmp>
 80214ec:	463a      	mov	r2, r7
 80214ee:	4681      	mov	r9, r0
 80214f0:	4631      	mov	r1, r6
 80214f2:	4620      	mov	r0, r4
 80214f4:	f000 fe00 	bl	80220f8 <__mdiff>
 80214f8:	68c2      	ldr	r2, [r0, #12]
 80214fa:	9b08      	ldr	r3, [sp, #32]
 80214fc:	4605      	mov	r5, r0
 80214fe:	bb02      	cbnz	r2, 8021542 <_dtoa_r+0xa4a>
 8021500:	4601      	mov	r1, r0
 8021502:	4658      	mov	r0, fp
 8021504:	f000 fddc 	bl	80220c0 <__mcmp>
 8021508:	9b08      	ldr	r3, [sp, #32]
 802150a:	4602      	mov	r2, r0
 802150c:	4629      	mov	r1, r5
 802150e:	4620      	mov	r0, r4
 8021510:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8021514:	f000 fbc9 	bl	8021caa <_Bfree>
 8021518:	9b05      	ldr	r3, [sp, #20]
 802151a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802151c:	9d01      	ldr	r5, [sp, #4]
 802151e:	ea43 0102 	orr.w	r1, r3, r2
 8021522:	9b06      	ldr	r3, [sp, #24]
 8021524:	430b      	orrs	r3, r1
 8021526:	9b08      	ldr	r3, [sp, #32]
 8021528:	d10d      	bne.n	8021546 <_dtoa_r+0xa4e>
 802152a:	2b39      	cmp	r3, #57	; 0x39
 802152c:	d029      	beq.n	8021582 <_dtoa_r+0xa8a>
 802152e:	f1b9 0f00 	cmp.w	r9, #0
 8021532:	dd01      	ble.n	8021538 <_dtoa_r+0xa40>
 8021534:	9b04      	ldr	r3, [sp, #16]
 8021536:	3331      	adds	r3, #49	; 0x31
 8021538:	9a02      	ldr	r2, [sp, #8]
 802153a:	7013      	strb	r3, [r2, #0]
 802153c:	e775      	b.n	802142a <_dtoa_r+0x932>
 802153e:	4638      	mov	r0, r7
 8021540:	e7b9      	b.n	80214b6 <_dtoa_r+0x9be>
 8021542:	2201      	movs	r2, #1
 8021544:	e7e2      	b.n	802150c <_dtoa_r+0xa14>
 8021546:	f1b9 0f00 	cmp.w	r9, #0
 802154a:	db06      	blt.n	802155a <_dtoa_r+0xa62>
 802154c:	9905      	ldr	r1, [sp, #20]
 802154e:	ea41 0909 	orr.w	r9, r1, r9
 8021552:	9906      	ldr	r1, [sp, #24]
 8021554:	ea59 0101 	orrs.w	r1, r9, r1
 8021558:	d120      	bne.n	802159c <_dtoa_r+0xaa4>
 802155a:	2a00      	cmp	r2, #0
 802155c:	ddec      	ble.n	8021538 <_dtoa_r+0xa40>
 802155e:	4659      	mov	r1, fp
 8021560:	2201      	movs	r2, #1
 8021562:	4620      	mov	r0, r4
 8021564:	9301      	str	r3, [sp, #4]
 8021566:	f000 fd3f 	bl	8021fe8 <__lshift>
 802156a:	4631      	mov	r1, r6
 802156c:	4683      	mov	fp, r0
 802156e:	f000 fda7 	bl	80220c0 <__mcmp>
 8021572:	2800      	cmp	r0, #0
 8021574:	9b01      	ldr	r3, [sp, #4]
 8021576:	dc02      	bgt.n	802157e <_dtoa_r+0xa86>
 8021578:	d1de      	bne.n	8021538 <_dtoa_r+0xa40>
 802157a:	07da      	lsls	r2, r3, #31
 802157c:	d5dc      	bpl.n	8021538 <_dtoa_r+0xa40>
 802157e:	2b39      	cmp	r3, #57	; 0x39
 8021580:	d1d8      	bne.n	8021534 <_dtoa_r+0xa3c>
 8021582:	9a02      	ldr	r2, [sp, #8]
 8021584:	2339      	movs	r3, #57	; 0x39
 8021586:	7013      	strb	r3, [r2, #0]
 8021588:	462b      	mov	r3, r5
 802158a:	461d      	mov	r5, r3
 802158c:	3b01      	subs	r3, #1
 802158e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021592:	2a39      	cmp	r2, #57	; 0x39
 8021594:	d050      	beq.n	8021638 <_dtoa_r+0xb40>
 8021596:	3201      	adds	r2, #1
 8021598:	701a      	strb	r2, [r3, #0]
 802159a:	e746      	b.n	802142a <_dtoa_r+0x932>
 802159c:	2a00      	cmp	r2, #0
 802159e:	dd03      	ble.n	80215a8 <_dtoa_r+0xab0>
 80215a0:	2b39      	cmp	r3, #57	; 0x39
 80215a2:	d0ee      	beq.n	8021582 <_dtoa_r+0xa8a>
 80215a4:	3301      	adds	r3, #1
 80215a6:	e7c7      	b.n	8021538 <_dtoa_r+0xa40>
 80215a8:	9a01      	ldr	r2, [sp, #4]
 80215aa:	9907      	ldr	r1, [sp, #28]
 80215ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 80215b0:	428a      	cmp	r2, r1
 80215b2:	d02a      	beq.n	802160a <_dtoa_r+0xb12>
 80215b4:	4659      	mov	r1, fp
 80215b6:	2300      	movs	r3, #0
 80215b8:	220a      	movs	r2, #10
 80215ba:	4620      	mov	r0, r4
 80215bc:	f000 fb7e 	bl	8021cbc <__multadd>
 80215c0:	45b8      	cmp	r8, r7
 80215c2:	4683      	mov	fp, r0
 80215c4:	f04f 0300 	mov.w	r3, #0
 80215c8:	f04f 020a 	mov.w	r2, #10
 80215cc:	4641      	mov	r1, r8
 80215ce:	4620      	mov	r0, r4
 80215d0:	d107      	bne.n	80215e2 <_dtoa_r+0xaea>
 80215d2:	f000 fb73 	bl	8021cbc <__multadd>
 80215d6:	4680      	mov	r8, r0
 80215d8:	4607      	mov	r7, r0
 80215da:	9b01      	ldr	r3, [sp, #4]
 80215dc:	3301      	adds	r3, #1
 80215de:	9301      	str	r3, [sp, #4]
 80215e0:	e775      	b.n	80214ce <_dtoa_r+0x9d6>
 80215e2:	f000 fb6b 	bl	8021cbc <__multadd>
 80215e6:	4639      	mov	r1, r7
 80215e8:	4680      	mov	r8, r0
 80215ea:	2300      	movs	r3, #0
 80215ec:	220a      	movs	r2, #10
 80215ee:	4620      	mov	r0, r4
 80215f0:	f000 fb64 	bl	8021cbc <__multadd>
 80215f4:	4607      	mov	r7, r0
 80215f6:	e7f0      	b.n	80215da <_dtoa_r+0xae2>
 80215f8:	f1b9 0f00 	cmp.w	r9, #0
 80215fc:	9a00      	ldr	r2, [sp, #0]
 80215fe:	bfcc      	ite	gt
 8021600:	464d      	movgt	r5, r9
 8021602:	2501      	movle	r5, #1
 8021604:	4415      	add	r5, r2
 8021606:	f04f 0800 	mov.w	r8, #0
 802160a:	4659      	mov	r1, fp
 802160c:	2201      	movs	r2, #1
 802160e:	4620      	mov	r0, r4
 8021610:	9301      	str	r3, [sp, #4]
 8021612:	f000 fce9 	bl	8021fe8 <__lshift>
 8021616:	4631      	mov	r1, r6
 8021618:	4683      	mov	fp, r0
 802161a:	f000 fd51 	bl	80220c0 <__mcmp>
 802161e:	2800      	cmp	r0, #0
 8021620:	dcb2      	bgt.n	8021588 <_dtoa_r+0xa90>
 8021622:	d102      	bne.n	802162a <_dtoa_r+0xb32>
 8021624:	9b01      	ldr	r3, [sp, #4]
 8021626:	07db      	lsls	r3, r3, #31
 8021628:	d4ae      	bmi.n	8021588 <_dtoa_r+0xa90>
 802162a:	462b      	mov	r3, r5
 802162c:	461d      	mov	r5, r3
 802162e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021632:	2a30      	cmp	r2, #48	; 0x30
 8021634:	d0fa      	beq.n	802162c <_dtoa_r+0xb34>
 8021636:	e6f8      	b.n	802142a <_dtoa_r+0x932>
 8021638:	9a00      	ldr	r2, [sp, #0]
 802163a:	429a      	cmp	r2, r3
 802163c:	d1a5      	bne.n	802158a <_dtoa_r+0xa92>
 802163e:	f10a 0a01 	add.w	sl, sl, #1
 8021642:	2331      	movs	r3, #49	; 0x31
 8021644:	e779      	b.n	802153a <_dtoa_r+0xa42>
 8021646:	4b14      	ldr	r3, [pc, #80]	; (8021698 <_dtoa_r+0xba0>)
 8021648:	f7ff bab1 	b.w	8020bae <_dtoa_r+0xb6>
 802164c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802164e:	2b00      	cmp	r3, #0
 8021650:	f47f aa93 	bne.w	8020b7a <_dtoa_r+0x82>
 8021654:	4b11      	ldr	r3, [pc, #68]	; (802169c <_dtoa_r+0xba4>)
 8021656:	f7ff baaa 	b.w	8020bae <_dtoa_r+0xb6>
 802165a:	f1b9 0f00 	cmp.w	r9, #0
 802165e:	dc03      	bgt.n	8021668 <_dtoa_r+0xb70>
 8021660:	9b05      	ldr	r3, [sp, #20]
 8021662:	2b02      	cmp	r3, #2
 8021664:	f73f aeca 	bgt.w	80213fc <_dtoa_r+0x904>
 8021668:	9d00      	ldr	r5, [sp, #0]
 802166a:	4631      	mov	r1, r6
 802166c:	4658      	mov	r0, fp
 802166e:	f7ff f9b5 	bl	80209dc <quorem>
 8021672:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021676:	f805 3b01 	strb.w	r3, [r5], #1
 802167a:	9a00      	ldr	r2, [sp, #0]
 802167c:	1aaa      	subs	r2, r5, r2
 802167e:	4591      	cmp	r9, r2
 8021680:	ddba      	ble.n	80215f8 <_dtoa_r+0xb00>
 8021682:	4659      	mov	r1, fp
 8021684:	2300      	movs	r3, #0
 8021686:	220a      	movs	r2, #10
 8021688:	4620      	mov	r0, r4
 802168a:	f000 fb17 	bl	8021cbc <__multadd>
 802168e:	4683      	mov	fp, r0
 8021690:	e7eb      	b.n	802166a <_dtoa_r+0xb72>
 8021692:	bf00      	nop
 8021694:	08040615 	.word	0x08040615
 8021698:	080405c6 	.word	0x080405c6
 802169c:	0804060c 	.word	0x0804060c

080216a0 <__errno>:
 80216a0:	4b01      	ldr	r3, [pc, #4]	; (80216a8 <__errno+0x8>)
 80216a2:	6818      	ldr	r0, [r3, #0]
 80216a4:	4770      	bx	lr
 80216a6:	bf00      	nop
 80216a8:	20000044 	.word	0x20000044

080216ac <__sflush_r>:
 80216ac:	898b      	ldrh	r3, [r1, #12]
 80216ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80216b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216b6:	4605      	mov	r5, r0
 80216b8:	0718      	lsls	r0, r3, #28
 80216ba:	460c      	mov	r4, r1
 80216bc:	d45f      	bmi.n	802177e <__sflush_r+0xd2>
 80216be:	684b      	ldr	r3, [r1, #4]
 80216c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	818a      	strh	r2, [r1, #12]
 80216c8:	dc05      	bgt.n	80216d6 <__sflush_r+0x2a>
 80216ca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	dc02      	bgt.n	80216d6 <__sflush_r+0x2a>
 80216d0:	2000      	movs	r0, #0
 80216d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80216d8:	2e00      	cmp	r6, #0
 80216da:	d0f9      	beq.n	80216d0 <__sflush_r+0x24>
 80216dc:	2300      	movs	r3, #0
 80216de:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80216e2:	682f      	ldr	r7, [r5, #0]
 80216e4:	602b      	str	r3, [r5, #0]
 80216e6:	d036      	beq.n	8021756 <__sflush_r+0xaa>
 80216e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80216ea:	89a3      	ldrh	r3, [r4, #12]
 80216ec:	075a      	lsls	r2, r3, #29
 80216ee:	d505      	bpl.n	80216fc <__sflush_r+0x50>
 80216f0:	6863      	ldr	r3, [r4, #4]
 80216f2:	1ac0      	subs	r0, r0, r3
 80216f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80216f6:	b10b      	cbz	r3, 80216fc <__sflush_r+0x50>
 80216f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80216fa:	1ac0      	subs	r0, r0, r3
 80216fc:	2300      	movs	r3, #0
 80216fe:	4602      	mov	r2, r0
 8021700:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021702:	69e1      	ldr	r1, [r4, #28]
 8021704:	4628      	mov	r0, r5
 8021706:	47b0      	blx	r6
 8021708:	1c43      	adds	r3, r0, #1
 802170a:	89a3      	ldrh	r3, [r4, #12]
 802170c:	d106      	bne.n	802171c <__sflush_r+0x70>
 802170e:	6829      	ldr	r1, [r5, #0]
 8021710:	291d      	cmp	r1, #29
 8021712:	d830      	bhi.n	8021776 <__sflush_r+0xca>
 8021714:	4a2b      	ldr	r2, [pc, #172]	; (80217c4 <__sflush_r+0x118>)
 8021716:	40ca      	lsrs	r2, r1
 8021718:	07d6      	lsls	r6, r2, #31
 802171a:	d52c      	bpl.n	8021776 <__sflush_r+0xca>
 802171c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021720:	b21b      	sxth	r3, r3
 8021722:	2200      	movs	r2, #0
 8021724:	6062      	str	r2, [r4, #4]
 8021726:	04d9      	lsls	r1, r3, #19
 8021728:	6922      	ldr	r2, [r4, #16]
 802172a:	81a3      	strh	r3, [r4, #12]
 802172c:	6022      	str	r2, [r4, #0]
 802172e:	d504      	bpl.n	802173a <__sflush_r+0x8e>
 8021730:	1c42      	adds	r2, r0, #1
 8021732:	d101      	bne.n	8021738 <__sflush_r+0x8c>
 8021734:	682b      	ldr	r3, [r5, #0]
 8021736:	b903      	cbnz	r3, 802173a <__sflush_r+0x8e>
 8021738:	6520      	str	r0, [r4, #80]	; 0x50
 802173a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802173c:	602f      	str	r7, [r5, #0]
 802173e:	2900      	cmp	r1, #0
 8021740:	d0c6      	beq.n	80216d0 <__sflush_r+0x24>
 8021742:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021746:	4299      	cmp	r1, r3
 8021748:	d002      	beq.n	8021750 <__sflush_r+0xa4>
 802174a:	4628      	mov	r0, r5
 802174c:	f000 f938 	bl	80219c0 <_free_r>
 8021750:	2000      	movs	r0, #0
 8021752:	6320      	str	r0, [r4, #48]	; 0x30
 8021754:	e7bd      	b.n	80216d2 <__sflush_r+0x26>
 8021756:	69e1      	ldr	r1, [r4, #28]
 8021758:	2301      	movs	r3, #1
 802175a:	4628      	mov	r0, r5
 802175c:	47b0      	blx	r6
 802175e:	1c41      	adds	r1, r0, #1
 8021760:	d1c3      	bne.n	80216ea <__sflush_r+0x3e>
 8021762:	682b      	ldr	r3, [r5, #0]
 8021764:	2b00      	cmp	r3, #0
 8021766:	d0c0      	beq.n	80216ea <__sflush_r+0x3e>
 8021768:	2b1d      	cmp	r3, #29
 802176a:	d001      	beq.n	8021770 <__sflush_r+0xc4>
 802176c:	2b16      	cmp	r3, #22
 802176e:	d101      	bne.n	8021774 <__sflush_r+0xc8>
 8021770:	602f      	str	r7, [r5, #0]
 8021772:	e7ad      	b.n	80216d0 <__sflush_r+0x24>
 8021774:	89a3      	ldrh	r3, [r4, #12]
 8021776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802177a:	81a3      	strh	r3, [r4, #12]
 802177c:	e7a9      	b.n	80216d2 <__sflush_r+0x26>
 802177e:	690f      	ldr	r7, [r1, #16]
 8021780:	2f00      	cmp	r7, #0
 8021782:	d0a5      	beq.n	80216d0 <__sflush_r+0x24>
 8021784:	079b      	lsls	r3, r3, #30
 8021786:	680e      	ldr	r6, [r1, #0]
 8021788:	bf08      	it	eq
 802178a:	694b      	ldreq	r3, [r1, #20]
 802178c:	600f      	str	r7, [r1, #0]
 802178e:	bf18      	it	ne
 8021790:	2300      	movne	r3, #0
 8021792:	eba6 0807 	sub.w	r8, r6, r7
 8021796:	608b      	str	r3, [r1, #8]
 8021798:	f1b8 0f00 	cmp.w	r8, #0
 802179c:	dd98      	ble.n	80216d0 <__sflush_r+0x24>
 802179e:	69e1      	ldr	r1, [r4, #28]
 80217a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80217a2:	4643      	mov	r3, r8
 80217a4:	463a      	mov	r2, r7
 80217a6:	4628      	mov	r0, r5
 80217a8:	47b0      	blx	r6
 80217aa:	2800      	cmp	r0, #0
 80217ac:	dc06      	bgt.n	80217bc <__sflush_r+0x110>
 80217ae:	89a3      	ldrh	r3, [r4, #12]
 80217b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217b4:	81a3      	strh	r3, [r4, #12]
 80217b6:	f04f 30ff 	mov.w	r0, #4294967295
 80217ba:	e78a      	b.n	80216d2 <__sflush_r+0x26>
 80217bc:	4407      	add	r7, r0
 80217be:	eba8 0800 	sub.w	r8, r8, r0
 80217c2:	e7e9      	b.n	8021798 <__sflush_r+0xec>
 80217c4:	20400001 	.word	0x20400001

080217c8 <_fflush_r>:
 80217c8:	b538      	push	{r3, r4, r5, lr}
 80217ca:	460c      	mov	r4, r1
 80217cc:	4605      	mov	r5, r0
 80217ce:	b118      	cbz	r0, 80217d8 <_fflush_r+0x10>
 80217d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80217d2:	b90b      	cbnz	r3, 80217d8 <_fflush_r+0x10>
 80217d4:	f000 f864 	bl	80218a0 <__sinit>
 80217d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217dc:	b1bb      	cbz	r3, 802180e <_fflush_r+0x46>
 80217de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80217e0:	07d0      	lsls	r0, r2, #31
 80217e2:	d404      	bmi.n	80217ee <_fflush_r+0x26>
 80217e4:	0599      	lsls	r1, r3, #22
 80217e6:	d402      	bmi.n	80217ee <_fflush_r+0x26>
 80217e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80217ea:	f7fb fde7 	bl	801d3bc <__retarget_lock_acquire_recursive>
 80217ee:	4628      	mov	r0, r5
 80217f0:	4621      	mov	r1, r4
 80217f2:	f7ff ff5b 	bl	80216ac <__sflush_r>
 80217f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80217f8:	07da      	lsls	r2, r3, #31
 80217fa:	4605      	mov	r5, r0
 80217fc:	d405      	bmi.n	802180a <_fflush_r+0x42>
 80217fe:	89a3      	ldrh	r3, [r4, #12]
 8021800:	059b      	lsls	r3, r3, #22
 8021802:	d402      	bmi.n	802180a <_fflush_r+0x42>
 8021804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021806:	f7fb fdda 	bl	801d3be <__retarget_lock_release_recursive>
 802180a:	4628      	mov	r0, r5
 802180c:	bd38      	pop	{r3, r4, r5, pc}
 802180e:	461d      	mov	r5, r3
 8021810:	e7fb      	b.n	802180a <_fflush_r+0x42>
	...

08021814 <std>:
 8021814:	2300      	movs	r3, #0
 8021816:	b510      	push	{r4, lr}
 8021818:	4604      	mov	r4, r0
 802181a:	e9c0 3300 	strd	r3, r3, [r0]
 802181e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021822:	6083      	str	r3, [r0, #8]
 8021824:	8181      	strh	r1, [r0, #12]
 8021826:	6643      	str	r3, [r0, #100]	; 0x64
 8021828:	81c2      	strh	r2, [r0, #14]
 802182a:	6183      	str	r3, [r0, #24]
 802182c:	4619      	mov	r1, r3
 802182e:	2208      	movs	r2, #8
 8021830:	305c      	adds	r0, #92	; 0x5c
 8021832:	f7fc f84d 	bl	801d8d0 <memset>
 8021836:	4b07      	ldr	r3, [pc, #28]	; (8021854 <std+0x40>)
 8021838:	6223      	str	r3, [r4, #32]
 802183a:	4b07      	ldr	r3, [pc, #28]	; (8021858 <std+0x44>)
 802183c:	6263      	str	r3, [r4, #36]	; 0x24
 802183e:	4b07      	ldr	r3, [pc, #28]	; (802185c <std+0x48>)
 8021840:	62a3      	str	r3, [r4, #40]	; 0x28
 8021842:	4b07      	ldr	r3, [pc, #28]	; (8021860 <std+0x4c>)
 8021844:	61e4      	str	r4, [r4, #28]
 8021846:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802184c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021850:	f7fb bdb2 	b.w	801d3b8 <__retarget_lock_init_recursive>
 8021854:	08022331 	.word	0x08022331
 8021858:	08022353 	.word	0x08022353
 802185c:	0802238b 	.word	0x0802238b
 8021860:	080223af 	.word	0x080223af

08021864 <_cleanup_r>:
 8021864:	4901      	ldr	r1, [pc, #4]	; (802186c <_cleanup_r+0x8>)
 8021866:	f000 b96b 	b.w	8021b40 <_fwalk_reent>
 802186a:	bf00      	nop
 802186c:	08022ffd 	.word	0x08022ffd

08021870 <__sfp_lock_acquire>:
 8021870:	4801      	ldr	r0, [pc, #4]	; (8021878 <__sfp_lock_acquire+0x8>)
 8021872:	f7fb bda3 	b.w	801d3bc <__retarget_lock_acquire_recursive>
 8021876:	bf00      	nop
 8021878:	2000aa6c 	.word	0x2000aa6c

0802187c <__sfp_lock_release>:
 802187c:	4801      	ldr	r0, [pc, #4]	; (8021884 <__sfp_lock_release+0x8>)
 802187e:	f7fb bd9e 	b.w	801d3be <__retarget_lock_release_recursive>
 8021882:	bf00      	nop
 8021884:	2000aa6c 	.word	0x2000aa6c

08021888 <__sinit_lock_acquire>:
 8021888:	4801      	ldr	r0, [pc, #4]	; (8021890 <__sinit_lock_acquire+0x8>)
 802188a:	f7fb bd97 	b.w	801d3bc <__retarget_lock_acquire_recursive>
 802188e:	bf00      	nop
 8021890:	2000aa67 	.word	0x2000aa67

08021894 <__sinit_lock_release>:
 8021894:	4801      	ldr	r0, [pc, #4]	; (802189c <__sinit_lock_release+0x8>)
 8021896:	f7fb bd92 	b.w	801d3be <__retarget_lock_release_recursive>
 802189a:	bf00      	nop
 802189c:	2000aa67 	.word	0x2000aa67

080218a0 <__sinit>:
 80218a0:	b510      	push	{r4, lr}
 80218a2:	4604      	mov	r4, r0
 80218a4:	f7ff fff0 	bl	8021888 <__sinit_lock_acquire>
 80218a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80218aa:	b11a      	cbz	r2, 80218b4 <__sinit+0x14>
 80218ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218b0:	f7ff bff0 	b.w	8021894 <__sinit_lock_release>
 80218b4:	4b0d      	ldr	r3, [pc, #52]	; (80218ec <__sinit+0x4c>)
 80218b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80218b8:	2303      	movs	r3, #3
 80218ba:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80218be:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80218c2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80218c6:	6860      	ldr	r0, [r4, #4]
 80218c8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80218cc:	2104      	movs	r1, #4
 80218ce:	f7ff ffa1 	bl	8021814 <std>
 80218d2:	68a0      	ldr	r0, [r4, #8]
 80218d4:	2201      	movs	r2, #1
 80218d6:	2109      	movs	r1, #9
 80218d8:	f7ff ff9c 	bl	8021814 <std>
 80218dc:	68e0      	ldr	r0, [r4, #12]
 80218de:	2202      	movs	r2, #2
 80218e0:	2112      	movs	r1, #18
 80218e2:	f7ff ff97 	bl	8021814 <std>
 80218e6:	2301      	movs	r3, #1
 80218e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80218ea:	e7df      	b.n	80218ac <__sinit+0xc>
 80218ec:	08021865 	.word	0x08021865

080218f0 <__libc_fini_array>:
 80218f0:	b538      	push	{r3, r4, r5, lr}
 80218f2:	4d07      	ldr	r5, [pc, #28]	; (8021910 <__libc_fini_array+0x20>)
 80218f4:	4c07      	ldr	r4, [pc, #28]	; (8021914 <__libc_fini_array+0x24>)
 80218f6:	1b64      	subs	r4, r4, r5
 80218f8:	10a4      	asrs	r4, r4, #2
 80218fa:	b91c      	cbnz	r4, 8021904 <__libc_fini_array+0x14>
 80218fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021900:	f001 bd70 	b.w	80233e4 <_fini>
 8021904:	3c01      	subs	r4, #1
 8021906:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802190a:	4798      	blx	r3
 802190c:	e7f5      	b.n	80218fa <__libc_fini_array+0xa>
 802190e:	bf00      	nop
 8021910:	0804085c 	.word	0x0804085c
 8021914:	08040860 	.word	0x08040860

08021918 <_malloc_trim_r>:
 8021918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802191c:	4606      	mov	r6, r0
 802191e:	2008      	movs	r0, #8
 8021920:	460c      	mov	r4, r1
 8021922:	f7fd fd6d 	bl	801f400 <sysconf>
 8021926:	4f23      	ldr	r7, [pc, #140]	; (80219b4 <_malloc_trim_r+0x9c>)
 8021928:	4680      	mov	r8, r0
 802192a:	4630      	mov	r0, r6
 802192c:	f7fb ffd8 	bl	801d8e0 <__malloc_lock>
 8021930:	68bb      	ldr	r3, [r7, #8]
 8021932:	685d      	ldr	r5, [r3, #4]
 8021934:	f025 0503 	bic.w	r5, r5, #3
 8021938:	1b2c      	subs	r4, r5, r4
 802193a:	3c11      	subs	r4, #17
 802193c:	4444      	add	r4, r8
 802193e:	fbb4 f4f8 	udiv	r4, r4, r8
 8021942:	3c01      	subs	r4, #1
 8021944:	fb08 f404 	mul.w	r4, r8, r4
 8021948:	45a0      	cmp	r8, r4
 802194a:	dd05      	ble.n	8021958 <_malloc_trim_r+0x40>
 802194c:	4630      	mov	r0, r6
 802194e:	f7fb ffcd 	bl	801d8ec <__malloc_unlock>
 8021952:	2000      	movs	r0, #0
 8021954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021958:	2100      	movs	r1, #0
 802195a:	4630      	mov	r0, r6
 802195c:	f7fc f972 	bl	801dc44 <_sbrk_r>
 8021960:	68bb      	ldr	r3, [r7, #8]
 8021962:	442b      	add	r3, r5
 8021964:	4298      	cmp	r0, r3
 8021966:	d1f1      	bne.n	802194c <_malloc_trim_r+0x34>
 8021968:	4261      	negs	r1, r4
 802196a:	4630      	mov	r0, r6
 802196c:	f7fc f96a 	bl	801dc44 <_sbrk_r>
 8021970:	3001      	adds	r0, #1
 8021972:	d110      	bne.n	8021996 <_malloc_trim_r+0x7e>
 8021974:	2100      	movs	r1, #0
 8021976:	4630      	mov	r0, r6
 8021978:	f7fc f964 	bl	801dc44 <_sbrk_r>
 802197c:	68ba      	ldr	r2, [r7, #8]
 802197e:	1a83      	subs	r3, r0, r2
 8021980:	2b0f      	cmp	r3, #15
 8021982:	dde3      	ble.n	802194c <_malloc_trim_r+0x34>
 8021984:	490c      	ldr	r1, [pc, #48]	; (80219b8 <_malloc_trim_r+0xa0>)
 8021986:	6809      	ldr	r1, [r1, #0]
 8021988:	1a40      	subs	r0, r0, r1
 802198a:	490c      	ldr	r1, [pc, #48]	; (80219bc <_malloc_trim_r+0xa4>)
 802198c:	f043 0301 	orr.w	r3, r3, #1
 8021990:	6008      	str	r0, [r1, #0]
 8021992:	6053      	str	r3, [r2, #4]
 8021994:	e7da      	b.n	802194c <_malloc_trim_r+0x34>
 8021996:	68bb      	ldr	r3, [r7, #8]
 8021998:	4a08      	ldr	r2, [pc, #32]	; (80219bc <_malloc_trim_r+0xa4>)
 802199a:	1b2d      	subs	r5, r5, r4
 802199c:	f045 0501 	orr.w	r5, r5, #1
 80219a0:	605d      	str	r5, [r3, #4]
 80219a2:	6813      	ldr	r3, [r2, #0]
 80219a4:	4630      	mov	r0, r6
 80219a6:	1b1c      	subs	r4, r3, r4
 80219a8:	6014      	str	r4, [r2, #0]
 80219aa:	f7fb ff9f 	bl	801d8ec <__malloc_unlock>
 80219ae:	2001      	movs	r0, #1
 80219b0:	e7d0      	b.n	8021954 <_malloc_trim_r+0x3c>
 80219b2:	bf00      	nop
 80219b4:	20000470 	.word	0x20000470
 80219b8:	20000878 	.word	0x20000878
 80219bc:	20004300 	.word	0x20004300

080219c0 <_free_r>:
 80219c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219c2:	4605      	mov	r5, r0
 80219c4:	460f      	mov	r7, r1
 80219c6:	2900      	cmp	r1, #0
 80219c8:	f000 80b1 	beq.w	8021b2e <_free_r+0x16e>
 80219cc:	f7fb ff88 	bl	801d8e0 <__malloc_lock>
 80219d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80219d4:	4856      	ldr	r0, [pc, #344]	; (8021b30 <_free_r+0x170>)
 80219d6:	f022 0401 	bic.w	r4, r2, #1
 80219da:	f1a7 0308 	sub.w	r3, r7, #8
 80219de:	eb03 0c04 	add.w	ip, r3, r4
 80219e2:	6881      	ldr	r1, [r0, #8]
 80219e4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80219e8:	4561      	cmp	r1, ip
 80219ea:	f026 0603 	bic.w	r6, r6, #3
 80219ee:	f002 0201 	and.w	r2, r2, #1
 80219f2:	d11b      	bne.n	8021a2c <_free_r+0x6c>
 80219f4:	4434      	add	r4, r6
 80219f6:	b93a      	cbnz	r2, 8021a08 <_free_r+0x48>
 80219f8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80219fc:	1a9b      	subs	r3, r3, r2
 80219fe:	4414      	add	r4, r2
 8021a00:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8021a04:	60ca      	str	r2, [r1, #12]
 8021a06:	6091      	str	r1, [r2, #8]
 8021a08:	f044 0201 	orr.w	r2, r4, #1
 8021a0c:	605a      	str	r2, [r3, #4]
 8021a0e:	6083      	str	r3, [r0, #8]
 8021a10:	4b48      	ldr	r3, [pc, #288]	; (8021b34 <_free_r+0x174>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	42a3      	cmp	r3, r4
 8021a16:	d804      	bhi.n	8021a22 <_free_r+0x62>
 8021a18:	4b47      	ldr	r3, [pc, #284]	; (8021b38 <_free_r+0x178>)
 8021a1a:	4628      	mov	r0, r5
 8021a1c:	6819      	ldr	r1, [r3, #0]
 8021a1e:	f7ff ff7b 	bl	8021918 <_malloc_trim_r>
 8021a22:	4628      	mov	r0, r5
 8021a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021a28:	f7fb bf60 	b.w	801d8ec <__malloc_unlock>
 8021a2c:	f8cc 6004 	str.w	r6, [ip, #4]
 8021a30:	2a00      	cmp	r2, #0
 8021a32:	d138      	bne.n	8021aa6 <_free_r+0xe6>
 8021a34:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8021a38:	1a5b      	subs	r3, r3, r1
 8021a3a:	440c      	add	r4, r1
 8021a3c:	6899      	ldr	r1, [r3, #8]
 8021a3e:	f100 0708 	add.w	r7, r0, #8
 8021a42:	42b9      	cmp	r1, r7
 8021a44:	d031      	beq.n	8021aaa <_free_r+0xea>
 8021a46:	68df      	ldr	r7, [r3, #12]
 8021a48:	60cf      	str	r7, [r1, #12]
 8021a4a:	60b9      	str	r1, [r7, #8]
 8021a4c:	eb0c 0106 	add.w	r1, ip, r6
 8021a50:	6849      	ldr	r1, [r1, #4]
 8021a52:	07c9      	lsls	r1, r1, #31
 8021a54:	d40b      	bmi.n	8021a6e <_free_r+0xae>
 8021a56:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8021a5a:	4434      	add	r4, r6
 8021a5c:	bb3a      	cbnz	r2, 8021aae <_free_r+0xee>
 8021a5e:	4e37      	ldr	r6, [pc, #220]	; (8021b3c <_free_r+0x17c>)
 8021a60:	42b1      	cmp	r1, r6
 8021a62:	d124      	bne.n	8021aae <_free_r+0xee>
 8021a64:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021a68:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8021a6c:	2201      	movs	r2, #1
 8021a6e:	f044 0101 	orr.w	r1, r4, #1
 8021a72:	6059      	str	r1, [r3, #4]
 8021a74:	511c      	str	r4, [r3, r4]
 8021a76:	2a00      	cmp	r2, #0
 8021a78:	d1d3      	bne.n	8021a22 <_free_r+0x62>
 8021a7a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8021a7e:	d21b      	bcs.n	8021ab8 <_free_r+0xf8>
 8021a80:	0961      	lsrs	r1, r4, #5
 8021a82:	08e2      	lsrs	r2, r4, #3
 8021a84:	2401      	movs	r4, #1
 8021a86:	408c      	lsls	r4, r1
 8021a88:	6841      	ldr	r1, [r0, #4]
 8021a8a:	3201      	adds	r2, #1
 8021a8c:	430c      	orrs	r4, r1
 8021a8e:	6044      	str	r4, [r0, #4]
 8021a90:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8021a94:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8021a98:	3908      	subs	r1, #8
 8021a9a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8021a9e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8021aa2:	60e3      	str	r3, [r4, #12]
 8021aa4:	e7bd      	b.n	8021a22 <_free_r+0x62>
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	e7d0      	b.n	8021a4c <_free_r+0x8c>
 8021aaa:	2201      	movs	r2, #1
 8021aac:	e7ce      	b.n	8021a4c <_free_r+0x8c>
 8021aae:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8021ab2:	60ce      	str	r6, [r1, #12]
 8021ab4:	60b1      	str	r1, [r6, #8]
 8021ab6:	e7da      	b.n	8021a6e <_free_r+0xae>
 8021ab8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8021abc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8021ac0:	d214      	bcs.n	8021aec <_free_r+0x12c>
 8021ac2:	09a2      	lsrs	r2, r4, #6
 8021ac4:	3238      	adds	r2, #56	; 0x38
 8021ac6:	1c51      	adds	r1, r2, #1
 8021ac8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8021acc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8021ad0:	428e      	cmp	r6, r1
 8021ad2:	d125      	bne.n	8021b20 <_free_r+0x160>
 8021ad4:	2401      	movs	r4, #1
 8021ad6:	1092      	asrs	r2, r2, #2
 8021ad8:	fa04 f202 	lsl.w	r2, r4, r2
 8021adc:	6844      	ldr	r4, [r0, #4]
 8021ade:	4322      	orrs	r2, r4
 8021ae0:	6042      	str	r2, [r0, #4]
 8021ae2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8021ae6:	60b3      	str	r3, [r6, #8]
 8021ae8:	60cb      	str	r3, [r1, #12]
 8021aea:	e79a      	b.n	8021a22 <_free_r+0x62>
 8021aec:	2a14      	cmp	r2, #20
 8021aee:	d801      	bhi.n	8021af4 <_free_r+0x134>
 8021af0:	325b      	adds	r2, #91	; 0x5b
 8021af2:	e7e8      	b.n	8021ac6 <_free_r+0x106>
 8021af4:	2a54      	cmp	r2, #84	; 0x54
 8021af6:	d802      	bhi.n	8021afe <_free_r+0x13e>
 8021af8:	0b22      	lsrs	r2, r4, #12
 8021afa:	326e      	adds	r2, #110	; 0x6e
 8021afc:	e7e3      	b.n	8021ac6 <_free_r+0x106>
 8021afe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8021b02:	d802      	bhi.n	8021b0a <_free_r+0x14a>
 8021b04:	0be2      	lsrs	r2, r4, #15
 8021b06:	3277      	adds	r2, #119	; 0x77
 8021b08:	e7dd      	b.n	8021ac6 <_free_r+0x106>
 8021b0a:	f240 5154 	movw	r1, #1364	; 0x554
 8021b0e:	428a      	cmp	r2, r1
 8021b10:	bf9a      	itte	ls
 8021b12:	0ca2      	lsrls	r2, r4, #18
 8021b14:	327c      	addls	r2, #124	; 0x7c
 8021b16:	227e      	movhi	r2, #126	; 0x7e
 8021b18:	e7d5      	b.n	8021ac6 <_free_r+0x106>
 8021b1a:	6889      	ldr	r1, [r1, #8]
 8021b1c:	428e      	cmp	r6, r1
 8021b1e:	d004      	beq.n	8021b2a <_free_r+0x16a>
 8021b20:	684a      	ldr	r2, [r1, #4]
 8021b22:	f022 0203 	bic.w	r2, r2, #3
 8021b26:	42a2      	cmp	r2, r4
 8021b28:	d8f7      	bhi.n	8021b1a <_free_r+0x15a>
 8021b2a:	68ce      	ldr	r6, [r1, #12]
 8021b2c:	e7d9      	b.n	8021ae2 <_free_r+0x122>
 8021b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b30:	20000470 	.word	0x20000470
 8021b34:	2000087c 	.word	0x2000087c
 8021b38:	20004330 	.word	0x20004330
 8021b3c:	20000478 	.word	0x20000478

08021b40 <_fwalk_reent>:
 8021b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b44:	4606      	mov	r6, r0
 8021b46:	4688      	mov	r8, r1
 8021b48:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8021b4c:	2700      	movs	r7, #0
 8021b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021b52:	f1b9 0901 	subs.w	r9, r9, #1
 8021b56:	d505      	bpl.n	8021b64 <_fwalk_reent+0x24>
 8021b58:	6824      	ldr	r4, [r4, #0]
 8021b5a:	2c00      	cmp	r4, #0
 8021b5c:	d1f7      	bne.n	8021b4e <_fwalk_reent+0xe>
 8021b5e:	4638      	mov	r0, r7
 8021b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b64:	89ab      	ldrh	r3, [r5, #12]
 8021b66:	2b01      	cmp	r3, #1
 8021b68:	d907      	bls.n	8021b7a <_fwalk_reent+0x3a>
 8021b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021b6e:	3301      	adds	r3, #1
 8021b70:	d003      	beq.n	8021b7a <_fwalk_reent+0x3a>
 8021b72:	4629      	mov	r1, r5
 8021b74:	4630      	mov	r0, r6
 8021b76:	47c0      	blx	r8
 8021b78:	4307      	orrs	r7, r0
 8021b7a:	3568      	adds	r5, #104	; 0x68
 8021b7c:	e7e9      	b.n	8021b52 <_fwalk_reent+0x12>
	...

08021b80 <_localeconv_r>:
 8021b80:	4800      	ldr	r0, [pc, #0]	; (8021b84 <_localeconv_r+0x4>)
 8021b82:	4770      	bx	lr
 8021b84:	20000974 	.word	0x20000974

08021b88 <__swhatbuf_r>:
 8021b88:	b570      	push	{r4, r5, r6, lr}
 8021b8a:	460e      	mov	r6, r1
 8021b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b90:	2900      	cmp	r1, #0
 8021b92:	b096      	sub	sp, #88	; 0x58
 8021b94:	4614      	mov	r4, r2
 8021b96:	461d      	mov	r5, r3
 8021b98:	da09      	bge.n	8021bae <__swhatbuf_r+0x26>
 8021b9a:	89b3      	ldrh	r3, [r6, #12]
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021ba2:	602a      	str	r2, [r5, #0]
 8021ba4:	d116      	bne.n	8021bd4 <__swhatbuf_r+0x4c>
 8021ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021baa:	6023      	str	r3, [r4, #0]
 8021bac:	e015      	b.n	8021bda <__swhatbuf_r+0x52>
 8021bae:	466a      	mov	r2, sp
 8021bb0:	f001 fafa 	bl	80231a8 <_fstat_r>
 8021bb4:	2800      	cmp	r0, #0
 8021bb6:	dbf0      	blt.n	8021b9a <__swhatbuf_r+0x12>
 8021bb8:	9a01      	ldr	r2, [sp, #4]
 8021bba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021bbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021bc2:	425a      	negs	r2, r3
 8021bc4:	415a      	adcs	r2, r3
 8021bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021bca:	602a      	str	r2, [r5, #0]
 8021bcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8021bd0:	6023      	str	r3, [r4, #0]
 8021bd2:	e002      	b.n	8021bda <__swhatbuf_r+0x52>
 8021bd4:	2340      	movs	r3, #64	; 0x40
 8021bd6:	6023      	str	r3, [r4, #0]
 8021bd8:	4610      	mov	r0, r2
 8021bda:	b016      	add	sp, #88	; 0x58
 8021bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08021be0 <__smakebuf_r>:
 8021be0:	898b      	ldrh	r3, [r1, #12]
 8021be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021be4:	079d      	lsls	r5, r3, #30
 8021be6:	4606      	mov	r6, r0
 8021be8:	460c      	mov	r4, r1
 8021bea:	d507      	bpl.n	8021bfc <__smakebuf_r+0x1c>
 8021bec:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8021bf0:	6023      	str	r3, [r4, #0]
 8021bf2:	6123      	str	r3, [r4, #16]
 8021bf4:	2301      	movs	r3, #1
 8021bf6:	6163      	str	r3, [r4, #20]
 8021bf8:	b002      	add	sp, #8
 8021bfa:	bd70      	pop	{r4, r5, r6, pc}
 8021bfc:	ab01      	add	r3, sp, #4
 8021bfe:	466a      	mov	r2, sp
 8021c00:	f7ff ffc2 	bl	8021b88 <__swhatbuf_r>
 8021c04:	9900      	ldr	r1, [sp, #0]
 8021c06:	4605      	mov	r5, r0
 8021c08:	4630      	mov	r0, r6
 8021c0a:	f7fb fbe9 	bl	801d3e0 <_malloc_r>
 8021c0e:	b948      	cbnz	r0, 8021c24 <__smakebuf_r+0x44>
 8021c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c14:	059a      	lsls	r2, r3, #22
 8021c16:	d4ef      	bmi.n	8021bf8 <__smakebuf_r+0x18>
 8021c18:	f023 0303 	bic.w	r3, r3, #3
 8021c1c:	f043 0302 	orr.w	r3, r3, #2
 8021c20:	81a3      	strh	r3, [r4, #12]
 8021c22:	e7e3      	b.n	8021bec <__smakebuf_r+0xc>
 8021c24:	4b0d      	ldr	r3, [pc, #52]	; (8021c5c <__smakebuf_r+0x7c>)
 8021c26:	63f3      	str	r3, [r6, #60]	; 0x3c
 8021c28:	89a3      	ldrh	r3, [r4, #12]
 8021c2a:	6020      	str	r0, [r4, #0]
 8021c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c30:	81a3      	strh	r3, [r4, #12]
 8021c32:	9b00      	ldr	r3, [sp, #0]
 8021c34:	6163      	str	r3, [r4, #20]
 8021c36:	9b01      	ldr	r3, [sp, #4]
 8021c38:	6120      	str	r0, [r4, #16]
 8021c3a:	b15b      	cbz	r3, 8021c54 <__smakebuf_r+0x74>
 8021c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c40:	4630      	mov	r0, r6
 8021c42:	f001 fac3 	bl	80231cc <_isatty_r>
 8021c46:	b128      	cbz	r0, 8021c54 <__smakebuf_r+0x74>
 8021c48:	89a3      	ldrh	r3, [r4, #12]
 8021c4a:	f023 0303 	bic.w	r3, r3, #3
 8021c4e:	f043 0301 	orr.w	r3, r3, #1
 8021c52:	81a3      	strh	r3, [r4, #12]
 8021c54:	89a0      	ldrh	r0, [r4, #12]
 8021c56:	4305      	orrs	r5, r0
 8021c58:	81a5      	strh	r5, [r4, #12]
 8021c5a:	e7cd      	b.n	8021bf8 <__smakebuf_r+0x18>
 8021c5c:	08021865 	.word	0x08021865

08021c60 <_Balloc>:
 8021c60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8021c62:	b570      	push	{r4, r5, r6, lr}
 8021c64:	4605      	mov	r5, r0
 8021c66:	460c      	mov	r4, r1
 8021c68:	b17b      	cbz	r3, 8021c8a <_Balloc+0x2a>
 8021c6a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8021c6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8021c70:	b9a0      	cbnz	r0, 8021c9c <_Balloc+0x3c>
 8021c72:	2101      	movs	r1, #1
 8021c74:	fa01 f604 	lsl.w	r6, r1, r4
 8021c78:	1d72      	adds	r2, r6, #5
 8021c7a:	0092      	lsls	r2, r2, #2
 8021c7c:	4628      	mov	r0, r5
 8021c7e:	f001 f97f 	bl	8022f80 <_calloc_r>
 8021c82:	b148      	cbz	r0, 8021c98 <_Balloc+0x38>
 8021c84:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8021c88:	e00b      	b.n	8021ca2 <_Balloc+0x42>
 8021c8a:	2221      	movs	r2, #33	; 0x21
 8021c8c:	2104      	movs	r1, #4
 8021c8e:	f001 f977 	bl	8022f80 <_calloc_r>
 8021c92:	64e8      	str	r0, [r5, #76]	; 0x4c
 8021c94:	2800      	cmp	r0, #0
 8021c96:	d1e8      	bne.n	8021c6a <_Balloc+0xa>
 8021c98:	2000      	movs	r0, #0
 8021c9a:	bd70      	pop	{r4, r5, r6, pc}
 8021c9c:	6802      	ldr	r2, [r0, #0]
 8021c9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021ca8:	e7f7      	b.n	8021c9a <_Balloc+0x3a>

08021caa <_Bfree>:
 8021caa:	b131      	cbz	r1, 8021cba <_Bfree+0x10>
 8021cac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8021cae:	684a      	ldr	r2, [r1, #4]
 8021cb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021cb4:	6008      	str	r0, [r1, #0]
 8021cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8021cba:	4770      	bx	lr

08021cbc <__multadd>:
 8021cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cc0:	690e      	ldr	r6, [r1, #16]
 8021cc2:	4607      	mov	r7, r0
 8021cc4:	4698      	mov	r8, r3
 8021cc6:	460c      	mov	r4, r1
 8021cc8:	f101 0014 	add.w	r0, r1, #20
 8021ccc:	2300      	movs	r3, #0
 8021cce:	6805      	ldr	r5, [r0, #0]
 8021cd0:	b2a9      	uxth	r1, r5
 8021cd2:	fb02 8101 	mla	r1, r2, r1, r8
 8021cd6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8021cda:	0c2d      	lsrs	r5, r5, #16
 8021cdc:	fb02 c505 	mla	r5, r2, r5, ip
 8021ce0:	b289      	uxth	r1, r1
 8021ce2:	3301      	adds	r3, #1
 8021ce4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8021ce8:	429e      	cmp	r6, r3
 8021cea:	f840 1b04 	str.w	r1, [r0], #4
 8021cee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8021cf2:	dcec      	bgt.n	8021cce <__multadd+0x12>
 8021cf4:	f1b8 0f00 	cmp.w	r8, #0
 8021cf8:	d022      	beq.n	8021d40 <__multadd+0x84>
 8021cfa:	68a3      	ldr	r3, [r4, #8]
 8021cfc:	42b3      	cmp	r3, r6
 8021cfe:	dc19      	bgt.n	8021d34 <__multadd+0x78>
 8021d00:	6861      	ldr	r1, [r4, #4]
 8021d02:	4638      	mov	r0, r7
 8021d04:	3101      	adds	r1, #1
 8021d06:	f7ff ffab 	bl	8021c60 <_Balloc>
 8021d0a:	4605      	mov	r5, r0
 8021d0c:	b928      	cbnz	r0, 8021d1a <__multadd+0x5e>
 8021d0e:	4602      	mov	r2, r0
 8021d10:	4b0d      	ldr	r3, [pc, #52]	; (8021d48 <__multadd+0x8c>)
 8021d12:	480e      	ldr	r0, [pc, #56]	; (8021d4c <__multadd+0x90>)
 8021d14:	21b5      	movs	r1, #181	; 0xb5
 8021d16:	f001 f915 	bl	8022f44 <__assert_func>
 8021d1a:	6922      	ldr	r2, [r4, #16]
 8021d1c:	3202      	adds	r2, #2
 8021d1e:	f104 010c 	add.w	r1, r4, #12
 8021d22:	0092      	lsls	r2, r2, #2
 8021d24:	300c      	adds	r0, #12
 8021d26:	f7fb fdab 	bl	801d880 <memcpy>
 8021d2a:	4621      	mov	r1, r4
 8021d2c:	4638      	mov	r0, r7
 8021d2e:	f7ff ffbc 	bl	8021caa <_Bfree>
 8021d32:	462c      	mov	r4, r5
 8021d34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8021d38:	3601      	adds	r6, #1
 8021d3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8021d3e:	6126      	str	r6, [r4, #16]
 8021d40:	4620      	mov	r0, r4
 8021d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d46:	bf00      	nop
 8021d48:	08040615 	.word	0x08040615
 8021d4c:	08040685 	.word	0x08040685

08021d50 <__hi0bits>:
 8021d50:	0c03      	lsrs	r3, r0, #16
 8021d52:	041b      	lsls	r3, r3, #16
 8021d54:	b9d3      	cbnz	r3, 8021d8c <__hi0bits+0x3c>
 8021d56:	0400      	lsls	r0, r0, #16
 8021d58:	2310      	movs	r3, #16
 8021d5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021d5e:	bf04      	itt	eq
 8021d60:	0200      	lsleq	r0, r0, #8
 8021d62:	3308      	addeq	r3, #8
 8021d64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021d68:	bf04      	itt	eq
 8021d6a:	0100      	lsleq	r0, r0, #4
 8021d6c:	3304      	addeq	r3, #4
 8021d6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021d72:	bf04      	itt	eq
 8021d74:	0080      	lsleq	r0, r0, #2
 8021d76:	3302      	addeq	r3, #2
 8021d78:	2800      	cmp	r0, #0
 8021d7a:	db05      	blt.n	8021d88 <__hi0bits+0x38>
 8021d7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021d80:	f103 0301 	add.w	r3, r3, #1
 8021d84:	bf08      	it	eq
 8021d86:	2320      	moveq	r3, #32
 8021d88:	4618      	mov	r0, r3
 8021d8a:	4770      	bx	lr
 8021d8c:	2300      	movs	r3, #0
 8021d8e:	e7e4      	b.n	8021d5a <__hi0bits+0xa>

08021d90 <__lo0bits>:
 8021d90:	6803      	ldr	r3, [r0, #0]
 8021d92:	f013 0207 	ands.w	r2, r3, #7
 8021d96:	4601      	mov	r1, r0
 8021d98:	d00b      	beq.n	8021db2 <__lo0bits+0x22>
 8021d9a:	07da      	lsls	r2, r3, #31
 8021d9c:	d424      	bmi.n	8021de8 <__lo0bits+0x58>
 8021d9e:	0798      	lsls	r0, r3, #30
 8021da0:	bf49      	itett	mi
 8021da2:	085b      	lsrmi	r3, r3, #1
 8021da4:	089b      	lsrpl	r3, r3, #2
 8021da6:	2001      	movmi	r0, #1
 8021da8:	600b      	strmi	r3, [r1, #0]
 8021daa:	bf5c      	itt	pl
 8021dac:	600b      	strpl	r3, [r1, #0]
 8021dae:	2002      	movpl	r0, #2
 8021db0:	4770      	bx	lr
 8021db2:	b298      	uxth	r0, r3
 8021db4:	b9b0      	cbnz	r0, 8021de4 <__lo0bits+0x54>
 8021db6:	0c1b      	lsrs	r3, r3, #16
 8021db8:	2010      	movs	r0, #16
 8021dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021dbe:	bf04      	itt	eq
 8021dc0:	0a1b      	lsreq	r3, r3, #8
 8021dc2:	3008      	addeq	r0, #8
 8021dc4:	071a      	lsls	r2, r3, #28
 8021dc6:	bf04      	itt	eq
 8021dc8:	091b      	lsreq	r3, r3, #4
 8021dca:	3004      	addeq	r0, #4
 8021dcc:	079a      	lsls	r2, r3, #30
 8021dce:	bf04      	itt	eq
 8021dd0:	089b      	lsreq	r3, r3, #2
 8021dd2:	3002      	addeq	r0, #2
 8021dd4:	07da      	lsls	r2, r3, #31
 8021dd6:	d403      	bmi.n	8021de0 <__lo0bits+0x50>
 8021dd8:	085b      	lsrs	r3, r3, #1
 8021dda:	f100 0001 	add.w	r0, r0, #1
 8021dde:	d005      	beq.n	8021dec <__lo0bits+0x5c>
 8021de0:	600b      	str	r3, [r1, #0]
 8021de2:	4770      	bx	lr
 8021de4:	4610      	mov	r0, r2
 8021de6:	e7e8      	b.n	8021dba <__lo0bits+0x2a>
 8021de8:	2000      	movs	r0, #0
 8021dea:	4770      	bx	lr
 8021dec:	2020      	movs	r0, #32
 8021dee:	4770      	bx	lr

08021df0 <__i2b>:
 8021df0:	b510      	push	{r4, lr}
 8021df2:	460c      	mov	r4, r1
 8021df4:	2101      	movs	r1, #1
 8021df6:	f7ff ff33 	bl	8021c60 <_Balloc>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	b928      	cbnz	r0, 8021e0a <__i2b+0x1a>
 8021dfe:	4b05      	ldr	r3, [pc, #20]	; (8021e14 <__i2b+0x24>)
 8021e00:	4805      	ldr	r0, [pc, #20]	; (8021e18 <__i2b+0x28>)
 8021e02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021e06:	f001 f89d 	bl	8022f44 <__assert_func>
 8021e0a:	2301      	movs	r3, #1
 8021e0c:	6144      	str	r4, [r0, #20]
 8021e0e:	6103      	str	r3, [r0, #16]
 8021e10:	bd10      	pop	{r4, pc}
 8021e12:	bf00      	nop
 8021e14:	08040615 	.word	0x08040615
 8021e18:	08040685 	.word	0x08040685

08021e1c <__multiply>:
 8021e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e20:	4614      	mov	r4, r2
 8021e22:	690a      	ldr	r2, [r1, #16]
 8021e24:	6923      	ldr	r3, [r4, #16]
 8021e26:	429a      	cmp	r2, r3
 8021e28:	bfb8      	it	lt
 8021e2a:	460b      	movlt	r3, r1
 8021e2c:	460d      	mov	r5, r1
 8021e2e:	bfbc      	itt	lt
 8021e30:	4625      	movlt	r5, r4
 8021e32:	461c      	movlt	r4, r3
 8021e34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021e38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021e3c:	68ab      	ldr	r3, [r5, #8]
 8021e3e:	6869      	ldr	r1, [r5, #4]
 8021e40:	eb0a 0709 	add.w	r7, sl, r9
 8021e44:	42bb      	cmp	r3, r7
 8021e46:	b085      	sub	sp, #20
 8021e48:	bfb8      	it	lt
 8021e4a:	3101      	addlt	r1, #1
 8021e4c:	f7ff ff08 	bl	8021c60 <_Balloc>
 8021e50:	b930      	cbnz	r0, 8021e60 <__multiply+0x44>
 8021e52:	4602      	mov	r2, r0
 8021e54:	4b42      	ldr	r3, [pc, #264]	; (8021f60 <__multiply+0x144>)
 8021e56:	4843      	ldr	r0, [pc, #268]	; (8021f64 <__multiply+0x148>)
 8021e58:	f240 115d 	movw	r1, #349	; 0x15d
 8021e5c:	f001 f872 	bl	8022f44 <__assert_func>
 8021e60:	f100 0614 	add.w	r6, r0, #20
 8021e64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021e68:	4633      	mov	r3, r6
 8021e6a:	2200      	movs	r2, #0
 8021e6c:	4543      	cmp	r3, r8
 8021e6e:	d31e      	bcc.n	8021eae <__multiply+0x92>
 8021e70:	f105 0c14 	add.w	ip, r5, #20
 8021e74:	f104 0314 	add.w	r3, r4, #20
 8021e78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021e7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021e80:	9202      	str	r2, [sp, #8]
 8021e82:	ebac 0205 	sub.w	r2, ip, r5
 8021e86:	3a15      	subs	r2, #21
 8021e88:	f022 0203 	bic.w	r2, r2, #3
 8021e8c:	3204      	adds	r2, #4
 8021e8e:	f105 0115 	add.w	r1, r5, #21
 8021e92:	458c      	cmp	ip, r1
 8021e94:	bf38      	it	cc
 8021e96:	2204      	movcc	r2, #4
 8021e98:	9201      	str	r2, [sp, #4]
 8021e9a:	9a02      	ldr	r2, [sp, #8]
 8021e9c:	9303      	str	r3, [sp, #12]
 8021e9e:	429a      	cmp	r2, r3
 8021ea0:	d808      	bhi.n	8021eb4 <__multiply+0x98>
 8021ea2:	2f00      	cmp	r7, #0
 8021ea4:	dc55      	bgt.n	8021f52 <__multiply+0x136>
 8021ea6:	6107      	str	r7, [r0, #16]
 8021ea8:	b005      	add	sp, #20
 8021eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eae:	f843 2b04 	str.w	r2, [r3], #4
 8021eb2:	e7db      	b.n	8021e6c <__multiply+0x50>
 8021eb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8021eb8:	f1ba 0f00 	cmp.w	sl, #0
 8021ebc:	d020      	beq.n	8021f00 <__multiply+0xe4>
 8021ebe:	f105 0e14 	add.w	lr, r5, #20
 8021ec2:	46b1      	mov	r9, r6
 8021ec4:	2200      	movs	r2, #0
 8021ec6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021eca:	f8d9 b000 	ldr.w	fp, [r9]
 8021ece:	b2a1      	uxth	r1, r4
 8021ed0:	fa1f fb8b 	uxth.w	fp, fp
 8021ed4:	fb0a b101 	mla	r1, sl, r1, fp
 8021ed8:	4411      	add	r1, r2
 8021eda:	f8d9 2000 	ldr.w	r2, [r9]
 8021ede:	0c24      	lsrs	r4, r4, #16
 8021ee0:	0c12      	lsrs	r2, r2, #16
 8021ee2:	fb0a 2404 	mla	r4, sl, r4, r2
 8021ee6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021eea:	b289      	uxth	r1, r1
 8021eec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021ef0:	45f4      	cmp	ip, lr
 8021ef2:	f849 1b04 	str.w	r1, [r9], #4
 8021ef6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021efa:	d8e4      	bhi.n	8021ec6 <__multiply+0xaa>
 8021efc:	9901      	ldr	r1, [sp, #4]
 8021efe:	5072      	str	r2, [r6, r1]
 8021f00:	9a03      	ldr	r2, [sp, #12]
 8021f02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021f06:	3304      	adds	r3, #4
 8021f08:	f1b9 0f00 	cmp.w	r9, #0
 8021f0c:	d01f      	beq.n	8021f4e <__multiply+0x132>
 8021f0e:	6834      	ldr	r4, [r6, #0]
 8021f10:	f105 0114 	add.w	r1, r5, #20
 8021f14:	46b6      	mov	lr, r6
 8021f16:	f04f 0a00 	mov.w	sl, #0
 8021f1a:	880a      	ldrh	r2, [r1, #0]
 8021f1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021f20:	fb09 b202 	mla	r2, r9, r2, fp
 8021f24:	4492      	add	sl, r2
 8021f26:	b2a4      	uxth	r4, r4
 8021f28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021f2c:	f84e 4b04 	str.w	r4, [lr], #4
 8021f30:	f851 4b04 	ldr.w	r4, [r1], #4
 8021f34:	f8be 2000 	ldrh.w	r2, [lr]
 8021f38:	0c24      	lsrs	r4, r4, #16
 8021f3a:	fb09 2404 	mla	r4, r9, r4, r2
 8021f3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021f42:	458c      	cmp	ip, r1
 8021f44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021f48:	d8e7      	bhi.n	8021f1a <__multiply+0xfe>
 8021f4a:	9a01      	ldr	r2, [sp, #4]
 8021f4c:	50b4      	str	r4, [r6, r2]
 8021f4e:	3604      	adds	r6, #4
 8021f50:	e7a3      	b.n	8021e9a <__multiply+0x7e>
 8021f52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d1a5      	bne.n	8021ea6 <__multiply+0x8a>
 8021f5a:	3f01      	subs	r7, #1
 8021f5c:	e7a1      	b.n	8021ea2 <__multiply+0x86>
 8021f5e:	bf00      	nop
 8021f60:	08040615 	.word	0x08040615
 8021f64:	08040685 	.word	0x08040685

08021f68 <__pow5mult>:
 8021f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f6c:	4615      	mov	r5, r2
 8021f6e:	f012 0203 	ands.w	r2, r2, #3
 8021f72:	4606      	mov	r6, r0
 8021f74:	460f      	mov	r7, r1
 8021f76:	d007      	beq.n	8021f88 <__pow5mult+0x20>
 8021f78:	4c1a      	ldr	r4, [pc, #104]	; (8021fe4 <__pow5mult+0x7c>)
 8021f7a:	3a01      	subs	r2, #1
 8021f7c:	2300      	movs	r3, #0
 8021f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021f82:	f7ff fe9b 	bl	8021cbc <__multadd>
 8021f86:	4607      	mov	r7, r0
 8021f88:	10ad      	asrs	r5, r5, #2
 8021f8a:	d027      	beq.n	8021fdc <__pow5mult+0x74>
 8021f8c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8021f8e:	b944      	cbnz	r4, 8021fa2 <__pow5mult+0x3a>
 8021f90:	f240 2171 	movw	r1, #625	; 0x271
 8021f94:	4630      	mov	r0, r6
 8021f96:	f7ff ff2b 	bl	8021df0 <__i2b>
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	64b0      	str	r0, [r6, #72]	; 0x48
 8021f9e:	4604      	mov	r4, r0
 8021fa0:	6003      	str	r3, [r0, #0]
 8021fa2:	f04f 0900 	mov.w	r9, #0
 8021fa6:	07eb      	lsls	r3, r5, #31
 8021fa8:	d50a      	bpl.n	8021fc0 <__pow5mult+0x58>
 8021faa:	4639      	mov	r1, r7
 8021fac:	4622      	mov	r2, r4
 8021fae:	4630      	mov	r0, r6
 8021fb0:	f7ff ff34 	bl	8021e1c <__multiply>
 8021fb4:	4639      	mov	r1, r7
 8021fb6:	4680      	mov	r8, r0
 8021fb8:	4630      	mov	r0, r6
 8021fba:	f7ff fe76 	bl	8021caa <_Bfree>
 8021fbe:	4647      	mov	r7, r8
 8021fc0:	106d      	asrs	r5, r5, #1
 8021fc2:	d00b      	beq.n	8021fdc <__pow5mult+0x74>
 8021fc4:	6820      	ldr	r0, [r4, #0]
 8021fc6:	b938      	cbnz	r0, 8021fd8 <__pow5mult+0x70>
 8021fc8:	4622      	mov	r2, r4
 8021fca:	4621      	mov	r1, r4
 8021fcc:	4630      	mov	r0, r6
 8021fce:	f7ff ff25 	bl	8021e1c <__multiply>
 8021fd2:	6020      	str	r0, [r4, #0]
 8021fd4:	f8c0 9000 	str.w	r9, [r0]
 8021fd8:	4604      	mov	r4, r0
 8021fda:	e7e4      	b.n	8021fa6 <__pow5mult+0x3e>
 8021fdc:	4638      	mov	r0, r7
 8021fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021fe2:	bf00      	nop
 8021fe4:	080407d8 	.word	0x080407d8

08021fe8 <__lshift>:
 8021fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fec:	460c      	mov	r4, r1
 8021fee:	6849      	ldr	r1, [r1, #4]
 8021ff0:	6923      	ldr	r3, [r4, #16]
 8021ff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021ff6:	68a3      	ldr	r3, [r4, #8]
 8021ff8:	4607      	mov	r7, r0
 8021ffa:	4691      	mov	r9, r2
 8021ffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022000:	f108 0601 	add.w	r6, r8, #1
 8022004:	42b3      	cmp	r3, r6
 8022006:	db0b      	blt.n	8022020 <__lshift+0x38>
 8022008:	4638      	mov	r0, r7
 802200a:	f7ff fe29 	bl	8021c60 <_Balloc>
 802200e:	4605      	mov	r5, r0
 8022010:	b948      	cbnz	r0, 8022026 <__lshift+0x3e>
 8022012:	4602      	mov	r2, r0
 8022014:	4b28      	ldr	r3, [pc, #160]	; (80220b8 <__lshift+0xd0>)
 8022016:	4829      	ldr	r0, [pc, #164]	; (80220bc <__lshift+0xd4>)
 8022018:	f240 11d9 	movw	r1, #473	; 0x1d9
 802201c:	f000 ff92 	bl	8022f44 <__assert_func>
 8022020:	3101      	adds	r1, #1
 8022022:	005b      	lsls	r3, r3, #1
 8022024:	e7ee      	b.n	8022004 <__lshift+0x1c>
 8022026:	2300      	movs	r3, #0
 8022028:	f100 0114 	add.w	r1, r0, #20
 802202c:	f100 0210 	add.w	r2, r0, #16
 8022030:	4618      	mov	r0, r3
 8022032:	4553      	cmp	r3, sl
 8022034:	db33      	blt.n	802209e <__lshift+0xb6>
 8022036:	6920      	ldr	r0, [r4, #16]
 8022038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802203c:	f104 0314 	add.w	r3, r4, #20
 8022040:	f019 091f 	ands.w	r9, r9, #31
 8022044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802204c:	d02b      	beq.n	80220a6 <__lshift+0xbe>
 802204e:	f1c9 0e20 	rsb	lr, r9, #32
 8022052:	468a      	mov	sl, r1
 8022054:	2200      	movs	r2, #0
 8022056:	6818      	ldr	r0, [r3, #0]
 8022058:	fa00 f009 	lsl.w	r0, r0, r9
 802205c:	4302      	orrs	r2, r0
 802205e:	f84a 2b04 	str.w	r2, [sl], #4
 8022062:	f853 2b04 	ldr.w	r2, [r3], #4
 8022066:	459c      	cmp	ip, r3
 8022068:	fa22 f20e 	lsr.w	r2, r2, lr
 802206c:	d8f3      	bhi.n	8022056 <__lshift+0x6e>
 802206e:	ebac 0304 	sub.w	r3, ip, r4
 8022072:	3b15      	subs	r3, #21
 8022074:	f023 0303 	bic.w	r3, r3, #3
 8022078:	3304      	adds	r3, #4
 802207a:	f104 0015 	add.w	r0, r4, #21
 802207e:	4584      	cmp	ip, r0
 8022080:	bf38      	it	cc
 8022082:	2304      	movcc	r3, #4
 8022084:	50ca      	str	r2, [r1, r3]
 8022086:	b10a      	cbz	r2, 802208c <__lshift+0xa4>
 8022088:	f108 0602 	add.w	r6, r8, #2
 802208c:	3e01      	subs	r6, #1
 802208e:	4638      	mov	r0, r7
 8022090:	612e      	str	r6, [r5, #16]
 8022092:	4621      	mov	r1, r4
 8022094:	f7ff fe09 	bl	8021caa <_Bfree>
 8022098:	4628      	mov	r0, r5
 802209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802209e:	f842 0f04 	str.w	r0, [r2, #4]!
 80220a2:	3301      	adds	r3, #1
 80220a4:	e7c5      	b.n	8022032 <__lshift+0x4a>
 80220a6:	3904      	subs	r1, #4
 80220a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80220ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80220b0:	459c      	cmp	ip, r3
 80220b2:	d8f9      	bhi.n	80220a8 <__lshift+0xc0>
 80220b4:	e7ea      	b.n	802208c <__lshift+0xa4>
 80220b6:	bf00      	nop
 80220b8:	08040615 	.word	0x08040615
 80220bc:	08040685 	.word	0x08040685

080220c0 <__mcmp>:
 80220c0:	b530      	push	{r4, r5, lr}
 80220c2:	6902      	ldr	r2, [r0, #16]
 80220c4:	690c      	ldr	r4, [r1, #16]
 80220c6:	1b12      	subs	r2, r2, r4
 80220c8:	d10e      	bne.n	80220e8 <__mcmp+0x28>
 80220ca:	f100 0314 	add.w	r3, r0, #20
 80220ce:	3114      	adds	r1, #20
 80220d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80220d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80220d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80220dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80220e0:	42a5      	cmp	r5, r4
 80220e2:	d003      	beq.n	80220ec <__mcmp+0x2c>
 80220e4:	d305      	bcc.n	80220f2 <__mcmp+0x32>
 80220e6:	2201      	movs	r2, #1
 80220e8:	4610      	mov	r0, r2
 80220ea:	bd30      	pop	{r4, r5, pc}
 80220ec:	4283      	cmp	r3, r0
 80220ee:	d3f3      	bcc.n	80220d8 <__mcmp+0x18>
 80220f0:	e7fa      	b.n	80220e8 <__mcmp+0x28>
 80220f2:	f04f 32ff 	mov.w	r2, #4294967295
 80220f6:	e7f7      	b.n	80220e8 <__mcmp+0x28>

080220f8 <__mdiff>:
 80220f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220fc:	460c      	mov	r4, r1
 80220fe:	4606      	mov	r6, r0
 8022100:	4611      	mov	r1, r2
 8022102:	4620      	mov	r0, r4
 8022104:	4617      	mov	r7, r2
 8022106:	f7ff ffdb 	bl	80220c0 <__mcmp>
 802210a:	1e05      	subs	r5, r0, #0
 802210c:	d110      	bne.n	8022130 <__mdiff+0x38>
 802210e:	4629      	mov	r1, r5
 8022110:	4630      	mov	r0, r6
 8022112:	f7ff fda5 	bl	8021c60 <_Balloc>
 8022116:	b930      	cbnz	r0, 8022126 <__mdiff+0x2e>
 8022118:	4b39      	ldr	r3, [pc, #228]	; (8022200 <__mdiff+0x108>)
 802211a:	4602      	mov	r2, r0
 802211c:	f240 2132 	movw	r1, #562	; 0x232
 8022120:	4838      	ldr	r0, [pc, #224]	; (8022204 <__mdiff+0x10c>)
 8022122:	f000 ff0f 	bl	8022f44 <__assert_func>
 8022126:	2301      	movs	r3, #1
 8022128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802212c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022130:	bfa4      	itt	ge
 8022132:	463b      	movge	r3, r7
 8022134:	4627      	movge	r7, r4
 8022136:	4630      	mov	r0, r6
 8022138:	6879      	ldr	r1, [r7, #4]
 802213a:	bfa6      	itte	ge
 802213c:	461c      	movge	r4, r3
 802213e:	2500      	movge	r5, #0
 8022140:	2501      	movlt	r5, #1
 8022142:	f7ff fd8d 	bl	8021c60 <_Balloc>
 8022146:	b920      	cbnz	r0, 8022152 <__mdiff+0x5a>
 8022148:	4b2d      	ldr	r3, [pc, #180]	; (8022200 <__mdiff+0x108>)
 802214a:	4602      	mov	r2, r0
 802214c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022150:	e7e6      	b.n	8022120 <__mdiff+0x28>
 8022152:	693e      	ldr	r6, [r7, #16]
 8022154:	60c5      	str	r5, [r0, #12]
 8022156:	6925      	ldr	r5, [r4, #16]
 8022158:	f107 0114 	add.w	r1, r7, #20
 802215c:	f104 0914 	add.w	r9, r4, #20
 8022160:	f100 0e14 	add.w	lr, r0, #20
 8022164:	f107 0210 	add.w	r2, r7, #16
 8022168:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802216c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022170:	46f2      	mov	sl, lr
 8022172:	2700      	movs	r7, #0
 8022174:	f859 3b04 	ldr.w	r3, [r9], #4
 8022178:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802217c:	fa1f f883 	uxth.w	r8, r3
 8022180:	fa17 f78b 	uxtah	r7, r7, fp
 8022184:	0c1b      	lsrs	r3, r3, #16
 8022186:	eba7 0808 	sub.w	r8, r7, r8
 802218a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802218e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022192:	fa1f f888 	uxth.w	r8, r8
 8022196:	141f      	asrs	r7, r3, #16
 8022198:	454d      	cmp	r5, r9
 802219a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802219e:	f84a 3b04 	str.w	r3, [sl], #4
 80221a2:	d8e7      	bhi.n	8022174 <__mdiff+0x7c>
 80221a4:	1b2b      	subs	r3, r5, r4
 80221a6:	3b15      	subs	r3, #21
 80221a8:	f023 0303 	bic.w	r3, r3, #3
 80221ac:	3304      	adds	r3, #4
 80221ae:	3415      	adds	r4, #21
 80221b0:	42a5      	cmp	r5, r4
 80221b2:	bf38      	it	cc
 80221b4:	2304      	movcc	r3, #4
 80221b6:	4419      	add	r1, r3
 80221b8:	4473      	add	r3, lr
 80221ba:	469e      	mov	lr, r3
 80221bc:	460d      	mov	r5, r1
 80221be:	4565      	cmp	r5, ip
 80221c0:	d30e      	bcc.n	80221e0 <__mdiff+0xe8>
 80221c2:	f10c 0203 	add.w	r2, ip, #3
 80221c6:	1a52      	subs	r2, r2, r1
 80221c8:	f022 0203 	bic.w	r2, r2, #3
 80221cc:	3903      	subs	r1, #3
 80221ce:	458c      	cmp	ip, r1
 80221d0:	bf38      	it	cc
 80221d2:	2200      	movcc	r2, #0
 80221d4:	441a      	add	r2, r3
 80221d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80221da:	b17b      	cbz	r3, 80221fc <__mdiff+0x104>
 80221dc:	6106      	str	r6, [r0, #16]
 80221de:	e7a5      	b.n	802212c <__mdiff+0x34>
 80221e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80221e4:	fa17 f488 	uxtah	r4, r7, r8
 80221e8:	1422      	asrs	r2, r4, #16
 80221ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80221ee:	b2a4      	uxth	r4, r4
 80221f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80221f4:	f84e 4b04 	str.w	r4, [lr], #4
 80221f8:	1417      	asrs	r7, r2, #16
 80221fa:	e7e0      	b.n	80221be <__mdiff+0xc6>
 80221fc:	3e01      	subs	r6, #1
 80221fe:	e7ea      	b.n	80221d6 <__mdiff+0xde>
 8022200:	08040615 	.word	0x08040615
 8022204:	08040685 	.word	0x08040685

08022208 <__d2b>:
 8022208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802220c:	4689      	mov	r9, r1
 802220e:	2101      	movs	r1, #1
 8022210:	ec57 6b10 	vmov	r6, r7, d0
 8022214:	4690      	mov	r8, r2
 8022216:	f7ff fd23 	bl	8021c60 <_Balloc>
 802221a:	4604      	mov	r4, r0
 802221c:	b930      	cbnz	r0, 802222c <__d2b+0x24>
 802221e:	4602      	mov	r2, r0
 8022220:	4b25      	ldr	r3, [pc, #148]	; (80222b8 <__d2b+0xb0>)
 8022222:	4826      	ldr	r0, [pc, #152]	; (80222bc <__d2b+0xb4>)
 8022224:	f240 310a 	movw	r1, #778	; 0x30a
 8022228:	f000 fe8c 	bl	8022f44 <__assert_func>
 802222c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022234:	bb35      	cbnz	r5, 8022284 <__d2b+0x7c>
 8022236:	2e00      	cmp	r6, #0
 8022238:	9301      	str	r3, [sp, #4]
 802223a:	d028      	beq.n	802228e <__d2b+0x86>
 802223c:	4668      	mov	r0, sp
 802223e:	9600      	str	r6, [sp, #0]
 8022240:	f7ff fda6 	bl	8021d90 <__lo0bits>
 8022244:	9900      	ldr	r1, [sp, #0]
 8022246:	b300      	cbz	r0, 802228a <__d2b+0x82>
 8022248:	9a01      	ldr	r2, [sp, #4]
 802224a:	f1c0 0320 	rsb	r3, r0, #32
 802224e:	fa02 f303 	lsl.w	r3, r2, r3
 8022252:	430b      	orrs	r3, r1
 8022254:	40c2      	lsrs	r2, r0
 8022256:	6163      	str	r3, [r4, #20]
 8022258:	9201      	str	r2, [sp, #4]
 802225a:	9b01      	ldr	r3, [sp, #4]
 802225c:	61a3      	str	r3, [r4, #24]
 802225e:	2b00      	cmp	r3, #0
 8022260:	bf14      	ite	ne
 8022262:	2202      	movne	r2, #2
 8022264:	2201      	moveq	r2, #1
 8022266:	6122      	str	r2, [r4, #16]
 8022268:	b1d5      	cbz	r5, 80222a0 <__d2b+0x98>
 802226a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802226e:	4405      	add	r5, r0
 8022270:	f8c9 5000 	str.w	r5, [r9]
 8022274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022278:	f8c8 0000 	str.w	r0, [r8]
 802227c:	4620      	mov	r0, r4
 802227e:	b003      	add	sp, #12
 8022280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022288:	e7d5      	b.n	8022236 <__d2b+0x2e>
 802228a:	6161      	str	r1, [r4, #20]
 802228c:	e7e5      	b.n	802225a <__d2b+0x52>
 802228e:	a801      	add	r0, sp, #4
 8022290:	f7ff fd7e 	bl	8021d90 <__lo0bits>
 8022294:	9b01      	ldr	r3, [sp, #4]
 8022296:	6163      	str	r3, [r4, #20]
 8022298:	2201      	movs	r2, #1
 802229a:	6122      	str	r2, [r4, #16]
 802229c:	3020      	adds	r0, #32
 802229e:	e7e3      	b.n	8022268 <__d2b+0x60>
 80222a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80222a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80222a8:	f8c9 0000 	str.w	r0, [r9]
 80222ac:	6918      	ldr	r0, [r3, #16]
 80222ae:	f7ff fd4f 	bl	8021d50 <__hi0bits>
 80222b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80222b6:	e7df      	b.n	8022278 <__d2b+0x70>
 80222b8:	08040615 	.word	0x08040615
 80222bc:	08040685 	.word	0x08040685

080222c0 <frexp>:
 80222c0:	b570      	push	{r4, r5, r6, lr}
 80222c2:	2100      	movs	r1, #0
 80222c4:	ec55 4b10 	vmov	r4, r5, d0
 80222c8:	6001      	str	r1, [r0, #0]
 80222ca:	4916      	ldr	r1, [pc, #88]	; (8022324 <frexp+0x64>)
 80222cc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80222d0:	428a      	cmp	r2, r1
 80222d2:	4606      	mov	r6, r0
 80222d4:	462b      	mov	r3, r5
 80222d6:	dc22      	bgt.n	802231e <frexp+0x5e>
 80222d8:	ee10 1a10 	vmov	r1, s0
 80222dc:	4311      	orrs	r1, r2
 80222de:	d01e      	beq.n	802231e <frexp+0x5e>
 80222e0:	4911      	ldr	r1, [pc, #68]	; (8022328 <frexp+0x68>)
 80222e2:	4029      	ands	r1, r5
 80222e4:	b969      	cbnz	r1, 8022302 <frexp+0x42>
 80222e6:	4b11      	ldr	r3, [pc, #68]	; (802232c <frexp+0x6c>)
 80222e8:	2200      	movs	r2, #0
 80222ea:	ee10 0a10 	vmov	r0, s0
 80222ee:	4629      	mov	r1, r5
 80222f0:	f7de f99c 	bl	800062c <__aeabi_dmul>
 80222f4:	460b      	mov	r3, r1
 80222f6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80222fa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80222fe:	4604      	mov	r4, r0
 8022300:	6031      	str	r1, [r6, #0]
 8022302:	6831      	ldr	r1, [r6, #0]
 8022304:	1512      	asrs	r2, r2, #20
 8022306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802230a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802230e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022312:	440a      	add	r2, r1
 8022314:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8022318:	6032      	str	r2, [r6, #0]
 802231a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802231e:	ec45 4b10 	vmov	d0, r4, r5
 8022322:	bd70      	pop	{r4, r5, r6, pc}
 8022324:	7fefffff 	.word	0x7fefffff
 8022328:	7ff00000 	.word	0x7ff00000
 802232c:	43500000 	.word	0x43500000

08022330 <__sread>:
 8022330:	b510      	push	{r4, lr}
 8022332:	460c      	mov	r4, r1
 8022334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022338:	f000 ff82 	bl	8023240 <_read_r>
 802233c:	2800      	cmp	r0, #0
 802233e:	bfab      	itete	ge
 8022340:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8022342:	89a3      	ldrhlt	r3, [r4, #12]
 8022344:	181b      	addge	r3, r3, r0
 8022346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802234a:	bfac      	ite	ge
 802234c:	6523      	strge	r3, [r4, #80]	; 0x50
 802234e:	81a3      	strhlt	r3, [r4, #12]
 8022350:	bd10      	pop	{r4, pc}

08022352 <__swrite>:
 8022352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022356:	461f      	mov	r7, r3
 8022358:	898b      	ldrh	r3, [r1, #12]
 802235a:	05db      	lsls	r3, r3, #23
 802235c:	4605      	mov	r5, r0
 802235e:	460c      	mov	r4, r1
 8022360:	4616      	mov	r6, r2
 8022362:	d505      	bpl.n	8022370 <__swrite+0x1e>
 8022364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022368:	2302      	movs	r3, #2
 802236a:	2200      	movs	r2, #0
 802236c:	f000 ff44 	bl	80231f8 <_lseek_r>
 8022370:	89a3      	ldrh	r3, [r4, #12]
 8022372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802237a:	81a3      	strh	r3, [r4, #12]
 802237c:	4632      	mov	r2, r6
 802237e:	463b      	mov	r3, r7
 8022380:	4628      	mov	r0, r5
 8022382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022386:	f000 bd8b 	b.w	8022ea0 <_write_r>

0802238a <__sseek>:
 802238a:	b510      	push	{r4, lr}
 802238c:	460c      	mov	r4, r1
 802238e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022392:	f000 ff31 	bl	80231f8 <_lseek_r>
 8022396:	1c43      	adds	r3, r0, #1
 8022398:	89a3      	ldrh	r3, [r4, #12]
 802239a:	bf15      	itete	ne
 802239c:	6520      	strne	r0, [r4, #80]	; 0x50
 802239e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80223a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80223a6:	81a3      	strheq	r3, [r4, #12]
 80223a8:	bf18      	it	ne
 80223aa:	81a3      	strhne	r3, [r4, #12]
 80223ac:	bd10      	pop	{r4, pc}

080223ae <__sclose>:
 80223ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223b2:	f000 be13 	b.w	8022fdc <_close_r>

080223b6 <__ssprint_r>:
 80223b6:	6893      	ldr	r3, [r2, #8]
 80223b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223bc:	4680      	mov	r8, r0
 80223be:	460c      	mov	r4, r1
 80223c0:	4617      	mov	r7, r2
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d061      	beq.n	802248a <__ssprint_r+0xd4>
 80223c6:	2300      	movs	r3, #0
 80223c8:	f8d2 a000 	ldr.w	sl, [r2]
 80223cc:	9301      	str	r3, [sp, #4]
 80223ce:	469b      	mov	fp, r3
 80223d0:	f1bb 0f00 	cmp.w	fp, #0
 80223d4:	d02b      	beq.n	802242e <__ssprint_r+0x78>
 80223d6:	68a6      	ldr	r6, [r4, #8]
 80223d8:	45b3      	cmp	fp, r6
 80223da:	d342      	bcc.n	8022462 <__ssprint_r+0xac>
 80223dc:	89a2      	ldrh	r2, [r4, #12]
 80223de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80223e2:	d03e      	beq.n	8022462 <__ssprint_r+0xac>
 80223e4:	6825      	ldr	r5, [r4, #0]
 80223e6:	6921      	ldr	r1, [r4, #16]
 80223e8:	eba5 0901 	sub.w	r9, r5, r1
 80223ec:	6965      	ldr	r5, [r4, #20]
 80223ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80223f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80223f6:	f109 0001 	add.w	r0, r9, #1
 80223fa:	106d      	asrs	r5, r5, #1
 80223fc:	4458      	add	r0, fp
 80223fe:	4285      	cmp	r5, r0
 8022400:	bf38      	it	cc
 8022402:	4605      	movcc	r5, r0
 8022404:	0553      	lsls	r3, r2, #21
 8022406:	d545      	bpl.n	8022494 <__ssprint_r+0xde>
 8022408:	4629      	mov	r1, r5
 802240a:	4640      	mov	r0, r8
 802240c:	f7fa ffe8 	bl	801d3e0 <_malloc_r>
 8022410:	4606      	mov	r6, r0
 8022412:	b9a0      	cbnz	r0, 802243e <__ssprint_r+0x88>
 8022414:	230c      	movs	r3, #12
 8022416:	f8c8 3000 	str.w	r3, [r8]
 802241a:	89a3      	ldrh	r3, [r4, #12]
 802241c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022420:	81a3      	strh	r3, [r4, #12]
 8022422:	2300      	movs	r3, #0
 8022424:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8022428:	f04f 30ff 	mov.w	r0, #4294967295
 802242c:	e02f      	b.n	802248e <__ssprint_r+0xd8>
 802242e:	f8da 3000 	ldr.w	r3, [sl]
 8022432:	f8da b004 	ldr.w	fp, [sl, #4]
 8022436:	9301      	str	r3, [sp, #4]
 8022438:	f10a 0a08 	add.w	sl, sl, #8
 802243c:	e7c8      	b.n	80223d0 <__ssprint_r+0x1a>
 802243e:	464a      	mov	r2, r9
 8022440:	6921      	ldr	r1, [r4, #16]
 8022442:	f7fb fa1d 	bl	801d880 <memcpy>
 8022446:	89a2      	ldrh	r2, [r4, #12]
 8022448:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802244c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022450:	81a2      	strh	r2, [r4, #12]
 8022452:	6126      	str	r6, [r4, #16]
 8022454:	6165      	str	r5, [r4, #20]
 8022456:	444e      	add	r6, r9
 8022458:	eba5 0509 	sub.w	r5, r5, r9
 802245c:	6026      	str	r6, [r4, #0]
 802245e:	60a5      	str	r5, [r4, #8]
 8022460:	465e      	mov	r6, fp
 8022462:	455e      	cmp	r6, fp
 8022464:	bf28      	it	cs
 8022466:	465e      	movcs	r6, fp
 8022468:	4632      	mov	r2, r6
 802246a:	9901      	ldr	r1, [sp, #4]
 802246c:	6820      	ldr	r0, [r4, #0]
 802246e:	f7fb fa15 	bl	801d89c <memmove>
 8022472:	68a2      	ldr	r2, [r4, #8]
 8022474:	1b92      	subs	r2, r2, r6
 8022476:	60a2      	str	r2, [r4, #8]
 8022478:	6822      	ldr	r2, [r4, #0]
 802247a:	4432      	add	r2, r6
 802247c:	6022      	str	r2, [r4, #0]
 802247e:	68ba      	ldr	r2, [r7, #8]
 8022480:	eba2 030b 	sub.w	r3, r2, fp
 8022484:	60bb      	str	r3, [r7, #8]
 8022486:	2b00      	cmp	r3, #0
 8022488:	d1d1      	bne.n	802242e <__ssprint_r+0x78>
 802248a:	2000      	movs	r0, #0
 802248c:	6078      	str	r0, [r7, #4]
 802248e:	b003      	add	sp, #12
 8022490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022494:	462a      	mov	r2, r5
 8022496:	4640      	mov	r0, r8
 8022498:	f7fb fa2e 	bl	801d8f8 <_realloc_r>
 802249c:	4606      	mov	r6, r0
 802249e:	2800      	cmp	r0, #0
 80224a0:	d1d7      	bne.n	8022452 <__ssprint_r+0x9c>
 80224a2:	6921      	ldr	r1, [r4, #16]
 80224a4:	4640      	mov	r0, r8
 80224a6:	f7ff fa8b 	bl	80219c0 <_free_r>
 80224aa:	e7b3      	b.n	8022414 <__ssprint_r+0x5e>

080224ac <__sprint_r>:
 80224ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224b0:	6893      	ldr	r3, [r2, #8]
 80224b2:	4680      	mov	r8, r0
 80224b4:	460f      	mov	r7, r1
 80224b6:	4614      	mov	r4, r2
 80224b8:	b91b      	cbnz	r3, 80224c2 <__sprint_r+0x16>
 80224ba:	6053      	str	r3, [r2, #4]
 80224bc:	4618      	mov	r0, r3
 80224be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80224c4:	049d      	lsls	r5, r3, #18
 80224c6:	d520      	bpl.n	802250a <__sprint_r+0x5e>
 80224c8:	6815      	ldr	r5, [r2, #0]
 80224ca:	3508      	adds	r5, #8
 80224cc:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80224d0:	f04f 0900 	mov.w	r9, #0
 80224d4:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80224d8:	45ca      	cmp	sl, r9
 80224da:	dc0b      	bgt.n	80224f4 <__sprint_r+0x48>
 80224dc:	68a3      	ldr	r3, [r4, #8]
 80224de:	f026 0003 	bic.w	r0, r6, #3
 80224e2:	1a18      	subs	r0, r3, r0
 80224e4:	60a0      	str	r0, [r4, #8]
 80224e6:	3508      	adds	r5, #8
 80224e8:	2800      	cmp	r0, #0
 80224ea:	d1ef      	bne.n	80224cc <__sprint_r+0x20>
 80224ec:	2300      	movs	r3, #0
 80224ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80224f2:	e7e4      	b.n	80224be <__sprint_r+0x12>
 80224f4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80224f8:	463a      	mov	r2, r7
 80224fa:	4640      	mov	r0, r8
 80224fc:	f000 fe29 	bl	8023152 <_fputwc_r>
 8022500:	1c43      	adds	r3, r0, #1
 8022502:	d0f3      	beq.n	80224ec <__sprint_r+0x40>
 8022504:	f109 0901 	add.w	r9, r9, #1
 8022508:	e7e6      	b.n	80224d8 <__sprint_r+0x2c>
 802250a:	f7fa fd8f 	bl	801d02c <__sfvwrite_r>
 802250e:	e7ed      	b.n	80224ec <__sprint_r+0x40>

08022510 <_vfiprintf_r>:
 8022510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022514:	ed2d 8b02 	vpush	{d8}
 8022518:	b0b9      	sub	sp, #228	; 0xe4
 802251a:	460f      	mov	r7, r1
 802251c:	9201      	str	r2, [sp, #4]
 802251e:	461d      	mov	r5, r3
 8022520:	461c      	mov	r4, r3
 8022522:	4681      	mov	r9, r0
 8022524:	b118      	cbz	r0, 802252e <_vfiprintf_r+0x1e>
 8022526:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8022528:	b90b      	cbnz	r3, 802252e <_vfiprintf_r+0x1e>
 802252a:	f7ff f9b9 	bl	80218a0 <__sinit>
 802252e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022530:	07d8      	lsls	r0, r3, #31
 8022532:	d405      	bmi.n	8022540 <_vfiprintf_r+0x30>
 8022534:	89bb      	ldrh	r3, [r7, #12]
 8022536:	0599      	lsls	r1, r3, #22
 8022538:	d402      	bmi.n	8022540 <_vfiprintf_r+0x30>
 802253a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802253c:	f7fa ff3e 	bl	801d3bc <__retarget_lock_acquire_recursive>
 8022540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022544:	049a      	lsls	r2, r3, #18
 8022546:	d406      	bmi.n	8022556 <_vfiprintf_r+0x46>
 8022548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802254c:	81bb      	strh	r3, [r7, #12]
 802254e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022554:	667b      	str	r3, [r7, #100]	; 0x64
 8022556:	89bb      	ldrh	r3, [r7, #12]
 8022558:	071e      	lsls	r6, r3, #28
 802255a:	d501      	bpl.n	8022560 <_vfiprintf_r+0x50>
 802255c:	693b      	ldr	r3, [r7, #16]
 802255e:	b9bb      	cbnz	r3, 8022590 <_vfiprintf_r+0x80>
 8022560:	4639      	mov	r1, r7
 8022562:	4648      	mov	r0, r9
 8022564:	f7fe f9d2 	bl	802090c <__swsetup_r>
 8022568:	b190      	cbz	r0, 8022590 <_vfiprintf_r+0x80>
 802256a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802256c:	07d8      	lsls	r0, r3, #31
 802256e:	d508      	bpl.n	8022582 <_vfiprintf_r+0x72>
 8022570:	f04f 33ff 	mov.w	r3, #4294967295
 8022574:	9302      	str	r3, [sp, #8]
 8022576:	9802      	ldr	r0, [sp, #8]
 8022578:	b039      	add	sp, #228	; 0xe4
 802257a:	ecbd 8b02 	vpop	{d8}
 802257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022582:	89bb      	ldrh	r3, [r7, #12]
 8022584:	0599      	lsls	r1, r3, #22
 8022586:	d4f3      	bmi.n	8022570 <_vfiprintf_r+0x60>
 8022588:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802258a:	f7fa ff18 	bl	801d3be <__retarget_lock_release_recursive>
 802258e:	e7ef      	b.n	8022570 <_vfiprintf_r+0x60>
 8022590:	89bb      	ldrh	r3, [r7, #12]
 8022592:	f003 021a 	and.w	r2, r3, #26
 8022596:	2a0a      	cmp	r2, #10
 8022598:	d113      	bne.n	80225c2 <_vfiprintf_r+0xb2>
 802259a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802259e:	2a00      	cmp	r2, #0
 80225a0:	db0f      	blt.n	80225c2 <_vfiprintf_r+0xb2>
 80225a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80225a4:	07d2      	lsls	r2, r2, #31
 80225a6:	d404      	bmi.n	80225b2 <_vfiprintf_r+0xa2>
 80225a8:	059e      	lsls	r6, r3, #22
 80225aa:	d402      	bmi.n	80225b2 <_vfiprintf_r+0xa2>
 80225ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80225ae:	f7fa ff06 	bl	801d3be <__retarget_lock_release_recursive>
 80225b2:	9a01      	ldr	r2, [sp, #4]
 80225b4:	462b      	mov	r3, r5
 80225b6:	4639      	mov	r1, r7
 80225b8:	4648      	mov	r0, r9
 80225ba:	f000 fc31 	bl	8022e20 <__sbprintf>
 80225be:	9002      	str	r0, [sp, #8]
 80225c0:	e7d9      	b.n	8022576 <_vfiprintf_r+0x66>
 80225c2:	2300      	movs	r3, #0
 80225c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80225c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80225cc:	ae0f      	add	r6, sp, #60	; 0x3c
 80225ce:	ee08 3a10 	vmov	s16, r3
 80225d2:	960c      	str	r6, [sp, #48]	; 0x30
 80225d4:	9307      	str	r3, [sp, #28]
 80225d6:	9302      	str	r3, [sp, #8]
 80225d8:	9b01      	ldr	r3, [sp, #4]
 80225da:	461d      	mov	r5, r3
 80225dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225e0:	b10a      	cbz	r2, 80225e6 <_vfiprintf_r+0xd6>
 80225e2:	2a25      	cmp	r2, #37	; 0x25
 80225e4:	d1f9      	bne.n	80225da <_vfiprintf_r+0xca>
 80225e6:	9b01      	ldr	r3, [sp, #4]
 80225e8:	ebb5 0803 	subs.w	r8, r5, r3
 80225ec:	d00d      	beq.n	802260a <_vfiprintf_r+0xfa>
 80225ee:	e9c6 3800 	strd	r3, r8, [r6]
 80225f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225f4:	4443      	add	r3, r8
 80225f6:	930e      	str	r3, [sp, #56]	; 0x38
 80225f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225fa:	3301      	adds	r3, #1
 80225fc:	2b07      	cmp	r3, #7
 80225fe:	930d      	str	r3, [sp, #52]	; 0x34
 8022600:	dc75      	bgt.n	80226ee <_vfiprintf_r+0x1de>
 8022602:	3608      	adds	r6, #8
 8022604:	9b02      	ldr	r3, [sp, #8]
 8022606:	4443      	add	r3, r8
 8022608:	9302      	str	r3, [sp, #8]
 802260a:	782b      	ldrb	r3, [r5, #0]
 802260c:	2b00      	cmp	r3, #0
 802260e:	f000 83c8 	beq.w	8022da2 <_vfiprintf_r+0x892>
 8022612:	2300      	movs	r3, #0
 8022614:	f04f 31ff 	mov.w	r1, #4294967295
 8022618:	1c6a      	adds	r2, r5, #1
 802261a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802261e:	9100      	str	r1, [sp, #0]
 8022620:	9303      	str	r3, [sp, #12]
 8022622:	469a      	mov	sl, r3
 8022624:	f812 3b01 	ldrb.w	r3, [r2], #1
 8022628:	9201      	str	r2, [sp, #4]
 802262a:	f1a3 0220 	sub.w	r2, r3, #32
 802262e:	2a5a      	cmp	r2, #90	; 0x5a
 8022630:	f200 8310 	bhi.w	8022c54 <_vfiprintf_r+0x744>
 8022634:	e8df f012 	tbh	[pc, r2, lsl #1]
 8022638:	030e0099 	.word	0x030e0099
 802263c:	00a1030e 	.word	0x00a1030e
 8022640:	030e030e 	.word	0x030e030e
 8022644:	0080030e 	.word	0x0080030e
 8022648:	030e030e 	.word	0x030e030e
 802264c:	00ae00a4 	.word	0x00ae00a4
 8022650:	00ab030e 	.word	0x00ab030e
 8022654:	030e00b0 	.word	0x030e00b0
 8022658:	00ce00cb 	.word	0x00ce00cb
 802265c:	00ce00ce 	.word	0x00ce00ce
 8022660:	00ce00ce 	.word	0x00ce00ce
 8022664:	00ce00ce 	.word	0x00ce00ce
 8022668:	00ce00ce 	.word	0x00ce00ce
 802266c:	030e030e 	.word	0x030e030e
 8022670:	030e030e 	.word	0x030e030e
 8022674:	030e030e 	.word	0x030e030e
 8022678:	030e030e 	.word	0x030e030e
 802267c:	00f8030e 	.word	0x00f8030e
 8022680:	030e0106 	.word	0x030e0106
 8022684:	030e030e 	.word	0x030e030e
 8022688:	030e030e 	.word	0x030e030e
 802268c:	030e030e 	.word	0x030e030e
 8022690:	030e030e 	.word	0x030e030e
 8022694:	014d030e 	.word	0x014d030e
 8022698:	030e030e 	.word	0x030e030e
 802269c:	0192030e 	.word	0x0192030e
 80226a0:	0270030e 	.word	0x0270030e
 80226a4:	030e030e 	.word	0x030e030e
 80226a8:	030e028e 	.word	0x030e028e
 80226ac:	030e030e 	.word	0x030e030e
 80226b0:	030e030e 	.word	0x030e030e
 80226b4:	030e030e 	.word	0x030e030e
 80226b8:	030e030e 	.word	0x030e030e
 80226bc:	00f8030e 	.word	0x00f8030e
 80226c0:	030e0108 	.word	0x030e0108
 80226c4:	030e030e 	.word	0x030e030e
 80226c8:	010800de 	.word	0x010800de
 80226cc:	030e00f2 	.word	0x030e00f2
 80226d0:	030e00eb 	.word	0x030e00eb
 80226d4:	014f0130 	.word	0x014f0130
 80226d8:	00f20182 	.word	0x00f20182
 80226dc:	0192030e 	.word	0x0192030e
 80226e0:	02720097 	.word	0x02720097
 80226e4:	030e030e 	.word	0x030e030e
 80226e8:	030e0065 	.word	0x030e0065
 80226ec:	0097      	.short	0x0097
 80226ee:	aa0c      	add	r2, sp, #48	; 0x30
 80226f0:	4639      	mov	r1, r7
 80226f2:	4648      	mov	r0, r9
 80226f4:	f7ff feda 	bl	80224ac <__sprint_r>
 80226f8:	2800      	cmp	r0, #0
 80226fa:	f040 8331 	bne.w	8022d60 <_vfiprintf_r+0x850>
 80226fe:	ae0f      	add	r6, sp, #60	; 0x3c
 8022700:	e780      	b.n	8022604 <_vfiprintf_r+0xf4>
 8022702:	4a95      	ldr	r2, [pc, #596]	; (8022958 <_vfiprintf_r+0x448>)
 8022704:	9205      	str	r2, [sp, #20]
 8022706:	f01a 0f20 	tst.w	sl, #32
 802270a:	f000 8225 	beq.w	8022b58 <_vfiprintf_r+0x648>
 802270e:	3407      	adds	r4, #7
 8022710:	f024 0b07 	bic.w	fp, r4, #7
 8022714:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022718:	f01a 0f01 	tst.w	sl, #1
 802271c:	d009      	beq.n	8022732 <_vfiprintf_r+0x222>
 802271e:	ea54 0205 	orrs.w	r2, r4, r5
 8022722:	bf1f      	itttt	ne
 8022724:	2230      	movne	r2, #48	; 0x30
 8022726:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 802272a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802272e:	f04a 0a02 	orrne.w	sl, sl, #2
 8022732:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8022736:	e10d      	b.n	8022954 <_vfiprintf_r+0x444>
 8022738:	4648      	mov	r0, r9
 802273a:	f7ff fa21 	bl	8021b80 <_localeconv_r>
 802273e:	6843      	ldr	r3, [r0, #4]
 8022740:	4618      	mov	r0, r3
 8022742:	ee08 3a10 	vmov	s16, r3
 8022746:	f7dd fdad 	bl	80002a4 <strlen>
 802274a:	9007      	str	r0, [sp, #28]
 802274c:	4648      	mov	r0, r9
 802274e:	f7ff fa17 	bl	8021b80 <_localeconv_r>
 8022752:	6883      	ldr	r3, [r0, #8]
 8022754:	9306      	str	r3, [sp, #24]
 8022756:	9b07      	ldr	r3, [sp, #28]
 8022758:	b12b      	cbz	r3, 8022766 <_vfiprintf_r+0x256>
 802275a:	9b06      	ldr	r3, [sp, #24]
 802275c:	b11b      	cbz	r3, 8022766 <_vfiprintf_r+0x256>
 802275e:	781b      	ldrb	r3, [r3, #0]
 8022760:	b10b      	cbz	r3, 8022766 <_vfiprintf_r+0x256>
 8022762:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8022766:	9a01      	ldr	r2, [sp, #4]
 8022768:	e75c      	b.n	8022624 <_vfiprintf_r+0x114>
 802276a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802276e:	2b00      	cmp	r3, #0
 8022770:	d1f9      	bne.n	8022766 <_vfiprintf_r+0x256>
 8022772:	2320      	movs	r3, #32
 8022774:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022778:	e7f5      	b.n	8022766 <_vfiprintf_r+0x256>
 802277a:	f04a 0a01 	orr.w	sl, sl, #1
 802277e:	e7f2      	b.n	8022766 <_vfiprintf_r+0x256>
 8022780:	f854 3b04 	ldr.w	r3, [r4], #4
 8022784:	9303      	str	r3, [sp, #12]
 8022786:	2b00      	cmp	r3, #0
 8022788:	daed      	bge.n	8022766 <_vfiprintf_r+0x256>
 802278a:	425b      	negs	r3, r3
 802278c:	9303      	str	r3, [sp, #12]
 802278e:	f04a 0a04 	orr.w	sl, sl, #4
 8022792:	e7e8      	b.n	8022766 <_vfiprintf_r+0x256>
 8022794:	232b      	movs	r3, #43	; 0x2b
 8022796:	e7ed      	b.n	8022774 <_vfiprintf_r+0x264>
 8022798:	9a01      	ldr	r2, [sp, #4]
 802279a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802279e:	2b2a      	cmp	r3, #42	; 0x2a
 80227a0:	d112      	bne.n	80227c8 <_vfiprintf_r+0x2b8>
 80227a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80227a6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80227aa:	e9cd 3200 	strd	r3, r2, [sp]
 80227ae:	e7da      	b.n	8022766 <_vfiprintf_r+0x256>
 80227b0:	9b00      	ldr	r3, [sp, #0]
 80227b2:	200a      	movs	r0, #10
 80227b4:	fb00 1303 	mla	r3, r0, r3, r1
 80227b8:	9300      	str	r3, [sp, #0]
 80227ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 80227be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80227c2:	2909      	cmp	r1, #9
 80227c4:	d9f4      	bls.n	80227b0 <_vfiprintf_r+0x2a0>
 80227c6:	e72f      	b.n	8022628 <_vfiprintf_r+0x118>
 80227c8:	2100      	movs	r1, #0
 80227ca:	9100      	str	r1, [sp, #0]
 80227cc:	e7f7      	b.n	80227be <_vfiprintf_r+0x2ae>
 80227ce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80227d2:	e7c8      	b.n	8022766 <_vfiprintf_r+0x256>
 80227d4:	2100      	movs	r1, #0
 80227d6:	9a01      	ldr	r2, [sp, #4]
 80227d8:	9103      	str	r1, [sp, #12]
 80227da:	9903      	ldr	r1, [sp, #12]
 80227dc:	3b30      	subs	r3, #48	; 0x30
 80227de:	200a      	movs	r0, #10
 80227e0:	fb00 3301 	mla	r3, r0, r1, r3
 80227e4:	9303      	str	r3, [sp, #12]
 80227e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80227ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80227ee:	2909      	cmp	r1, #9
 80227f0:	d9f3      	bls.n	80227da <_vfiprintf_r+0x2ca>
 80227f2:	e719      	b.n	8022628 <_vfiprintf_r+0x118>
 80227f4:	9b01      	ldr	r3, [sp, #4]
 80227f6:	781b      	ldrb	r3, [r3, #0]
 80227f8:	2b68      	cmp	r3, #104	; 0x68
 80227fa:	bf01      	itttt	eq
 80227fc:	9b01      	ldreq	r3, [sp, #4]
 80227fe:	3301      	addeq	r3, #1
 8022800:	9301      	streq	r3, [sp, #4]
 8022802:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8022806:	bf18      	it	ne
 8022808:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802280c:	e7ab      	b.n	8022766 <_vfiprintf_r+0x256>
 802280e:	9b01      	ldr	r3, [sp, #4]
 8022810:	781b      	ldrb	r3, [r3, #0]
 8022812:	2b6c      	cmp	r3, #108	; 0x6c
 8022814:	d105      	bne.n	8022822 <_vfiprintf_r+0x312>
 8022816:	9b01      	ldr	r3, [sp, #4]
 8022818:	3301      	adds	r3, #1
 802281a:	9301      	str	r3, [sp, #4]
 802281c:	f04a 0a20 	orr.w	sl, sl, #32
 8022820:	e7a1      	b.n	8022766 <_vfiprintf_r+0x256>
 8022822:	f04a 0a10 	orr.w	sl, sl, #16
 8022826:	e79e      	b.n	8022766 <_vfiprintf_r+0x256>
 8022828:	46a3      	mov	fp, r4
 802282a:	2100      	movs	r1, #0
 802282c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8022830:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022834:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022838:	2301      	movs	r3, #1
 802283a:	9300      	str	r3, [sp, #0]
 802283c:	460d      	mov	r5, r1
 802283e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8022842:	e0a0      	b.n	8022986 <_vfiprintf_r+0x476>
 8022844:	f04a 0a10 	orr.w	sl, sl, #16
 8022848:	f01a 0f20 	tst.w	sl, #32
 802284c:	d011      	beq.n	8022872 <_vfiprintf_r+0x362>
 802284e:	3407      	adds	r4, #7
 8022850:	f024 0b07 	bic.w	fp, r4, #7
 8022854:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022858:	2c00      	cmp	r4, #0
 802285a:	f175 0300 	sbcs.w	r3, r5, #0
 802285e:	da06      	bge.n	802286e <_vfiprintf_r+0x35e>
 8022860:	4264      	negs	r4, r4
 8022862:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8022866:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802286a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802286e:	2301      	movs	r3, #1
 8022870:	e03f      	b.n	80228f2 <_vfiprintf_r+0x3e2>
 8022872:	f01a 0f10 	tst.w	sl, #16
 8022876:	f104 0b04 	add.w	fp, r4, #4
 802287a:	d002      	beq.n	8022882 <_vfiprintf_r+0x372>
 802287c:	6824      	ldr	r4, [r4, #0]
 802287e:	17e5      	asrs	r5, r4, #31
 8022880:	e7ea      	b.n	8022858 <_vfiprintf_r+0x348>
 8022882:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022886:	6824      	ldr	r4, [r4, #0]
 8022888:	d001      	beq.n	802288e <_vfiprintf_r+0x37e>
 802288a:	b224      	sxth	r4, r4
 802288c:	e7f7      	b.n	802287e <_vfiprintf_r+0x36e>
 802288e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022892:	bf18      	it	ne
 8022894:	b264      	sxtbne	r4, r4
 8022896:	e7f2      	b.n	802287e <_vfiprintf_r+0x36e>
 8022898:	f01a 0f20 	tst.w	sl, #32
 802289c:	f854 3b04 	ldr.w	r3, [r4], #4
 80228a0:	d005      	beq.n	80228ae <_vfiprintf_r+0x39e>
 80228a2:	9a02      	ldr	r2, [sp, #8]
 80228a4:	4610      	mov	r0, r2
 80228a6:	17d1      	asrs	r1, r2, #31
 80228a8:	e9c3 0100 	strd	r0, r1, [r3]
 80228ac:	e694      	b.n	80225d8 <_vfiprintf_r+0xc8>
 80228ae:	f01a 0f10 	tst.w	sl, #16
 80228b2:	d002      	beq.n	80228ba <_vfiprintf_r+0x3aa>
 80228b4:	9a02      	ldr	r2, [sp, #8]
 80228b6:	601a      	str	r2, [r3, #0]
 80228b8:	e68e      	b.n	80225d8 <_vfiprintf_r+0xc8>
 80228ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80228be:	d002      	beq.n	80228c6 <_vfiprintf_r+0x3b6>
 80228c0:	9a02      	ldr	r2, [sp, #8]
 80228c2:	801a      	strh	r2, [r3, #0]
 80228c4:	e688      	b.n	80225d8 <_vfiprintf_r+0xc8>
 80228c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80228ca:	d0f3      	beq.n	80228b4 <_vfiprintf_r+0x3a4>
 80228cc:	9a02      	ldr	r2, [sp, #8]
 80228ce:	701a      	strb	r2, [r3, #0]
 80228d0:	e682      	b.n	80225d8 <_vfiprintf_r+0xc8>
 80228d2:	f04a 0a10 	orr.w	sl, sl, #16
 80228d6:	f01a 0f20 	tst.w	sl, #32
 80228da:	d01d      	beq.n	8022918 <_vfiprintf_r+0x408>
 80228dc:	3407      	adds	r4, #7
 80228de:	f024 0b07 	bic.w	fp, r4, #7
 80228e2:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80228e6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80228ea:	2300      	movs	r3, #0
 80228ec:	2200      	movs	r2, #0
 80228ee:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80228f2:	9a00      	ldr	r2, [sp, #0]
 80228f4:	3201      	adds	r2, #1
 80228f6:	f000 8261 	beq.w	8022dbc <_vfiprintf_r+0x8ac>
 80228fa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80228fe:	9204      	str	r2, [sp, #16]
 8022900:	ea54 0205 	orrs.w	r2, r4, r5
 8022904:	f040 8260 	bne.w	8022dc8 <_vfiprintf_r+0x8b8>
 8022908:	9a00      	ldr	r2, [sp, #0]
 802290a:	2a00      	cmp	r2, #0
 802290c:	f000 8197 	beq.w	8022c3e <_vfiprintf_r+0x72e>
 8022910:	2b01      	cmp	r3, #1
 8022912:	f040 825c 	bne.w	8022dce <_vfiprintf_r+0x8be>
 8022916:	e135      	b.n	8022b84 <_vfiprintf_r+0x674>
 8022918:	f01a 0f10 	tst.w	sl, #16
 802291c:	f104 0b04 	add.w	fp, r4, #4
 8022920:	d001      	beq.n	8022926 <_vfiprintf_r+0x416>
 8022922:	6824      	ldr	r4, [r4, #0]
 8022924:	e003      	b.n	802292e <_vfiprintf_r+0x41e>
 8022926:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802292a:	d002      	beq.n	8022932 <_vfiprintf_r+0x422>
 802292c:	8824      	ldrh	r4, [r4, #0]
 802292e:	2500      	movs	r5, #0
 8022930:	e7d9      	b.n	80228e6 <_vfiprintf_r+0x3d6>
 8022932:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022936:	d0f4      	beq.n	8022922 <_vfiprintf_r+0x412>
 8022938:	7824      	ldrb	r4, [r4, #0]
 802293a:	e7f8      	b.n	802292e <_vfiprintf_r+0x41e>
 802293c:	46a3      	mov	fp, r4
 802293e:	f647 0330 	movw	r3, #30768	; 0x7830
 8022942:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022946:	f85b 4b04 	ldr.w	r4, [fp], #4
 802294a:	4b03      	ldr	r3, [pc, #12]	; (8022958 <_vfiprintf_r+0x448>)
 802294c:	9305      	str	r3, [sp, #20]
 802294e:	2500      	movs	r5, #0
 8022950:	f04a 0a02 	orr.w	sl, sl, #2
 8022954:	2302      	movs	r3, #2
 8022956:	e7c9      	b.n	80228ec <_vfiprintf_r+0x3dc>
 8022958:	080405a4 	.word	0x080405a4
 802295c:	9b00      	ldr	r3, [sp, #0]
 802295e:	46a3      	mov	fp, r4
 8022960:	2500      	movs	r5, #0
 8022962:	1c5c      	adds	r4, r3, #1
 8022964:	f85b 8b04 	ldr.w	r8, [fp], #4
 8022968:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 802296c:	f000 80cf 	beq.w	8022b0e <_vfiprintf_r+0x5fe>
 8022970:	461a      	mov	r2, r3
 8022972:	4629      	mov	r1, r5
 8022974:	4640      	mov	r0, r8
 8022976:	f7dd fc3b 	bl	80001f0 <memchr>
 802297a:	2800      	cmp	r0, #0
 802297c:	f000 8174 	beq.w	8022c68 <_vfiprintf_r+0x758>
 8022980:	eba0 0308 	sub.w	r3, r0, r8
 8022984:	9300      	str	r3, [sp, #0]
 8022986:	9b00      	ldr	r3, [sp, #0]
 8022988:	42ab      	cmp	r3, r5
 802298a:	bfb8      	it	lt
 802298c:	462b      	movlt	r3, r5
 802298e:	9304      	str	r3, [sp, #16]
 8022990:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022994:	b113      	cbz	r3, 802299c <_vfiprintf_r+0x48c>
 8022996:	9b04      	ldr	r3, [sp, #16]
 8022998:	3301      	adds	r3, #1
 802299a:	9304      	str	r3, [sp, #16]
 802299c:	f01a 0302 	ands.w	r3, sl, #2
 80229a0:	9308      	str	r3, [sp, #32]
 80229a2:	bf1e      	ittt	ne
 80229a4:	9b04      	ldrne	r3, [sp, #16]
 80229a6:	3302      	addne	r3, #2
 80229a8:	9304      	strne	r3, [sp, #16]
 80229aa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80229ae:	9309      	str	r3, [sp, #36]	; 0x24
 80229b0:	d11f      	bne.n	80229f2 <_vfiprintf_r+0x4e2>
 80229b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80229b6:	1a9c      	subs	r4, r3, r2
 80229b8:	2c00      	cmp	r4, #0
 80229ba:	dd1a      	ble.n	80229f2 <_vfiprintf_r+0x4e2>
 80229bc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80229c0:	48b9      	ldr	r0, [pc, #740]	; (8022ca8 <_vfiprintf_r+0x798>)
 80229c2:	6030      	str	r0, [r6, #0]
 80229c4:	2c10      	cmp	r4, #16
 80229c6:	f103 0301 	add.w	r3, r3, #1
 80229ca:	f106 0108 	add.w	r1, r6, #8
 80229ce:	f300 814d 	bgt.w	8022c6c <_vfiprintf_r+0x75c>
 80229d2:	6074      	str	r4, [r6, #4]
 80229d4:	2b07      	cmp	r3, #7
 80229d6:	4414      	add	r4, r2
 80229d8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80229dc:	f340 8158 	ble.w	8022c90 <_vfiprintf_r+0x780>
 80229e0:	aa0c      	add	r2, sp, #48	; 0x30
 80229e2:	4639      	mov	r1, r7
 80229e4:	4648      	mov	r0, r9
 80229e6:	f7ff fd61 	bl	80224ac <__sprint_r>
 80229ea:	2800      	cmp	r0, #0
 80229ec:	f040 81b8 	bne.w	8022d60 <_vfiprintf_r+0x850>
 80229f0:	ae0f      	add	r6, sp, #60	; 0x3c
 80229f2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80229f6:	b173      	cbz	r3, 8022a16 <_vfiprintf_r+0x506>
 80229f8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 80229fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229fe:	6032      	str	r2, [r6, #0]
 8022a00:	2201      	movs	r2, #1
 8022a02:	6072      	str	r2, [r6, #4]
 8022a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a06:	3301      	adds	r3, #1
 8022a08:	3201      	adds	r2, #1
 8022a0a:	2b07      	cmp	r3, #7
 8022a0c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022a10:	f300 8140 	bgt.w	8022c94 <_vfiprintf_r+0x784>
 8022a14:	3608      	adds	r6, #8
 8022a16:	9b08      	ldr	r3, [sp, #32]
 8022a18:	b16b      	cbz	r3, 8022a36 <_vfiprintf_r+0x526>
 8022a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8022a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a1e:	6032      	str	r2, [r6, #0]
 8022a20:	2202      	movs	r2, #2
 8022a22:	6072      	str	r2, [r6, #4]
 8022a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a26:	3301      	adds	r3, #1
 8022a28:	3202      	adds	r2, #2
 8022a2a:	2b07      	cmp	r3, #7
 8022a2c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022a30:	f300 8140 	bgt.w	8022cb4 <_vfiprintf_r+0x7a4>
 8022a34:	3608      	adds	r6, #8
 8022a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a38:	2b80      	cmp	r3, #128	; 0x80
 8022a3a:	d11f      	bne.n	8022a7c <_vfiprintf_r+0x56c>
 8022a3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022a40:	1a9c      	subs	r4, r3, r2
 8022a42:	2c00      	cmp	r4, #0
 8022a44:	dd1a      	ble.n	8022a7c <_vfiprintf_r+0x56c>
 8022a46:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022a4a:	4898      	ldr	r0, [pc, #608]	; (8022cac <_vfiprintf_r+0x79c>)
 8022a4c:	6030      	str	r0, [r6, #0]
 8022a4e:	2c10      	cmp	r4, #16
 8022a50:	f103 0301 	add.w	r3, r3, #1
 8022a54:	f106 0108 	add.w	r1, r6, #8
 8022a58:	f300 8135 	bgt.w	8022cc6 <_vfiprintf_r+0x7b6>
 8022a5c:	6074      	str	r4, [r6, #4]
 8022a5e:	2b07      	cmp	r3, #7
 8022a60:	4414      	add	r4, r2
 8022a62:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022a66:	f340 8140 	ble.w	8022cea <_vfiprintf_r+0x7da>
 8022a6a:	aa0c      	add	r2, sp, #48	; 0x30
 8022a6c:	4639      	mov	r1, r7
 8022a6e:	4648      	mov	r0, r9
 8022a70:	f7ff fd1c 	bl	80224ac <__sprint_r>
 8022a74:	2800      	cmp	r0, #0
 8022a76:	f040 8173 	bne.w	8022d60 <_vfiprintf_r+0x850>
 8022a7a:	ae0f      	add	r6, sp, #60	; 0x3c
 8022a7c:	9b00      	ldr	r3, [sp, #0]
 8022a7e:	1aec      	subs	r4, r5, r3
 8022a80:	2c00      	cmp	r4, #0
 8022a82:	dd1a      	ble.n	8022aba <_vfiprintf_r+0x5aa>
 8022a84:	4d89      	ldr	r5, [pc, #548]	; (8022cac <_vfiprintf_r+0x79c>)
 8022a86:	6035      	str	r5, [r6, #0]
 8022a88:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8022a8c:	2c10      	cmp	r4, #16
 8022a8e:	f103 0301 	add.w	r3, r3, #1
 8022a92:	f106 0208 	add.w	r2, r6, #8
 8022a96:	f300 812a 	bgt.w	8022cee <_vfiprintf_r+0x7de>
 8022a9a:	6074      	str	r4, [r6, #4]
 8022a9c:	2b07      	cmp	r3, #7
 8022a9e:	440c      	add	r4, r1
 8022aa0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022aa4:	f340 8134 	ble.w	8022d10 <_vfiprintf_r+0x800>
 8022aa8:	aa0c      	add	r2, sp, #48	; 0x30
 8022aaa:	4639      	mov	r1, r7
 8022aac:	4648      	mov	r0, r9
 8022aae:	f7ff fcfd 	bl	80224ac <__sprint_r>
 8022ab2:	2800      	cmp	r0, #0
 8022ab4:	f040 8154 	bne.w	8022d60 <_vfiprintf_r+0x850>
 8022ab8:	ae0f      	add	r6, sp, #60	; 0x3c
 8022aba:	9b00      	ldr	r3, [sp, #0]
 8022abc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022abe:	6073      	str	r3, [r6, #4]
 8022ac0:	4418      	add	r0, r3
 8022ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022ac4:	f8c6 8000 	str.w	r8, [r6]
 8022ac8:	3301      	adds	r3, #1
 8022aca:	2b07      	cmp	r3, #7
 8022acc:	900e      	str	r0, [sp, #56]	; 0x38
 8022ace:	930d      	str	r3, [sp, #52]	; 0x34
 8022ad0:	f300 8120 	bgt.w	8022d14 <_vfiprintf_r+0x804>
 8022ad4:	f106 0308 	add.w	r3, r6, #8
 8022ad8:	f01a 0f04 	tst.w	sl, #4
 8022adc:	f040 8122 	bne.w	8022d24 <_vfiprintf_r+0x814>
 8022ae0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8022ae4:	9904      	ldr	r1, [sp, #16]
 8022ae6:	428a      	cmp	r2, r1
 8022ae8:	bfac      	ite	ge
 8022aea:	189b      	addge	r3, r3, r2
 8022aec:	185b      	addlt	r3, r3, r1
 8022aee:	9302      	str	r3, [sp, #8]
 8022af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022af2:	b13b      	cbz	r3, 8022b04 <_vfiprintf_r+0x5f4>
 8022af4:	aa0c      	add	r2, sp, #48	; 0x30
 8022af6:	4639      	mov	r1, r7
 8022af8:	4648      	mov	r0, r9
 8022afa:	f7ff fcd7 	bl	80224ac <__sprint_r>
 8022afe:	2800      	cmp	r0, #0
 8022b00:	f040 812e 	bne.w	8022d60 <_vfiprintf_r+0x850>
 8022b04:	2300      	movs	r3, #0
 8022b06:	930d      	str	r3, [sp, #52]	; 0x34
 8022b08:	465c      	mov	r4, fp
 8022b0a:	ae0f      	add	r6, sp, #60	; 0x3c
 8022b0c:	e564      	b.n	80225d8 <_vfiprintf_r+0xc8>
 8022b0e:	4640      	mov	r0, r8
 8022b10:	f7dd fbc8 	bl	80002a4 <strlen>
 8022b14:	9000      	str	r0, [sp, #0]
 8022b16:	e736      	b.n	8022986 <_vfiprintf_r+0x476>
 8022b18:	f04a 0a10 	orr.w	sl, sl, #16
 8022b1c:	f01a 0f20 	tst.w	sl, #32
 8022b20:	d006      	beq.n	8022b30 <_vfiprintf_r+0x620>
 8022b22:	3407      	adds	r4, #7
 8022b24:	f024 0b07 	bic.w	fp, r4, #7
 8022b28:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022b2c:	2301      	movs	r3, #1
 8022b2e:	e6dd      	b.n	80228ec <_vfiprintf_r+0x3dc>
 8022b30:	f01a 0f10 	tst.w	sl, #16
 8022b34:	f104 0b04 	add.w	fp, r4, #4
 8022b38:	d001      	beq.n	8022b3e <_vfiprintf_r+0x62e>
 8022b3a:	6824      	ldr	r4, [r4, #0]
 8022b3c:	e003      	b.n	8022b46 <_vfiprintf_r+0x636>
 8022b3e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022b42:	d002      	beq.n	8022b4a <_vfiprintf_r+0x63a>
 8022b44:	8824      	ldrh	r4, [r4, #0]
 8022b46:	2500      	movs	r5, #0
 8022b48:	e7f0      	b.n	8022b2c <_vfiprintf_r+0x61c>
 8022b4a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022b4e:	d0f4      	beq.n	8022b3a <_vfiprintf_r+0x62a>
 8022b50:	7824      	ldrb	r4, [r4, #0]
 8022b52:	e7f8      	b.n	8022b46 <_vfiprintf_r+0x636>
 8022b54:	4a56      	ldr	r2, [pc, #344]	; (8022cb0 <_vfiprintf_r+0x7a0>)
 8022b56:	e5d5      	b.n	8022704 <_vfiprintf_r+0x1f4>
 8022b58:	f01a 0f10 	tst.w	sl, #16
 8022b5c:	f104 0b04 	add.w	fp, r4, #4
 8022b60:	d001      	beq.n	8022b66 <_vfiprintf_r+0x656>
 8022b62:	6824      	ldr	r4, [r4, #0]
 8022b64:	e003      	b.n	8022b6e <_vfiprintf_r+0x65e>
 8022b66:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022b6a:	d002      	beq.n	8022b72 <_vfiprintf_r+0x662>
 8022b6c:	8824      	ldrh	r4, [r4, #0]
 8022b6e:	2500      	movs	r5, #0
 8022b70:	e5d2      	b.n	8022718 <_vfiprintf_r+0x208>
 8022b72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022b76:	d0f4      	beq.n	8022b62 <_vfiprintf_r+0x652>
 8022b78:	7824      	ldrb	r4, [r4, #0]
 8022b7a:	e7f8      	b.n	8022b6e <_vfiprintf_r+0x65e>
 8022b7c:	2d00      	cmp	r5, #0
 8022b7e:	bf08      	it	eq
 8022b80:	2c0a      	cmpeq	r4, #10
 8022b82:	d205      	bcs.n	8022b90 <_vfiprintf_r+0x680>
 8022b84:	3430      	adds	r4, #48	; 0x30
 8022b86:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8022b8a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8022b8e:	e13c      	b.n	8022e0a <_vfiprintf_r+0x8fa>
 8022b90:	ab38      	add	r3, sp, #224	; 0xe0
 8022b92:	9308      	str	r3, [sp, #32]
 8022b94:	9b04      	ldr	r3, [sp, #16]
 8022b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022b9a:	f04f 0a00 	mov.w	sl, #0
 8022b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8022ba0:	9b08      	ldr	r3, [sp, #32]
 8022ba2:	220a      	movs	r2, #10
 8022ba4:	f103 38ff 	add.w	r8, r3, #4294967295
 8022ba8:	4620      	mov	r0, r4
 8022baa:	2300      	movs	r3, #0
 8022bac:	4629      	mov	r1, r5
 8022bae:	f7de f815 	bl	8000bdc <__aeabi_uldivmod>
 8022bb2:	9b08      	ldr	r3, [sp, #32]
 8022bb4:	3230      	adds	r2, #48	; 0x30
 8022bb6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8022bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bbc:	f10a 0a01 	add.w	sl, sl, #1
 8022bc0:	b1db      	cbz	r3, 8022bfa <_vfiprintf_r+0x6ea>
 8022bc2:	9b06      	ldr	r3, [sp, #24]
 8022bc4:	781b      	ldrb	r3, [r3, #0]
 8022bc6:	4553      	cmp	r3, sl
 8022bc8:	d117      	bne.n	8022bfa <_vfiprintf_r+0x6ea>
 8022bca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022bce:	d014      	beq.n	8022bfa <_vfiprintf_r+0x6ea>
 8022bd0:	2d00      	cmp	r5, #0
 8022bd2:	bf08      	it	eq
 8022bd4:	2c0a      	cmpeq	r4, #10
 8022bd6:	d310      	bcc.n	8022bfa <_vfiprintf_r+0x6ea>
 8022bd8:	9b07      	ldr	r3, [sp, #28]
 8022bda:	eba8 0803 	sub.w	r8, r8, r3
 8022bde:	461a      	mov	r2, r3
 8022be0:	ee18 1a10 	vmov	r1, s16
 8022be4:	4640      	mov	r0, r8
 8022be6:	f7fb f8c3 	bl	801dd70 <strncpy>
 8022bea:	9b06      	ldr	r3, [sp, #24]
 8022bec:	785b      	ldrb	r3, [r3, #1]
 8022bee:	b1a3      	cbz	r3, 8022c1a <_vfiprintf_r+0x70a>
 8022bf0:	9b06      	ldr	r3, [sp, #24]
 8022bf2:	3301      	adds	r3, #1
 8022bf4:	9306      	str	r3, [sp, #24]
 8022bf6:	f04f 0a00 	mov.w	sl, #0
 8022bfa:	220a      	movs	r2, #10
 8022bfc:	2300      	movs	r3, #0
 8022bfe:	4620      	mov	r0, r4
 8022c00:	4629      	mov	r1, r5
 8022c02:	f7dd ffeb 	bl	8000bdc <__aeabi_uldivmod>
 8022c06:	2d00      	cmp	r5, #0
 8022c08:	bf08      	it	eq
 8022c0a:	2c0a      	cmpeq	r4, #10
 8022c0c:	f0c0 80fd 	bcc.w	8022e0a <_vfiprintf_r+0x8fa>
 8022c10:	4604      	mov	r4, r0
 8022c12:	460d      	mov	r5, r1
 8022c14:	f8cd 8020 	str.w	r8, [sp, #32]
 8022c18:	e7c2      	b.n	8022ba0 <_vfiprintf_r+0x690>
 8022c1a:	469a      	mov	sl, r3
 8022c1c:	e7ed      	b.n	8022bfa <_vfiprintf_r+0x6ea>
 8022c1e:	9a05      	ldr	r2, [sp, #20]
 8022c20:	f004 030f 	and.w	r3, r4, #15
 8022c24:	5cd3      	ldrb	r3, [r2, r3]
 8022c26:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022c2a:	0923      	lsrs	r3, r4, #4
 8022c2c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8022c30:	092a      	lsrs	r2, r5, #4
 8022c32:	461c      	mov	r4, r3
 8022c34:	4615      	mov	r5, r2
 8022c36:	ea54 0305 	orrs.w	r3, r4, r5
 8022c3a:	d1f0      	bne.n	8022c1e <_vfiprintf_r+0x70e>
 8022c3c:	e0e5      	b.n	8022e0a <_vfiprintf_r+0x8fa>
 8022c3e:	b933      	cbnz	r3, 8022c4e <_vfiprintf_r+0x73e>
 8022c40:	f01a 0f01 	tst.w	sl, #1
 8022c44:	d003      	beq.n	8022c4e <_vfiprintf_r+0x73e>
 8022c46:	2330      	movs	r3, #48	; 0x30
 8022c48:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8022c4c:	e79d      	b.n	8022b8a <_vfiprintf_r+0x67a>
 8022c4e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022c52:	e0da      	b.n	8022e0a <_vfiprintf_r+0x8fa>
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	f000 80a4 	beq.w	8022da2 <_vfiprintf_r+0x892>
 8022c5a:	2100      	movs	r1, #0
 8022c5c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022c60:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022c64:	46a3      	mov	fp, r4
 8022c66:	e5e7      	b.n	8022838 <_vfiprintf_r+0x328>
 8022c68:	4605      	mov	r5, r0
 8022c6a:	e68c      	b.n	8022986 <_vfiprintf_r+0x476>
 8022c6c:	2010      	movs	r0, #16
 8022c6e:	4402      	add	r2, r0
 8022c70:	2b07      	cmp	r3, #7
 8022c72:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022c76:	6070      	str	r0, [r6, #4]
 8022c78:	dd07      	ble.n	8022c8a <_vfiprintf_r+0x77a>
 8022c7a:	aa0c      	add	r2, sp, #48	; 0x30
 8022c7c:	4639      	mov	r1, r7
 8022c7e:	4648      	mov	r0, r9
 8022c80:	f7ff fc14 	bl	80224ac <__sprint_r>
 8022c84:	2800      	cmp	r0, #0
 8022c86:	d16b      	bne.n	8022d60 <_vfiprintf_r+0x850>
 8022c88:	a90f      	add	r1, sp, #60	; 0x3c
 8022c8a:	3c10      	subs	r4, #16
 8022c8c:	460e      	mov	r6, r1
 8022c8e:	e695      	b.n	80229bc <_vfiprintf_r+0x4ac>
 8022c90:	460e      	mov	r6, r1
 8022c92:	e6ae      	b.n	80229f2 <_vfiprintf_r+0x4e2>
 8022c94:	aa0c      	add	r2, sp, #48	; 0x30
 8022c96:	4639      	mov	r1, r7
 8022c98:	4648      	mov	r0, r9
 8022c9a:	f7ff fc07 	bl	80224ac <__sprint_r>
 8022c9e:	2800      	cmp	r0, #0
 8022ca0:	d15e      	bne.n	8022d60 <_vfiprintf_r+0x850>
 8022ca2:	ae0f      	add	r6, sp, #60	; 0x3c
 8022ca4:	e6b7      	b.n	8022a16 <_vfiprintf_r+0x506>
 8022ca6:	bf00      	nop
 8022ca8:	080407e4 	.word	0x080407e4
 8022cac:	080407f4 	.word	0x080407f4
 8022cb0:	080405b5 	.word	0x080405b5
 8022cb4:	aa0c      	add	r2, sp, #48	; 0x30
 8022cb6:	4639      	mov	r1, r7
 8022cb8:	4648      	mov	r0, r9
 8022cba:	f7ff fbf7 	bl	80224ac <__sprint_r>
 8022cbe:	2800      	cmp	r0, #0
 8022cc0:	d14e      	bne.n	8022d60 <_vfiprintf_r+0x850>
 8022cc2:	ae0f      	add	r6, sp, #60	; 0x3c
 8022cc4:	e6b7      	b.n	8022a36 <_vfiprintf_r+0x526>
 8022cc6:	2010      	movs	r0, #16
 8022cc8:	4402      	add	r2, r0
 8022cca:	2b07      	cmp	r3, #7
 8022ccc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022cd0:	6070      	str	r0, [r6, #4]
 8022cd2:	dd07      	ble.n	8022ce4 <_vfiprintf_r+0x7d4>
 8022cd4:	aa0c      	add	r2, sp, #48	; 0x30
 8022cd6:	4639      	mov	r1, r7
 8022cd8:	4648      	mov	r0, r9
 8022cda:	f7ff fbe7 	bl	80224ac <__sprint_r>
 8022cde:	2800      	cmp	r0, #0
 8022ce0:	d13e      	bne.n	8022d60 <_vfiprintf_r+0x850>
 8022ce2:	a90f      	add	r1, sp, #60	; 0x3c
 8022ce4:	3c10      	subs	r4, #16
 8022ce6:	460e      	mov	r6, r1
 8022ce8:	e6ad      	b.n	8022a46 <_vfiprintf_r+0x536>
 8022cea:	460e      	mov	r6, r1
 8022cec:	e6c6      	b.n	8022a7c <_vfiprintf_r+0x56c>
 8022cee:	2010      	movs	r0, #16
 8022cf0:	4401      	add	r1, r0
 8022cf2:	2b07      	cmp	r3, #7
 8022cf4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8022cf8:	6070      	str	r0, [r6, #4]
 8022cfa:	dd06      	ble.n	8022d0a <_vfiprintf_r+0x7fa>
 8022cfc:	aa0c      	add	r2, sp, #48	; 0x30
 8022cfe:	4639      	mov	r1, r7
 8022d00:	4648      	mov	r0, r9
 8022d02:	f7ff fbd3 	bl	80224ac <__sprint_r>
 8022d06:	bb58      	cbnz	r0, 8022d60 <_vfiprintf_r+0x850>
 8022d08:	aa0f      	add	r2, sp, #60	; 0x3c
 8022d0a:	3c10      	subs	r4, #16
 8022d0c:	4616      	mov	r6, r2
 8022d0e:	e6ba      	b.n	8022a86 <_vfiprintf_r+0x576>
 8022d10:	4616      	mov	r6, r2
 8022d12:	e6d2      	b.n	8022aba <_vfiprintf_r+0x5aa>
 8022d14:	aa0c      	add	r2, sp, #48	; 0x30
 8022d16:	4639      	mov	r1, r7
 8022d18:	4648      	mov	r0, r9
 8022d1a:	f7ff fbc7 	bl	80224ac <__sprint_r>
 8022d1e:	b9f8      	cbnz	r0, 8022d60 <_vfiprintf_r+0x850>
 8022d20:	ab0f      	add	r3, sp, #60	; 0x3c
 8022d22:	e6d9      	b.n	8022ad8 <_vfiprintf_r+0x5c8>
 8022d24:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8022d28:	1a54      	subs	r4, r2, r1
 8022d2a:	2c00      	cmp	r4, #0
 8022d2c:	f77f aed8 	ble.w	8022ae0 <_vfiprintf_r+0x5d0>
 8022d30:	4d3a      	ldr	r5, [pc, #232]	; (8022e1c <_vfiprintf_r+0x90c>)
 8022d32:	2610      	movs	r6, #16
 8022d34:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8022d38:	2c10      	cmp	r4, #16
 8022d3a:	f102 0201 	add.w	r2, r2, #1
 8022d3e:	601d      	str	r5, [r3, #0]
 8022d40:	dc1d      	bgt.n	8022d7e <_vfiprintf_r+0x86e>
 8022d42:	605c      	str	r4, [r3, #4]
 8022d44:	2a07      	cmp	r2, #7
 8022d46:	440c      	add	r4, r1
 8022d48:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8022d4c:	f77f aec8 	ble.w	8022ae0 <_vfiprintf_r+0x5d0>
 8022d50:	aa0c      	add	r2, sp, #48	; 0x30
 8022d52:	4639      	mov	r1, r7
 8022d54:	4648      	mov	r0, r9
 8022d56:	f7ff fba9 	bl	80224ac <__sprint_r>
 8022d5a:	2800      	cmp	r0, #0
 8022d5c:	f43f aec0 	beq.w	8022ae0 <_vfiprintf_r+0x5d0>
 8022d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022d62:	07d9      	lsls	r1, r3, #31
 8022d64:	d405      	bmi.n	8022d72 <_vfiprintf_r+0x862>
 8022d66:	89bb      	ldrh	r3, [r7, #12]
 8022d68:	059a      	lsls	r2, r3, #22
 8022d6a:	d402      	bmi.n	8022d72 <_vfiprintf_r+0x862>
 8022d6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8022d6e:	f7fa fb26 	bl	801d3be <__retarget_lock_release_recursive>
 8022d72:	89bb      	ldrh	r3, [r7, #12]
 8022d74:	065b      	lsls	r3, r3, #25
 8022d76:	f57f abfe 	bpl.w	8022576 <_vfiprintf_r+0x66>
 8022d7a:	f7ff bbf9 	b.w	8022570 <_vfiprintf_r+0x60>
 8022d7e:	3110      	adds	r1, #16
 8022d80:	2a07      	cmp	r2, #7
 8022d82:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8022d86:	605e      	str	r6, [r3, #4]
 8022d88:	dc02      	bgt.n	8022d90 <_vfiprintf_r+0x880>
 8022d8a:	3308      	adds	r3, #8
 8022d8c:	3c10      	subs	r4, #16
 8022d8e:	e7d1      	b.n	8022d34 <_vfiprintf_r+0x824>
 8022d90:	aa0c      	add	r2, sp, #48	; 0x30
 8022d92:	4639      	mov	r1, r7
 8022d94:	4648      	mov	r0, r9
 8022d96:	f7ff fb89 	bl	80224ac <__sprint_r>
 8022d9a:	2800      	cmp	r0, #0
 8022d9c:	d1e0      	bne.n	8022d60 <_vfiprintf_r+0x850>
 8022d9e:	ab0f      	add	r3, sp, #60	; 0x3c
 8022da0:	e7f4      	b.n	8022d8c <_vfiprintf_r+0x87c>
 8022da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022da4:	b913      	cbnz	r3, 8022dac <_vfiprintf_r+0x89c>
 8022da6:	2300      	movs	r3, #0
 8022da8:	930d      	str	r3, [sp, #52]	; 0x34
 8022daa:	e7d9      	b.n	8022d60 <_vfiprintf_r+0x850>
 8022dac:	aa0c      	add	r2, sp, #48	; 0x30
 8022dae:	4639      	mov	r1, r7
 8022db0:	4648      	mov	r0, r9
 8022db2:	f7ff fb7b 	bl	80224ac <__sprint_r>
 8022db6:	2800      	cmp	r0, #0
 8022db8:	d0f5      	beq.n	8022da6 <_vfiprintf_r+0x896>
 8022dba:	e7d1      	b.n	8022d60 <_vfiprintf_r+0x850>
 8022dbc:	ea54 0205 	orrs.w	r2, r4, r5
 8022dc0:	f8cd a010 	str.w	sl, [sp, #16]
 8022dc4:	f43f ada4 	beq.w	8022910 <_vfiprintf_r+0x400>
 8022dc8:	2b01      	cmp	r3, #1
 8022dca:	f43f aed7 	beq.w	8022b7c <_vfiprintf_r+0x66c>
 8022dce:	2b02      	cmp	r3, #2
 8022dd0:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022dd4:	f43f af23 	beq.w	8022c1e <_vfiprintf_r+0x70e>
 8022dd8:	08e2      	lsrs	r2, r4, #3
 8022dda:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8022dde:	08e8      	lsrs	r0, r5, #3
 8022de0:	f004 0307 	and.w	r3, r4, #7
 8022de4:	4605      	mov	r5, r0
 8022de6:	4614      	mov	r4, r2
 8022de8:	3330      	adds	r3, #48	; 0x30
 8022dea:	ea54 0205 	orrs.w	r2, r4, r5
 8022dee:	4641      	mov	r1, r8
 8022df0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022df4:	d1f0      	bne.n	8022dd8 <_vfiprintf_r+0x8c8>
 8022df6:	9a04      	ldr	r2, [sp, #16]
 8022df8:	07d0      	lsls	r0, r2, #31
 8022dfa:	d506      	bpl.n	8022e0a <_vfiprintf_r+0x8fa>
 8022dfc:	2b30      	cmp	r3, #48	; 0x30
 8022dfe:	d004      	beq.n	8022e0a <_vfiprintf_r+0x8fa>
 8022e00:	2330      	movs	r3, #48	; 0x30
 8022e02:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022e06:	f1a1 0802 	sub.w	r8, r1, #2
 8022e0a:	ab38      	add	r3, sp, #224	; 0xe0
 8022e0c:	eba3 0308 	sub.w	r3, r3, r8
 8022e10:	9d00      	ldr	r5, [sp, #0]
 8022e12:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022e16:	9300      	str	r3, [sp, #0]
 8022e18:	e5b5      	b.n	8022986 <_vfiprintf_r+0x476>
 8022e1a:	bf00      	nop
 8022e1c:	080407e4 	.word	0x080407e4

08022e20 <__sbprintf>:
 8022e20:	b570      	push	{r4, r5, r6, lr}
 8022e22:	460c      	mov	r4, r1
 8022e24:	8989      	ldrh	r1, [r1, #12]
 8022e26:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8022e2a:	f021 0102 	bic.w	r1, r1, #2
 8022e2e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8022e32:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8022e34:	911b      	str	r1, [sp, #108]	; 0x6c
 8022e36:	89e1      	ldrh	r1, [r4, #14]
 8022e38:	f8ad 1016 	strh.w	r1, [sp, #22]
 8022e3c:	69e1      	ldr	r1, [r4, #28]
 8022e3e:	9109      	str	r1, [sp, #36]	; 0x24
 8022e40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022e42:	910b      	str	r1, [sp, #44]	; 0x2c
 8022e44:	a91c      	add	r1, sp, #112	; 0x70
 8022e46:	9102      	str	r1, [sp, #8]
 8022e48:	9106      	str	r1, [sp, #24]
 8022e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022e4e:	4606      	mov	r6, r0
 8022e50:	9104      	str	r1, [sp, #16]
 8022e52:	9107      	str	r1, [sp, #28]
 8022e54:	a818      	add	r0, sp, #96	; 0x60
 8022e56:	2100      	movs	r1, #0
 8022e58:	e9cd 3200 	strd	r3, r2, [sp]
 8022e5c:	9108      	str	r1, [sp, #32]
 8022e5e:	f7fa faab 	bl	801d3b8 <__retarget_lock_init_recursive>
 8022e62:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022e66:	a902      	add	r1, sp, #8
 8022e68:	4630      	mov	r0, r6
 8022e6a:	f7ff fb51 	bl	8022510 <_vfiprintf_r>
 8022e6e:	1e05      	subs	r5, r0, #0
 8022e70:	db07      	blt.n	8022e82 <__sbprintf+0x62>
 8022e72:	a902      	add	r1, sp, #8
 8022e74:	4630      	mov	r0, r6
 8022e76:	f7fe fca7 	bl	80217c8 <_fflush_r>
 8022e7a:	2800      	cmp	r0, #0
 8022e7c:	bf18      	it	ne
 8022e7e:	f04f 35ff 	movne.w	r5, #4294967295
 8022e82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022e86:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022e88:	065b      	lsls	r3, r3, #25
 8022e8a:	bf42      	ittt	mi
 8022e8c:	89a3      	ldrhmi	r3, [r4, #12]
 8022e8e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8022e92:	81a3      	strhmi	r3, [r4, #12]
 8022e94:	f7fa fa91 	bl	801d3ba <__retarget_lock_close_recursive>
 8022e98:	4628      	mov	r0, r5
 8022e9a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8022e9e:	bd70      	pop	{r4, r5, r6, pc}

08022ea0 <_write_r>:
 8022ea0:	b538      	push	{r3, r4, r5, lr}
 8022ea2:	4d07      	ldr	r5, [pc, #28]	; (8022ec0 <_write_r+0x20>)
 8022ea4:	4604      	mov	r4, r0
 8022ea6:	4608      	mov	r0, r1
 8022ea8:	4611      	mov	r1, r2
 8022eaa:	2200      	movs	r2, #0
 8022eac:	602a      	str	r2, [r5, #0]
 8022eae:	461a      	mov	r2, r3
 8022eb0:	f7f9 ff98 	bl	801cde4 <_write>
 8022eb4:	1c43      	adds	r3, r0, #1
 8022eb6:	d102      	bne.n	8022ebe <_write_r+0x1e>
 8022eb8:	682b      	ldr	r3, [r5, #0]
 8022eba:	b103      	cbz	r3, 8022ebe <_write_r+0x1e>
 8022ebc:	6023      	str	r3, [r4, #0]
 8022ebe:	bd38      	pop	{r3, r4, r5, pc}
 8022ec0:	2000aa70 	.word	0x2000aa70

08022ec4 <__register_exitproc>:
 8022ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ec8:	4d1c      	ldr	r5, [pc, #112]	; (8022f3c <__register_exitproc+0x78>)
 8022eca:	4606      	mov	r6, r0
 8022ecc:	6828      	ldr	r0, [r5, #0]
 8022ece:	4698      	mov	r8, r3
 8022ed0:	460f      	mov	r7, r1
 8022ed2:	4691      	mov	r9, r2
 8022ed4:	f7fa fa72 	bl	801d3bc <__retarget_lock_acquire_recursive>
 8022ed8:	4b19      	ldr	r3, [pc, #100]	; (8022f40 <__register_exitproc+0x7c>)
 8022eda:	681b      	ldr	r3, [r3, #0]
 8022edc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8022ee0:	4628      	mov	r0, r5
 8022ee2:	b91c      	cbnz	r4, 8022eec <__register_exitproc+0x28>
 8022ee4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8022ee8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8022eec:	6865      	ldr	r5, [r4, #4]
 8022eee:	6800      	ldr	r0, [r0, #0]
 8022ef0:	2d1f      	cmp	r5, #31
 8022ef2:	dd05      	ble.n	8022f00 <__register_exitproc+0x3c>
 8022ef4:	f7fa fa63 	bl	801d3be <__retarget_lock_release_recursive>
 8022ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8022efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022f00:	b19e      	cbz	r6, 8022f2a <__register_exitproc+0x66>
 8022f02:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8022f06:	2201      	movs	r2, #1
 8022f08:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8022f0c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8022f10:	40aa      	lsls	r2, r5
 8022f12:	4313      	orrs	r3, r2
 8022f14:	2e02      	cmp	r6, #2
 8022f16:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8022f1a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8022f1e:	bf02      	ittt	eq
 8022f20:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8022f24:	431a      	orreq	r2, r3
 8022f26:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8022f2a:	1c6b      	adds	r3, r5, #1
 8022f2c:	3502      	adds	r5, #2
 8022f2e:	6063      	str	r3, [r4, #4]
 8022f30:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8022f34:	f7fa fa43 	bl	801d3be <__retarget_lock_release_recursive>
 8022f38:	2000      	movs	r0, #0
 8022f3a:	e7df      	b.n	8022efc <__register_exitproc+0x38>
 8022f3c:	20000880 	.word	0x20000880
 8022f40:	08040590 	.word	0x08040590

08022f44 <__assert_func>:
 8022f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f46:	4614      	mov	r4, r2
 8022f48:	461a      	mov	r2, r3
 8022f4a:	4b09      	ldr	r3, [pc, #36]	; (8022f70 <__assert_func+0x2c>)
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	4605      	mov	r5, r0
 8022f50:	68d8      	ldr	r0, [r3, #12]
 8022f52:	b14c      	cbz	r4, 8022f68 <__assert_func+0x24>
 8022f54:	4b07      	ldr	r3, [pc, #28]	; (8022f74 <__assert_func+0x30>)
 8022f56:	9100      	str	r1, [sp, #0]
 8022f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f5c:	4906      	ldr	r1, [pc, #24]	; (8022f78 <__assert_func+0x34>)
 8022f5e:	462b      	mov	r3, r5
 8022f60:	f000 f8a4 	bl	80230ac <fiprintf>
 8022f64:	f000 f9eb 	bl	802333e <abort>
 8022f68:	4b04      	ldr	r3, [pc, #16]	; (8022f7c <__assert_func+0x38>)
 8022f6a:	461c      	mov	r4, r3
 8022f6c:	e7f3      	b.n	8022f56 <__assert_func+0x12>
 8022f6e:	bf00      	nop
 8022f70:	20000044 	.word	0x20000044
 8022f74:	08040804 	.word	0x08040804
 8022f78:	08040811 	.word	0x08040811
 8022f7c:	0804083f 	.word	0x0804083f

08022f80 <_calloc_r>:
 8022f80:	b510      	push	{r4, lr}
 8022f82:	4351      	muls	r1, r2
 8022f84:	f7fa fa2c 	bl	801d3e0 <_malloc_r>
 8022f88:	4604      	mov	r4, r0
 8022f8a:	b198      	cbz	r0, 8022fb4 <_calloc_r+0x34>
 8022f8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022f90:	f022 0203 	bic.w	r2, r2, #3
 8022f94:	3a04      	subs	r2, #4
 8022f96:	2a24      	cmp	r2, #36	; 0x24
 8022f98:	d81b      	bhi.n	8022fd2 <_calloc_r+0x52>
 8022f9a:	2a13      	cmp	r2, #19
 8022f9c:	d917      	bls.n	8022fce <_calloc_r+0x4e>
 8022f9e:	2100      	movs	r1, #0
 8022fa0:	2a1b      	cmp	r2, #27
 8022fa2:	e9c0 1100 	strd	r1, r1, [r0]
 8022fa6:	d807      	bhi.n	8022fb8 <_calloc_r+0x38>
 8022fa8:	f100 0308 	add.w	r3, r0, #8
 8022fac:	2200      	movs	r2, #0
 8022fae:	e9c3 2200 	strd	r2, r2, [r3]
 8022fb2:	609a      	str	r2, [r3, #8]
 8022fb4:	4620      	mov	r0, r4
 8022fb6:	bd10      	pop	{r4, pc}
 8022fb8:	2a24      	cmp	r2, #36	; 0x24
 8022fba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8022fbe:	bf11      	iteee	ne
 8022fc0:	f100 0310 	addne.w	r3, r0, #16
 8022fc4:	6101      	streq	r1, [r0, #16]
 8022fc6:	f100 0318 	addeq.w	r3, r0, #24
 8022fca:	6141      	streq	r1, [r0, #20]
 8022fcc:	e7ee      	b.n	8022fac <_calloc_r+0x2c>
 8022fce:	4603      	mov	r3, r0
 8022fd0:	e7ec      	b.n	8022fac <_calloc_r+0x2c>
 8022fd2:	2100      	movs	r1, #0
 8022fd4:	f7fa fc7c 	bl	801d8d0 <memset>
 8022fd8:	e7ec      	b.n	8022fb4 <_calloc_r+0x34>
	...

08022fdc <_close_r>:
 8022fdc:	b538      	push	{r3, r4, r5, lr}
 8022fde:	4d06      	ldr	r5, [pc, #24]	; (8022ff8 <_close_r+0x1c>)
 8022fe0:	2300      	movs	r3, #0
 8022fe2:	4604      	mov	r4, r0
 8022fe4:	4608      	mov	r0, r1
 8022fe6:	602b      	str	r3, [r5, #0]
 8022fe8:	f7f9 ff7a 	bl	801cee0 <_close>
 8022fec:	1c43      	adds	r3, r0, #1
 8022fee:	d102      	bne.n	8022ff6 <_close_r+0x1a>
 8022ff0:	682b      	ldr	r3, [r5, #0]
 8022ff2:	b103      	cbz	r3, 8022ff6 <_close_r+0x1a>
 8022ff4:	6023      	str	r3, [r4, #0]
 8022ff6:	bd38      	pop	{r3, r4, r5, pc}
 8022ff8:	2000aa70 	.word	0x2000aa70

08022ffc <_fclose_r>:
 8022ffc:	b570      	push	{r4, r5, r6, lr}
 8022ffe:	4606      	mov	r6, r0
 8023000:	460c      	mov	r4, r1
 8023002:	b911      	cbnz	r1, 802300a <_fclose_r+0xe>
 8023004:	2500      	movs	r5, #0
 8023006:	4628      	mov	r0, r5
 8023008:	bd70      	pop	{r4, r5, r6, pc}
 802300a:	b118      	cbz	r0, 8023014 <_fclose_r+0x18>
 802300c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802300e:	b90b      	cbnz	r3, 8023014 <_fclose_r+0x18>
 8023010:	f7fe fc46 	bl	80218a0 <__sinit>
 8023014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023016:	07d8      	lsls	r0, r3, #31
 8023018:	d405      	bmi.n	8023026 <_fclose_r+0x2a>
 802301a:	89a3      	ldrh	r3, [r4, #12]
 802301c:	0599      	lsls	r1, r3, #22
 802301e:	d402      	bmi.n	8023026 <_fclose_r+0x2a>
 8023020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023022:	f7fa f9cb 	bl	801d3bc <__retarget_lock_acquire_recursive>
 8023026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802302a:	b93b      	cbnz	r3, 802303c <_fclose_r+0x40>
 802302c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802302e:	f015 0501 	ands.w	r5, r5, #1
 8023032:	d1e7      	bne.n	8023004 <_fclose_r+0x8>
 8023034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023036:	f7fa f9c2 	bl	801d3be <__retarget_lock_release_recursive>
 802303a:	e7e4      	b.n	8023006 <_fclose_r+0xa>
 802303c:	4621      	mov	r1, r4
 802303e:	4630      	mov	r0, r6
 8023040:	f7fe fb34 	bl	80216ac <__sflush_r>
 8023044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023046:	4605      	mov	r5, r0
 8023048:	b133      	cbz	r3, 8023058 <_fclose_r+0x5c>
 802304a:	69e1      	ldr	r1, [r4, #28]
 802304c:	4630      	mov	r0, r6
 802304e:	4798      	blx	r3
 8023050:	2800      	cmp	r0, #0
 8023052:	bfb8      	it	lt
 8023054:	f04f 35ff 	movlt.w	r5, #4294967295
 8023058:	89a3      	ldrh	r3, [r4, #12]
 802305a:	061a      	lsls	r2, r3, #24
 802305c:	d503      	bpl.n	8023066 <_fclose_r+0x6a>
 802305e:	6921      	ldr	r1, [r4, #16]
 8023060:	4630      	mov	r0, r6
 8023062:	f7fe fcad 	bl	80219c0 <_free_r>
 8023066:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023068:	b141      	cbz	r1, 802307c <_fclose_r+0x80>
 802306a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802306e:	4299      	cmp	r1, r3
 8023070:	d002      	beq.n	8023078 <_fclose_r+0x7c>
 8023072:	4630      	mov	r0, r6
 8023074:	f7fe fca4 	bl	80219c0 <_free_r>
 8023078:	2300      	movs	r3, #0
 802307a:	6323      	str	r3, [r4, #48]	; 0x30
 802307c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802307e:	b121      	cbz	r1, 802308a <_fclose_r+0x8e>
 8023080:	4630      	mov	r0, r6
 8023082:	f7fe fc9d 	bl	80219c0 <_free_r>
 8023086:	2300      	movs	r3, #0
 8023088:	6463      	str	r3, [r4, #68]	; 0x44
 802308a:	f7fe fbf1 	bl	8021870 <__sfp_lock_acquire>
 802308e:	2300      	movs	r3, #0
 8023090:	81a3      	strh	r3, [r4, #12]
 8023092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023094:	07db      	lsls	r3, r3, #31
 8023096:	d402      	bmi.n	802309e <_fclose_r+0xa2>
 8023098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802309a:	f7fa f990 	bl	801d3be <__retarget_lock_release_recursive>
 802309e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230a0:	f7fa f98b 	bl	801d3ba <__retarget_lock_close_recursive>
 80230a4:	f7fe fbea 	bl	802187c <__sfp_lock_release>
 80230a8:	e7ad      	b.n	8023006 <_fclose_r+0xa>
	...

080230ac <fiprintf>:
 80230ac:	b40e      	push	{r1, r2, r3}
 80230ae:	b503      	push	{r0, r1, lr}
 80230b0:	4601      	mov	r1, r0
 80230b2:	ab03      	add	r3, sp, #12
 80230b4:	4805      	ldr	r0, [pc, #20]	; (80230cc <fiprintf+0x20>)
 80230b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80230ba:	6800      	ldr	r0, [r0, #0]
 80230bc:	9301      	str	r3, [sp, #4]
 80230be:	f7ff fa27 	bl	8022510 <_vfiprintf_r>
 80230c2:	b002      	add	sp, #8
 80230c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80230c8:	b003      	add	sp, #12
 80230ca:	4770      	bx	lr
 80230cc:	20000044 	.word	0x20000044

080230d0 <__fputwc>:
 80230d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80230d4:	4680      	mov	r8, r0
 80230d6:	460e      	mov	r6, r1
 80230d8:	4615      	mov	r5, r2
 80230da:	f000 f887 	bl	80231ec <__locale_mb_cur_max>
 80230de:	2801      	cmp	r0, #1
 80230e0:	d11c      	bne.n	802311c <__fputwc+0x4c>
 80230e2:	1e73      	subs	r3, r6, #1
 80230e4:	2bfe      	cmp	r3, #254	; 0xfe
 80230e6:	d819      	bhi.n	802311c <__fputwc+0x4c>
 80230e8:	f88d 6004 	strb.w	r6, [sp, #4]
 80230ec:	4604      	mov	r4, r0
 80230ee:	2700      	movs	r7, #0
 80230f0:	f10d 0904 	add.w	r9, sp, #4
 80230f4:	42a7      	cmp	r7, r4
 80230f6:	d020      	beq.n	802313a <__fputwc+0x6a>
 80230f8:	68ab      	ldr	r3, [r5, #8]
 80230fa:	f817 1009 	ldrb.w	r1, [r7, r9]
 80230fe:	3b01      	subs	r3, #1
 8023100:	2b00      	cmp	r3, #0
 8023102:	60ab      	str	r3, [r5, #8]
 8023104:	da04      	bge.n	8023110 <__fputwc+0x40>
 8023106:	69aa      	ldr	r2, [r5, #24]
 8023108:	4293      	cmp	r3, r2
 802310a:	db1a      	blt.n	8023142 <__fputwc+0x72>
 802310c:	290a      	cmp	r1, #10
 802310e:	d018      	beq.n	8023142 <__fputwc+0x72>
 8023110:	682b      	ldr	r3, [r5, #0]
 8023112:	1c5a      	adds	r2, r3, #1
 8023114:	602a      	str	r2, [r5, #0]
 8023116:	7019      	strb	r1, [r3, #0]
 8023118:	3701      	adds	r7, #1
 802311a:	e7eb      	b.n	80230f4 <__fputwc+0x24>
 802311c:	4632      	mov	r2, r6
 802311e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8023122:	a901      	add	r1, sp, #4
 8023124:	4640      	mov	r0, r8
 8023126:	f000 f8e7 	bl	80232f8 <_wcrtomb_r>
 802312a:	1c42      	adds	r2, r0, #1
 802312c:	4604      	mov	r4, r0
 802312e:	d1de      	bne.n	80230ee <__fputwc+0x1e>
 8023130:	89ab      	ldrh	r3, [r5, #12]
 8023132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023136:	81ab      	strh	r3, [r5, #12]
 8023138:	4606      	mov	r6, r0
 802313a:	4630      	mov	r0, r6
 802313c:	b003      	add	sp, #12
 802313e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023142:	462a      	mov	r2, r5
 8023144:	4640      	mov	r0, r8
 8023146:	f000 f88d 	bl	8023264 <__swbuf_r>
 802314a:	1c43      	adds	r3, r0, #1
 802314c:	d1e4      	bne.n	8023118 <__fputwc+0x48>
 802314e:	4606      	mov	r6, r0
 8023150:	e7f3      	b.n	802313a <__fputwc+0x6a>

08023152 <_fputwc_r>:
 8023152:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8023154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023156:	4614      	mov	r4, r2
 8023158:	07da      	lsls	r2, r3, #31
 802315a:	4605      	mov	r5, r0
 802315c:	d407      	bmi.n	802316e <_fputwc_r+0x1c>
 802315e:	89a3      	ldrh	r3, [r4, #12]
 8023160:	059b      	lsls	r3, r3, #22
 8023162:	d404      	bmi.n	802316e <_fputwc_r+0x1c>
 8023164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023166:	9101      	str	r1, [sp, #4]
 8023168:	f7fa f928 	bl	801d3bc <__retarget_lock_acquire_recursive>
 802316c:	9901      	ldr	r1, [sp, #4]
 802316e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023172:	0498      	lsls	r0, r3, #18
 8023174:	d406      	bmi.n	8023184 <_fputwc_r+0x32>
 8023176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802317a:	81a3      	strh	r3, [r4, #12]
 802317c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802317e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8023182:	6663      	str	r3, [r4, #100]	; 0x64
 8023184:	4622      	mov	r2, r4
 8023186:	4628      	mov	r0, r5
 8023188:	f7ff ffa2 	bl	80230d0 <__fputwc>
 802318c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802318e:	07da      	lsls	r2, r3, #31
 8023190:	4605      	mov	r5, r0
 8023192:	d405      	bmi.n	80231a0 <_fputwc_r+0x4e>
 8023194:	89a3      	ldrh	r3, [r4, #12]
 8023196:	059b      	lsls	r3, r3, #22
 8023198:	d402      	bmi.n	80231a0 <_fputwc_r+0x4e>
 802319a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802319c:	f7fa f90f 	bl	801d3be <__retarget_lock_release_recursive>
 80231a0:	4628      	mov	r0, r5
 80231a2:	b003      	add	sp, #12
 80231a4:	bd30      	pop	{r4, r5, pc}
	...

080231a8 <_fstat_r>:
 80231a8:	b538      	push	{r3, r4, r5, lr}
 80231aa:	4d07      	ldr	r5, [pc, #28]	; (80231c8 <_fstat_r+0x20>)
 80231ac:	2300      	movs	r3, #0
 80231ae:	4604      	mov	r4, r0
 80231b0:	4608      	mov	r0, r1
 80231b2:	4611      	mov	r1, r2
 80231b4:	602b      	str	r3, [r5, #0]
 80231b6:	f7f9 fe9f 	bl	801cef8 <_fstat>
 80231ba:	1c43      	adds	r3, r0, #1
 80231bc:	d102      	bne.n	80231c4 <_fstat_r+0x1c>
 80231be:	682b      	ldr	r3, [r5, #0]
 80231c0:	b103      	cbz	r3, 80231c4 <_fstat_r+0x1c>
 80231c2:	6023      	str	r3, [r4, #0]
 80231c4:	bd38      	pop	{r3, r4, r5, pc}
 80231c6:	bf00      	nop
 80231c8:	2000aa70 	.word	0x2000aa70

080231cc <_isatty_r>:
 80231cc:	b538      	push	{r3, r4, r5, lr}
 80231ce:	4d06      	ldr	r5, [pc, #24]	; (80231e8 <_isatty_r+0x1c>)
 80231d0:	2300      	movs	r3, #0
 80231d2:	4604      	mov	r4, r0
 80231d4:	4608      	mov	r0, r1
 80231d6:	602b      	str	r3, [r5, #0]
 80231d8:	f7f9 fe9e 	bl	801cf18 <_isatty>
 80231dc:	1c43      	adds	r3, r0, #1
 80231de:	d102      	bne.n	80231e6 <_isatty_r+0x1a>
 80231e0:	682b      	ldr	r3, [r5, #0]
 80231e2:	b103      	cbz	r3, 80231e6 <_isatty_r+0x1a>
 80231e4:	6023      	str	r3, [r4, #0]
 80231e6:	bd38      	pop	{r3, r4, r5, pc}
 80231e8:	2000aa70 	.word	0x2000aa70

080231ec <__locale_mb_cur_max>:
 80231ec:	4b01      	ldr	r3, [pc, #4]	; (80231f4 <__locale_mb_cur_max+0x8>)
 80231ee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80231f2:	4770      	bx	lr
 80231f4:	20000884 	.word	0x20000884

080231f8 <_lseek_r>:
 80231f8:	b538      	push	{r3, r4, r5, lr}
 80231fa:	4d07      	ldr	r5, [pc, #28]	; (8023218 <_lseek_r+0x20>)
 80231fc:	4604      	mov	r4, r0
 80231fe:	4608      	mov	r0, r1
 8023200:	4611      	mov	r1, r2
 8023202:	2200      	movs	r2, #0
 8023204:	602a      	str	r2, [r5, #0]
 8023206:	461a      	mov	r2, r3
 8023208:	f7f9 fe91 	bl	801cf2e <_lseek>
 802320c:	1c43      	adds	r3, r0, #1
 802320e:	d102      	bne.n	8023216 <_lseek_r+0x1e>
 8023210:	682b      	ldr	r3, [r5, #0]
 8023212:	b103      	cbz	r3, 8023216 <_lseek_r+0x1e>
 8023214:	6023      	str	r3, [r4, #0]
 8023216:	bd38      	pop	{r3, r4, r5, pc}
 8023218:	2000aa70 	.word	0x2000aa70

0802321c <__ascii_mbtowc>:
 802321c:	b082      	sub	sp, #8
 802321e:	b901      	cbnz	r1, 8023222 <__ascii_mbtowc+0x6>
 8023220:	a901      	add	r1, sp, #4
 8023222:	b142      	cbz	r2, 8023236 <__ascii_mbtowc+0x1a>
 8023224:	b14b      	cbz	r3, 802323a <__ascii_mbtowc+0x1e>
 8023226:	7813      	ldrb	r3, [r2, #0]
 8023228:	600b      	str	r3, [r1, #0]
 802322a:	7812      	ldrb	r2, [r2, #0]
 802322c:	1e10      	subs	r0, r2, #0
 802322e:	bf18      	it	ne
 8023230:	2001      	movne	r0, #1
 8023232:	b002      	add	sp, #8
 8023234:	4770      	bx	lr
 8023236:	4610      	mov	r0, r2
 8023238:	e7fb      	b.n	8023232 <__ascii_mbtowc+0x16>
 802323a:	f06f 0001 	mvn.w	r0, #1
 802323e:	e7f8      	b.n	8023232 <__ascii_mbtowc+0x16>

08023240 <_read_r>:
 8023240:	b538      	push	{r3, r4, r5, lr}
 8023242:	4d07      	ldr	r5, [pc, #28]	; (8023260 <_read_r+0x20>)
 8023244:	4604      	mov	r4, r0
 8023246:	4608      	mov	r0, r1
 8023248:	4611      	mov	r1, r2
 802324a:	2200      	movs	r2, #0
 802324c:	602a      	str	r2, [r5, #0]
 802324e:	461a      	mov	r2, r3
 8023250:	f7f9 fe08 	bl	801ce64 <_read>
 8023254:	1c43      	adds	r3, r0, #1
 8023256:	d102      	bne.n	802325e <_read_r+0x1e>
 8023258:	682b      	ldr	r3, [r5, #0]
 802325a:	b103      	cbz	r3, 802325e <_read_r+0x1e>
 802325c:	6023      	str	r3, [r4, #0]
 802325e:	bd38      	pop	{r3, r4, r5, pc}
 8023260:	2000aa70 	.word	0x2000aa70

08023264 <__swbuf_r>:
 8023264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023266:	460e      	mov	r6, r1
 8023268:	4614      	mov	r4, r2
 802326a:	4605      	mov	r5, r0
 802326c:	b118      	cbz	r0, 8023276 <__swbuf_r+0x12>
 802326e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023270:	b90b      	cbnz	r3, 8023276 <__swbuf_r+0x12>
 8023272:	f7fe fb15 	bl	80218a0 <__sinit>
 8023276:	69a3      	ldr	r3, [r4, #24]
 8023278:	60a3      	str	r3, [r4, #8]
 802327a:	89a3      	ldrh	r3, [r4, #12]
 802327c:	0719      	lsls	r1, r3, #28
 802327e:	d529      	bpl.n	80232d4 <__swbuf_r+0x70>
 8023280:	6923      	ldr	r3, [r4, #16]
 8023282:	b33b      	cbz	r3, 80232d4 <__swbuf_r+0x70>
 8023284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023288:	b2f6      	uxtb	r6, r6
 802328a:	049a      	lsls	r2, r3, #18
 802328c:	4637      	mov	r7, r6
 802328e:	d52a      	bpl.n	80232e6 <__swbuf_r+0x82>
 8023290:	6823      	ldr	r3, [r4, #0]
 8023292:	6920      	ldr	r0, [r4, #16]
 8023294:	1a18      	subs	r0, r3, r0
 8023296:	6963      	ldr	r3, [r4, #20]
 8023298:	4283      	cmp	r3, r0
 802329a:	dc04      	bgt.n	80232a6 <__swbuf_r+0x42>
 802329c:	4621      	mov	r1, r4
 802329e:	4628      	mov	r0, r5
 80232a0:	f7fe fa92 	bl	80217c8 <_fflush_r>
 80232a4:	b9e0      	cbnz	r0, 80232e0 <__swbuf_r+0x7c>
 80232a6:	68a3      	ldr	r3, [r4, #8]
 80232a8:	3b01      	subs	r3, #1
 80232aa:	60a3      	str	r3, [r4, #8]
 80232ac:	6823      	ldr	r3, [r4, #0]
 80232ae:	1c5a      	adds	r2, r3, #1
 80232b0:	6022      	str	r2, [r4, #0]
 80232b2:	701e      	strb	r6, [r3, #0]
 80232b4:	6962      	ldr	r2, [r4, #20]
 80232b6:	1c43      	adds	r3, r0, #1
 80232b8:	429a      	cmp	r2, r3
 80232ba:	d004      	beq.n	80232c6 <__swbuf_r+0x62>
 80232bc:	89a3      	ldrh	r3, [r4, #12]
 80232be:	07db      	lsls	r3, r3, #31
 80232c0:	d506      	bpl.n	80232d0 <__swbuf_r+0x6c>
 80232c2:	2e0a      	cmp	r6, #10
 80232c4:	d104      	bne.n	80232d0 <__swbuf_r+0x6c>
 80232c6:	4621      	mov	r1, r4
 80232c8:	4628      	mov	r0, r5
 80232ca:	f7fe fa7d 	bl	80217c8 <_fflush_r>
 80232ce:	b938      	cbnz	r0, 80232e0 <__swbuf_r+0x7c>
 80232d0:	4638      	mov	r0, r7
 80232d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80232d4:	4621      	mov	r1, r4
 80232d6:	4628      	mov	r0, r5
 80232d8:	f7fd fb18 	bl	802090c <__swsetup_r>
 80232dc:	2800      	cmp	r0, #0
 80232de:	d0d1      	beq.n	8023284 <__swbuf_r+0x20>
 80232e0:	f04f 37ff 	mov.w	r7, #4294967295
 80232e4:	e7f4      	b.n	80232d0 <__swbuf_r+0x6c>
 80232e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80232ea:	81a3      	strh	r3, [r4, #12]
 80232ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80232ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80232f2:	6663      	str	r3, [r4, #100]	; 0x64
 80232f4:	e7cc      	b.n	8023290 <__swbuf_r+0x2c>
	...

080232f8 <_wcrtomb_r>:
 80232f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232fa:	4c09      	ldr	r4, [pc, #36]	; (8023320 <_wcrtomb_r+0x28>)
 80232fc:	b085      	sub	sp, #20
 80232fe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8023302:	4605      	mov	r5, r0
 8023304:	461e      	mov	r6, r3
 8023306:	b909      	cbnz	r1, 802330c <_wcrtomb_r+0x14>
 8023308:	460a      	mov	r2, r1
 802330a:	a901      	add	r1, sp, #4
 802330c:	47b8      	blx	r7
 802330e:	1c43      	adds	r3, r0, #1
 8023310:	bf01      	itttt	eq
 8023312:	2300      	moveq	r3, #0
 8023314:	6033      	streq	r3, [r6, #0]
 8023316:	238a      	moveq	r3, #138	; 0x8a
 8023318:	602b      	streq	r3, [r5, #0]
 802331a:	b005      	add	sp, #20
 802331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802331e:	bf00      	nop
 8023320:	20000884 	.word	0x20000884

08023324 <__ascii_wctomb>:
 8023324:	b149      	cbz	r1, 802333a <__ascii_wctomb+0x16>
 8023326:	2aff      	cmp	r2, #255	; 0xff
 8023328:	bf85      	ittet	hi
 802332a:	238a      	movhi	r3, #138	; 0x8a
 802332c:	6003      	strhi	r3, [r0, #0]
 802332e:	700a      	strbls	r2, [r1, #0]
 8023330:	f04f 30ff 	movhi.w	r0, #4294967295
 8023334:	bf98      	it	ls
 8023336:	2001      	movls	r0, #1
 8023338:	4770      	bx	lr
 802333a:	4608      	mov	r0, r1
 802333c:	4770      	bx	lr

0802333e <abort>:
 802333e:	b508      	push	{r3, lr}
 8023340:	2006      	movs	r0, #6
 8023342:	f000 f82d 	bl	80233a0 <raise>
 8023346:	2001      	movs	r0, #1
 8023348:	f7f9 fdfe 	bl	801cf48 <_exit>

0802334c <_raise_r>:
 802334c:	291f      	cmp	r1, #31
 802334e:	b538      	push	{r3, r4, r5, lr}
 8023350:	4604      	mov	r4, r0
 8023352:	460d      	mov	r5, r1
 8023354:	d904      	bls.n	8023360 <_raise_r+0x14>
 8023356:	2316      	movs	r3, #22
 8023358:	6003      	str	r3, [r0, #0]
 802335a:	f04f 30ff 	mov.w	r0, #4294967295
 802335e:	bd38      	pop	{r3, r4, r5, pc}
 8023360:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8023364:	b112      	cbz	r2, 802336c <_raise_r+0x20>
 8023366:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802336a:	b94b      	cbnz	r3, 8023380 <_raise_r+0x34>
 802336c:	4620      	mov	r0, r4
 802336e:	f000 f831 	bl	80233d4 <_getpid_r>
 8023372:	462a      	mov	r2, r5
 8023374:	4601      	mov	r1, r0
 8023376:	4620      	mov	r0, r4
 8023378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802337c:	f000 b818 	b.w	80233b0 <_kill_r>
 8023380:	2b01      	cmp	r3, #1
 8023382:	d00a      	beq.n	802339a <_raise_r+0x4e>
 8023384:	1c59      	adds	r1, r3, #1
 8023386:	d103      	bne.n	8023390 <_raise_r+0x44>
 8023388:	2316      	movs	r3, #22
 802338a:	6003      	str	r3, [r0, #0]
 802338c:	2001      	movs	r0, #1
 802338e:	e7e6      	b.n	802335e <_raise_r+0x12>
 8023390:	2400      	movs	r4, #0
 8023392:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023396:	4628      	mov	r0, r5
 8023398:	4798      	blx	r3
 802339a:	2000      	movs	r0, #0
 802339c:	e7df      	b.n	802335e <_raise_r+0x12>
	...

080233a0 <raise>:
 80233a0:	4b02      	ldr	r3, [pc, #8]	; (80233ac <raise+0xc>)
 80233a2:	4601      	mov	r1, r0
 80233a4:	6818      	ldr	r0, [r3, #0]
 80233a6:	f7ff bfd1 	b.w	802334c <_raise_r>
 80233aa:	bf00      	nop
 80233ac:	20000044 	.word	0x20000044

080233b0 <_kill_r>:
 80233b0:	b538      	push	{r3, r4, r5, lr}
 80233b2:	4d07      	ldr	r5, [pc, #28]	; (80233d0 <_kill_r+0x20>)
 80233b4:	2300      	movs	r3, #0
 80233b6:	4604      	mov	r4, r0
 80233b8:	4608      	mov	r0, r1
 80233ba:	4611      	mov	r1, r2
 80233bc:	602b      	str	r3, [r5, #0]
 80233be:	f7f9 fdc8 	bl	801cf52 <_kill>
 80233c2:	1c43      	adds	r3, r0, #1
 80233c4:	d102      	bne.n	80233cc <_kill_r+0x1c>
 80233c6:	682b      	ldr	r3, [r5, #0]
 80233c8:	b103      	cbz	r3, 80233cc <_kill_r+0x1c>
 80233ca:	6023      	str	r3, [r4, #0]
 80233cc:	bd38      	pop	{r3, r4, r5, pc}
 80233ce:	bf00      	nop
 80233d0:	2000aa70 	.word	0x2000aa70

080233d4 <_getpid_r>:
 80233d4:	f7f9 bdc8 	b.w	801cf68 <_getpid>

080233d8 <_init>:
 80233d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233da:	bf00      	nop
 80233dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233de:	bc08      	pop	{r3}
 80233e0:	469e      	mov	lr, r3
 80233e2:	4770      	bx	lr

080233e4 <_fini>:
 80233e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233e6:	bf00      	nop
 80233e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233ea:	bc08      	pop	{r3}
 80233ec:	469e      	mov	lr, r3
 80233ee:	4770      	bx	lr
